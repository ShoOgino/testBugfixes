{"path":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","commits":[{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100;\n    final int ITER2 = 100;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final BasicOperations.RandomAcceptedStrings rx = new BasicOperations.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = new String(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100*_TestUtil.getRandomMultiplier();\n    final int ITER2 = 100*_TestUtil.getRandomMultiplier();\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final BasicOperations.RandomAcceptedStrings rx = new BasicOperations.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100;\n    final int ITER2 = 100;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final BasicOperations.RandomAcceptedStrings rx = new BasicOperations.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = new String(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69d8f9cca4a5fc4049a99ea24253b41a88b0d234","date":1277138158,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100*_TestUtil.getRandomMultiplier();\n    final int ITER2 = 100*_TestUtil.getRandomMultiplier();\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100*_TestUtil.getRandomMultiplier();\n    final int ITER2 = 100*_TestUtil.getRandomMultiplier();\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final BasicOperations.RandomAcceptedStrings rx = new BasicOperations.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100*_TestUtil.getRandomMultiplier();\n    final int ITER2 = 100*_TestUtil.getRandomMultiplier();\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100*_TestUtil.getRandomMultiplier();\n    final int ITER2 = 100*_TestUtil.getRandomMultiplier();\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final BasicOperations.RandomAcceptedStrings rx = new BasicOperations.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100*_TestUtil.getRandomMultiplier();\n    final int ITER2 = 100*_TestUtil.getRandomMultiplier();\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100*_TestUtil.getRandomMultiplier();\n    final int ITER2 = 100*_TestUtil.getRandomMultiplier();\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(random);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41916511eb7a0aa94cb9b000074ea466e14296b7","date":1288064272,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(random);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(random);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final Random r = newRandom();\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = AutomatonTestUtil.randomRegexp(r);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(r);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = 100 * RANDOM_MULTIPLIER;\n    final int ITER2 = 100 * RANDOM_MULTIPLIER;\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestBasicOperations#testGetRandomAcceptedString().mjava","sourceNew":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testGetRandomAcceptedString() throws Throwable {\n    final int ITER1 = atLeast(100);\n    final int ITER2 = atLeast(100);\n    for(int i=0;i<ITER1;i++) {\n\n      final RegExp re = new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE);\n      final Automaton a = re.toAutomaton();\n      assertFalse(BasicOperations.isEmpty(a));\n\n      final AutomatonTestUtil.RandomAcceptedStrings rx = new AutomatonTestUtil.RandomAcceptedStrings(a);\n      for(int j=0;j<ITER2;j++) {\n        int[] acc = null;\n        try {\n          acc = rx.getRandomAcceptedString(random);\n          final String s = UnicodeUtil.newString(acc, 0, acc.length);\n          assertTrue(BasicOperations.run(a, s));\n        } catch (Throwable t) {\n          System.out.println(\"regexp: \" + re);\n          if (acc != null) {\n            System.out.println(\"fail acc re=\" + re + \" count=\" + acc.length);\n            for(int k=0;k<acc.length;k++) {\n              System.out.println(\"  \" + Integer.toHexString(acc[k]));\n            }\n          }\n          throw t;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["41916511eb7a0aa94cb9b000074ea466e14296b7","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["41916511eb7a0aa94cb9b000074ea466e14296b7"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["2aafd88401639311b0404e67c94e829e123a0e45"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["1f653cfcf159baeaafe5d01682a911e95bba4012","41916511eb7a0aa94cb9b000074ea466e14296b7"],"2aafd88401639311b0404e67c94e829e123a0e45":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","69d8f9cca4a5fc4049a99ea24253b41a88b0d234"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","41916511eb7a0aa94cb9b000074ea466e14296b7"],"41916511eb7a0aa94cb9b000074ea466e14296b7":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["b12d3e81e0f95a4527b5703953c503f71120ffcc","f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["2aafd88401639311b0404e67c94e829e123a0e45"],"69d8f9cca4a5fc4049a99ea24253b41a88b0d234":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"2aafd88401639311b0404e67c94e829e123a0e45":["69d8f9cca4a5fc4049a99ea24253b41a88b0d234","5f4e87790277826a2aea119328600dfb07761f32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"41916511eb7a0aa94cb9b000074ea466e14296b7":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","f83af14a2a8131b14d7aee6274c740334e0363d3","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b12d3e81e0f95a4527b5703953c503f71120ffcc","41916511eb7a0aa94cb9b000074ea466e14296b7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}