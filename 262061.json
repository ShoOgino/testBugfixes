{"path":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getTailId().mjava","commits":[{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getTailId().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * Gets last element of the Queue without removing it.\n   */\n  public String getTailId() throws KeeperException, InterruptedException {\n    TreeMap<Long, String> orderedChildren = null;\n    orderedChildren = orderedChildren(null);\n    if(orderedChildren == null || orderedChildren.isEmpty()) return null;\n\n    for(String headNode : orderedChildren.descendingMap().values())\n      if (headNode != null) {\n        try {\n          QueueEvent queueEvent = new QueueEvent(dir + \"/\" + headNode, zookeeper.getData(dir + \"/\" + headNode,\n              null, null, true), null);\n          return queueEvent.getId();\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getTailId().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * Gets last element of the Queue without removing it.\n   */\n  public String getTailId() throws KeeperException, InterruptedException {\n    TreeMap<Long, String> orderedChildren = null;\n    orderedChildren = orderedChildren(null);\n    if(orderedChildren == null || orderedChildren.isEmpty()) return null;\n\n    for(String headNode : orderedChildren.descendingMap().values())\n      if (headNode != null) {\n        try {\n          QueueEvent queueEvent = new QueueEvent(dir + \"/\" + headNode, zookeeper.getData(dir + \"/\" + headNode,\n              null, null, true), null);\n          return queueEvent.getId();\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a282020d6c9a4ea32a359539e283e4771a2fda8","date":1440047542,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionQueue#getTailId().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#getTailId().mjava","sourceNew":"  /**\n   *\n   * Gets last element of the Queue without removing it.\n   */\n  public String getTailId() throws KeeperException, InterruptedException {\n    // TODO: could we use getChildren here?  Unsure what freshness guarantee the caller needs.\n    TreeSet<String> orderedChildren = fetchZkChildren(null);\n\n    for (String headNode : orderedChildren.descendingSet())\n      if (headNode != null) {\n        try {\n          QueueEvent queueEvent = new QueueEvent(dir + \"/\" + headNode, zookeeper.getData(dir + \"/\" + headNode,\n              null, null, true), null);\n          return queueEvent.getId();\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    return null;\n  }\n\n","sourceOld":"  /**\n   *\n   * Gets last element of the Queue without removing it.\n   */\n  public String getTailId() throws KeeperException, InterruptedException {\n    TreeMap<Long, String> orderedChildren = null;\n    orderedChildren = orderedChildren(null);\n    if(orderedChildren == null || orderedChildren.isEmpty()) return null;\n\n    for(String headNode : orderedChildren.descendingMap().values())\n      if (headNode != null) {\n        try {\n          QueueEvent queueEvent = new QueueEvent(dir + \"/\" + headNode, zookeeper.getData(dir + \"/\" + headNode,\n              null, null, true), null);\n          return queueEvent.getId();\n        } catch (KeeperException.NoNodeException e) {\n          // Another client removed the node first, try next\n        }\n      }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["6f26f74e4969851a019d28f10315cb1c77786f22"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a282020d6c9a4ea32a359539e283e4771a2fda8"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"2a282020d6c9a4ea32a359539e283e4771a2fda8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["2a282020d6c9a4ea32a359539e283e4771a2fda8","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}