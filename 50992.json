{"path":"lucene/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status,Codec).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result, Codec codec) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir, codec);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CheckIndex#fixIndex(Status,Codec).mjava","sourceNew":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result, Codec codec) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir, codec);\n  }\n\n","sourceOld":"  /** Repairs the index using previously returned result\n   *  from {@link #checkIndex}.  Note that this does not\n   *  remove any of the unreferenced files after it's done;\n   *  you must separately open an {@link IndexWriter}, which\n   *  deletes unreferenced files when it's created.\n   *\n   * <p><b>WARNING</b>: this writes a\n   *  new segments file into the index, effectively removing\n   *  all documents in broken segments from the index.\n   *  BE CAREFUL.\n   *\n   * <p><b>WARNING</b>: Make sure you only call this when the\n   *  index is not opened  by any writer. */\n  public void fixIndex(Status result, Codec codec) throws IOException {\n    if (result.partial)\n      throw new IllegalArgumentException(\"can only fix an index that was fully checked (this status checked a subset of segments)\");\n    result.newSegments.changed();\n    result.newSegments.commit(result.dir, codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}