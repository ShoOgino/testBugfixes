{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(\"formatDate\", EvaluatorBag.getDateFormatEvaluator());\n    evaluators.put(\"test\", new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        return \"Hello World\";\n      }\n    });\n\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(resolver, evaluators));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW',yyyy-MM-dd HH:mm)}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d532a814197216f5e180897b172e87e0158690b","date":1226309783,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","sourceNew":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(resolver, l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW',yyyy-MM-dd HH:mm)}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    final Map<String, Evaluator> evaluators = new HashMap<String, Evaluator>();\n    evaluators.put(\"formatDate\", EvaluatorBag.getDateFormatEvaluator());\n    evaluators.put(\"test\", new Evaluator() {\n      public String evaluate(VariableResolver resolver, String expression) {\n        return \"Hello World\";\n      }\n    });\n\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(resolver, evaluators));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW',yyyy-MM-dd HH:mm)}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfc8d8c033e2239995c45b976c90c18559da31e","date":1235021328,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","sourceNew":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    ContextImpl context = new ContextImpl(null,resolver, null, 0,Collections.EMPTY_MAP, null,null);\n    resolver.context = context;\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW',yyyy-MM-dd HH:mm)}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(resolver, l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW',yyyy-MM-dd HH:mm)}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"850e6bf528dcc8def8f27ada3cfa6ba4d2336375","date":1235458726,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","sourceNew":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    ContextImpl context = new ContextImpl(null,resolver, null, 0,Collections.EMPTY_MAP, null,null);\n    resolver.context = context;\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW','yyyy-MM-dd HH:mm')}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    ContextImpl context = new ContextImpl(null,resolver, null, 0,Collections.EMPTY_MAP, null,null);\n    resolver.context = context;\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW',yyyy-MM-dd HH:mm)}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","sourceNew":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    ContextImpl context = new ContextImpl(null,resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null,null);\n    resolver.context = context;\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW','yyyy-MM-dd HH:mm')}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    ContextImpl context = new ContextImpl(null,resolver, null, 0,Collections.EMPTY_MAP, null,null);\n    resolver.context = context;\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW','yyyy-MM-dd HH:mm')}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bf115d14c92ce593278dbfc501591180a4f1c02","date":1254946133,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","sourceNew":"  @Test\n  public void testFunctionNamespace1() throws Exception {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.context = new ContextImpl(null,resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null,null);\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n\n    SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n    format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    DateMathParser dmp = new DateMathParser(TimeZone.getDefault(), Locale.getDefault());\n\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW/DAY','yyyy-MM-dd HH:mm')}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(dmp.parseMath(\"/DAY\")), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFunctionNamespace1() {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    ContextImpl context = new ContextImpl(null,resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null,null);\n    resolver.context = context;\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW','yyyy-MM-dd HH:mm')}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(new Date()), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65f4e997b946a4eadce22b758749046a63ba2eff","date":1263282580,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","sourceNew":"  @Test\n  public void testFunctionNamespace1() throws Exception {\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    ContextImpl context = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);\n    Context.CURRENT_CONTEXT.set(context);\n    try {\n      final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n      Map<String ,String > m = new HashMap<String, String>();\n      m.put(\"name\",\"test\");\n      m.put(\"class\",E.class.getName());\n      l.add(m);\n\n      SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n      format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n      DateMathParser dmp = new DateMathParser(TimeZone.getDefault(), Locale.getDefault());\n\n      resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n              .getFunctionsNamespace(l,null));\n      String s = resolver\n              .replaceTokens(\"${dataimporter.functions.formatDate('NOW/DAY','yyyy-MM-dd HH:mm')}\");\n      Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n              .format(dmp.parseMath(\"/DAY\")), s);\n      Assert.assertEquals(\"Hello World\", resolver\n              .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n    } finally {\n      Context.CURRENT_CONTEXT.remove();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFunctionNamespace1() throws Exception {\n    final VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.context = new ContextImpl(null,resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null,null);\n    final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n    Map<String ,String > m = new HashMap<String, String>();\n    m.put(\"name\",\"test\");\n    m.put(\"class\",E.class.getName());\n    l.add(m);\n\n    SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n    format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    DateMathParser dmp = new DateMathParser(TimeZone.getDefault(), Locale.getDefault());\n\n    resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n            .getFunctionsNamespace(l,null));\n    String s = resolver\n            .replaceTokens(\"${dataimporter.functions.formatDate('NOW/DAY','yyyy-MM-dd HH:mm')}\");\n    Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n            .format(dmp.parseMath(\"/DAY\")), s);\n    Assert.assertEquals(\"Hello World\", resolver\n            .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestVariableResolver#testFunctionNamespace1().mjava","sourceNew":"  @Test\n  public void testFunctionNamespace1() throws Exception {\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    ContextImpl context = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);\n    Context.CURRENT_CONTEXT.set(context);\n    try {\n      final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n      Map<String ,String > m = new HashMap<String, String>();\n      m.put(\"name\",\"test\");\n      m.put(\"class\",E.class.getName());\n      l.add(m);\n\n      SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n      format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n      DateMathParser dmp = new DateMathParser(TimeZone.getDefault(), Locale.getDefault());\n\n      resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n              .getFunctionsNamespace(l,null));\n      String s = resolver\n              .replaceTokens(\"${dataimporter.functions.formatDate('NOW/DAY','yyyy-MM-dd HH:mm')}\");\n      Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n              .format(dmp.parseMath(\"/DAY\")), s);\n      Assert.assertEquals(\"Hello World\", resolver\n              .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n    } finally {\n      Context.CURRENT_CONTEXT.remove();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFunctionNamespace1() throws Exception {\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    ContextImpl context = new ContextImpl(null, resolver, null, Context.FULL_DUMP, Collections.EMPTY_MAP, null, null);\n    Context.CURRENT_CONTEXT.set(context);\n    try {\n      final List<Map<String ,String >> l = new ArrayList<Map<String, String>>();\n      Map<String ,String > m = new HashMap<String, String>();\n      m.put(\"name\",\"test\");\n      m.put(\"class\",E.class.getName());\n      l.add(m);\n\n      SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n      format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n      DateMathParser dmp = new DateMathParser(TimeZone.getDefault(), Locale.getDefault());\n\n      resolver.addNamespace(\"dataimporter.functions\", EvaluatorBag\n              .getFunctionsNamespace(l,null));\n      String s = resolver\n              .replaceTokens(\"${dataimporter.functions.formatDate('NOW/DAY','yyyy-MM-dd HH:mm')}\");\n      Assert.assertEquals(new SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\n              .format(dmp.parseMath(\"/DAY\")), s);\n      Assert.assertEquals(\"Hello World\", resolver\n              .replaceTokens(\"${dataimporter.functions.test('TEST')}\"));\n    } finally {\n      Context.CURRENT_CONTEXT.remove();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"850e6bf528dcc8def8f27ada3cfa6ba4d2336375":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"9d532a814197216f5e180897b172e87e0158690b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"65f4e997b946a4eadce22b758749046a63ba2eff":["2bf115d14c92ce593278dbfc501591180a4f1c02"],"2bf115d14c92ce593278dbfc501591180a4f1c02":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7dfc8d8c033e2239995c45b976c90c18559da31e":["9d532a814197216f5e180897b172e87e0158690b"],"ad94625fb8d088209f46650c8097196fec67f00c":["65f4e997b946a4eadce22b758749046a63ba2eff"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["850e6bf528dcc8def8f27ada3cfa6ba4d2336375"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"850e6bf528dcc8def8f27ada3cfa6ba4d2336375":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"9d532a814197216f5e180897b172e87e0158690b":["7dfc8d8c033e2239995c45b976c90c18559da31e"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["9d532a814197216f5e180897b172e87e0158690b"],"65f4e997b946a4eadce22b758749046a63ba2eff":["ad94625fb8d088209f46650c8097196fec67f00c"],"2bf115d14c92ce593278dbfc501591180a4f1c02":["65f4e997b946a4eadce22b758749046a63ba2eff"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dfc8d8c033e2239995c45b976c90c18559da31e":["850e6bf528dcc8def8f27ada3cfa6ba4d2336375"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["2bf115d14c92ce593278dbfc501591180a4f1c02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}