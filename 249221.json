{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","commits":[{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,Map[String,String],Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, Map<String, String> props, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.props   = props;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,Map[String,String],Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, Map<String, String> props, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.props   = props;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,Map[String,String],Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, Map<String, String> props, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.props   = props;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    System.out.println(\"####### Bucket count:\"+buckets.length);\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    System.out.println(\"####### Bucket count:\"+buckets.length);\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    System.out.println(\"####### Bucket count:\"+buckets.length);\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    System.out.println(\"####### Bucket count:\"+buckets.length);\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3660ef111aa270bdbc5d665a05dfb9b13edb268","date":1500221107,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = new ModifiableSolrParams(params);\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = new ModifiableSolrParams(params);\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = params;\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9","date":1536688684,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = new ModifiableSolrParams(params);\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    if (this.bucketSizeLimit == -1) {\n      this.bucketSizeLimit = Integer.MAX_VALUE;\n    }\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = new ModifiableSolrParams(params);\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"011d43366b2da54d1652d93e7ec6412848eeb009","date":1541521420,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,int,int,boolean,String,boolean,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream#init(String,SolrParams,Bucket[],FieldComparator[],Metric[],int,String).mjava","sourceNew":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int rows, int offset, int bucketSizeLimit, boolean refine, String method, boolean serializeBucketSizeLimit, int overfetch, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = new ModifiableSolrParams(params);\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.rows = rows;\n    this.offset = offset;\n    this.refine = refine;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    this.method = method;\n    this.serializeBucketSizeLimit = serializeBucketSizeLimit;\n    this.overfetch = overfetch;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","sourceOld":"  private void init(String collection, SolrParams params, Bucket[] buckets, FieldComparator[] bucketSorts, Metric[] metrics, int bucketSizeLimit, String zkHost) throws IOException {\n    this.zkHost  = zkHost;\n    this.params = new ModifiableSolrParams(params);\n    this.buckets = buckets;\n    this.metrics = metrics;\n    this.bucketSizeLimit   = bucketSizeLimit;\n    if (this.bucketSizeLimit == -1) {\n      this.bucketSizeLimit = Integer.MAX_VALUE;\n    }\n    this.collection = collection;\n    this.bucketSorts = bucketSorts;\n    \n    // In a facet world it only makes sense to have the same field name in all of the sorters\n    // Because FieldComparator allows for left and right field names we will need to validate\n    // that they are the same\n    for(FieldComparator sort : bucketSorts){\n      if(sort.hasDifferentFieldNames()){\n        throw new IOException(\"Invalid FacetStream - all sorts must be constructed with a single field name.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36b1ce25b5b465615c00f409ce694664abbe7bd2":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c3660ef111aa270bdbc5d665a05dfb9b13edb268":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","36b1ce25b5b465615c00f409ce694664abbe7bd2"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a9b741b54c163686a5fd077895a797daa9b0b95f","c3660ef111aa270bdbc5d665a05dfb9b13edb268"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"011d43366b2da54d1652d93e7ec6412848eeb009":["58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9":["c3660ef111aa270bdbc5d665a05dfb9b13edb268"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["011d43366b2da54d1652d93e7ec6412848eeb009"]},"commit2Childs":{"36b1ce25b5b465615c00f409ce694664abbe7bd2":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"c3660ef111aa270bdbc5d665a05dfb9b13edb268":["aaf90fc29510e72665ac7934f34c3d1c25efad64","58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a9b741b54c163686a5fd077895a797daa9b0b95f":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["c3660ef111aa270bdbc5d665a05dfb9b13edb268"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"011d43366b2da54d1652d93e7ec6412848eeb009":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"58199c2d60bb7cc4bec1a7e70b16f72c4fc7d9d9":["011d43366b2da54d1652d93e7ec6412848eeb009"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}