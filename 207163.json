{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SocketProxy#close().mjava","commits":[{"id":"6e36353d7461af8d2329a78a71457cf8e3c1e88f","date":1411572107,"type":1,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SocketProxy#close().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SocketProxy#close().mjava","sourceNew":"  /*\n   * close all proxy connections and acceptor\n   */\n  public void close() {\n    List<Bridge> connections;\n    synchronized (this.connections) {\n      connections = new ArrayList<Bridge>(this.connections);\n    }\n    log.warn(\"Closing \" + connections.size()+\" connections to: \"+getUrl());\n    for (Bridge con : connections) {\n      closeConnection(con);\n    }\n    acceptor.close();\n    closed.countDown();\n  }\n\n","sourceOld":"  /*\n   * close all proxy connections and acceptor\n   */\n  public void close() {\n    List<Bridge> connections;\n    synchronized (this.connections) {\n      connections = new ArrayList<Bridge>(this.connections);\n    }\n    log.warn(\"Closing \" + connections.size()+\" connections to: \"+getUrl());\n    for (Bridge con : connections) {\n      closeConnection(con);\n    }\n    acceptor.close();\n    closed.countDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05d1c262da1d1f850b159395fc65d7925919dc22","date":1428418196,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SocketProxy#close().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SocketProxy#close().mjava","sourceNew":"  /*\n   * close all proxy connections and acceptor\n   */\n  public void close() {\n    List<Bridge> connections;\n    synchronized (this.connections) {\n      connections = new ArrayList<Bridge>(this.connections);\n    }\n    log.warn(\"Closing \" + connections.size()+\" connections to: \"+getUrl()+\", target: \"+target);\n    for (Bridge con : connections) {\n      closeConnection(con);\n    }\n    acceptor.close();\n    closed.countDown();\n  }\n\n","sourceOld":"  /*\n   * close all proxy connections and acceptor\n   */\n  public void close() {\n    List<Bridge> connections;\n    synchronized (this.connections) {\n      connections = new ArrayList<Bridge>(this.connections);\n    }\n    log.warn(\"Closing \" + connections.size()+\" connections to: \"+getUrl());\n    for (Bridge con : connections) {\n      closeConnection(con);\n    }\n    acceptor.close();\n    closed.countDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/SocketProxy#close().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SocketProxy#close().mjava","sourceNew":"  /*\n   * close all proxy connections and acceptor\n   */\n  public void close() {\n    List<Bridge> connections;\n    synchronized (this.connections) {\n      connections = new ArrayList<Bridge>(this.connections);\n    }\n    log.warn(\"Closing \" + connections.size()+\" connections to: \"+getUrl()+\", target: \"+target);\n    for (Bridge con : connections) {\n      closeConnection(con);\n    }\n    acceptor.close();\n    closed.countDown();\n  }\n\n","sourceOld":"  /*\n   * close all proxy connections and acceptor\n   */\n  public void close() {\n    List<Bridge> connections;\n    synchronized (this.connections) {\n      connections = new ArrayList<Bridge>(this.connections);\n    }\n    log.warn(\"Closing \" + connections.size()+\" connections to: \"+getUrl()+\", target: \"+target);\n    for (Bridge con : connections) {\n      closeConnection(con);\n    }\n    acceptor.close();\n    closed.countDown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["05d1c262da1d1f850b159395fc65d7925919dc22"],"05d1c262da1d1f850b159395fc65d7925919dc22":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d1c262da1d1f850b159395fc65d7925919dc22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e36353d7461af8d2329a78a71457cf8e3c1e88f"],"6e36353d7461af8d2329a78a71457cf8e3c1e88f":["05d1c262da1d1f850b159395fc65d7925919dc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}