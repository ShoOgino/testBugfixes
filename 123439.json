{"path":"solr/core/src/java/org/apache/solr/util/TestInjection#injectPrepRecoveryOpPauseForever().mjava","commits":[{"id":"970a667af41fa94f5b9e55f7d08c90b51daf989d","date":1478330202,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectPrepRecoveryOpPauseForever().mjava","pathOld":"/dev/null","sourceNew":"  public static boolean injectPrepRecoveryOpPauseForever() {\n    if (prepRecoveryOpPauseForever != null)  {\n      Random rand = random();\n      if (null == rand) return true;\n\n      Pair<Boolean,Integer> pair = parseValue(prepRecoveryOpPauseForever);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      // Prevent for continuous pause forever\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100) && countPrepRecoveryOpPauseForever.get() < 2) {\n        countPrepRecoveryOpPauseForever.incrementAndGet();\n        log.info(\"inject pause forever for prep recovery op\");\n        try {\n          Thread.sleep(Integer.MAX_VALUE);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      } else {\n        countPrepRecoveryOpPauseForever.set(0);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectPrepRecoveryOpPauseForever().mjava","pathOld":"/dev/null","sourceNew":"  public static boolean injectPrepRecoveryOpPauseForever() {\n    if (prepRecoveryOpPauseForever != null)  {\n      Random rand = random();\n      if (null == rand) return true;\n\n      Pair<Boolean,Integer> pair = parseValue(prepRecoveryOpPauseForever);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      // Prevent for continuous pause forever\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100) && countPrepRecoveryOpPauseForever.get() < 2) {\n        countPrepRecoveryOpPauseForever.incrementAndGet();\n        log.info(\"inject pause forever for prep recovery op\");\n        try {\n          Thread.sleep(Integer.MAX_VALUE);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      } else {\n        countPrepRecoveryOpPauseForever.set(0);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1","date":1499091633,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectPrepRecoveryOpPauseForever().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectPrepRecoveryOpPauseForever().mjava","sourceNew":"  public static boolean injectPrepRecoveryOpPauseForever() {\n    if (prepRecoveryOpPauseForever != null)  {\n      Random rand = random();\n      if (null == rand) return true;\n\n      Pair<Boolean,Integer> pair = parseValue(prepRecoveryOpPauseForever);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      // Prevent for continuous pause forever\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100) && countPrepRecoveryOpPauseForever.get() < 1) {\n        countPrepRecoveryOpPauseForever.incrementAndGet();\n        log.info(\"inject pause forever for prep recovery op\");\n        try {\n          Thread.sleep(Integer.MAX_VALUE);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      } else {\n        countPrepRecoveryOpPauseForever.set(0);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectPrepRecoveryOpPauseForever() {\n    if (prepRecoveryOpPauseForever != null)  {\n      Random rand = random();\n      if (null == rand) return true;\n\n      Pair<Boolean,Integer> pair = parseValue(prepRecoveryOpPauseForever);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      // Prevent for continuous pause forever\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100) && countPrepRecoveryOpPauseForever.get() < 2) {\n        countPrepRecoveryOpPauseForever.incrementAndGet();\n        log.info(\"inject pause forever for prep recovery op\");\n        try {\n          Thread.sleep(Integer.MAX_VALUE);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      } else {\n        countPrepRecoveryOpPauseForever.set(0);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":["970a667af41fa94f5b9e55f7d08c90b51daf989d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectPrepRecoveryOpPauseForever().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectPrepRecoveryOpPauseForever().mjava","sourceNew":"  public static boolean injectPrepRecoveryOpPauseForever() {\n    if (prepRecoveryOpPauseForever != null)  {\n      Random rand = random();\n      if (null == rand) return true;\n\n      Pair<Boolean,Integer> pair = parseValue(prepRecoveryOpPauseForever);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      // Prevent for continuous pause forever\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100) && countPrepRecoveryOpPauseForever.get() < 1) {\n        countPrepRecoveryOpPauseForever.incrementAndGet();\n        log.info(\"inject pause forever for prep recovery op\");\n        try {\n          Thread.sleep(Integer.MAX_VALUE);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      } else {\n        countPrepRecoveryOpPauseForever.set(0);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectPrepRecoveryOpPauseForever() {\n    if (prepRecoveryOpPauseForever != null)  {\n      Random rand = random();\n      if (null == rand) return true;\n\n      Pair<Boolean,Integer> pair = parseValue(prepRecoveryOpPauseForever);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      // Prevent for continuous pause forever\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100) && countPrepRecoveryOpPauseForever.get() < 2) {\n        countPrepRecoveryOpPauseForever.incrementAndGet();\n        log.info(\"inject pause forever for prep recovery op\");\n        try {\n          Thread.sleep(Integer.MAX_VALUE);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      } else {\n        countPrepRecoveryOpPauseForever.set(0);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/TestInjection#injectPrepRecoveryOpPauseForever().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/TestInjection#injectPrepRecoveryOpPauseForever().mjava","sourceNew":"  public static boolean injectPrepRecoveryOpPauseForever() {\n    String val = prepRecoveryOpPauseForever;\n    if (val != null)  {\n      Random rand = random();\n      if (null == rand) return true;\n      Pair<Boolean,Integer> pair = parseValue(val);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      // Prevent for continuous pause forever\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100) && countPrepRecoveryOpPauseForever.get() < 1) {\n        countPrepRecoveryOpPauseForever.incrementAndGet();\n        log.info(\"inject pause forever for prep recovery op\");\n        \n        try {\n          notifyPauseForeverDone.await();\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      } else {\n        countPrepRecoveryOpPauseForever.set(0);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  public static boolean injectPrepRecoveryOpPauseForever() {\n    if (prepRecoveryOpPauseForever != null)  {\n      Random rand = random();\n      if (null == rand) return true;\n\n      Pair<Boolean,Integer> pair = parseValue(prepRecoveryOpPauseForever);\n      boolean enabled = pair.first();\n      int chanceIn100 = pair.second();\n      // Prevent for continuous pause forever\n      if (enabled && rand.nextInt(100) >= (100 - chanceIn100) && countPrepRecoveryOpPauseForever.get() < 1) {\n        countPrepRecoveryOpPauseForever.incrementAndGet();\n        log.info(\"inject pause forever for prep recovery op\");\n        try {\n          Thread.sleep(Integer.MAX_VALUE);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n      } else {\n        countPrepRecoveryOpPauseForever.set(0);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":["970a667af41fa94f5b9e55f7d08c90b51daf989d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["970a667af41fa94f5b9e55f7d08c90b51daf989d","8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","970a667af41fa94f5b9e55f7d08c90b51daf989d"],"8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1":["970a667af41fa94f5b9e55f7d08c90b51daf989d"],"970a667af41fa94f5b9e55f7d08c90b51daf989d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["199dfa410f1fdbfd3294106b04096cce5ed34b21","970a667af41fa94f5b9e55f7d08c90b51daf989d"],"30c8e5574b55d57947e989443dfde611646530ee":[],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","30c8e5574b55d57947e989443dfde611646530ee"],"970a667af41fa94f5b9e55f7d08c90b51daf989d":["30c8e5574b55d57947e989443dfde611646530ee","199dfa410f1fdbfd3294106b04096cce5ed34b21","8dcdc17e7cf73a4779ecf173ff719b51fe2a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}