{"path":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    RAMDirectory ramDir = new RAMDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    RAMDirectory ramDir = new RAMDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    MockRAMDirectory ramDir = new MockRAMDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    RAMDirectory ramDir = new RAMDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    MockRAMDirectory ramDir = newDirectory(newRandom());\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    MockRAMDirectory ramDir = new MockRAMDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory(newRandom());\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    MockRAMDirectory ramDir = newDirectory(newRandom());\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory(newRandom());\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"61ab4111d25902ca08254bd3935ec801fbd3885f","date":1291028825,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"oneword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","bugFix":["96308b901685e8ec12a3856f788a7d9d98c22e50"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"oneword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"oneword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    RAMDirectory ramDir = new RAMDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"twoword\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"oneword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"oneword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"oneword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"oneword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","pathOld":"lucene/contrib/spellchecker/src/test/org/apache/lucene/search/spell/TestPlainTextDictionary#testBuild().mjava","sourceNew":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"oneword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","sourceOld":"  public void testBuild() throws IOException {\n    final String LF = System.getProperty(\"line.separator\");\n    String input = \"oneword\" + LF + \"twoword\" + LF + \"threeword\";\n    PlainTextDictionary ptd = new PlainTextDictionary(new StringReader(input));\n    Directory ramDir = newDirectory();\n    SpellChecker spellChecker = new SpellChecker(ramDir);\n    spellChecker.indexDictionary(ptd);\n    String[] similar = spellChecker.suggestSimilar(\"treeword\", 2);\n    assertEquals(2, similar.length);\n    assertEquals(similar[0], \"threeword\");\n    assertEquals(similar[1], \"oneword\");\n    spellChecker.close();\n    ramDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e230a61047bc041516c811baa08a7174d6f8322a":["61ab4111d25902ca08254bd3935ec801fbd3885f"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","61ab4111d25902ca08254bd3935ec801fbd3885f"],"61ab4111d25902ca08254bd3935ec801fbd3885f":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["61ab4111d25902ca08254bd3935ec801fbd3885f","e230a61047bc041516c811baa08a7174d6f8322a"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"3bb13258feba31ab676502787ab2e1779f129b7a":["1f653cfcf159baeaafe5d01682a911e95bba4012","61ab4111d25902ca08254bd3935ec801fbd3885f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e230a61047bc041516c811baa08a7174d6f8322a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["3bb13258feba31ab676502787ab2e1779f129b7a","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"61ab4111d25902ca08254bd3935ec801fbd3885f":["e230a61047bc041516c811baa08a7174d6f8322a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","3bb13258feba31ab676502787ab2e1779f129b7a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["61ab4111d25902ca08254bd3935ec801fbd3885f","3bb13258feba31ab676502787ab2e1779f129b7a"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3bb13258feba31ab676502787ab2e1779f129b7a":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}