{"path":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(Searcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(Searcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"/dev/null","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","date":1295478199,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be0e0881e3769f3abb8f083719a2a1eb66a80be2","date":1295840025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n\n      // compute idf\n      ArrayList<Term> allTerms = new ArrayList<Term>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(term);\n        }\n      }\n      idfExp = similarity.idfExplain(allTerms, searcher);\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","bugFix":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n\n      // compute idf\n      ArrayList<Term> allTerms = new ArrayList<Term>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(term);\n        }\n      }\n      idfExp = similarity.idfExplain(allTerms, searcher);\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n\n      // compute idf\n      ArrayList<Term> allTerms = new ArrayList<Term>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(term);\n        }\n      }\n      idfExp = similarity.idfExplain(allTerms, searcher);\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n\n      // compute idf\n      ArrayList<Term> allTerms = new ArrayList<Term>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(term);\n        }\n      }\n      idfExp = similarity.idfExplain(allTerms, searcher);\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n\n      // compute idf\n      ArrayList<Term> allTerms = new ArrayList<Term>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(term);\n        }\n      }\n      idfExp = similarity.idfExplain(allTerms, searcher);\n      idf = idfExp.getIdf();\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = getSimilarity(searcher);\n\n      // compute idf\n      final int maxDoc = searcher.maxDoc();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          idf += this.similarity.idf(searcher.docFreq(term), maxDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final ReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermContext> allTerms = new ArrayList<TermContext>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(TermContext.build(context, term, true));\n        }\n      }\n      stats = similarity.computeStats(searcher, field, getBoost(), allTerms.toArray(new TermContext[allTerms.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n\n      // compute idf\n      ArrayList<Term> allTerms = new ArrayList<Term>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(term);\n        }\n      }\n      idfExp = similarity.idfExplain(allTerms, searcher);\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final ReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermContext> allTerms = new ArrayList<TermContext>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(TermContext.build(context, term, true));\n        }\n      }\n      stats = similarity.computeStats(searcher, field, getBoost(), allTerms.toArray(new TermContext[allTerms.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n\n      // compute idf\n      ArrayList<Term> allTerms = new ArrayList<Term>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(term);\n        }\n      }\n      idfExp = similarity.idfExplain(allTerms, searcher);\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final ReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermContext> allTerms = new ArrayList<TermContext>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(TermContext.build(context, term, true));\n        }\n      }\n      stats = similarity.computeStats(searcher, field, getBoost(), allTerms.toArray(new TermContext[allTerms.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n\n      // compute idf\n      ArrayList<Term> allTerms = new ArrayList<Term>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(term);\n        }\n      }\n      idfExp = similarity.idfExplain(allTerms, searcher);\n      idf = idfExp.getIdf();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","date":1320398636,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final ReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = TermContext.build(context, term, true);\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeStats(searcher.collectionStatistics(field), \n          getBoost(), allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final ReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermContext> allTerms = new ArrayList<TermContext>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          allTerms.add(TermContext.build(context, term, true));\n        }\n      }\n      stats = similarity.computeStats(searcher, field, getBoost(), allTerms.toArray(new TermContext[allTerms.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final ReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeStats(searcher.collectionStatistics(field), \n          getBoost(), allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final ReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = TermContext.build(context, term, true);\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeStats(searcher.collectionStatistics(field), \n          getBoost(), allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeStats(searcher.collectionStatistics(field), \n          getBoost(), allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final ReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeStats(searcher.collectionStatistics(field), \n          getBoost(), allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeStats(searcher.collectionStatistics(field), \n          getBoost(), allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final ReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeStats(searcher.collectionStatistics(field), \n          getBoost(), allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660345363f16c7d4c38aa11a35bf59aa99466cf1","date":1328227279,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeStats(searcher.collectionStatistics(field), \n          getBoost(), allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarityProvider().get(field);\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiPhraseQuery.MultiPhraseWeight#MultiPhraseWeight(IndexSearcher).mjava","sourceNew":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","sourceOld":"    public MultiPhraseWeight(IndexSearcher searcher)\n      throws IOException {\n      this.similarity = searcher.getSimilarity();\n      final IndexReaderContext context = searcher.getTopReaderContext();\n      \n      // compute idf\n      ArrayList<TermStatistics> allTermStats = new ArrayList<TermStatistics>();\n      for(final Term[] terms: termArrays) {\n        for (Term term: terms) {\n          TermContext termContext = termContexts.get(term);\n          if (termContext == null) {\n            termContext = TermContext.build(context, term, true);\n            termContexts.put(term, termContext);\n          }\n          allTermStats.add(searcher.termStatistics(term, termContext));\n        }\n      }\n      stats = similarity.computeWeight(getBoost(),\n          searcher.collectionStatistics(field), \n          allTermStats.toArray(new TermStatistics[allTermStats.size()]));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["e2297162a22c55456e200caef2cbcb00fe381120"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"660345363f16c7d4c38aa11a35bf59aa99466cf1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"e2297162a22c55456e200caef2cbcb00fe381120":["9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"be0e0881e3769f3abb8f083719a2a1eb66a80be2":["03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["e2297162a22c55456e200caef2cbcb00fe381120","8493985e6883b3fa8231d172694d2aa3a85cb182"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["e79a6d080bdd5b2a8f56342cf571b5476de04180","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["be0e0881e3769f3abb8f083719a2a1eb66a80be2"],"1291e4568eb7d9463d751627596ef14baf4c1603":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","0f3cee3d20b0c786e6fca20539454262e29edcab"],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","0f3cee3d20b0c786e6fca20539454262e29edcab"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"660345363f16c7d4c38aa11a35bf59aa99466cf1":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d","f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4":["e79a6d080bdd5b2a8f56342cf571b5476de04180","be0e0881e3769f3abb8f083719a2a1eb66a80be2"],"e2297162a22c55456e200caef2cbcb00fe381120":["8493985e6883b3fa8231d172694d2aa3a85cb182","5cab9a86bd67202d20b6adc463008c8e982b070a"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["660345363f16c7d4c38aa11a35bf59aa99466cf1"],"be0e0881e3769f3abb8f083719a2a1eb66a80be2":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["0f3cee3d20b0c786e6fca20539454262e29edcab","bb9b72f7c3d7827c64dd4ec580ded81778da361d","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"9ce8e026ad419f6c1e2d26851d5b4b35e6239c9d":["e2297162a22c55456e200caef2cbcb00fe381120"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","03cb5827cf46528aa8d9b3ef5eaeeccda861b1f4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}