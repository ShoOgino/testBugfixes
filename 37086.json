{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/UniqueStream#read().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/UniqueStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        int i = comp.compare(currentTuple, tuple);\n        if(i == 0) {\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = tupleStream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/UniqueStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        int i = comp.compare(currentTuple, tuple);\n        if(i == 0) {\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = tupleStream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/UniqueStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/UniqueStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        int i = comp.compare(currentTuple, tuple);\n        if(i == 0) {\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = tupleStream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n    Tuple tuple = tupleStream.read();\n    if(tuple.EOF) {\n      return tuple;\n    }\n\n    if(currentTuple == null) {\n      currentTuple = tuple;\n      return tuple;\n    } else {\n      while(true) {\n        int i = comp.compare(currentTuple, tuple);\n        if(i == 0) {\n          //We have duplicate tuple so read the next tuple from the stream.\n          tuple = tupleStream.read();\n          if(tuple.EOF) {\n            return tuple;\n          }\n        } else {\n          //We have a non duplicate\n          this.currentTuple = tuple;\n          return tuple;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}