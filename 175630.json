{"path":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,Searcher,Analyzer,String,float).mjava","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"323f871ffe96b871d8c534a614be60751bb023c2","date":1294820532,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(IndexReader reader, int docBase)\n            throws IOException {\n          this.reader = reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00746ad002a54281629e3b6f3eb39833a33f093e","date":1305306799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.reusableTokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.reusableTokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","sourceNew":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.reusableTokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.tokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/wordnet/src/java/org/apache/lucene/wordnet/SynLookup#expand(String,IndexSearcher,Analyzer,String,float).mjava","sourceNew":null,"sourceOld":"\t/**\n\t * Perform synonym expansion on a query.\n\t *\n\t * @param query\n\t * @param syns\n\t * @param a\n\t * @param field\n\t * @param boost\n\t */ \n\tpublic static Query expand( String query,\n\t\t\t\t\t\t\t\tIndexSearcher syns,\n\t\t\t\t\t\t\t\tAnalyzer a,\n\t\t\t\t\t\t\t\tfinal String field,\n\t\t\t\t\t\t\t\tfinal float boost)\n\t\tthrows IOException\n\t{\n\t\tfinal Set<String> already = new HashSet<String>(); // avoid dups\t\t\n\t\tList<String> top = new LinkedList<String>(); // needs to be separately listed..\n\n\t\t// [1] Parse query into separate words so that when we expand we can avoid dups\n\t\tTokenStream ts = a.reusableTokenStream( field, new StringReader( query));\n    CharTermAttribute termAtt = ts.addAttribute(CharTermAttribute.class);\n    \n\t\twhile (ts.incrementToken()) {\n\t\t\tString word = termAtt.toString();\n\t\t\tif ( already.add( word))\n\t\t\t\ttop.add( word);\n\t\t}\n\t\tfinal BooleanQuery tmp = new BooleanQuery();\n\t\t\n\t\t// [2] form query\n\t\tIterator<String> it = top.iterator();\n\t\twhile ( it.hasNext())\n\t\t{\n\t\t\t// [2a] add to level words in\n\t\t\tString word = it.next();\n\t\t\tTermQuery tq = new TermQuery( new Term( field, word));\n\t\t\ttmp.add( tq, BooleanClause.Occur.SHOULD);\n\n\t\t\t// [2b] add in unique synonums\n\t\t\tsyns.search(new TermQuery( new Term(Syns2Index.F_WORD, word)), new Collector() {\n\t\t\t  IndexReader reader;\n\t\t\t  \n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return true;\n        }\n\n        @Override\n        public void collect(int doc) throws IOException {\n          Document d = reader.document(doc);\n          String[] values = d.getValues( Syns2Index.F_SYN);\n          for ( int j = 0; j < values.length; j++)\n          {\n            String syn = values[ j];\n            if ( already.add( syn))\n            {\n              TermQuery tq = new TermQuery( new Term( field, syn));\n              if ( boost > 0) // else keep normal 1.0\n                tq.setBoost( boost);\n              tmp.add( tq, BooleanClause.Occur.SHOULD); \n            }\n          }\n        }\n\n        @Override\n        public void setNextReader(AtomicReaderContext context)\n            throws IOException {\n          this.reader = context.reader;\n        }\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {}\n\t\t\t});\n\t\t}\n\n\n\t\treturn tmp;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"323f871ffe96b871d8c534a614be60751bb023c2":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","00746ad002a54281629e3b6f3eb39833a33f093e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["323f871ffe96b871d8c534a614be60751bb023c2","00746ad002a54281629e3b6f3eb39833a33f093e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","323f871ffe96b871d8c534a614be60751bb023c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["00746ad002a54281629e3b6f3eb39833a33f093e"],"00746ad002a54281629e3b6f3eb39833a33f093e":["323f871ffe96b871d8c534a614be60751bb023c2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","323f871ffe96b871d8c534a614be60751bb023c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"323f871ffe96b871d8c534a614be60751bb023c2":["a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","00746ad002a54281629e3b6f3eb39833a33f093e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","323f871ffe96b871d8c534a614be60751bb023c2"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"00746ad002a54281629e3b6f3eb39833a33f093e":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}