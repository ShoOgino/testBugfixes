{"path":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveMultiValueQueries().mjava","commits":[{"id":"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","date":1570176835,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveMultiValueQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testUseIndexForSelectiveMultiValueQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i < 1000) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        for (int j =0; j < 500; j++) {\n          doc.add(new LongPoint(\"f2\", 42L));\n          doc.add(new SortedNumericDocValuesField(\"f2\", 42L));\n        }\n      } else if (i == 1001) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new SortedNumericDocValuesField(\"f2\", 42L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        for (int j =0; j < 100; j++) {\n          doc.add(new LongPoint(\"f2\", 2L));\n          doc.add(new SortedNumericDocValuesField(\"f2\", 2L));\n        }\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), SortedNumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createWeight(searcher.rewrite(q1), ScoreMode.COMPLETE, 1);\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s1.twoPhaseIterator()); // means we use points\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), SortedNumericDocValuesField.newSlowRangeQuery(\"f2\", 42, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createWeight(searcher.rewrite(q2), ScoreMode.COMPLETE, 1);\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q3 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), SortedNumericDocValuesField.newSlowRangeQuery(\"f2\", 42, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w3 = searcher.createWeight(searcher.rewrite(q3), ScoreMode.COMPLETE, 1);\n    final Scorer s3 = w3.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s3.twoPhaseIterator()); // means we use doc values\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexOrDocValuesQuery#testUseIndexForSelectiveMultiValueQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testUseIndexForSelectiveMultiValueQueries() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig()\n        // relies on costs and PointValues.estimateCost so we need the default codec\n        .setCodec(TestUtil.getDefaultCodec()));\n    for (int i = 0; i < 2000; ++i) {\n      Document doc = new Document();\n      if (i < 1000) {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        for (int j =0; j < 500; j++) {\n          doc.add(new LongPoint(\"f2\", 42L));\n          doc.add(new SortedNumericDocValuesField(\"f2\", 42L));\n        }\n      } else if (i == 1001) {\n        doc.add(new StringField(\"f1\", \"foo\", Store.NO));\n        doc.add(new LongPoint(\"f2\", 2L));\n        doc.add(new SortedNumericDocValuesField(\"f2\", 42L));\n      } else {\n        doc.add(new StringField(\"f1\", \"bar\", Store.NO));\n        for (int j =0; j < 100; j++) {\n          doc.add(new LongPoint(\"f2\", 2L));\n          doc.add(new SortedNumericDocValuesField(\"f2\", 2L));\n        }\n      }\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    IndexReader reader = DirectoryReader.open(w);\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q1 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 2), SortedNumericDocValuesField.newSlowRangeQuery(\"f2\", 2L, 2L)), Occur.MUST)\n        .build();\n\n    final Weight w1 = searcher.createWeight(searcher.rewrite(q1), ScoreMode.COMPLETE, 1);\n    final Scorer s1 = w1.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s1.twoPhaseIterator()); // means we use points\n\n    // The term query is less selective, so the IndexOrDocValuesQuery should use points\n    final Query q2 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"bar\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), SortedNumericDocValuesField.newSlowRangeQuery(\"f2\", 42, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w2 = searcher.createWeight(searcher.rewrite(q2), ScoreMode.COMPLETE, 1);\n    final Scorer s2 = w2.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNull(s2.twoPhaseIterator()); // means we use points\n\n    // The term query is more selective, so the IndexOrDocValuesQuery should use doc values\n    final Query q3 = new BooleanQuery.Builder()\n        .add(new TermQuery(new Term(\"f1\", \"foo\")), Occur.MUST)\n        .add(new IndexOrDocValuesQuery(LongPoint.newExactQuery(\"f2\", 42), SortedNumericDocValuesField.newSlowRangeQuery(\"f2\", 42, 42L)), Occur.MUST)\n        .build();\n\n    final Weight w3 = searcher.createWeight(searcher.rewrite(q3), ScoreMode.COMPLETE, 1);\n    final Scorer s3 = w3.scorer(searcher.getIndexReader().leaves().get(0));\n    assertNotNull(s3.twoPhaseIterator()); // means we use doc values\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3c09c5c6cd995294d83f12c1bdf8d47d8e749f49"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c09c5c6cd995294d83f12c1bdf8d47d8e749f49","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3c09c5c6cd995294d83f12c1bdf8d47d8e749f49":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}