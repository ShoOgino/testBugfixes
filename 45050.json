{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    assertEquals(0, binary.nextDoc());\n    final BytesRef term = binary.binaryValue();\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    assertEquals(0, binary.nextDoc());\n\n    BytesRef scratch = binary.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.nextDoc());\n    assertEquals(0, sorted.ordValue());\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER);\n    assertEquals(0, numeric.nextDoc());\n    assertEquals(42, numeric.longValue());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    assertEquals(0, binary.nextDoc());\n    final BytesRef term = binary.binaryValue();\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    assertEquals(0, binary.nextDoc());\n\n    BytesRef scratch = binary.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.nextDoc());\n    assertEquals(0, sorted.ordValue());\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER);\n    assertEquals(0, numeric.nextDoc());\n    assertEquals(42, numeric.longValue());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\", true);\n    final BytesRef term = binary.get(0);\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\", true);\n    BytesRef scratch = binary.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.getOrd(0));\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.get(0);\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER, false);\n    assertEquals(42, numeric.get(0));\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER, false);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\", true);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    sortedSet.setDocument(0);\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCache#testDocValuesIntegration().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValuesIntegration() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig(null);\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n    Document doc = new Document();\n    doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(\"binary value\")));\n    doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(\"sorted value\")));\n    doc.add(new NumericDocValuesField(\"numeric\", 42));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value1\")));\n    doc.add(new SortedSetDocValuesField(\"sortedset\", new BytesRef(\"sortedset value2\")));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    // Binary type: can be retrieved via getTerms()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"binary\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    BinaryDocValues binary = FieldCache.DEFAULT.getTerms(ar, \"binary\");\n    assertEquals(0, binary.nextDoc());\n    final BytesRef term = binary.binaryValue();\n    assertEquals(\"binary value\", term.utf8ToString());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"binary\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"binary\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"binary\");\n    });\n    \n    Bits bits = FieldCache.DEFAULT.getDocsWithField(ar, \"binary\", null);\n    assertTrue(bits.get(0));\n    \n    // Sorted type: can be retrieved via getTerms(), getTermsIndex(), getDocTermOrds()\n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sorted\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sorted\");\n    });\n    \n    binary = FieldCache.DEFAULT.getTerms(ar, \"sorted\");\n    assertEquals(0, binary.nextDoc());\n\n    BytesRef scratch = binary.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedDocValues sorted = FieldCache.DEFAULT.getTermsIndex(ar, \"sorted\");\n    assertEquals(0, sorted.nextDoc());\n    assertEquals(0, sorted.ordValue());\n    assertEquals(1, sorted.getValueCount());\n    scratch = sorted.binaryValue();\n    assertEquals(\"sorted value\", scratch.utf8ToString());\n    \n    SortedSetDocValues sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sorted\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sorted\", null);\n    assertTrue(bits.get(0));\n    \n    // Numeric type: can be retrieved via getInts() and so on\n    NumericDocValues numeric = FieldCache.DEFAULT.getNumerics(ar, \"numeric\", FieldCache.INT_POINT_PARSER);\n    assertEquals(0, numeric.nextDoc());\n    assertEquals(42, numeric.longValue());\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"numeric\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getDocTermOrds(ar, \"numeric\", null);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"numeric\");\n    });\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"numeric\", null);\n    assertTrue(bits.get(0));\n    \n    // SortedSet type: can be retrieved via getDocTermOrds() \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getNumerics(ar, \"sortedset\", FieldCache.INT_POINT_PARSER);\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTerms(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      FieldCache.DEFAULT.getTermsIndex(ar, \"sortedset\");\n    });\n    \n    expectThrows(IllegalStateException.class, () -> {\n      new DocTermOrds(ar, null, \"sortedset\");\n    });\n    \n    sortedSet = FieldCache.DEFAULT.getDocTermOrds(ar, \"sortedset\", null);\n    assertEquals(0, sortedSet.nextDoc());\n    assertEquals(0, sortedSet.nextOrd());\n    assertEquals(1, sortedSet.nextOrd());\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    assertEquals(2, sortedSet.getValueCount());\n    \n    bits = FieldCache.DEFAULT.getDocsWithField(ar, \"sortedset\", null);\n    assertTrue(bits.get(0));\n    \n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0e121d43b5a10f2df530f406f935102656e9c4e8","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","83870855d82aba6819217abeff5a40779dbb28b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}