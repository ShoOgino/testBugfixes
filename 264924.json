{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","commits":[{"id":"3e307596810ed3e15021a60f46fdebab6783c295","date":1398787006,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexed() && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexed() && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexed() && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","sourceNew":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexOptions() != null && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","sourceOld":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexed() && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","sourceNew":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexOptions() != null && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","sourceOld":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexed() && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","sourceNew":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexOptions() != IndexOptions.NO && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","sourceOld":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexOptions() != null && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#mergeTermVectorOptions(FieldType,FieldType).mjava","sourceNew":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexOptions() != IndexOptions.NONE && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","sourceOld":"  /** Returns a FieldType derived from newType but whose\n   *  term vector options match the old type */\n  private static FieldType mergeTermVectorOptions(FieldType newType, FieldType oldType) {\n    if (newType.indexOptions() != IndexOptions.NO && oldType.storeTermVectors() == true && newType.storeTermVectors() == false) {\n      newType = new FieldType(newType);\n      newType.setStoreTermVectors(oldType.storeTermVectors());\n      newType.setStoreTermVectorPositions(oldType.storeTermVectorPositions());\n      newType.setStoreTermVectorOffsets(oldType.storeTermVectorOffsets());\n      newType.setStoreTermVectorPayloads(oldType.storeTermVectorPayloads());\n      newType.freeze();\n    }\n\n    return newType;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e307596810ed3e15021a60f46fdebab6783c295"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3394716f52b34ab259ad5247e7595d9f9db6e935","3184874f7f3aca850248483485b4995343066875"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3e307596810ed3e15021a60f46fdebab6783c295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95ce1375367b92d411a06175eab3915fe93c6bc"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3184874f7f3aca850248483485b4995343066875"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3e307596810ed3e15021a60f46fdebab6783c295":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3e307596810ed3e15021a60f46fdebab6783c295"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2bb2842e561df4e8e9ad89010605fc86ac265465"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}