{"path":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    int firstInt = input.readVInt();\n\n    if (firstInt < 0) {\n      // This is a real format\n      format = firstInt;\n    } else {\n      format = FORMAT_PRE;\n    }\n\n    if (format != FORMAT_PRE & format != FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    int size;\n    if (format == FORMAT_PRE) {\n      size = firstInt;\n    } else {\n      size = input.readVInt(); //read in the size\n    }\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    int firstInt = input.readVInt();\n\n    if (firstInt < 0) {\n      // This is a real format\n      format = firstInt;\n    } else {\n      format = FORMAT_PRE;\n    }\n\n    if (format != FORMAT_PRE & format != FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    int size;\n    if (format == FORMAT_PRE) {\n      size = firstInt;\n    } else {\n      size = input.readVInt(); //read in the size\n    }\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    int firstInt = input.readVInt();\n\n    if (firstInt < 0) {\n      // This is a real format\n      format = firstInt;\n    } else {\n      format = FORMAT_PRE;\n    }\n\n    if (format != FORMAT_PRE & format != FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    int size;\n    if (format == FORMAT_PRE) {\n      size = firstInt;\n    } else {\n      size = input.readVInt(); //read in the size\n    }\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd8367c3d48e4b63dee1895a261d4986c716bbb","date":1279637747,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_START) {\n      throw new CorruptIndexException(\"unrecognized format \" + format + \" in file \\\"\" + fileName + \"\\\"\");\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n\n        switch(b) {\n        case 0:\n          fi.indexValues = null;\n          break;\n        case 1:\n          fi.indexValues = Values.PACKED_INTS;\n          break;\n        case 2:\n          fi.indexValues = Values.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.indexValues = Values.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.indexValues = Values.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.indexValues = Values.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.indexValues = Values.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.indexValues = Values.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.indexValues = Values.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.indexValues = Values.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          fi.indexValues = Values.PACKED_INTS_FIXED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          fi.docValues = null;\n          break;\n        case 1:\n          fi.docValues = Values.PACKED_INTS;\n          break;\n        case 2:\n          fi.docValues = Values.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.docValues = Values.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.docValues = Values.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.docValues = Values.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.docValues = Values.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.docValues = Values.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.docValues = Values.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.docValues = Values.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          fi.docValues = Values.PACKED_INTS_FIXED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n\n        switch(b) {\n        case 0:\n          fi.indexValues = null;\n          break;\n        case 1:\n          fi.indexValues = Values.PACKED_INTS;\n          break;\n        case 2:\n          fi.indexValues = Values.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.indexValues = Values.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.indexValues = Values.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.indexValues = Values.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.indexValues = Values.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.indexValues = Values.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.indexValues = Values.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.indexValues = Values.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          fi.indexValues = Values.PACKED_INTS_FIXED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          fi.docValues = null;\n          break;\n        case 1:\n          fi.docValues = Values.PACKED_INTS;\n          break;\n        case 2:\n          fi.docValues = Values.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.docValues = Values.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.docValues = Values.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.docValues = Values.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.docValues = Values.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.docValues = Values.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.docValues = Values.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.docValues = Values.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          fi.docValues = Values.PACKED_INTS_FIXED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          fi.docValues = null;\n          break;\n        case 1:\n          fi.docValues = Values.PACKED_INTS;\n          break;\n        case 2:\n          fi.docValues = Values.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.docValues = Values.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.docValues = Values.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.docValues = Values.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.docValues = Values.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.docValues = Values.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.docValues = Values.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.docValues = Values.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          fi.docValues = Values.PACKED_INTS_FIXED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          fi.docValues = null;\n          break;\n        case 1:\n          fi.docValues = Values.PACKED_INTS;\n          break;\n        case 2:\n          fi.docValues = Values.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.docValues = Values.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.docValues = Values.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.docValues = Values.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.docValues = Values.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.docValues = Values.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.docValues = Values.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.docValues = Values.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          fi.docValues = null;\n          break;\n        case 1:\n          fi.docValues = Values.PACKED_INTS;\n          break;\n        case 2:\n          fi.docValues = Values.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.docValues = Values.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.docValues = Values.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.docValues = Values.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.docValues = Values.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.docValues = Values.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.docValues = Values.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.docValues = Values.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          fi.docValues = Values.PACKED_INTS_FIXED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2fc2eb37a1f19e90850f787d9e085950ebfa04","date":1291597075,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          fi.docValues = null;\n          break;\n        case 1:\n          fi.docValues = Type.PACKED_INTS;\n          break;\n        case 2:\n          fi.docValues = Type.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.docValues = Type.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.docValues = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.docValues = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.docValues = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.docValues = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.docValues = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.docValues = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          fi.docValues = null;\n          break;\n        case 1:\n          fi.docValues = Values.PACKED_INTS;\n          break;\n        case 2:\n          fi.docValues = Values.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.docValues = Values.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.docValues = Values.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.docValues = Values.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.docValues = Values.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.docValues = Values.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.docValues = Values.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.docValues = Values.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.PACKED_INTS;\n          break;\n        case 2:\n          docValuesType = Type.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          docValuesType = Type.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          fi.docValues = null;\n          break;\n        case 1:\n          fi.docValues = Type.PACKED_INTS;\n          break;\n        case 2:\n          fi.docValues = Type.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          fi.docValues = Type.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          fi.docValues = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          fi.docValues = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          fi.docValues = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          fi.docValues = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          fi.docValues = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          fi.docValues = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      \n      addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86c34ea6a885f625f2e464756450d45b72653ef3","date":1295256222,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }\n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85130289d2ed101fcc2d8798511c7c5b020ffab4","date":1297239859,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.INTS;\n          break;\n        case 2:\n          docValuesType = Type.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = Type.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.PACKED_INTS;\n          break;\n        case 2:\n          docValuesType = Type.SIMPLE_FLOAT_4BYTE;\n          break;\n        case 3:\n          docValuesType = Type.SIMPLE_FLOAT_8BYTE;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c7a8f7304b75b1528814c5820fa23a96816c27","date":1298314239,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }\n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14ec33385f6fbb6ce172882d14605790418a5d31","date":1298910796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.INTS;\n          break;\n        case 2:\n          docValuesType = Type.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = Type.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.INTS;\n          break;\n        case 2:\n          docValuesType = Type.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = Type.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo fi = addInternal(name, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n\n      fi.codecId = codecId;\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19ec8535092055101db3ede419e136b73d235ac","date":1302777181,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.INTS;\n          break;\n        case 2:\n          docValuesType = Type.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = Type.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.INTS;\n          break;\n        case 2:\n          docValuesType = Type.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = Type.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fe2fc74577855eadfb5eae3153c2fffdaaf791","date":1305237079,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.INTS;\n          break;\n        case 2:\n          docValuesType = Type.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = Type.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.INTS;\n          break;\n        case 2:\n          docValuesType = Type.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = Type.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39d51e9acac1e629cffe47855e85dc6dedc4754d","date":1305711497,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      Type docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = Type.INTS;\n          break;\n        case 2:\n          docValuesType = Type.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = Type.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = Type.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = Type.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = Type.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = Type.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = Type.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = Type.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 12:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 13:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;  \n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 12:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 13:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;  \n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 12:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 13:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;  \n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = StringHelper.intern(input.readString());\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2afd23a6f1242190c3409d8d81d5c5912d607fc9","date":1310477482,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_FLEX? input.readInt():i;\n      final int codecId = format <= FORMAT_FLEX? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      final IndexOptions indexOptions;\n      if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n        indexOptions = IndexOptions.DOCS_ONLY;\n      } else if ((bits & OMIT_POSITIONS) != 0) {\n        if (format <= FORMAT_OMIT_POSITIONS) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else {\n          throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format);\n        }\n      } else {\n        indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      }\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_FLEX) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 12:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 13:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;  \n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_PER_FIELD_CODEC? input.readInt():i;\n      final int codecId = format <= FORMAT_PER_FIELD_CODEC? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      boolean omitTermFreqAndPositions = (bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0;\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (omitTermFreqAndPositions) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && !omitTermFreqAndPositions;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_INDEX_VALUES) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 12:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 13:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;  \n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, omitTermFreqAndPositions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_FLEX? input.readInt():i;\n      final int codecId = format <= FORMAT_FLEX? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      final IndexOptions indexOptions;\n      if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n        indexOptions = IndexOptions.DOCS_ONLY;\n      } else if ((bits & OMIT_POSITIONS) != 0) {\n        if (format <= FORMAT_OMIT_POSITIONS) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else {\n          throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format);\n        }\n      } else {\n        indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      }\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_FLEX) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 8:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 9:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;\n        case 12:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 13:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_FLEX? input.readInt():i;\n      final int codecId = format <= FORMAT_FLEX? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      final IndexOptions indexOptions;\n      if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n        indexOptions = IndexOptions.DOCS_ONLY;\n      } else if ((bits & OMIT_POSITIONS) != 0) {\n        if (format <= FORMAT_OMIT_POSITIONS) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else {\n          throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format);\n        }\n      } else {\n        indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      }\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_FLEX) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 8:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 9:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 12:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 13:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;  \n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      final int fieldNumber = format <= FORMAT_FLEX? input.readInt():i;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      final IndexOptions indexOptions;\n      if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n        indexOptions = IndexOptions.DOCS_ONLY;\n      } else if ((bits & OMIT_POSITIONS) != 0) {\n        if (format <= FORMAT_OMIT_POSITIONS) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else {\n          throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format);\n        }\n      } else {\n        indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      }\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_FLEX) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 8:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 9:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;\n        case 12:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 13:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValuesType);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      // if this is a previous format codec 0 will be preflex!\n      final int fieldNumber = format <= FORMAT_FLEX? input.readInt():i;\n      final int codecId = format <= FORMAT_FLEX? input.readInt():0;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      final IndexOptions indexOptions;\n      if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n        indexOptions = IndexOptions.DOCS_ONLY;\n      } else if ((bits & OMIT_POSITIONS) != 0) {\n        if (format <= FORMAT_OMIT_POSITIONS) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else {\n          throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format);\n        }\n      } else {\n        indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      }\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_FLEX) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 8:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 9:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;\n        case 12:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 13:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      final FieldInfo addInternal = addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValuesType);\n      addInternal.setCodecId(codecId);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1efe3edca215dd9891cb42af283fed96f792ca0","date":1320428891,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      final int fieldNumber = format <= FORMAT_FLEX? input.readInt():i;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      final IndexOptions indexOptions;\n      if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n        indexOptions = IndexOptions.DOCS_ONLY;\n      } else if ((bits & OMIT_POSITIONS) != 0) {\n        if (format <= FORMAT_OMIT_POSITIONS) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else {\n          throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n        }\n      } else {\n        indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      }\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_FLEX) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 8:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 9:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;\n        case 12:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 13:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValuesType);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n    }    \n  }\n\n","sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(fileName, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      final int fieldNumber = format <= FORMAT_FLEX? input.readInt():i;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      final IndexOptions indexOptions;\n      if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n        indexOptions = IndexOptions.DOCS_ONLY;\n      } else if ((bits & OMIT_POSITIONS) != 0) {\n        if (format <= FORMAT_OMIT_POSITIONS) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else {\n          throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format);\n        }\n      } else {\n        indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      }\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_FLEX) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 8:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 9:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;\n        case 12:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 13:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValuesType);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length());\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FieldInfos#read(IndexInput,String).mjava","sourceNew":null,"sourceOld":"  private void read(IndexInput input, String fileName) throws IOException {\n    format = input.readVInt();\n\n    if (format > FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n    if (format < FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n    }\n\n    final int size = input.readVInt(); //read in the size\n\n    for (int i = 0; i < size; i++) {\n      String name = input.readString();\n      final int fieldNumber = format <= FORMAT_FLEX? input.readInt():i;\n      byte bits = input.readByte();\n      boolean isIndexed = (bits & IS_INDEXED) != 0;\n      boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n      boolean storePositionsWithTermVector = (bits & STORE_POSITIONS_WITH_TERMVECTOR) != 0;\n      boolean storeOffsetWithTermVector = (bits & STORE_OFFSET_WITH_TERMVECTOR) != 0;\n      boolean omitNorms = (bits & OMIT_NORMS) != 0;\n      boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n      final IndexOptions indexOptions;\n      if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n        indexOptions = IndexOptions.DOCS_ONLY;\n      } else if ((bits & OMIT_POSITIONS) != 0) {\n        if (format <= FORMAT_OMIT_POSITIONS) {\n          indexOptions = IndexOptions.DOCS_AND_FREQS;\n        } else {\n          throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n        }\n      } else {\n        indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      }\n\n      // LUCENE-3027: past indices were able to write\n      // storePayloads=true when omitTFAP is also true,\n      // which is invalid.  We correct that, here:\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        storePayloads = false;\n      }\n      hasVectors |= storeTermVector;\n      hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n      ValueType docValuesType = null;\n      if (format <= FORMAT_FLEX) {\n        final byte b = input.readByte();\n        switch(b) {\n        case 0:\n          docValuesType = null;\n          break;\n        case 1:\n          docValuesType = ValueType.VAR_INTS;\n          break;\n        case 2:\n          docValuesType = ValueType.FLOAT_32;\n          break;\n        case 3:\n          docValuesType = ValueType.FLOAT_64;\n          break;\n        case 4:\n          docValuesType = ValueType.BYTES_FIXED_STRAIGHT;\n          break;\n        case 5:\n          docValuesType = ValueType.BYTES_FIXED_DEREF;\n          break;\n        case 6:\n          docValuesType = ValueType.BYTES_VAR_STRAIGHT;\n          break;\n        case 7:\n          docValuesType = ValueType.BYTES_VAR_DEREF;\n          break;\n        case 8:\n          docValuesType = ValueType.FIXED_INTS_16;\n          break;\n        case 9:\n          docValuesType = ValueType.FIXED_INTS_32;\n          break;\n        case 10:\n          docValuesType = ValueType.FIXED_INTS_64;\n          break;\n        case 11:\n          docValuesType = ValueType.FIXED_INTS_8;\n          break;\n        case 12:\n          docValuesType = ValueType.BYTES_FIXED_SORTED;\n          break;\n        case 13:\n          docValuesType = ValueType.BYTES_VAR_SORTED;\n          break;\n        \n        default:\n          throw new IllegalStateException(\"unhandled indexValues type \" + b);\n        }\n      }\n      addInternal(name, fieldNumber, isIndexed, storeTermVector, storePositionsWithTermVector, storeOffsetWithTermVector, omitNorms, storePayloads, indexOptions, docValuesType);\n    }\n\n    if (input.getFilePointer() != input.length()) {\n      throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n    }    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["e19ec8535092055101db3ede419e136b73d235ac"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["7b91922b55d15444d554721b352861d028eb8278"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"e19ec8535092055101db3ede419e136b73d235ac":["1224a4027481acce15495b03bce9b48b93b42722"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","39d51e9acac1e629cffe47855e85dc6dedc4754d"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","1224a4027481acce15495b03bce9b48b93b42722"],"14ec33385f6fbb6ce172882d14605790418a5d31":["b0c7a8f7304b75b1528814c5820fa23a96816c27"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["86c34ea6a885f625f2e464756450d45b72653ef3","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"1224a4027481acce15495b03bce9b48b93b42722":["14ec33385f6fbb6ce172882d14605790418a5d31"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","2e8d7ba2175f47e280231533f7d3016249cea88b"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"85a883878c0af761245ab048babc63d099f835f3":["39f3757037aa8f710c0cbf9a76a332de735f58b0","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","e19ec8535092055101db3ede419e136b73d235ac"],"3cc749c053615f5871f3b95715fe292f34e70a53":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["6267e1ce56c2eec111425690cd04e251b6f14952"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","0cd8367c3d48e4b63dee1895a261d4986c716bbb"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"7b91922b55d15444d554721b352861d028eb8278":["e128967bca58657bc0039d4bfe631e63e81f1977"],"6267e1ce56c2eec111425690cd04e251b6f14952":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["85a883878c0af761245ab048babc63d099f835f3"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"1eb46686a27187e42311e77666a2c7026f461ebc":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","e19ec8535092055101db3ede419e136b73d235ac"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["85130289d2ed101fcc2d8798511c7c5b020ffab4","1224a4027481acce15495b03bce9b48b93b42722"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","d3fe2fc74577855eadfb5eae3153c2fffdaaf791"],"86c34ea6a885f625f2e464756450d45b72653ef3":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"e128967bca58657bc0039d4bfe631e63e81f1977":["2afd23a6f1242190c3409d8d81d5c5912d607fc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"]},"commit2Childs":{"2afd23a6f1242190c3409d8d81d5c5912d607fc9":["e128967bca58657bc0039d4bfe631e63e81f1977"],"d3fe2fc74577855eadfb5eae3153c2fffdaaf791":["2e8d7ba2175f47e280231533f7d3016249cea88b","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a3776dccca01c11e7046323cfad46a3b4a471233"],"f1efe3edca215dd9891cb42af283fed96f792ca0":["3cc749c053615f5871f3b95715fe292f34e70a53"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["93c59ad5034eecd863f267bd75e1df7b8a51e427"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","85a883878c0af761245ab048babc63d099f835f3","ab5cb6a74aefb78aa0569857970b9151dfe2e787","b0c7a8f7304b75b1528814c5820fa23a96816c27"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["86c34ea6a885f625f2e464756450d45b72653ef3"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"e19ec8535092055101db3ede419e136b73d235ac":["d3fe2fc74577855eadfb5eae3153c2fffdaaf791","135621f3a0670a9394eb563224a3b76cc4dddc0f","1eb46686a27187e42311e77666a2c7026f461ebc"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"39d51e9acac1e629cffe47855e85dc6dedc4754d":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1eb46686a27187e42311e77666a2c7026f461ebc"],"14ec33385f6fbb6ce172882d14605790418a5d31":["1224a4027481acce15495b03bce9b48b93b42722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["39d51e9acac1e629cffe47855e85dc6dedc4754d"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1224a4027481acce15495b03bce9b48b93b42722":["e19ec8535092055101db3ede419e136b73d235ac","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6267e1ce56c2eec111425690cd04e251b6f14952"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["85a883878c0af761245ab048babc63d099f835f3"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"85a883878c0af761245ab048babc63d099f835f3":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0cd8367c3d48e4b63dee1895a261d4986c716bbb":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","01f60198ece724a6e96cd0b45f289cf42ff83d4f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"2553b00f699380c64959ccb27991289aae87be2e":[],"aa2fc2eb37a1f19e90850f787d9e085950ebfa04":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"7b91922b55d15444d554721b352861d028eb8278":["f1efe3edca215dd9891cb42af283fed96f792ca0"],"6267e1ce56c2eec111425690cd04e251b6f14952":["0cd8367c3d48e4b63dee1895a261d4986c716bbb","5f4e87790277826a2aea119328600dfb07761f32"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["aa2fc2eb37a1f19e90850f787d9e085950ebfa04"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2afd23a6f1242190c3409d8d81d5c5912d607fc9","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b0c7a8f7304b75b1528814c5820fa23a96816c27":["14ec33385f6fbb6ce172882d14605790418a5d31","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"86c34ea6a885f625f2e464756450d45b72653ef3":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"e128967bca58657bc0039d4bfe631e63e81f1977":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","1eb46686a27187e42311e77666a2c7026f461ebc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}