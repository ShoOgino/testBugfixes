{"path":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testContaining().mjava","commits":[{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testContaining().mjava","pathOld":"/dev/null","sourceNew":"  public void testContaining() throws IOException {\n    IntervalsSource source = Intervals.containing(\n        Intervals.ordered(Intervals.term(\"pease\"), Intervals.term(\"cold\")),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 5, 6, 21 },\n        { 0, 2, 6, 17 },\n        {},\n        { 3, 5 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 5, 20, 39);\n    MatchesIterator subs = mi.getSubMatches();\n    assertMatch(subs, 3, 3, 20, 25);\n    assertMatch(subs, 4, 4, 26, 34);\n    assertMatch(subs, 5, 5, 35, 39);\n    assertFalse(subs.next());\n    assertMatch(mi, 6, 21, 41, 118);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 21, 21, 114, 118);\n    assertFalse(subs.next());\n    assertFalse(mi.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"362cb5d910af28f1dadaddc4c7670d7d166b23c2","date":1547647156,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testContaining().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testContaining().mjava","sourceNew":"  public void testContaining() throws IOException {\n    IntervalsSource source = Intervals.containing(\n        Intervals.ordered(Intervals.term(\"pease\"), Intervals.term(\"cold\")),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 5, 6, 21 },\n        { 0, 2, 6, 17 },\n        {},\n        { 3, 5 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 5, 20, 39);\n    MatchesIterator subs = mi.getSubMatches();\n    assertMatch(subs, 3, 3, 20, 25);\n    assertMatch(subs, 4, 4, 26, 34);\n    assertMatch(subs, 5, 5, 35, 39);\n    assertFalse(subs.next());\n    assertMatch(mi, 6, 21, 41, 118);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 21, 21, 114, 118);\n    assertFalse(subs.next());\n    assertFalse(mi.next());\n    assertEquals(2, source.minExtent());\n  }\n\n","sourceOld":"  public void testContaining() throws IOException {\n    IntervalsSource source = Intervals.containing(\n        Intervals.ordered(Intervals.term(\"pease\"), Intervals.term(\"cold\")),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 5, 6, 21 },\n        { 0, 2, 6, 17 },\n        {},\n        { 3, 5 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 5, 20, 39);\n    MatchesIterator subs = mi.getSubMatches();\n    assertMatch(subs, 3, 3, 20, 25);\n    assertMatch(subs, 4, 4, 26, 34);\n    assertMatch(subs, 5, 5, 35, 39);\n    assertFalse(subs.next());\n    assertMatch(mi, 6, 21, 41, 118);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 21, 21, 114, 118);\n    assertFalse(subs.next());\n    assertFalse(mi.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/intervals/TestIntervals#testContaining().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/intervals/TestIntervals#testContaining().mjava","sourceNew":"  public void testContaining() throws IOException {\n    IntervalsSource source = Intervals.containing(\n        Intervals.ordered(Intervals.term(\"pease\"), Intervals.term(\"cold\")),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 5, 6, 21 },\n        { 0, 2, 6, 17 },\n        {},\n        { 3, 5 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 5, 20, 39);\n    MatchesIterator subs = mi.getSubMatches();\n    assertMatch(subs, 3, 3, 20, 25);\n    assertMatch(subs, 4, 4, 26, 34);\n    assertMatch(subs, 5, 5, 35, 39);\n    assertFalse(subs.next());\n    assertMatch(mi, 6, 21, 41, 118);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 21, 21, 114, 118);\n    assertFalse(subs.next());\n    assertFalse(mi.next());\n    assertEquals(2, source.minExtent());\n  }\n\n","sourceOld":"  public void testContaining() throws IOException {\n    IntervalsSource source = Intervals.containing(\n        Intervals.ordered(Intervals.term(\"pease\"), Intervals.term(\"cold\")),\n        Intervals.term(\"porridge\")\n    );\n    checkIntervals(source, \"field1\", 3, new int[][]{\n        {},\n        { 3, 5, 6, 21 },\n        { 0, 2, 6, 17 },\n        {},\n        { 3, 5 },\n        {}\n    });\n    MatchesIterator mi = getMatches(source, 1, \"field1\");\n    assertMatch(mi, 3, 5, 20, 39);\n    MatchesIterator subs = mi.getSubMatches();\n    assertMatch(subs, 3, 3, 20, 25);\n    assertMatch(subs, 4, 4, 26, 34);\n    assertMatch(subs, 5, 5, 35, 39);\n    assertFalse(subs.next());\n    assertMatch(mi, 6, 21, 41, 118);\n    subs = mi.getSubMatches();\n    assertMatch(subs, 6, 6, 41, 46);\n    assertMatch(subs, 7, 7, 47, 55);\n    assertMatch(subs, 21, 21, 114, 118);\n    assertFalse(subs.next());\n    assertFalse(mi.next());\n    assertEquals(2, source.minExtent());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["2375622520a4e480775e3104a2f9a423536755b4"],"2375622520a4e480775e3104a2f9a423536755b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"]},"commit2Childs":{"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2375622520a4e480775e3104a2f9a423536755b4"],"362cb5d910af28f1dadaddc4c7670d7d166b23c2":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"2375622520a4e480775e3104a2f9a423536755b4":["362cb5d910af28f1dadaddc4c7670d7d166b23c2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}