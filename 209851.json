{"path":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0","date":1322229341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      UnicodeUtil.UTF8toUTF16(term, spare);\n      queue.add(new SimpleFacets.CountPair<String,Integer>(spare.toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      queue.add(new SimpleFacets.CountPair<String,Integer>(term.utf8ToChars(spare).toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      UnicodeUtil.UTF8toUTF16(term, spare);\n      queue.add(new SimpleFacets.CountPair<String,Integer>(spare.toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      UnicodeUtil.UTF8toUTF16(term, spare);\n      queue.add(new SimpleFacets.CountPair<String,Integer>(spare.toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      UnicodeUtil.UTF8toUTF16(term, spare);\n      queue.add(new SimpleFacets.CountPair<String,Integer>(spare.toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      UnicodeUtil.UTF8toUTF16(term, spare);\n      queue.add(new SimpleFacets.CountPair<String,Integer>(spare.toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      UnicodeUtil.UTF8toUTF16(term, spare);\n      queue.add(new SimpleFacets.CountPair<>(spare.toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      UnicodeUtil.UTF8toUTF16(term, spare);\n      queue.add(new SimpleFacets.CountPair<String,Integer>(spare.toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/CountSortedFacetCollector[PerSegmentSingleValuedFaceting]#collect(BytesRef,int).mjava","sourceNew":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      spare.copyUTF8Bytes(term);\n      queue.add(new SimpleFacets.CountPair<>(spare.toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean collect(BytesRef term, int count) {\n    if (count > min) {\n      // NOTE: we use c>min rather than c>=min as an optimization because we are going in\n      // index order, so we already know that the keys are ordered.  This can be very\n      // important if a lot of the counts are repeated (like zero counts would be).\n      UnicodeUtil.UTF8toUTF16(term, spare);\n      queue.add(new SimpleFacets.CountPair<>(spare.toString(), count));\n      if (queue.size()>=maxsize) min=queue.last().val;\n    }\n    return false;\n  }\n\n","bugFix":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["c26f00b574427b55127e869b935845554afde1fa"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}