{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(RexCall).mjava","commits":[{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(RexCall).mjava","pathOld":"/dev/null","sourceNew":"    /** Translates a call to a binary operator, reversing arguments if necessary. */\n    private Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if(operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5cb41f0427fb7a75b0bfefe992561738c11fd80","date":1486576891,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(RexCall).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(RexCall).mjava","sourceNew":"    /**\n     * Translates a call to a binary operator, reversing arguments if necessary.\n     */\n    private Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n\n","sourceOld":"    /** Translates a call to a binary operator, reversing arguments if necessary. */\n    private Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if(operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateBinary(RexCall).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Translates a call to a binary operator, reversing arguments if necessary.\n     */\n    private Pair<String, RexLiteral> translateBinary(RexCall call) {\n      List<RexNode> operands = call.getOperands();\n      if (operands.size() != 2) {\n        throw new AssertionError(\"Invalid number of arguments - \" + operands.size());\n      }\n      final RexNode left = operands.get(0);\n      final RexNode right = operands.get(1);\n      final Pair<String, RexLiteral> a = translateBinary2(left, right);\n      if (a != null) {\n        return a;\n      }\n      final Pair<String, RexLiteral> b = translateBinary2(right, left);\n      if (b != null) {\n        return b;\n      }\n      throw new AssertionError(\"cannot translate call \" + call);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}