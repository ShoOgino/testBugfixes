{"path":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    UpdateHandler uhandler = core.getUpdateHandler();\n\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(\"distrib\", false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    UpdateHandler uhandler = core.getUpdateHandler();\n\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(\"distrib\", false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","pathOld":"/dev/null","sourceNew":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    UpdateHandler uhandler = core.getUpdateHandler();\n\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(\"distrib\", false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b834dd353486678973f4157b3ba402ac3a7ca88","date":1329782329,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","sourceNew":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(\"distrib\", false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","sourceOld":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    UpdateHandler uhandler = core.getUpdateHandler();\n\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(\"distrib\", false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","sourceNew":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(\"distrib\", false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","sourceOld":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    UpdateHandler uhandler = core.getUpdateHandler();\n\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(\"distrib\", false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","sourceNew":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(DISTRIB, false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","sourceOld":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(\"distrib\", false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","sourceNew":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(DISTRIB, false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","sourceOld":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(\"distrib\", false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","sourceNew":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(DISTRIB, false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","sourceOld":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(DISTRIB, false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","sourceNew":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(DISTRIB, false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","sourceOld":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreDescriptor().getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(DISTRIB, false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","date":1529486762,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","sourceNew":null,"sourceOld":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(DISTRIB, false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","sourceNew":null,"sourceOld":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(DISTRIB, false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/PeerSync#sync(SolrCore,List[String],int).mjava","sourceNew":null,"sourceOld":"  /** Requests and applies recent updates from peers */\n  public static void sync(SolrCore core, List<String> replicas, int nUpdates) {\n    ShardHandlerFactory shardHandlerFactory = core.getCoreContainer().getShardHandlerFactory();\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n   \n    for (String replica : replicas) {\n      ShardRequest sreq = new ShardRequest();\n      sreq.shards = new String[]{replica};\n      sreq.params = new ModifiableSolrParams();\n      sreq.params.set(\"qt\",\"/get\");\n      sreq.params.set(DISTRIB, false);\n      sreq.params.set(\"getVersions\",nUpdates);\n      shardHandler.submit(sreq, replica, sreq.params);\n    }\n    \n    for (String replica : replicas) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["6f4c5d3859373c3a74734e85efa122b17514e3e8"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","6b834dd353486678973f4157b3ba402ac3a7ca88"],"6b834dd353486678973f4157b3ba402ac3a7ca88":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["6b834dd353486678973f4157b3ba402ac3a7ca88"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["01624b85de12fb02335810bdf325124e59040772"],"01624b85de12fb02335810bdf325124e59040772":["6b834dd353486678973f4157b3ba402ac3a7ca88"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"6b834dd353486678973f4157b3ba402ac3a7ca88":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"01624b85de12fb02335810bdf325124e59040772":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6b834dd353486678973f4157b3ba402ac3a7ca88","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"ba0e7b86ac6002d5286b4589d87b3c80bbcabdc7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","0d22ac6a4146774c1bc8400160fc0b6150294e92","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}