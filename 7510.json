{"path":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.IntersectEnum#IntersectEnum(CompiledAutomaton,BytesRef).mjava","sourceNew":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","sourceOld":"      // TODO: in some cases we can filter by length?  eg\n      // regexp foo*bar must be at least length 6 bytes\n      public IntersectEnum(CompiledAutomaton compiled, BytesRef startTerm) throws IOException {\n        // if (DEBUG) {\n        //   System.out.println(\"\\nintEnum.init seg=\" + segment + \" commonSuffix=\" + brToString(compiled.commonSuffixRef));\n        // }\n        runAutomaton = compiled.runAutomaton;\n        compiledAutomaton = compiled;\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int idx=0;idx<stack.length;idx++) {\n          stack[idx] = new Frame(idx);\n        }\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        if (index == null) {\n          fstReader = null;\n        } else {\n          fstReader = index.getBytesReader(0);\n        }\n\n        // TODO: if the automaton is \"smallish\" we really\n        // should use the terms index to seek at least to\n        // the initial term and likely to subsequent terms\n        // (or, maybe just fallback to ATE for such cases).\n        // Else the seek cost of loading the frames will be\n        // too costly.\n\n        final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n        // Empty string prefix must have an output in the index!\n        assert arc.isFinal();\n\n        // Special pushFrame since it's the first one:\n        final Frame f = stack[0];\n        f.fp = f.fpOrig = rootBlockFP;\n        f.prefix = 0;\n        f.setState(runAutomaton.getInitialState());\n        f.arc = arc;\n        f.outputPrefix = arc.output;\n        f.load(rootCode);\n\n        // for assert:\n        assert setSavedStartTerm(startTerm);\n\n        currentFrame = f;\n        if (startTerm != null) {\n          seekToStartTerm(startTerm);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}