{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testDoInPlaceUpdateMerge().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testDoInPlaceUpdateMerge().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  /**\n   *  Test the @see {@link AtomicUpdateDocumentMerger#doInPlaceUpdateMerge(AddUpdateCommand,Set<String>)} \n   *  method is working fine\n   */\n  public void testDoInPlaceUpdateMerge() throws Exception {\n    long version1 = addAndGetVersion(sdoc(\"id\", \"1\", \"title_s\", \"first\"), null);\n    long version2 = addAndGetVersion(sdoc(\"id\", \"2\", \"title_s\", \"second\"), null);\n    long version3 = addAndGetVersion(sdoc(\"id\", \"3\", \"title_s\", \"third\"), null);\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='3']\");\n\n    // Adding a few in-place updates\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"set\", 200));\n\n    // Test the AUDM.doInPlaceUpdateMerge() method is working fine\n    try (SolrQueryRequest req = req()) {\n      AddUpdateCommand cmd = buildAddUpdateCommand(req, sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                             \"inplace_updatable_float\", map(\"inc\", 10)));\n      AtomicUpdateDocumentMerger docMerger = new AtomicUpdateDocumentMerger(req);\n      assertTrue(docMerger.doInPlaceUpdateMerge(cmd, AtomicUpdateDocumentMerger.computeInPlaceUpdatableFields(cmd)));\n      assertEquals(42L, cmd.getSolrInputDocument().getFieldValue(\"_version_\"));\n      assertEquals(42L, cmd.getSolrInputDocument().getFieldValue(\"_version_\"));\n      assertEquals(210f, cmd.getSolrInputDocument().getFieldValue(\"inplace_updatable_float\"));\n      // in-place merged doc shouldn't have non-inplace fields from the index/tlog\n      assertFalse(cmd.getSolrInputDocument().containsKey(\"title_s\"));\n      assertEquals(version1, cmd.prevVersion);\n    }\n    \n    // do a commit, and the same results should be repeated\n    assertU(commit(\"softCommit\", \"false\"));\n\n    // Test the AUDM.doInPlaceUpdateMerge() method is working fine\n    try (SolrQueryRequest req = req()) {\n      AddUpdateCommand cmd = buildAddUpdateCommand(req, sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                             \"inplace_updatable_float\", map(\"inc\", 10)));\n      AtomicUpdateDocumentMerger docMerger = new AtomicUpdateDocumentMerger(req);\n      assertTrue(docMerger.doInPlaceUpdateMerge(cmd, AtomicUpdateDocumentMerger.computeInPlaceUpdatableFields(cmd)));\n      assertEquals(42L, cmd.getSolrInputDocument().getFieldValue(\"_version_\"));\n      assertEquals(42L, cmd.getSolrInputDocument().getFieldValue(\"_version_\"));\n      assertEquals(210f, cmd.getSolrInputDocument().getFieldValue(\"inplace_updatable_float\"));\n      // in-place merged doc shouldn't have non-inplace fields from the index/tlog\n      assertFalse(cmd.getSolrInputDocument().containsKey(\"title_s\")); \n      assertEquals(version1, cmd.prevVersion);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesStandalone#testDoInPlaceUpdateMerge().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  /**\n   *  Test the @see {@link AtomicUpdateDocumentMerger#doInPlaceUpdateMerge(AddUpdateCommand,Set<String>)} \n   *  method is working fine\n   */\n  public void testDoInPlaceUpdateMerge() throws Exception {\n    long version1 = addAndGetVersion(sdoc(\"id\", \"1\", \"title_s\", \"first\"), null);\n    long version2 = addAndGetVersion(sdoc(\"id\", \"2\", \"title_s\", \"second\"), null);\n    long version3 = addAndGetVersion(sdoc(\"id\", \"3\", \"title_s\", \"third\"), null);\n    assertU(commit(\"softCommit\", \"false\"));\n    assertQ(req(\"q\", \"*:*\"), \"//*[@numFound='3']\");\n\n    // Adding a few in-place updates\n    version1 = addAndAssertVersion(version1, \"id\", \"1\", \"inplace_updatable_float\", map(\"set\", 200));\n\n    // Test the AUDM.doInPlaceUpdateMerge() method is working fine\n    try (SolrQueryRequest req = req()) {\n      AddUpdateCommand cmd = buildAddUpdateCommand(req, sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                             \"inplace_updatable_float\", map(\"inc\", 10)));\n      AtomicUpdateDocumentMerger docMerger = new AtomicUpdateDocumentMerger(req);\n      assertTrue(docMerger.doInPlaceUpdateMerge(cmd, AtomicUpdateDocumentMerger.computeInPlaceUpdatableFields(cmd)));\n      assertEquals(42L, cmd.getSolrInputDocument().getFieldValue(\"_version_\"));\n      assertEquals(42L, cmd.getSolrInputDocument().getFieldValue(\"_version_\"));\n      assertEquals(210f, cmd.getSolrInputDocument().getFieldValue(\"inplace_updatable_float\"));\n      // in-place merged doc shouldn't have non-inplace fields from the index/tlog\n      assertFalse(cmd.getSolrInputDocument().containsKey(\"title_s\"));\n      assertEquals(version1, cmd.prevVersion);\n    }\n    \n    // do a commit, and the same results should be repeated\n    assertU(commit(\"softCommit\", \"false\"));\n\n    // Test the AUDM.doInPlaceUpdateMerge() method is working fine\n    try (SolrQueryRequest req = req()) {\n      AddUpdateCommand cmd = buildAddUpdateCommand(req, sdoc(\"id\", \"1\", \"_version_\", 42L,\n                                                             \"inplace_updatable_float\", map(\"inc\", 10)));\n      AtomicUpdateDocumentMerger docMerger = new AtomicUpdateDocumentMerger(req);\n      assertTrue(docMerger.doInPlaceUpdateMerge(cmd, AtomicUpdateDocumentMerger.computeInPlaceUpdatableFields(cmd)));\n      assertEquals(42L, cmd.getSolrInputDocument().getFieldValue(\"_version_\"));\n      assertEquals(42L, cmd.getSolrInputDocument().getFieldValue(\"_version_\"));\n      assertEquals(210f, cmd.getSolrInputDocument().getFieldValue(\"inplace_updatable_float\"));\n      // in-place merged doc shouldn't have non-inplace fields from the index/tlog\n      assertFalse(cmd.getSolrInputDocument().containsKey(\"title_s\")); \n      assertEquals(version1, cmd.prevVersion);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["415bbbe7da8065dd3c477bdc3c703c6425622998"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}