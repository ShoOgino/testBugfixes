{"path":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, IndexSearcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","sourceNew":null,"sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Collection[Term],Searcher).mjava","sourceNew":null,"sourceOld":"  /**\n   * Computes a score factor for a phrase.\n   * \n   * <p>\n   * The default implementation sums the idf factor for\n   * each term in the phrase.\n   * \n   * @param terms the terms in the phrase\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf \n   *         score factor for the phrase and an explanation \n   *         for each term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(Collection<Term> terms, Searcher searcher) throws IOException {\n    final int max = searcher.maxDoc();\n    float idf = 0.0f;\n    final StringBuilder exp = new StringBuilder();\n    for (final Term term : terms ) {\n      final int df = searcher.docFreq(term);\n      idf += idf(df, max);\n      exp.append(\" \");\n      exp.append(term.text());\n      exp.append(\"=\");\n      exp.append(df);\n    }\n    final float fIdf = idf;\n    return new IDFExplanation() {\n      @Override\n      public float getIdf() {\n        return fIdf;\n      }\n      @Override\n      public String explain() {\n        return exp.toString();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}