{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean force) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, force);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d3774640fe0eb88aa05f4c2ed4a743aac84bc063","7cbb3fab3017187393e0834b8d7b315fe92ca422"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean force) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, force);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean force) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, force);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cbb3fab3017187393e0834b8d7b315fe92ca422","date":1329432375,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean force) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, force);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean force) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, force);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      tempSnapPuller = snapPuller;\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66c64e8cfded6a585100e6430238faaf416f3fea","date":1344964603,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean force) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, force);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean force) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, force);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean force) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, force);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3774640fe0eb88aa05f4c2ed4a743aac84bc063","date":1420906359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (tempSnapPuller != null && tempSnapPuller != snapPuller) {\n          tempSnapPuller.destroy();\n        }\n        \n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      } else {\n        tempSnapPuller = snapPuller;\n      }\n      return tempSnapPuller.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      tempSnapPuller = snapPuller;\n      if (masterUrl != null) {\n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      }\n      return tempSnapPuller.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (tempSnapPuller != null && tempSnapPuller != snapPuller) {\n          tempSnapPuller.destroy();\n        }\n        \n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      } else {\n        tempSnapPuller = snapPuller;\n      }\n      return tempSnapPuller.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!snapPullLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (tempSnapPuller != null && tempSnapPuller != snapPuller) {\n          tempSnapPuller.destroy();\n        }\n        \n        NamedList<Object> nl = solrParams.toNamedList();\n        nl.remove(SnapPuller.POLL_INTERVAL);\n        tempSnapPuller = new SnapPuller(nl, this, core);\n      } else {\n        tempSnapPuller = snapPuller;\n      }\n      return tempSnapPuller.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"SnapPull failed \", e);\n    } finally {\n      if (snapPuller != null) {\n        tempSnapPuller = snapPuller;\n      }\n      snapPullLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(core, forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        \n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c641347aa34a81b8c172fd46691e3cba6357a6f","date":1490409984,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        \n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5f6959c652bdf332fe98fc9180b54095a4053ae","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","sourceOld":"  public boolean doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return false;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        \n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    if (core.getCoreContainer().isShutDown()) {\n      LOG.warn(\"I was asked to replicate but CoreContainer is shutting down\");\n      return IndexFetchResult.CONTAINER_IS_SHUTTING_DOWN; \n    }\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","sourceOld":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    if (core.getCoreContainer().isShutDown()) {\n      LOG.warn(\"I was asked to replicate but CoreContainer is shutting down\");\n      return IndexFetchResult.CONTAINER_IS_SHUTTING_DOWN; \n    }\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","sourceOld":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    if (core.getCoreContainer().isShutDown()) {\n      log.warn(\"I was asked to replicate but CoreContainer is shutting down\");\n      return IndexFetchResult.CONTAINER_IS_SHUTTING_DOWN; \n    }\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(log, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","sourceOld":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    if (core.getCoreContainer().isShutDown()) {\n      LOG.warn(\"I was asked to replicate but CoreContainer is shutting down\");\n      return IndexFetchResult.CONTAINER_IS_SHUTTING_DOWN; \n    }\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(LOG, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String leaderUrl = solrParams == null ? null : solrParams.get(LEADER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    if (core.getCoreContainer().isShutDown()) {\n      log.warn(\"I was asked to replicate but CoreContainer is shutting down\");\n      return IndexFetchResult.CONTAINER_IS_SHUTTING_DOWN; \n    }\n    try {\n      if (leaderUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(log, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","sourceOld":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String masterUrl = solrParams == null ? null : solrParams.get(MASTER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    if (core.getCoreContainer().isShutDown()) {\n      log.warn(\"I was asked to replicate but CoreContainer is shutting down\");\n      return IndexFetchResult.CONTAINER_IS_SHUTTING_DOWN; \n    }\n    try {\n      if (masterUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(log, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d5304c831b8cb4f9b0cee8dfdfff201ec3fe481","date":1596664430,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#doFetch(SolrParams,boolean).mjava","sourceNew":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String leaderUrl = solrParams == null ? null : ReplicationHandler.getObjectWithBackwardCompatibility(solrParams, LEADER_URL, LEGACY_LEADER_URL, null);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    if (core.getCoreContainer().isShutDown()) {\n      log.warn(\"I was asked to replicate but CoreContainer is shutting down\");\n      return IndexFetchResult.CONTAINER_IS_SHUTTING_DOWN; \n    }\n    try {\n      if (leaderUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(log, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","sourceOld":"  public IndexFetchResult doFetch(SolrParams solrParams, boolean forceReplication) {\n    String leaderUrl = solrParams == null ? null : solrParams.get(LEADER_URL);\n    if (!indexFetchLock.tryLock())\n      return IndexFetchResult.LOCK_OBTAIN_FAILED;\n    if (core.getCoreContainer().isShutDown()) {\n      log.warn(\"I was asked to replicate but CoreContainer is shutting down\");\n      return IndexFetchResult.CONTAINER_IS_SHUTTING_DOWN; \n    }\n    try {\n      if (leaderUrl != null) {\n        if (currentIndexFetcher != null && currentIndexFetcher != pollingIndexFetcher) {\n          currentIndexFetcher.destroy();\n        }\n        currentIndexFetcher = new IndexFetcher(solrParams.toNamedList(), this, core);\n      } else {\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      return currentIndexFetcher.fetchLatestIndex(forceReplication);\n    } catch (Exception e) {\n      SolrException.log(log, \"Index fetch failed \", e);\n      if (currentIndexFetcher != pollingIndexFetcher) {\n        currentIndexFetcher.destroy();\n      }\n      return new IndexFetchResult(IndexFetchResult.FAILED_BY_EXCEPTION_MESSAGE, false, e);\n    } finally {\n      if (pollingIndexFetcher != null) {\n       if( currentIndexFetcher != pollingIndexFetcher) {\n         currentIndexFetcher.destroy();\n       }\n        currentIndexFetcher = pollingIndexFetcher;\n      }\n      indexFetchLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66c64e8cfded6a585100e6430238faaf416f3fea":["7cbb3fab3017187393e0834b8d7b315fe92ca422"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7cbb3fab3017187393e0834b8d7b315fe92ca422":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"61c45e99cf6676da48f19d7511c73712ad39402b":["7c641347aa34a81b8c172fd46691e3cba6357a6f"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["7cbb3fab3017187393e0834b8d7b315fe92ca422","66c64e8cfded6a585100e6430238faaf416f3fea"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["7cbb3fab3017187393e0834b8d7b315fe92ca422","66c64e8cfded6a585100e6430238faaf416f3fea"],"d3774640fe0eb88aa05f4c2ed4a743aac84bc063":["66c64e8cfded6a585100e6430238faaf416f3fea"],"6d5304c831b8cb4f9b0cee8dfdfff201ec3fe481":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"7c641347aa34a81b8c172fd46691e3cba6357a6f":["859081acf00749f5dd462772c571d611d4a4d2db"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["d5f6959c652bdf332fe98fc9180b54095a4053ae","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d3774640fe0eb88aa05f4c2ed4a743aac84bc063","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"859081acf00749f5dd462772c571d611d4a4d2db":["7b13106276bb5ea342253dbf6aae7b675adb38d3"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["d3774640fe0eb88aa05f4c2ed4a743aac84bc063"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d5f6959c652bdf332fe98fc9180b54095a4053ae":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6d5304c831b8cb4f9b0cee8dfdfff201ec3fe481"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"66c64e8cfded6a585100e6430238faaf416f3fea":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","d3774640fe0eb88aa05f4c2ed4a743aac84bc063"],"7cbb3fab3017187393e0834b8d7b315fe92ca422":["66c64e8cfded6a585100e6430238faaf416f3fea","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["6d5304c831b8cb4f9b0cee8dfdfff201ec3fe481"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"d3774640fe0eb88aa05f4c2ed4a743aac84bc063":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"7c641347aa34a81b8c172fd46691e3cba6357a6f":["61c45e99cf6676da48f19d7511c73712ad39402b"],"6d5304c831b8cb4f9b0cee8dfdfff201ec3fe481":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"859081acf00749f5dd462772c571d611d4a4d2db":["7c641347aa34a81b8c172fd46691e3cba6357a6f","d5f6959c652bdf332fe98fc9180b54095a4053ae"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"d5f6959c652bdf332fe98fc9180b54095a4053ae":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["7cbb3fab3017187393e0834b8d7b315fe92ca422","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["859081acf00749f5dd462772c571d611d4a4d2db","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","e9017cf144952056066919f1ebc7897ff9bd71b1","0d22ac6a4146774c1bc8400160fc0b6150294e92","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}