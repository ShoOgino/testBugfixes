{"path":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null)\n        return;\n      initIndexOut();\n      // write all lengths to index\n      // write index\n      fill(docCount);\n      idxOut.writeVInt(address);\n      // nocommit -- allow not -1\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(address));\n      for (int i = 0; i < docCount; i++) {\n        w.add(docToAddress[i]);\n      }\n      w.finish();\n      bytesUsed.addAndGet(-(docToAddress.length)*RamUsageEstimator.NUM_BYTES_INT);\n      docToAddress = null;\n      super.finish(docCount);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null) {\n        return;\n      }\n      initIndexOut();\n      // write all lengths to index\n      // write index\n      fill(docCount);\n      idxOut.writeVInt(address);\n      // TODO(simonw): allow not -1\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(address));\n      for (int i = 0; i < docCount; i++) {\n        w.add(docToAddress[i]);\n      }\n      w.finish();\n      bytesUsed.addAndGet(-(docToAddress.length)*RamUsageEstimator.NUM_BYTES_INT);\n      docToAddress = null;\n      super.finish(docCount);\n    }\n\n","sourceOld":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null)\n        return;\n      initIndexOut();\n      // write all lengths to index\n      // write index\n      fill(docCount);\n      idxOut.writeVInt(address);\n      // nocommit -- allow not -1\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(address));\n      for (int i = 0; i < docCount; i++) {\n        w.add(docToAddress[i]);\n      }\n      w.finish();\n      bytesUsed.addAndGet(-(docToAddress.length)*RamUsageEstimator.NUM_BYTES_INT);\n      docToAddress = null;\n      super.finish(docCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca","date":1289932456,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null) {\n        return;\n      }\n      initIndexOut();\n      // write all lengths to index\n      // write index\n      fill(docCount);\n      idxOut.writeVInt(address);\n      // TODO(simonw): allow not -1\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(address));\n      for (int i = 0; i < docCount; i++) {\n        w.add(docToAddress[i]);\n      }\n      w.finish();\n      bytesUsed.addAndGet(-(docToAddress.length)\n          * RamUsageEstimator.NUM_BYTES_INT);\n      docToAddress = null;\n      super.finish(docCount);\n    }\n\n","sourceOld":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null) {\n        return;\n      }\n      initIndexOut();\n      // write all lengths to index\n      // write index\n      fill(docCount);\n      idxOut.writeVInt(address);\n      // TODO(simonw): allow not -1\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(address));\n      for (int i = 0; i < docCount; i++) {\n        w.add(docToAddress[i]);\n      }\n      w.finish();\n      bytesUsed.addAndGet(-(docToAddress.length)*RamUsageEstimator.NUM_BYTES_INT);\n      docToAddress = null;\n      super.finish(docCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null) {\n        return;\n      }\n      initIndexOut();\n      fill(docCount);\n      idxOut.writeVLong(address);\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(address));\n      for (int i = 0; i < docCount; i++) {\n        w.add(docToAddress[i]);\n      }\n      w.finish();\n      bytesUsed.addAndGet(-(docToAddress.length)\n          * RamUsageEstimator.NUM_BYTES_INT);\n      docToAddress = null;\n      super.finish(docCount);\n    }\n\n","sourceOld":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null) {\n        return;\n      }\n      initIndexOut();\n      // write all lengths to index\n      // write index\n      fill(docCount);\n      idxOut.writeVInt(address);\n      // TODO(simonw): allow not -1\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(address));\n      for (int i = 0; i < docCount; i++) {\n        w.add(docToAddress[i]);\n      }\n      w.finish();\n      bytesUsed.addAndGet(-(docToAddress.length)\n          * RamUsageEstimator.NUM_BYTES_INT);\n      docToAddress = null;\n      super.finish(docCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        super.finish(docCount);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      if (datOut == null) {\n        return;\n      }\n      initIndexOut();\n      fill(docCount);\n      idxOut.writeVLong(address);\n      final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n          PackedInts.bitsRequired(address));\n      for (int i = 0; i < docCount; i++) {\n        w.add(docToAddress[i]);\n      }\n      w.finish();\n      bytesUsed.addAndGet(-(docToAddress.length)\n          * RamUsageEstimator.NUM_BYTES_INT);\n      docToAddress = null;\n      super.finish(docCount);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9235b9d4454a46c066cda47fed7ca0a34e614529","date":1304414372,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        super.finish(docCount);\n      }\n    }\n\n","sourceOld":"    @Override\n    synchronized public void finish(int docCount) throws IOException {\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        super.finish(docCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        super.finish(docCount);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        super.finish(docCount);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut); \n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        IOUtils.closeSafely(!success, idxOut);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        super.finish(docCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut); \n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        IOUtils.closeSafely(!success, idxOut);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        super.finish(docCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut); \n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        IOUtils.closeSafely(!success, idxOut);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        super.finish(docCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        IOUtils.closeSafely(!success, datOut); \n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        IOUtils.closeSafely(!success, idxOut);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getOrCreateDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getOrCreateDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount+1; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount, address);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.add(address);\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getOrCreateDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","date":1320691430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getOrCreateDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(0));\n          // docCount+1 so we write sentinel\n          for (int i = 0; i < docCount+1; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount, address);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          // write sentinel\n          w.add(address);\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getOrCreateDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(0));\n          for (int i = 0; i < docCount+1; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount, address);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          w.add(address);\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9efc72acdea22f5285be0a808f8bba51bb8e367","date":1323217280,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getOrCreateDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(0));\n          // docCount+1 so we write sentinel\n          for (int i = 0; i < docCount+1; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount, address);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          // write sentinel\n          w.add(address);\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getOrCreateDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(0));\n          // docCount+1 so we write sentinel\n          for (int i = 0; i < docCount+1; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount, address);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          // write sentinel\n          w.add(address);\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/VarStraightBytesImpl.Writer#finish(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#finish(int).mjava","sourceNew":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getOrCreateDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(0));\n          // docCount+1 so we write sentinel\n          for (int i = 0; i < docCount+1; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount, address);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          // write sentinel\n          w.add(address);\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void finish(int docCount) throws IOException {\n      boolean success = false;\n      assert (!merge && datOut == null) || (merge && datOut != null); \n      final IndexOutput datOut = getOrCreateDataOut();\n      try {\n        if (!merge) {\n          // header is already written in getDataOut()\n          pool.writePool(datOut);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(datOut);\n        } else {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        pool.dropBuffersAndReset();\n      }\n\n      success = false;\n      final IndexOutput idxOut = getOrCreateIndexOut();\n      try {\n        if (lastDocID == -1) {\n          idxOut.writeVLong(0);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(0));\n          // docCount+1 so we write sentinel\n          for (int i = 0; i < docCount+1; i++) {\n            w.add(0);\n          }\n          w.finish();\n        } else {\n          fill(docCount, address);\n          idxOut.writeVLong(address);\n          final PackedInts.Writer w = PackedInts.getWriter(idxOut, docCount+1,\n              PackedInts.bitsRequired(address));\n          for (int i = 0; i < docCount; i++) {\n            w.add(docToAddress[i]);\n          }\n          // write sentinel\n          w.add(address);\n          w.finish();\n        }\n        success = true;\n      } finally {\n        bytesUsed.addAndGet(-(docToAddress.length)\n            * RamUsageEstimator.NUM_BYTES_INT);\n        docToAddress = null;\n        if (success) {\n          IOUtils.close(idxOut);\n        } else {\n          IOUtils.closeWhileHandlingException(idxOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["e128967bca58657bc0039d4bfe631e63e81f1977"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2d84736c4614acce6720851cbd2c823d7cd516e4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb","f9efc72acdea22f5285be0a808f8bba51bb8e367"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9235b9d4454a46c066cda47fed7ca0a34e614529"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e128967bca58657bc0039d4bfe631e63e81f1977":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["24230fe54121f9be9d85f2c2067536296785e421","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb":["f9efc72acdea22f5285be0a808f8bba51bb8e367","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["9235b9d4454a46c066cda47fed7ca0a34e614529"],"f9efc72acdea22f5285be0a808f8bba51bb8e367":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9235b9d4454a46c066cda47fed7ca0a34e614529":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f","2e8d7ba2175f47e280231533f7d3016249cea88b"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["e128967bca58657bc0039d4bfe631e63e81f1977"],"e128967bca58657bc0039d4bfe631e63e81f1977":["142daaa8f2b32cb229bd23e7aabd06d2a7d3c6fb"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}