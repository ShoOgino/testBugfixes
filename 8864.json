{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random.nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random.nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random.nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedDeletes freezeGlobalBuffer = queue\n            .freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e2b30bfb739689d33532e6b7d2d39582bd89a3a","date":1432237721,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.termCount);\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() throws Exception {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.deleteTerms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.deleteQueries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() throws Exception {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.deleteTerms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.deleteQueries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() throws Exception {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.deleteTerms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.deleteQueries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue();\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.terms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.queries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34067df01cbbefc83d0b316037fe4e10d89ba6a3","date":1559054674,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.deleteTerms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.deleteQueries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() throws Exception {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.deleteTerms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.deleteQueries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","date":1559371943,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocumentsWriterDeleteQueue#testAnyChanges().mjava","sourceNew":"  public void testAnyChanges() {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.deleteTerms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.deleteQueries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","sourceOld":"  public void testAnyChanges() throws Exception {\n    DocumentsWriterDeleteQueue queue = new DocumentsWriterDeleteQueue(null);\n    final int size = 200 + random().nextInt(500) * RANDOM_MULTIPLIER;\n    int termsSinceFreeze = 0;\n    int queriesSinceFreeze = 0;\n    for (int i = 0; i < size; i++) {\n      Term term = new Term(\"id\", \"\" + i);\n      if (random().nextInt(10) == 0) {\n        queue.addDelete(new TermQuery(term));\n        queriesSinceFreeze++;\n      } else {\n        queue.addDelete(term);\n        termsSinceFreeze++;\n      }\n      assertTrue(queue.anyChanges());\n      if (random().nextInt(5) == 0) {\n        FrozenBufferedUpdates freezeGlobalBuffer = queue.freezeGlobalBuffer(null);\n        assertEquals(termsSinceFreeze, freezeGlobalBuffer.deleteTerms.size());\n        assertEquals(queriesSinceFreeze, freezeGlobalBuffer.deleteQueries.length);\n        queriesSinceFreeze = 0;\n        termsSinceFreeze = 0;\n        assertFalse(queue.anyChanges());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["28288370235ed02234a64753cdbf0c6ec096304a","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"]},"commit2Childs":{"3e2b30bfb739689d33532e6b7d2d39582bd89a3a":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3e2b30bfb739689d33532e6b7d2d39582bd89a3a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"34067df01cbbefc83d0b316037fe4e10d89ba6a3":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["34b5cf63f4ff3d985a7fc828c1a0d1624b0176d9","34067df01cbbefc83d0b316037fe4e10d89ba6a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}