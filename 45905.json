{"path":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testIndexedBit().mjava","commits":[{"id":"98e72ae21226d6197488db1ac528982fa5a7809e","date":1314473708,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testIndexedBit().mjava","pathOld":"/dev/null","sourceNew":"  public void testIndexedBit() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    doc.add(new Field(\"field\", onlyStored, \"value\"));\n    doc.add(new Field(\"field2\", StringField.TYPE_STORED, \"value\"));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    assertFalse(r.document(0).getField(\"field\").indexed());\n    assertTrue(r.document(0).getField(\"field2\").indexed());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eb141f80638abdb6ffaa5149877f36ea39b6ad5","date":1315714072,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testIndexedBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testIndexedBit().mjava","sourceNew":"  public void testIndexedBit() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    doc.add(new Field(\"field\", onlyStored, \"value\"));\n    doc.add(new Field(\"field2\", StringField.TYPE_STORED, \"value\"));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    assertFalse(r.document(0).getField(\"field\").fieldType().indexed());\n    assertTrue(r.document(0).getField(\"field2\").fieldType().indexed());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexedBit() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    doc.add(new Field(\"field\", onlyStored, \"value\"));\n    doc.add(new Field(\"field2\", StringField.TYPE_STORED, \"value\"));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    assertFalse(r.document(0).getField(\"field\").indexed());\n    assertTrue(r.document(0).getField(\"field2\").indexed());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testIndexedBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testIndexedBit().mjava","sourceNew":"  public void testIndexedBit() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    doc.add(new Field(\"field\", \"value\", onlyStored));\n    doc.add(new Field(\"field2\", \"value\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    assertFalse(r.document(0).getField(\"field\").fieldType().indexed());\n    assertTrue(r.document(0).getField(\"field2\").fieldType().indexed());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexedBit() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    doc.add(new Field(\"field\", onlyStored, \"value\"));\n    doc.add(new Field(\"field2\", StringField.TYPE_STORED, \"value\"));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    assertFalse(r.document(0).getField(\"field\").fieldType().indexed());\n    assertTrue(r.document(0).getField(\"field2\").fieldType().indexed());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldsReader#testIndexedBit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFieldsReader#testIndexedBit().mjava","sourceNew":"  public void testIndexedBit() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    doc.add(new Field(\"field\", \"value\", onlyStored));\n    doc.add(new Field(\"field2\", \"value\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    assertFalse(r.document(0).getField(\"field\").fieldType().indexed());\n    assertTrue(r.document(0).getField(\"field2\").fieldType().indexed());\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testIndexedBit() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    Document doc = new Document();\n    FieldType onlyStored = new FieldType();\n    onlyStored.setStored(true);\n    doc.add(new Field(\"field\", \"value\", onlyStored));\n    doc.add(new Field(\"field2\", \"value\", StringField.TYPE_STORED));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n    assertFalse(r.document(0).getField(\"field\").fieldType().indexed());\n    assertTrue(r.document(0).getField(\"field2\").fieldType().indexed());\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["98e72ae21226d6197488db1ac528982fa5a7809e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98e72ae21226d6197488db1ac528982fa5a7809e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6eb141f80638abdb6ffaa5149877f36ea39b6ad5":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98e72ae21226d6197488db1ac528982fa5a7809e"],"98e72ae21226d6197488db1ac528982fa5a7809e":["6eb141f80638abdb6ffaa5149877f36ea39b6ad5"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}