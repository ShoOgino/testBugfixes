{"path":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","commits":[{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"/dev/null","sourceNew":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n\n      while(true) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n        } catch (IOException ioe) {\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1fd1f3c5c06036aebe90bc6da756a37d03f63884","a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1fd1f3c5c06036aebe90bc6da756a37d03f63884","date":1200847858,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n        } catch (IOException ioe) {\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n\n      while(true) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n        } catch (IOException ioe) {\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"bugIntro":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n        } catch (IOException ioe) {\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n        } catch (IOException ioe) {\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c","date":1206174221,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n        } catch (IOException ioe) {\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa4b66eb16ead894fa7130904af6ecf34331f050","date":1258198413,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 500;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7","date":1261132949,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      while(System.currentTimeMillis() < stopTime) {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      }\n    }\n\n","bugFix":["83bbb041887bbef07b8a98d08a0e1713ce137039","1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      doc.add(new Field(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5350389bf83287111f7760b9e3db3af8e3648474"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c":["e82780afe6097066eb5befb86e9432f077667e3d"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"1fd1f3c5c06036aebe90bc6da756a37d03f63884":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e82780afe6097066eb5befb86e9432f077667e3d":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"5350389bf83287111f7760b9e3db3af8e3648474":["81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["1fd1f3c5c06036aebe90bc6da756a37d03f63884"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c":["5350389bf83287111f7760b9e3db3af8e3648474"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"1fd1f3c5c06036aebe90bc6da756a37d03f63884":["e82780afe6097066eb5befb86e9432f077667e3d"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"e82780afe6097066eb5befb86e9432f077667e3d":["81d7aae5c7b7b8c1d8cf15b7fb78037b3a47f60c"],"5350389bf83287111f7760b9e3db3af8e3648474":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}