{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","commits":[{"id":"d8245af9f5e5ba8fa10735f962abe1f63eee5519","date":1509409042,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      return new Matrix(unitData);\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6","date":1516045834,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getRowLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      return new Matrix(unitData);\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getRowLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      return new Matrix(unitData);\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c469fe67f2da2a654eb8d709dfd239236f23a9a2","date":1570414680,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getRowLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getRowLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","date":1591579911,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/UnitEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      @SuppressWarnings({\"unchecked\"})\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList<>(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException{\n    if(null == value){\n      return null;\n    } else if(value instanceof Matrix) {\n      Matrix matrix = (Matrix) value;\n      double[][] data = matrix.getData();\n      double[][] unitData = new double[data.length][];\n      for(int i=0; i<data.length; i++) {\n        double[] row = data[i];\n        ArrayRealVector vector = new ArrayRealVector(row);\n        double[] unitRow = vector.unitVector().toArray();\n        unitData[i] = unitRow;\n      }\n\n      Matrix m = new Matrix(unitData);\n      m.setRowLabels(matrix.getRowLabels());\n      m.setColumnLabels(matrix.getColumnLabels());\n      return m;\n    } else if(value instanceof List) {\n      List<Number> values = (List<Number>)value;\n      double[] doubles = new double[values.size()];\n      for(int i=0; i<doubles.length; i++) {\n       doubles[i] = values.get(i).doubleValue();\n      }\n\n      ArrayRealVector vector = new ArrayRealVector(doubles);\n      RealVector unitVector = vector.unitVector();\n      List<Number> unitList = new ArrayList(doubles.length);\n      double[] unitArray = unitVector.toArray();\n      for(double d : unitArray) {\n        unitList.add(d);\n      }\n\n      return unitList;\n    } else {\n      throw new IOException(\"The unit function expects either a numeric array or matrix as a parameter\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["d8245af9f5e5ba8fa10735f962abe1f63eee5519","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["c469fe67f2da2a654eb8d709dfd239236f23a9a2"],"d8245af9f5e5ba8fa10735f962abe1f63eee5519":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["d8245af9f5e5ba8fa10735f962abe1f63eee5519"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885"],"b0b597c65628ca9e73913a07e81691f8229bae35":["b94236357aaa22b76c10629851fe4e376e0cea82","c469fe67f2da2a654eb8d709dfd239236f23a9a2"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["c469fe67f2da2a654eb8d709dfd239236f23a9a2","b0b597c65628ca9e73913a07e81691f8229bae35"],"df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8245af9f5e5ba8fa10735f962abe1f63eee5519":["b94236357aaa22b76c10629851fe4e376e0cea82","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["df1b3ced2f2a6c2031f5a5b0cfff01f7ae017885","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d8245af9f5e5ba8fa10735f962abe1f63eee5519"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}