{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.VaryingBPVReader#getLongValue(long).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.VaryingBPVReader#getLongValue(long).mjava","pathOld":"/dev/null","sourceNew":"    long getLongValue(long index) throws IOException {\n      final long block = index >>> shift;\n      if (this.block != block) {\n        int bitsPerValue;\n        do {\n          // If the needed block is the one directly following the current block, it is cheaper to avoid the cache\n          if (rankSlice != null && block != this.block+1) {\n            blockEndOffset = rankSlice.readLong(block*Long.BYTES)-entry.valuesOffset;\n            this.block = block-1;\n          }\n          offset = blockEndOffset;\n          bitsPerValue = slice.readByte(offset++);\n          delta = slice.readLong(offset);\n          offset += Long.BYTES;\n          if (bitsPerValue == 0) {\n            blockEndOffset = offset;\n          } else {\n            final int length = slice.readInt(offset);\n            offset += Integer.BYTES;\n            blockEndOffset = offset + length;\n          }\n          this.block++;\n        } while (this.block != block);\n        values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n      }\n      return mul * values.get(index & mask) + delta;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer.VaryingBPVReader#getLongValue(long).mjava","pathOld":"/dev/null","sourceNew":"    long getLongValue(long index) throws IOException {\n      final long block = index >>> shift;\n      if (this.block != block) {\n        int bitsPerValue;\n        do {\n          // If the needed block is the one directly following the current block, it is cheaper to avoid the cache\n          if (rankSlice != null && block != this.block+1) {\n            blockEndOffset = rankSlice.readLong(block*Long.BYTES)-entry.valuesOffset;\n            this.block = block-1;\n          }\n          offset = blockEndOffset;\n          bitsPerValue = slice.readByte(offset++);\n          delta = slice.readLong(offset);\n          offset += Long.BYTES;\n          if (bitsPerValue == 0) {\n            blockEndOffset = offset;\n          } else {\n            final int length = slice.readInt(offset);\n            offset += Integer.BYTES;\n            blockEndOffset = offset + length;\n          }\n          this.block++;\n        } while (this.block != block);\n        values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n      }\n      return mul * values.get(index & mask) + delta;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}