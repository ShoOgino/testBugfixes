{"path":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"\tprotected CoreParser(String defaultField,Analyzer analyzer, QueryParser parser)\n\t{\n\t\tthis.analyzer=analyzer;\n\t\tthis.parser=parser;\n\t\tfilterFactory = new FilterBuilderFactory();\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\n\t\t\n\t\t\n\t\tqueryFactory = new QueryBuilderFactory();\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\n\t\tqueryFactory.addBuilder(\"TermsQuery\",new TermsQueryBuilder(analyzer));\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\n\t\tif(parser!=null)\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(defaultField,analyzer));\t\t\t\n\t\t}\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\n\t\t\n\t\tfilterFactory.addBuilder(\"CachedFilter\",new CachedFilterBuilder(queryFactory,\n\t\t\t\t\t\t\tfilterFactory, maxNumCachedFilters));\n\t\t\n\t\t\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\n\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNear\",snb);\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\n\n    BoostingTermBuilder btb=new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\",btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\",btb);        \n\n    SpanTermBuilder snt=new SpanTermBuilder();\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\n\t\t\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanOr\",sot);\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\n\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\n\t\t\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\n\t\t\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNot\",snot);\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\n\t}\n\n","sourceOld":"\tprotected CoreParser(String defaultField,Analyzer analyzer, QueryParser parser)\n\t{\n\t\tthis.analyzer=analyzer;\n\t\tthis.parser=parser;\n\t\tfilterFactory = new FilterBuilderFactory();\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\n\t\t\n\t\t\n\t\tqueryFactory = new QueryBuilderFactory();\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\n\t\tqueryFactory.addBuilder(\"TermsQuery\",new TermsQueryBuilder(analyzer));\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\n\t\tif(parser!=null)\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(defaultField,analyzer));\t\t\t\n\t\t}\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\n\t\t\n\t\tfilterFactory.addBuilder(\"CachedFilter\",new CachedFilterBuilder(queryFactory,\n\t\t\t\t\t\t\tfilterFactory, maxNumCachedFilters));\n\t\t\n\t\t\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\n\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNear\",snb);\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\n\n    BoostingTermBuilder btb=new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\",btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\",btb);        \n\n    SpanTermBuilder snt=new SpanTermBuilder();\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\n\t\t\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanOr\",sot);\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\n\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\n\t\t\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\n\t\t\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNot\",snot);\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05bdab91555bc2728769812fa2e40814e900f661","date":1269650215,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"\tprotected CoreParser(String defaultField,Analyzer analyzer, QueryParser parser)\n\t{\n\t\tthis.analyzer=analyzer;\n\t\tthis.parser=parser;\n\t\tfilterFactory = new FilterBuilderFactory();\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\n\t\tfilterFactory.addBuilder(\"NumericRangeFilter\",new NumericRangeFilterBuilder());\n\t\t\n\t\tqueryFactory = new QueryBuilderFactory();\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\n\t\tqueryFactory.addBuilder(\"TermsQuery\",new TermsQueryBuilder(analyzer));\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\n\t\tqueryFactory.addBuilder(\"NumericRangeQuery\",new NumericRangeQueryBuilder());\n\t\tif(parser!=null)\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(defaultField,analyzer));\t\t\t\n\t\t}\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\n\t\t\n\t\tfilterFactory.addBuilder(\"CachedFilter\",new CachedFilterBuilder(queryFactory,\n\t\t\t\t\t\t\tfilterFactory, maxNumCachedFilters));\n\t\t\n\t\t\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\n\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNear\",snb);\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\n\n    BoostingTermBuilder btb=new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\",btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\",btb);        \n\n    SpanTermBuilder snt=new SpanTermBuilder();\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\n\t\t\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanOr\",sot);\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\n\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\n\t\t\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\n\t\t\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNot\",snot);\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\n\t}\n\n","sourceOld":"\tprotected CoreParser(String defaultField,Analyzer analyzer, QueryParser parser)\n\t{\n\t\tthis.analyzer=analyzer;\n\t\tthis.parser=parser;\n\t\tfilterFactory = new FilterBuilderFactory();\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\n\t\t\n\t\t\n\t\tqueryFactory = new QueryBuilderFactory();\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\n\t\tqueryFactory.addBuilder(\"TermsQuery\",new TermsQueryBuilder(analyzer));\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\n\t\tif(parser!=null)\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(defaultField,analyzer));\t\t\t\n\t\t}\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\n\t\t\n\t\tfilterFactory.addBuilder(\"CachedFilter\",new CachedFilterBuilder(queryFactory,\n\t\t\t\t\t\t\tfilterFactory, maxNumCachedFilters));\n\t\t\n\t\t\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\n\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNear\",snb);\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\n\n    BoostingTermBuilder btb=new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\",btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\",btb);        \n\n    SpanTermBuilder snt=new SpanTermBuilder();\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\n\t\t\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanOr\",sot);\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\n\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\n\t\t\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\n\t\t\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNot\",snot);\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2","date":1313460667,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"\tprotected CoreParser(String defaultField,Analyzer analyzer, QueryParser parser)\n\t{\n\t\tthis.analyzer=analyzer;\n\t\tthis.parser=parser;\n\t\tfilterFactory = new FilterBuilderFactory();\n\t\tfilterFactory.addBuilder(\"RangeFilter\",new RangeFilterBuilder());\n\t\tfilterFactory.addBuilder(\"NumericRangeFilter\",new NumericRangeFilterBuilder());\n\t\t\n\t\tqueryFactory = new QueryBuilderFactory();\n\t\tqueryFactory.addBuilder(\"TermQuery\",new TermQueryBuilder());\n\t\tqueryFactory.addBuilder(\"TermsQuery\",new TermsQueryBuilder(analyzer));\n\t\tqueryFactory.addBuilder(\"MatchAllDocsQuery\",new MatchAllDocsQueryBuilder());\n\t\tqueryFactory.addBuilder(\"BooleanQuery\",new BooleanQueryBuilder(queryFactory));\n\t\tqueryFactory.addBuilder(\"NumericRangeQuery\",new NumericRangeQueryBuilder());\n\t\tif(parser!=null)\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(parser));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tqueryFactory.addBuilder(\"UserQuery\",new UserInputQueryBuilder(defaultField,analyzer));\t\t\t\n\t\t}\n\t\tqueryFactory.addBuilder(\"FilteredQuery\",new FilteredQueryBuilder(filterFactory,queryFactory));\n\t\tqueryFactory.addBuilder(\"ConstantScoreQuery\",new ConstantScoreQueryBuilder(filterFactory));\n\t\t\n\t\tfilterFactory.addBuilder(\"CachedFilter\",new CachedFilterBuilder(queryFactory,\n\t\t\t\t\t\t\tfilterFactory, maxNumCachedFilters));\n\t\t\n\t\t\n\t\tSpanQueryBuilderFactory sqof=new SpanQueryBuilderFactory();\n\n\t\tSpanNearBuilder snb=new SpanNearBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNear\",snb);\n\t\tqueryFactory.addBuilder(\"SpanNear\",snb);\n\n    BoostingTermBuilder btb=new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\",btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\",btb);        \n\n    SpanTermBuilder snt=new SpanTermBuilder();\n\t\tsqof.addBuilder(\"SpanTerm\",snt);\n\t\tqueryFactory.addBuilder(\"SpanTerm\",snt);\n\t\t\n\t\tSpanOrBuilder sot=new SpanOrBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanOr\",sot);\n\t\tqueryFactory.addBuilder(\"SpanOr\",sot);\n\n\t\tSpanOrTermsBuilder sots=new SpanOrTermsBuilder(analyzer);\n\t\tsqof.addBuilder(\"SpanOrTerms\",sots);\n\t\tqueryFactory.addBuilder(\"SpanOrTerms\",sots);\t\t\n\t\t\n\t\tSpanFirstBuilder sft=new SpanFirstBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanFirst\",sft);\n\t\tqueryFactory.addBuilder(\"SpanFirst\",sft);\n\t\t\n\t\tSpanNotBuilder snot=new SpanNotBuilder(sqof);\n\t\tsqof.addBuilder(\"SpanNot\",snot);\n\t\tqueryFactory.addBuilder(\"SpanNot\",snot);\t\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","pathOld":"lucene/contrib/xml-query-parser/src/java/org/apache/lucene/xmlparser/CoreParser#CoreParser(String,Analyzer,QueryParser).mjava","sourceNew":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","sourceOld":"  protected CoreParser(String defaultField, Analyzer analyzer, QueryParser parser) {\n    this.analyzer = analyzer;\n    this.parser = parser;\n    filterFactory = new FilterBuilderFactory();\n    filterFactory.addBuilder(\"RangeFilter\", new RangeFilterBuilder());\n    filterFactory.addBuilder(\"NumericRangeFilter\", new NumericRangeFilterBuilder());\n\n    queryFactory = new QueryBuilderFactory();\n    queryFactory.addBuilder(\"TermQuery\", new TermQueryBuilder());\n    queryFactory.addBuilder(\"TermsQuery\", new TermsQueryBuilder(analyzer));\n    queryFactory.addBuilder(\"MatchAllDocsQuery\", new MatchAllDocsQueryBuilder());\n    queryFactory.addBuilder(\"BooleanQuery\", new BooleanQueryBuilder(queryFactory));\n    queryFactory.addBuilder(\"NumericRangeQuery\", new NumericRangeQueryBuilder());\n    if (parser != null) {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(parser));\n    } else {\n      queryFactory.addBuilder(\"UserQuery\", new UserInputQueryBuilder(defaultField, analyzer));\n    }\n    queryFactory.addBuilder(\"FilteredQuery\", new FilteredQueryBuilder(filterFactory, queryFactory));\n    queryFactory.addBuilder(\"ConstantScoreQuery\", new ConstantScoreQueryBuilder(filterFactory));\n\n    filterFactory.addBuilder(\"CachedFilter\", new CachedFilterBuilder(queryFactory,\n        filterFactory, maxNumCachedFilters));\n\n\n    SpanQueryBuilderFactory sqof = new SpanQueryBuilderFactory();\n\n    SpanNearBuilder snb = new SpanNearBuilder(sqof);\n    sqof.addBuilder(\"SpanNear\", snb);\n    queryFactory.addBuilder(\"SpanNear\", snb);\n\n    BoostingTermBuilder btb = new BoostingTermBuilder();\n    sqof.addBuilder(\"BoostingTermQuery\", btb);\n    queryFactory.addBuilder(\"BoostingTermQuery\", btb);\n\n    SpanTermBuilder snt = new SpanTermBuilder();\n    sqof.addBuilder(\"SpanTerm\", snt);\n    queryFactory.addBuilder(\"SpanTerm\", snt);\n\n    SpanOrBuilder sot = new SpanOrBuilder(sqof);\n    sqof.addBuilder(\"SpanOr\", sot);\n    queryFactory.addBuilder(\"SpanOr\", sot);\n\n    SpanOrTermsBuilder sots = new SpanOrTermsBuilder(analyzer);\n    sqof.addBuilder(\"SpanOrTerms\", sots);\n    queryFactory.addBuilder(\"SpanOrTerms\", sots);\n\n    SpanFirstBuilder sft = new SpanFirstBuilder(sqof);\n    sqof.addBuilder(\"SpanFirst\", sft);\n    queryFactory.addBuilder(\"SpanFirst\", sft);\n\n    SpanNotBuilder snot = new SpanNotBuilder(sqof);\n    sqof.addBuilder(\"SpanNot\", snot);\n    queryFactory.addBuilder(\"SpanNot\", snot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["05bdab91555bc2728769812fa2e40814e900f661"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"05bdab91555bc2728769812fa2e40814e900f661":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05bdab91555bc2728769812fa2e40814e900f661":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["05bdab91555bc2728769812fa2e40814e900f661"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}