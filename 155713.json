{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonRangeFacets#doDateFacets(Client).mjava","commits":[{"id":"a067727e528e9edadcd1704b7a3a10912e5d95c1","date":1584973258,"type":1,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonRangeFacets#doDateFacets(Client).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testDateFacets().mjava","sourceNew":"  private void doDateFacets(Client client) throws Exception {\n    client.deleteByQuery(\"*:*\", null);\n    boolean multiValue = random().nextBoolean();\n    String dateField = multiValue? \"b_dts\": \"b_dt\";\n    String dateRange = multiValue? \"b_drfs\": \"b_drf\";\n\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", dateField, \"2014-03-15T12:00:00Z\",\n        dateRange, \"2014-03-15T12:00:00Z\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", dateField, \"2015-01-03T00:00:00Z\",\n        dateRange, \"2015-01-03T00:00:00Z\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", dateField, \"2014-03-15T12:00:00Z\",\n        dateRange, \"2014-03-15T12:00:00Z\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", dateField, \"2015-01-03T00:00:00Z\",\n        dateRange, \"2015-01-03T00:00:00Z\"),null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", dateField, \"2014-03-15T12:00:00Z\",\n        dateRange, \"2014-03-15T12:00:00Z\"),null);\n    client.commit();\n\n    SolrParams p = params(\"q\", \"*:*\", \"rows\", \"0\");\n    for (String s : new String[]{dateField, dateRange}) {\n      client.testJQ(params(p, \"json.facet\"\n          , \"{date:{type : range, mincount:1, field :\" + s +\n              \",start:'2013-11-01T00:00:00Z',end:NOW,gap:'+90DAY'}}\"),\n          \"facets=={count:6, date:{buckets:\" +\n              \"[{val:\\\"2014-01-30T00:00:00Z\\\",count:3}, {val:\\\"2014-10-27T00:00:00Z\\\",count:2}]\" +\n              \"}}\");\n\n      // with ranges\n      client.testJQ(params(p, \"json.facet\"\n          , \"{date:{type : range, mincount:1, field :\" + s +\n              \",ranges:[{from:'2013-11-01T00:00:00Z', to:'2014-04-30T00:00:00Z'},\" +\n              \"{from:'2015-01-01T00:00:00Z', to:'2020-01-30T00:00:00Z'}]}}\"),\n          \"facets=={count:6, date:{buckets:\" +\n              \"[{val:\\\"[2013-11-01T00:00:00Z,2014-04-30T00:00:00Z)\\\",count:3},\" +\n              \" {val:\\\"[2015-01-01T00:00:00Z,2020-01-30T00:00:00Z)\\\",count:2}]\" +\n              \"}}\");\n    }\n\n    client.add(sdoc(\"id\", \"7\", \"cat_s\", \"B\", dateRange, \"[2010 TO 2014-05-21]\"),null);\n    client.commit();\n    client.testJQ(params(p, \"json.facet\"\n        , \"{date:{type : range, other:'before', field :\" + dateRange +\n            \",start:'2011-11-01T00:00:00Z',end:'2016-01-30T00:00:00Z',gap:'+1YEAR'}}\"),\n        \"facets=={count:7, date:{buckets:[\" +\n            \"{val:\\\"2011-11-01T00:00:00Z\\\",count:1}, {val:\\\"2012-11-01T00:00:00Z\\\",count:1},\" +\n            \"{val:\\\"2013-11-01T00:00:00Z\\\",count:4}, {val:\\\"2014-11-01T00:00:00Z\\\",count:2},\" +\n            \"{val:\\\"2015-11-01T00:00:00Z\\\",count:0}\" +\n            \"],before:{count:1}\" +\n            \"}}\");\n  }\n\n","sourceOld":"  @Test\n  public void testDateFacets() throws Exception {\n    Client client = Client.localClient();\n    client.deleteByQuery(\"*:*\", null);\n    boolean multiValue = random().nextBoolean();\n    String dateField = multiValue? \"b_dts\": \"b_dt\";\n    String dateRange = multiValue? \"b_drfs\": \"b_drf\";\n\n    client.add(sdoc(\"id\", \"1\", \"cat_s\", \"A\", dateField, \"2014-03-15T12:00:00Z\",\n        dateRange, \"2014-03-15T12:00:00Z\"), null);\n    client.add(sdoc(\"id\", \"2\", \"cat_s\", \"B\", dateField, \"2015-01-03T00:00:00Z\",\n        dateRange, \"2015-01-03T00:00:00Z\"), null);\n    client.add(sdoc(\"id\", \"3\"), null);\n    client.commit();\n    client.add(sdoc(\"id\", \"4\", \"cat_s\", \"A\", dateField, \"2014-03-15T12:00:00Z\",\n        dateRange, \"2014-03-15T12:00:00Z\"), null);\n    client.add(sdoc(\"id\", \"5\", \"cat_s\", \"B\", dateField, \"2015-01-03T00:00:00Z\",\n        dateRange, \"2015-01-03T00:00:00Z\"),null);\n    client.commit();\n    client.add(sdoc(\"id\", \"6\", \"cat_s\", \"B\", dateField, \"2014-03-15T12:00:00Z\",\n        dateRange, \"2014-03-15T12:00:00Z\"),null);\n    client.commit();\n\n    SolrParams p = params(\"q\", \"*:*\", \"rows\", \"0\");\n    for (String s : new String[]{dateField, dateRange}) {\n      client.testJQ(params(p, \"json.facet\"\n          , \"{date:{type : range, mincount:1, field :\" + s +\n              \",start:'2013-11-01T00:00:00Z',end:NOW,gap:'+90DAY'}}\"),\n          \"facets=={count:6, date:{buckets:\" +\n              \"[{val:\\\"2014-01-30T00:00:00Z\\\",count:3}, {val:\\\"2014-10-27T00:00:00Z\\\",count:2}]\" +\n              \"}}\");\n\n      // with ranges\n      client.testJQ(params(p, \"json.facet\"\n          , \"{date:{type : range, mincount:1, field :\" + s +\n              \",ranges:[{from:'2013-11-01T00:00:00Z', to:'2014-04-30T00:00:00Z'},\" +\n              \"{from:'2015-01-01T00:00:00Z', to:'2020-01-30T00:00:00Z'}]}}\"),\n          \"facets=={count:6, date:{buckets:\" +\n              \"[{val:\\\"[2013-11-01T00:00:00Z,2014-04-30T00:00:00Z)\\\",count:3},\" +\n              \" {val:\\\"[2015-01-01T00:00:00Z,2020-01-30T00:00:00Z)\\\",count:2}]\" +\n              \"}}\");\n    }\n\n    client.add(sdoc(\"id\", \"7\", \"cat_s\", \"B\", dateRange, \"[2010 TO 2014-05-21]\"),null);\n    client.commit();\n    client.testJQ(params(p, \"json.facet\"\n        , \"{date:{type : range, other:'before', field :\" + dateRange +\n            \",start:'2011-11-01T00:00:00Z',end:'2016-01-30T00:00:00Z',gap:'+1YEAR'}}\"),\n        \"facets=={count:7, date:{buckets:[\" +\n            \"{val:\\\"2011-11-01T00:00:00Z\\\",count:1}, {val:\\\"2012-11-01T00:00:00Z\\\",count:1},\" +\n            \"{val:\\\"2013-11-01T00:00:00Z\\\",count:4}, {val:\\\"2014-11-01T00:00:00Z\\\",count:2},\" +\n            \"{val:\\\"2015-11-01T00:00:00Z\\\",count:0}\" +\n            \"],before:{count:1}\" +\n            \"}}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a067727e528e9edadcd1704b7a3a10912e5d95c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a067727e528e9edadcd1704b7a3a10912e5d95c1"],"a067727e528e9edadcd1704b7a3a10912e5d95c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}