{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","commits":[{"id":"046829b17e246624c179b94d5a20cb53fa945e87","date":1367880720,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#parseWithAnalyzingQueryParser(String,Analyzer).mjava","sourceNew":"  private Query getAnalyzedQuery(String s, Analyzer a, boolean allowLeadingWildcard) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, a);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q;\n  }\n\n","sourceOld":"  private String parseWithAnalyzingQueryParser(String s, Analyzer a) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, \"field\", a);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q.toString(\"field\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","sourceNew":"  private Query getAnalyzedQuery(String s, Analyzer a, boolean allowLeadingWildcard) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q;\n  }\n\n","sourceOld":"  private Query getAnalyzedQuery(String s, Analyzer a, boolean allowLeadingWildcard) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, a);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","sourceNew":"  private Query getAnalyzedQuery(String s, Analyzer a, boolean allowLeadingWildcard) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, a);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q;\n  }\n\n","sourceOld":"  private Query getAnalyzedQuery(String s, Analyzer a, boolean allowLeadingWildcard) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","sourceNew":"  private Query getAnalyzedQuery(String s, Analyzer a, boolean allowLeadingWildcard) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q;\n  }\n\n","sourceOld":"  private Query getAnalyzedQuery(String s, Analyzer a, boolean allowLeadingWildcard) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(TEST_VERSION_CURRENT, FIELD, a);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","sourceNew":null,"sourceOld":"  private Query getAnalyzedQuery(String s, Analyzer a, boolean allowLeadingWildcard) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#getAnalyzedQuery(String,Analyzer,boolean).mjava","sourceNew":null,"sourceOld":"  private Query getAnalyzedQuery(String s, Analyzer a, boolean allowLeadingWildcard) throws ParseException {\n    AnalyzingQueryParser qp = new AnalyzingQueryParser(FIELD, a);\n    qp.setAllowLeadingWildcard(allowLeadingWildcard);\n    org.apache.lucene.search.Query q = qp.parse(s);\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["046829b17e246624c179b94d5a20cb53fa945e87"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["379db3ad24c4f0214f30a122265a6d6be003a99d","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"046829b17e246624c179b94d5a20cb53fa945e87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["046829b17e246624c179b94d5a20cb53fa945e87"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"046829b17e246624c179b94d5a20cb53fa945e87":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}