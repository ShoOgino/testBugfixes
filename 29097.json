{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request);\n    ExecutorService pool = Executors.newFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request);\n    ExecutorService pool = Executors.newFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f","date":1425902085,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = Executors.newFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request);\n    ExecutorService pool = Executors.newFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = Executors.newFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request);\n    ExecutorService pool = Executors.newFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5af3afeddbb803fb785098176e6e177c34261b","date":1428905393,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = Executors.newFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95","date":1429031018,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, processor));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, processor));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(new Callable<NamedList<Object>>(){\n\n        @Override\n        public NamedList<Object> call() throws Exception {\n          return executeMethod(method, processor);\n        }});\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","date":1497937593,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, processor, isV2ApiRequest(request)));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, processor));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, processor, isV2ApiRequest(request)));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, processor));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, processor, isV2ApiRequest(request)));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, processor));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, request.getUserPrincipal(), processor, isV2ApiRequest(request)));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, processor, isV2ApiRequest(request)));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, request.getUserPrincipal(), processor, isV2ApiRequest(request)));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrjNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, request.getUserPrincipal(), processor, isV2ApiRequest(request)));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#httpUriRequest(SolrRequest,ResponseParser).mjava","sourceNew":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(@SuppressWarnings({\"rawtypes\"})final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, request.getUserPrincipal(), processor, isV2ApiRequest(request)));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","sourceOld":"  /**\n   * @lucene.experimental\n   */\n  public HttpUriRequestResponse httpUriRequest(final SolrRequest request, final ResponseParser processor) throws SolrServerException, IOException {\n    HttpUriRequestResponse mrr = new HttpUriRequestResponse();\n    final HttpRequestBase method = createMethod(request, null);\n    ExecutorService pool = ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrNamedThreadFactory(\"httpUriRequest\"));\n    try {\n      MDC.put(\"HttpSolrClient.url\", baseUrl);\n      mrr.future = pool.submit(() -> executeMethod(method, request.getUserPrincipal(), processor, isV2ApiRequest(request)));\n \n    } finally {\n      pool.shutdown();\n      MDC.remove(\"HttpSolrClient.url\");\n    }\n    assert method != null;\n    mrr.httpUriRequest = method;\n    return mrr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["28288370235ed02234a64753cdbf0c6ec096304a"],"043df2e9a841864922c32756a44c939ed768cb89":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["cb5af3afeddbb803fb785098176e6e177c34261b"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["b6284684320a9808c41a5e43de958b2da22f89bd"],"28288370235ed02234a64753cdbf0c6ec096304a":["b6284684320a9808c41a5e43de958b2da22f89bd","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"b6284684320a9808c41a5e43de958b2da22f89bd":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95","043df2e9a841864922c32756a44c939ed768cb89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"cb5af3afeddbb803fb785098176e6e177c34261b":["5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b6284684320a9808c41a5e43de958b2da22f89bd","2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"6a96b173f2f573ac82bc8279dfdd3cbe2b948f95":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b6284684320a9808c41a5e43de958b2da22f89bd":["2479a9c66c0c9b8a0ab8e314f035cd9e8e75d556","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"cb5af3afeddbb803fb785098176e6e177c34261b":["6a96b173f2f573ac82bc8279dfdd3cbe2b948f95"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cb5af3afeddbb803fb785098176e6e177c34261b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}