{"path":"src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","pathOld":"/dev/null","sourceNew":"  static Integer readInterval(String interval) {\n    Pattern pattern = Pattern.compile(INTERVAL_PATTERN);\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = pattern.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d257c3ca43db8512b1ad7e23069b85edf9a8622","date":1229276781,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":"  static Integer readInterval(String interval) {\n    Pattern pattern = Pattern.compile(INTERVAL_PATTERN);\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = pattern.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccbcb7918d530f48065fa7fcee0970a0199cdef9","date":1229277416,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":"  static Integer readInterval(String interval) {\n    Pattern pattern = Pattern.compile(INTERVAL_PATTERN);\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = pattern.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6530d2b97751fd7c5ff99ef131f92a6b3789cb57","date":1229515607,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":"  static Integer readInterval(String interval) {\n    Pattern pattern = Pattern.compile(INTERVAL_PATTERN);\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = pattern.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#readInterval(String).mjava","sourceNew":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","sourceOld":"  static Integer readInterval(String interval) {\n    if (interval == null)\n      return null;\n    int result = 0;\n    if (interval != null) {\n      Matcher m = INTERVAL_PATTERN.matcher(interval.trim());\n      if (m.find()) {\n        String hr = m.group(1);\n        String min = m.group(2);\n        String sec = m.group(3);\n        result = 0;\n        try {\n          if (sec != null && sec.length() > 0)\n            result += Integer.parseInt(sec);\n          if (min != null && min.length() > 0)\n            result += (60 * Integer.parseInt(min));\n          if (hr != null && hr.length() > 0)\n            result += (60 * 60 * Integer.parseInt(hr));\n          result *= 1000;\n        } catch (NumberFormatException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  INTERVAL_ERR_MSG);\n        }\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                INTERVAL_ERR_MSG);\n      }\n\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6530d2b97751fd7c5ff99ef131f92a6b3789cb57":["ccbcb7918d530f48065fa7fcee0970a0199cdef9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["6530d2b97751fd7c5ff99ef131f92a6b3789cb57"],"5d257c3ca43db8512b1ad7e23069b85edf9a8622":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"ccbcb7918d530f48065fa7fcee0970a0199cdef9":["5d257c3ca43db8512b1ad7e23069b85edf9a8622"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["5d257c3ca43db8512b1ad7e23069b85edf9a8622"],"6530d2b97751fd7c5ff99ef131f92a6b3789cb57":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"5d257c3ca43db8512b1ad7e23069b85edf9a8622":["ccbcb7918d530f48065fa7fcee0970a0199cdef9"],"ccbcb7918d530f48065fa7fcee0970a0199cdef9":["6530d2b97751fd7c5ff99ef131f92a6b3789cb57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}