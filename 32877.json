{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":"  public static void verifyEquals(Document d1, Document d2) {\n    List ff1 = d1.getFields();\n    List ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = (Fieldable)ff1.get(i);\n      Fieldable f2 = (Fieldable)ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n        //TODO\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List ff1 = d1.getFields();\n    List ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = (Fieldable)ff1.get(i);\n      Fieldable f2 = (Fieldable)ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n        //TODO\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Document,Document).mjava","sourceNew":null,"sourceOld":"  public static void verifyEquals(Document d1, Document d2) {\n    List ff1 = d1.getFields();\n    List ff2 = d2.getFields();\n\n    Collections.sort(ff1, fieldNameComparator);\n    Collections.sort(ff2, fieldNameComparator);\n\n    if (ff1.size() != ff2.size()) {\n      System.out.println(ff1);\n      System.out.println(ff2);\n      assertEquals(ff1.size(), ff2.size());\n    }\n\n\n    for (int i=0; i<ff1.size(); i++) {\n      Fieldable f1 = (Fieldable)ff1.get(i);\n      Fieldable f2 = (Fieldable)ff2.get(i);\n      if (f1.isBinary()) {\n        assert(f2.isBinary());\n        //TODO\n      } else {\n        String s1 = f1.stringValue();\n        String s2 = f2.stringValue();\n        if (!s1.equals(s2)) {\n          // print out whole doc on error\n          System.out.println(ff1);\n          System.out.println(ff2);          \n          assertEquals(s1,s2);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}