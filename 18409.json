{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {\n    this.solrServer = solrClient;\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Add commands, client: \" + solrClient);\n\n    vadd(\"doc1\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc2\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    vadd(\"doc3\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc4\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    commit(SOURCE_COLLECTION);\n\n    // versions are preserved and verifiable both by query and by real-time get\n    doQuery(solrClient, \"doc1,10,doc2,11,doc3,10,doc4,11\", \"q\", \"*:*\");\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    vadd(\"doc2\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc3\", 9, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"9\");\n    vadd(\"doc4\", 8, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"8\");\n\n    // lower versions are ignored\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc2\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc3\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc4\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n\n    // higher versions are accepted\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"12,12,12,12\");\n\n    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)\n    vaddFail(\"doc1\", 13, 409);\n    vaddFail(\"doc2\", 13, 409);\n    vaddFail(\"doc3\", 13, 409);\n\n    commit(SOURCE_COLLECTION);\n\n    // versions are still as they were\n    doQuery(solrClient, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // query all shard replicas individually\n    doQueryShardReplica(SHARD1, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // optimistic locking update\n    vadd(\"doc4\", 12);\n    commit(SOURCE_COLLECTION);\n\n    QueryResponse rsp = solrClient.query(params(\"qt\", \"/get\", \"ids\", \"doc4\"));\n    long version = (long) rsp.getResults().get(0).get(vfield);\n\n    // update accepted and a new version number was generated\n    assertTrue(version > 1_000_000_000_000l);\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Delete commands\");\n\n    // send a delete update with an older version number\n    vdelete(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    // must ignore the delete\n    doRealTimeGet(\"doc1\", \"12\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc1\", 13, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"13\");\n    // must be deleted\n    doRealTimeGet(\"doc1\", \"\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc4\", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"\" + (version + 1));\n    // must be deleted\n    doRealTimeGet(\"doc4\", \"\");\n\n    commit(SOURCE_COLLECTION);\n\n    // query each shard replica individually\n    doQueryShardReplica(SHARD1, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    // version conflict thanks to optimistic locking\n    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client\n      vdeleteFail(\"doc2\", 50, 409);\n\n    // cleanup after ourselves for the next run\n    // deleteByQuery should work as usual with the CDCR_UPDATE param\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(1));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version lower than anything else should have no effect\n    doQuery(solrClient, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(51));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version higher than everything else should delete all remaining docs\n    doQuery(solrClient, \"\", \"q\", \"*:*\");\n\n    // check that replicas are as expected too\n    doQueryShardReplica(SHARD1, \"\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"\", \"q\", \"*:*\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","sourceNew":"  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {\n    this.solrServer = solrClient;\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Add commands, client: \" + solrClient);\n\n    vadd(\"doc1\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc2\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    vadd(\"doc3\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc4\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    commit(SOURCE_COLLECTION);\n\n    // versions are preserved and verifiable both by query and by real-time get\n    doQuery(solrClient, \"doc1,10,doc2,11,doc3,10,doc4,11\", \"q\", \"*:*\");\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    vadd(\"doc2\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc3\", 9, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"9\");\n    vadd(\"doc4\", 8, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"8\");\n\n    // lower versions are ignored\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc2\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc3\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc4\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n\n    // higher versions are accepted\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"12,12,12,12\");\n\n    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)\n    vaddFail(\"doc1\", 13, 409);\n    vaddFail(\"doc2\", 13, 409);\n    vaddFail(\"doc3\", 13, 409);\n\n    commit(SOURCE_COLLECTION);\n\n    // versions are still as they were\n    doQuery(solrClient, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // query all shard replicas individually\n    doQueryShardReplica(SHARD1, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // optimistic locking update\n    vadd(\"doc4\", 12);\n    commit(SOURCE_COLLECTION);\n\n    QueryResponse rsp = solrClient.query(params(\"qt\", \"/get\", \"ids\", \"doc4\"));\n    long version = (long) rsp.getResults().get(0).get(vfield);\n\n    // update accepted and a new version number was generated\n    assertTrue(version > 1_000_000_000_000l);\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Delete commands\");\n\n    // send a delete update with an older version number\n    vdelete(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    // must ignore the delete\n    doRealTimeGet(\"doc1\", \"12\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc1\", 13, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"13\");\n    // must be deleted\n    doRealTimeGet(\"doc1\", \"\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc4\", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"\" + (version + 1));\n    // must be deleted\n    doRealTimeGet(\"doc4\", \"\");\n\n    commit(SOURCE_COLLECTION);\n\n    // query each shard replica individually\n    doQueryShardReplica(SHARD1, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    // version conflict thanks to optimistic locking\n    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client\n      vdeleteFail(\"doc2\", 50, 409);\n\n    // cleanup after ourselves for the next run\n    // deleteByQuery should work as usual with the CDCR_UPDATE param\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(1));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version lower than anything else should have no effect\n    doQuery(solrClient, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(51));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version higher than everything else should delete all remaining docs\n    doQuery(solrClient, \"\", \"q\", \"*:*\");\n\n    // check that replicas are as expected too\n    doQueryShardReplica(SHARD1, \"\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"\", \"q\", \"*:*\");\n  }\n\n","sourceOld":"  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {\n    this.solrServer = solrClient;\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Add commands, client: \" + solrClient);\n\n    vadd(\"doc1\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc2\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    vadd(\"doc3\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc4\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    commit(SOURCE_COLLECTION);\n\n    // versions are preserved and verifiable both by query and by real-time get\n    doQuery(solrClient, \"doc1,10,doc2,11,doc3,10,doc4,11\", \"q\", \"*:*\");\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    vadd(\"doc2\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc3\", 9, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"9\");\n    vadd(\"doc4\", 8, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"8\");\n\n    // lower versions are ignored\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc2\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc3\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc4\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n\n    // higher versions are accepted\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"12,12,12,12\");\n\n    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)\n    vaddFail(\"doc1\", 13, 409);\n    vaddFail(\"doc2\", 13, 409);\n    vaddFail(\"doc3\", 13, 409);\n\n    commit(SOURCE_COLLECTION);\n\n    // versions are still as they were\n    doQuery(solrClient, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // query all shard replicas individually\n    doQueryShardReplica(SHARD1, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // optimistic locking update\n    vadd(\"doc4\", 12);\n    commit(SOURCE_COLLECTION);\n\n    QueryResponse rsp = solrClient.query(params(\"qt\", \"/get\", \"ids\", \"doc4\"));\n    long version = (long) rsp.getResults().get(0).get(vfield);\n\n    // update accepted and a new version number was generated\n    assertTrue(version > 1_000_000_000_000l);\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Delete commands\");\n\n    // send a delete update with an older version number\n    vdelete(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    // must ignore the delete\n    doRealTimeGet(\"doc1\", \"12\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc1\", 13, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"13\");\n    // must be deleted\n    doRealTimeGet(\"doc1\", \"\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc4\", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"\" + (version + 1));\n    // must be deleted\n    doRealTimeGet(\"doc4\", \"\");\n\n    commit(SOURCE_COLLECTION);\n\n    // query each shard replica individually\n    doQueryShardReplica(SHARD1, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    // version conflict thanks to optimistic locking\n    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client\n      vdeleteFail(\"doc2\", 50, 409);\n\n    // cleanup after ourselves for the next run\n    // deleteByQuery should work as usual with the CDCR_UPDATE param\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(1));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version lower than anything else should have no effect\n    doQuery(solrClient, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(51));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version higher than everything else should delete all remaining docs\n    doQuery(solrClient, \"\", \"q\", \"*:*\");\n\n    // check that replicas are as expected too\n    doQueryShardReplica(SHARD1, \"\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"\", \"q\", \"*:*\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","sourceNew":"  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {\n    this.solrServer = solrClient;\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Add commands, client: \" + solrClient);\n\n    vadd(\"doc1\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc2\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    vadd(\"doc3\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc4\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    commit(SOURCE_COLLECTION);\n\n    // versions are preserved and verifiable both by query and by real-time get\n    doQuery(solrClient, \"doc1,10,doc2,11,doc3,10,doc4,11\", \"q\", \"*:*\");\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    vadd(\"doc2\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc3\", 9, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"9\");\n    vadd(\"doc4\", 8, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"8\");\n\n    // lower versions are ignored\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc2\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc3\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc4\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n\n    // higher versions are accepted\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"12,12,12,12\");\n\n    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)\n    vaddFail(\"doc1\", 13, 409);\n    vaddFail(\"doc2\", 13, 409);\n    vaddFail(\"doc3\", 13, 409);\n\n    commit(SOURCE_COLLECTION);\n\n    // versions are still as they were\n    doQuery(solrClient, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // query all shard replicas individually\n    doQueryShardReplica(SHARD1, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // optimistic locking update\n    vadd(\"doc4\", 12);\n    commit(SOURCE_COLLECTION);\n\n    QueryResponse rsp = solrClient.query(params(\"qt\", \"/get\", \"ids\", \"doc4\"));\n    long version = (long) rsp.getResults().get(0).get(vfield);\n\n    // update accepted and a new version number was generated\n    assertTrue(version > 1_000_000_000_000l);\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Delete commands\");\n\n    // send a delete update with an older version number\n    vdelete(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    // must ignore the delete\n    doRealTimeGet(\"doc1\", \"12\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc1\", 13, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"13\");\n    // must be deleted\n    doRealTimeGet(\"doc1\", \"\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc4\", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"\" + (version + 1));\n    // must be deleted\n    doRealTimeGet(\"doc4\", \"\");\n\n    commit(SOURCE_COLLECTION);\n\n    // query each shard replica individually\n    doQueryShardReplica(SHARD1, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    // version conflict thanks to optimistic locking\n    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client\n      vdeleteFail(\"doc2\", 50, 409);\n\n    // cleanup after ourselves for the next run\n    // deleteByQuery should work as usual with the CDCR_UPDATE param\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(1));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version lower than anything else should have no effect\n    doQuery(solrClient, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(51));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version higher than everything else should delete all remaining docs\n    doQuery(solrClient, \"\", \"q\", \"*:*\");\n\n    // check that replicas are as expected too\n    doQueryShardReplica(SHARD1, \"\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"\", \"q\", \"*:*\");\n  }\n\n","sourceOld":"  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {\n    this.solrServer = solrClient;\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Add commands, client: \" + solrClient);\n\n    vadd(\"doc1\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc2\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    vadd(\"doc3\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc4\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    commit(SOURCE_COLLECTION);\n\n    // versions are preserved and verifiable both by query and by real-time get\n    doQuery(solrClient, \"doc1,10,doc2,11,doc3,10,doc4,11\", \"q\", \"*:*\");\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    vadd(\"doc2\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc3\", 9, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"9\");\n    vadd(\"doc4\", 8, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"8\");\n\n    // lower versions are ignored\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc2\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc3\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc4\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n\n    // higher versions are accepted\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"12,12,12,12\");\n\n    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)\n    vaddFail(\"doc1\", 13, 409);\n    vaddFail(\"doc2\", 13, 409);\n    vaddFail(\"doc3\", 13, 409);\n\n    commit(SOURCE_COLLECTION);\n\n    // versions are still as they were\n    doQuery(solrClient, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // query all shard replicas individually\n    doQueryShardReplica(SHARD1, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // optimistic locking update\n    vadd(\"doc4\", 12);\n    commit(SOURCE_COLLECTION);\n\n    QueryResponse rsp = solrClient.query(params(\"qt\", \"/get\", \"ids\", \"doc4\"));\n    long version = (long) rsp.getResults().get(0).get(vfield);\n\n    // update accepted and a new version number was generated\n    assertTrue(version > 1_000_000_000_000l);\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Delete commands\");\n\n    // send a delete update with an older version number\n    vdelete(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    // must ignore the delete\n    doRealTimeGet(\"doc1\", \"12\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc1\", 13, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"13\");\n    // must be deleted\n    doRealTimeGet(\"doc1\", \"\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc4\", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"\" + (version + 1));\n    // must be deleted\n    doRealTimeGet(\"doc4\", \"\");\n\n    commit(SOURCE_COLLECTION);\n\n    // query each shard replica individually\n    doQueryShardReplica(SHARD1, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    // version conflict thanks to optimistic locking\n    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client\n      vdeleteFail(\"doc2\", 50, 409);\n\n    // cleanup after ourselves for the next run\n    // deleteByQuery should work as usual with the CDCR_UPDATE param\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(1));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version lower than anything else should have no effect\n    doQuery(solrClient, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(51));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version higher than everything else should delete all remaining docs\n    doQuery(solrClient, \"\", \"q\", \"*:*\");\n\n    // check that replicas are as expected too\n    doQueryShardReplica(SHARD1, \"\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"\", \"q\", \"*:*\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","sourceNew":"  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {\n    this.solrServer = solrClient;\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Add commands, client: \" + solrClient);\n\n    vadd(\"doc1\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc2\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    vadd(\"doc3\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc4\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    commit(SOURCE_COLLECTION);\n\n    // versions are preserved and verifiable both by query and by real-time get\n    doQuery(solrClient, \"doc1,10,doc2,11,doc3,10,doc4,11\", \"q\", \"*:*\");\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    vadd(\"doc2\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc3\", 9, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"9\");\n    vadd(\"doc4\", 8, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"8\");\n\n    // lower versions are ignored\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc2\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc3\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc4\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n\n    // higher versions are accepted\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"12,12,12,12\");\n\n    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)\n    vaddFail(\"doc1\", 13, 409);\n    vaddFail(\"doc2\", 13, 409);\n    vaddFail(\"doc3\", 13, 409);\n\n    commit(SOURCE_COLLECTION);\n\n    // versions are still as they were\n    doQuery(solrClient, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // query all shard replicas individually\n    doQueryShardReplica(SHARD1, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // optimistic locking update\n    vadd(\"doc4\", 12);\n    commit(SOURCE_COLLECTION);\n\n    QueryResponse rsp = solrClient.query(params(\"qt\", \"/get\", \"ids\", \"doc4\"));\n    long version = (long) rsp.getResults().get(0).get(vfield);\n\n    // update accepted and a new version number was generated\n    assertTrue(version > 1_000_000_000_000l);\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Delete commands\");\n\n    // send a delete update with an older version number\n    vdelete(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    // must ignore the delete\n    doRealTimeGet(\"doc1\", \"12\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc1\", 13, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"13\");\n    // must be deleted\n    doRealTimeGet(\"doc1\", \"\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc4\", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"\" + (version + 1));\n    // must be deleted\n    doRealTimeGet(\"doc4\", \"\");\n\n    commit(SOURCE_COLLECTION);\n\n    // query each shard replica individually\n    doQueryShardReplica(SHARD1, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    // version conflict thanks to optimistic locking\n    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client\n      vdeleteFail(\"doc2\", 50, 409);\n\n    // cleanup after ourselves for the next run\n    // deleteByQuery should work as usual with the CDCR_UPDATE param\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(1));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version lower than anything else should have no effect\n    doQuery(solrClient, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(51));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version higher than everything else should delete all remaining docs\n    doQuery(solrClient, \"\", \"q\", \"*:*\");\n\n    // check that replicas are as expected too\n    doQueryShardReplica(SHARD1, \"\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"\", \"q\", \"*:*\");\n  }\n\n","sourceOld":"  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {\n    this.solrServer = solrClient;\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Add commands, client: \" + solrClient);\n\n    vadd(\"doc1\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc2\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    vadd(\"doc3\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc4\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    commit(SOURCE_COLLECTION);\n\n    // versions are preserved and verifiable both by query and by real-time get\n    doQuery(solrClient, \"doc1,10,doc2,11,doc3,10,doc4,11\", \"q\", \"*:*\");\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    vadd(\"doc2\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc3\", 9, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"9\");\n    vadd(\"doc4\", 8, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"8\");\n\n    // lower versions are ignored\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc2\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc3\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc4\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n\n    // higher versions are accepted\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"12,12,12,12\");\n\n    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)\n    vaddFail(\"doc1\", 13, 409);\n    vaddFail(\"doc2\", 13, 409);\n    vaddFail(\"doc3\", 13, 409);\n\n    commit(SOURCE_COLLECTION);\n\n    // versions are still as they were\n    doQuery(solrClient, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // query all shard replicas individually\n    doQueryShardReplica(SHARD1, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // optimistic locking update\n    vadd(\"doc4\", 12);\n    commit(SOURCE_COLLECTION);\n\n    QueryResponse rsp = solrClient.query(params(\"qt\", \"/get\", \"ids\", \"doc4\"));\n    long version = (long) rsp.getResults().get(0).get(vfield);\n\n    // update accepted and a new version number was generated\n    assertTrue(version > 1_000_000_000_000l);\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Delete commands\");\n\n    // send a delete update with an older version number\n    vdelete(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    // must ignore the delete\n    doRealTimeGet(\"doc1\", \"12\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc1\", 13, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"13\");\n    // must be deleted\n    doRealTimeGet(\"doc1\", \"\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc4\", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"\" + (version + 1));\n    // must be deleted\n    doRealTimeGet(\"doc4\", \"\");\n\n    commit(SOURCE_COLLECTION);\n\n    // query each shard replica individually\n    doQueryShardReplica(SHARD1, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    // version conflict thanks to optimistic locking\n    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client\n      vdeleteFail(\"doc2\", 50, 409);\n\n    // cleanup after ourselves for the next run\n    // deleteByQuery should work as usual with the CDCR_UPDATE param\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(1));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version lower than anything else should have no effect\n    doQuery(solrClient, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(51));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version higher than everything else should delete all remaining docs\n    doQuery(solrClient, \"\", \"q\", \"*:*\");\n\n    // check that replicas are as expected too\n    doQueryShardReplica(SHARD1, \"\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"\", \"q\", \"*:*\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrVersionReplicationTest#doTestCdcrDocVersions(SolrClient).mjava","sourceNew":"  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {\n    this.solrServer = solrClient;\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Add commands, client: \" + solrClient);\n\n    vadd(\"doc1\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc2\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    vadd(\"doc3\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc4\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    commit(SOURCE_COLLECTION);\n\n    // versions are preserved and verifiable both by query and by real-time get\n    doQuery(solrClient, \"doc1,10,doc2,11,doc3,10,doc4,11\", \"q\", \"*:*\");\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    vadd(\"doc2\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc3\", 9, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"9\");\n    vadd(\"doc4\", 8, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"8\");\n\n    // lower versions are ignored\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc2\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc3\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc4\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n\n    // higher versions are accepted\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"12,12,12,12\");\n\n    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)\n    vaddFail(\"doc1\", 13, 409);\n    vaddFail(\"doc2\", 13, 409);\n    vaddFail(\"doc3\", 13, 409);\n\n    commit(SOURCE_COLLECTION);\n\n    // versions are still as they were\n    doQuery(solrClient, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // query all shard replicas individually\n    doQueryShardReplica(SHARD1, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // optimistic locking update\n    vadd(\"doc4\", 12);\n    commit(SOURCE_COLLECTION);\n\n    QueryResponse rsp = solrClient.query(params(\"qt\", \"/get\", \"ids\", \"doc4\"));\n    long version = (long) rsp.getResults().get(0).get(vfield);\n\n    // update accepted and a new version number was generated\n    assertTrue(version > 1_000_000_000_000l);\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Delete commands\");\n\n    // send a delete update with an older version number\n    vdelete(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    // must ignore the delete\n    doRealTimeGet(\"doc1\", \"12\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc1\", 13, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"13\");\n    // must be deleted\n    doRealTimeGet(\"doc1\", \"\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc4\", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"\" + (version + 1));\n    // must be deleted\n    doRealTimeGet(\"doc4\", \"\");\n\n    commit(SOURCE_COLLECTION);\n\n    // query each shard replica individually\n    doQueryShardReplica(SHARD1, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    // version conflict thanks to optimistic locking\n    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client\n      vdeleteFail(\"doc2\", 50, 409);\n\n    // cleanup after ourselves for the next run\n    // deleteByQuery should work as usual with the CDCR_UPDATE param\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(1));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version lower than anything else should have no effect\n    doQuery(solrClient, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(51));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version higher than everything else should delete all remaining docs\n    doQuery(solrClient, \"\", \"q\", \"*:*\");\n\n    // check that replicas are as expected too\n    doQueryShardReplica(SHARD1, \"\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"\", \"q\", \"*:*\");\n  }\n\n","sourceOld":"  private void doTestCdcrDocVersions(SolrClient solrClient) throws Exception {\n    this.solrServer = solrClient;\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Add commands, client: \" + solrClient);\n\n    vadd(\"doc1\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc2\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    vadd(\"doc3\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc4\", 11, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"11\");\n    commit(SOURCE_COLLECTION);\n\n    // versions are preserved and verifiable both by query and by real-time get\n    doQuery(solrClient, \"doc1,10,doc2,11,doc3,10,doc4,11\", \"q\", \"*:*\");\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    vadd(\"doc2\", 10, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"10\");\n    vadd(\"doc3\", 9, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"9\");\n    vadd(\"doc4\", 8, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"8\");\n\n    // lower versions are ignored\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"10,11,10,11\");\n\n    vadd(\"doc1\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc2\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc3\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n    vadd(\"doc4\", 12, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"12\");\n\n    // higher versions are accepted\n    doRealTimeGet(\"doc1,doc2,doc3,doc4\", \"12,12,12,12\");\n\n    // non-cdcr update requests throw a version conflict exception for non-equal versions (optimistic locking feature)\n    vaddFail(\"doc1\", 13, 409);\n    vaddFail(\"doc2\", 13, 409);\n    vaddFail(\"doc3\", 13, 409);\n\n    commit(SOURCE_COLLECTION);\n\n    // versions are still as they were\n    doQuery(solrClient, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // query all shard replicas individually\n    doQueryShardReplica(SHARD1, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc1,12,doc2,12,doc3,12,doc4,12\", \"q\", \"*:*\");\n\n    // optimistic locking update\n    vadd(\"doc4\", 12);\n    commit(SOURCE_COLLECTION);\n\n    QueryResponse rsp = solrClient.query(params(\"qt\", \"/get\", \"ids\", \"doc4\"));\n    long version = (long) rsp.getResults().get(0).get(vfield);\n\n    // update accepted and a new version number was generated\n    assertTrue(version > 1_000_000_000_000l);\n\n    log.info(\"### STARTING doCdcrTestDocVersions - Delete commands\");\n\n    // send a delete update with an older version number\n    vdelete(\"doc1\", 5, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"5\");\n    // must ignore the delete\n    doRealTimeGet(\"doc1\", \"12\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc1\", 13, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"13\");\n    // must be deleted\n    doRealTimeGet(\"doc1\", \"\");\n\n    // send a delete update with a higher version number\n    vdelete(\"doc4\", version + 1, CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, \"\" + (version + 1));\n    // must be deleted\n    doRealTimeGet(\"doc4\", \"\");\n\n    commit(SOURCE_COLLECTION);\n\n    // query each shard replica individually\n    doQueryShardReplica(SHARD1, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    // version conflict thanks to optimistic locking\n    if (solrClient instanceof CloudSolrClient) // TODO: it seems that optimistic locking doesn't work with forwarding, test with shard2 client\n      vdeleteFail(\"doc2\", 50, 409);\n\n    // cleanup after ourselves for the next run\n    // deleteByQuery should work as usual with the CDCR_UPDATE param\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(1));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version lower than anything else should have no effect\n    doQuery(solrClient, \"doc2,12,doc3,12\", \"q\", \"*:*\");\n\n    doDeleteByQuery(\"id:doc*\", CdcrUpdateProcessor.CDCR_UPDATE, \"\", vfield, Long.toString(51));\n    commit(SOURCE_COLLECTION);\n\n    // deleteByQuery with a version higher than everything else should delete all remaining docs\n    doQuery(solrClient, \"\", \"q\", \"*:*\");\n\n    // check that replicas are as expected too\n    doQueryShardReplica(SHARD1, \"\", \"q\", \"*:*\");\n    doQueryShardReplica(SHARD2, \"\", \"q\", \"*:*\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["e7da9d8536c11576df10e348efa79d2739170936"],"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}