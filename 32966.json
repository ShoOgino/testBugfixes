{"path":"src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * Since the persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c686ad76bb74d110ec3c727914fb5693a7da23","date":1158901446,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * Since the persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","pathOld":"src/java/org/apache/solr/search/SolrCache#init(Map,Object,CacheRegenerator).mjava","sourceNew":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","sourceOld":"  /**\n   * The initialization routine.  Instance specific arguments are passed in\n   * the <code>args</code> map.\n   * <p>\n   * The persistence object will exist across different lifetimes of similar caches.\n   * For example, all filter caches will share the same persistence object, sometimes\n   * at the same time (it must be threadsafe).  If null is passed, then the cache\n   * implementation should create and return a new persistence object.  If not null,\n   * the passed in object should be returned again.\n   * <p>\n   * Since it will exist across the lifetime of many caches, care should be taken to\n   * not reference any particular cache instance and prevent it from being\n   * garbage collected (no using inner classes unless they are static).\n   * <p>\n   * The persistence object is designed to be used as a way for statistics\n   * to accumulate across all instances of the same type of cache, however the\n   * object may be of any type desired by the cache implementation.\n   * <p>\n   * The {@link CacheRegenerator} is what the cache uses during auto-warming to\n   * renenerate an item in the new cache from an entry in the old cache.\n   *\n   */\n  public Object init(Map args, Object persistence, CacheRegenerator regenerator);\n  // I don't think we need a factory for faster creation given that these\n  // will be associated with slow-to-create SolrIndexSearchers.\n  // change to NamedList when other plugins do?\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"79c686ad76bb74d110ec3c727914fb5693a7da23":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["79c686ad76bb74d110ec3c727914fb5693a7da23"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}