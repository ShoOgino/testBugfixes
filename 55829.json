{"path":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#equals(Object).mjava","commits":[{"id":"c35c5c6cdce2b681af3103a391f066040c1ef6c4","date":1131786206,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#equals(Object).mjava","pathOld":"/dev/null","sourceNew":"  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanRegexQuery that = (SpanRegexQuery) o;\n\n    return term.equals(that.term) && getBoost() == that.getBoost();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37727c003d0055afbc22d49ba0434cc4028166db","date":1135617136,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#equals(Object).mjava","sourceNew":"  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof TermQuery)) return false;\n    final SpanRegexQuery that = (SpanRegexQuery) o;\n    return term.equals(that.term) && getBoost() == that.getBoost();\n  }\n\n","sourceOld":"  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanRegexQuery that = (SpanRegexQuery) o;\n\n    return term.equals(that.term) && getBoost() == that.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6a00b8ea74c534cabb30026c14091dfc3155d92","date":1135617602,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#equals(Object).mjava","sourceNew":"  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanRegexQuery)) return false;\n    final SpanRegexQuery that = (SpanRegexQuery) o;\n    return term.equals(that.term) && getBoost() == that.getBoost();\n  }\n\n","sourceOld":"  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof TermQuery)) return false;\n    final SpanRegexQuery that = (SpanRegexQuery) o;\n    return term.equals(that.term) && getBoost() == that.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74be754ec3ab6906922b673bf951696c442123b2","date":1135778260,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/regex/src/java/org/apache/lucene/search/regex/SpanRegexQuery#equals(Object).mjava","pathOld":"src/java/org/apache/lucene/search/regex/SpanRegexQuery#equals(Object).mjava","sourceNew":"  /* generated by IntelliJ IDEA */\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    final SpanRegexQuery that = (SpanRegexQuery) o;\n\n    if (!regexImpl.equals(that.regexImpl)) return false;\n    if (!term.equals(that.term)) return false;\n\n    return true;\n  }\n\n","sourceOld":"  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (!(o instanceof SpanRegexQuery)) return false;\n    final SpanRegexQuery that = (SpanRegexQuery) o;\n    return term.equals(that.term) && getBoost() == that.getBoost();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74be754ec3ab6906922b673bf951696c442123b2":["c6a00b8ea74c534cabb30026c14091dfc3155d92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6a00b8ea74c534cabb30026c14091dfc3155d92":["37727c003d0055afbc22d49ba0434cc4028166db"],"37727c003d0055afbc22d49ba0434cc4028166db":["c35c5c6cdce2b681af3103a391f066040c1ef6c4"],"c35c5c6cdce2b681af3103a391f066040c1ef6c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74be754ec3ab6906922b673bf951696c442123b2"]},"commit2Childs":{"74be754ec3ab6906922b673bf951696c442123b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c35c5c6cdce2b681af3103a391f066040c1ef6c4"],"c6a00b8ea74c534cabb30026c14091dfc3155d92":["74be754ec3ab6906922b673bf951696c442123b2"],"37727c003d0055afbc22d49ba0434cc4028166db":["c6a00b8ea74c534cabb30026c14091dfc3155d92"],"c35c5c6cdce2b681af3103a391f066040c1ef6c4":["37727c003d0055afbc22d49ba0434cc4028166db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}