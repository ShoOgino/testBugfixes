{"path":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doRecovery(SolrCore core) {\n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n      \n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doRecovery(SolrCore core) {\n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n      \n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doRecovery(SolrCore core) {\n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n      \n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5620d3cb34306ea5b7d016a832fbc964b74c2650","date":1329755478,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","sourceNew":"  @Override\n  public void doRecovery(SolrCore core) {\n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(SolrCore core) {\n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n      \n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28eef717ead790cfb22deee28f45ccf45af2773e","date":1329921173,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","sourceNew":"  @Override\n  public void doRecovery(SolrCore core) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(SolrCore core) {\n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"221ff19d62d5ff429ffecf8e7f3e01ff93754854","date":1329974551,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(CoreContainer,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","sourceNew":"  @Override\n  public void doRecovery(CoreContainer cc, String name) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(cc, name);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","sourceOld":"  @Override\n  public void doRecovery(SolrCore core) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return;\n    }\n    \n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#doRecovery(SolrCore).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void doRecovery(SolrCore core) {\n    cancelRecovery();\n    synchronized (recoveryLock) {\n      while (recoveryRunning) {\n        try {\n          recoveryLock.wait(1000);\n        } catch (InterruptedException e) {\n\n        }\n        if (closed) return;\n      }\n\n      // if true, we are recovering after startup and shouldn't have (or be receiving) additional updates (except for local tlog recovery)\n      boolean recoveringAfterStartup = recoveryStrat == null;\n\n      recoveryStrat = new RecoveryStrategy(core);\n      recoveryStrat.setRecoveringAfterStartup(recoveringAfterStartup);\n      recoveryStrat.start();\n      recoveryRunning = true;\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5620d3cb34306ea5b7d016a832fbc964b74c2650":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["28eef717ead790cfb22deee28f45ccf45af2773e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["5620d3cb34306ea5b7d016a832fbc964b74c2650","221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28eef717ead790cfb22deee28f45ccf45af2773e":["5620d3cb34306ea5b7d016a832fbc964b74c2650"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"]},"commit2Childs":{"5620d3cb34306ea5b7d016a832fbc964b74c2650":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","28eef717ead790cfb22deee28f45ccf45af2773e"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"221ff19d62d5ff429ffecf8e7f3e01ff93754854":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["5620d3cb34306ea5b7d016a832fbc964b74c2650","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"28eef717ead790cfb22deee28f45ccf45af2773e":["221ff19d62d5ff429ffecf8e7f3e01ff93754854"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}