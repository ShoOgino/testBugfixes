{"path":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/distance/TestDistances#findClosestPointOnVertToPoint(double,double,double,Point).mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/distance/TestDistances#findClosestPointOnVertToPoint(double,double,double,Point).mjava","pathOld":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/distance/TestDistances#findClosestPointOnVertToPoint(double,double,double,Point).mjava","sourceNew":"  private Point findClosestPointOnVertToPoint(double lon, double lowLat, double highLat, Point ctr) {\n    //A binary search algorithm to find the point along the vertical lon between lowLat & highLat that is closest\n    // to ctr, and returns the distance.\n    double midLat = (highLat - lowLat)/2 + lowLat;\n    double midLatDist = ctx.getDistCalc().distance(ctr,lon,midLat);\n    for(int L = 0; L < 100 && (highLat - lowLat > 0.001|| L < 20); L++) {\n      boolean bottom = (midLat - lowLat > highLat - midLat);\n      double newMid = bottom ? (midLat - lowLat)/2 + lowLat : (highLat - midLat)/2 + midLat;\n      double newMidDist = ctx.getDistCalc().distance(ctr,lon,newMid);\n      if (newMidDist < midLatDist) {\n        if (bottom) {\n          highLat = midLat;\n        } else {\n          lowLat = midLat;\n        }\n        midLat = newMid;\n        midLatDist = newMidDist;\n      } else {\n        if (bottom) {\n          lowLat = newMid;\n        } else {\n          highLat = newMid;\n        }\n      }\n    }\n    return ctx.makePoint(lon,midLat);\n  }\n\n","sourceOld":"  private Point findClosestPointOnVertToPoint(double lon, double lowLat, double highLat, Point ctr) {\n    //A binary search algorithm to find the point along the vertical lon between lowLat & highLat that is closest\n    // to ctr, and returns the distance.\n    double midLat = (highLat - lowLat)/2 + lowLat;\n    double midLatDist = ctx.getDistCalc().distance(ctr,lon,midLat);\n    for(int L = 0; L < 100 && (highLat - lowLat > 0.001|| L < 20); L++) {\n      boolean bottom = (midLat - lowLat > highLat - midLat);\n      double newMid = bottom ? (midLat - lowLat)/2 + lowLat : (highLat - midLat)/2 + midLat;\n      double newMidDist = ctx.getDistCalc().distance(ctr,lon,newMid);\n      if (newMidDist < midLatDist) {\n        if (bottom) {\n          highLat = midLat;\n        } else {\n          lowLat = midLat;\n        }\n        midLat = newMid;\n        midLatDist = newMidDist;\n      } else {\n        if (bottom) {\n          lowLat = newMid;\n        } else {\n          highLat = newMid;\n        }\n      }\n    }\n    return ctx.makePoint(lon,midLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a","date":1330032413,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/base/src/test/org/apache/lucene/spatial/base/distance/TestDistances#findClosestPointOnVertToPoint(double,double,double,Point).mjava","pathOld":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/distance/TestDistances#findClosestPointOnVertToPoint(double,double,double,Point).mjava","sourceNew":"  private Point findClosestPointOnVertToPoint(double lon, double lowLat, double highLat, Point ctr) {\n    //A binary search algorithm to find the point along the vertical lon between lowLat & highLat that is closest\n    // to ctr, and returns the distance.\n    double midLat = (highLat - lowLat)/2 + lowLat;\n    double midLatDist = ctx.getDistCalc().distance(ctr,lon,midLat);\n    for(int L = 0; L < 100 && (highLat - lowLat > 0.001|| L < 20); L++) {\n      boolean bottom = (midLat - lowLat > highLat - midLat);\n      double newMid = bottom ? (midLat - lowLat)/2 + lowLat : (highLat - midLat)/2 + midLat;\n      double newMidDist = ctx.getDistCalc().distance(ctr,lon,newMid);\n      if (newMidDist < midLatDist) {\n        if (bottom) {\n          highLat = midLat;\n        } else {\n          lowLat = midLat;\n        }\n        midLat = newMid;\n        midLatDist = newMidDist;\n      } else {\n        if (bottom) {\n          lowLat = newMid;\n        } else {\n          highLat = newMid;\n        }\n      }\n    }\n    return ctx.makePoint(lon,midLat);\n  }\n\n","sourceOld":"  private Point findClosestPointOnVertToPoint(double lon, double lowLat, double highLat, Point ctr) {\n    //A binary search algorithm to find the point along the vertical lon between lowLat & highLat that is closest\n    // to ctr, and returns the distance.\n    double midLat = (highLat - lowLat)/2 + lowLat;\n    double midLatDist = ctx.getDistCalc().distance(ctr,lon,midLat);\n    for(int L = 0; L < 100 && (highLat - lowLat > 0.001|| L < 20); L++) {\n      boolean bottom = (midLat - lowLat > highLat - midLat);\n      double newMid = bottom ? (midLat - lowLat)/2 + lowLat : (highLat - midLat)/2 + midLat;\n      double newMidDist = ctx.getDistCalc().distance(ctr,lon,newMid);\n      if (newMidDist < midLatDist) {\n        if (bottom) {\n          highLat = midLat;\n        } else {\n          lowLat = midLat;\n        }\n        midLat = newMid;\n        midLatDist = newMidDist;\n      } else {\n        if (bottom) {\n          lowLat = newMid;\n        } else {\n          highLat = newMid;\n        }\n      }\n    }\n    return ctx.makePoint(lon,midLat);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a"],"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}