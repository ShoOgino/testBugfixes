{"path":"client/java/solrj/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","commits":[{"id":"901640553deed38877af5d6f5fd8d7a630dfd0b4","date":1221837959,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"/dev/null","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(true, q.setFacetSort(true).getFacetSort());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e26103c17ca63f5e64f0ba6a646b7139379f4a7c","date":1223168897,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(true, q.setFacetSort(true).getFacetSort());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(true, q.setFacetSort(true).getFacetSort());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5a95ce1d7a3779af6db59b6b39d3b89172d7445","date":1228620032,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"lex\", q.setFacetSort(\"lex\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(true, q.setFacetSort(true).getFacetSort());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","pathOld":"client/java/solrj/test/org/apache/solr/client/solrj/SolrQueryTest#testSettersGetters().mjava","sourceNew":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"lex\", q.setFacetSort(\"lex\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","sourceOld":"  public void testSettersGetters() {\n      SolrQuery q = new SolrQuery(\"foo\");\n      assertEquals(10, q.setFacetLimit(10).getFacetLimit());\n      assertEquals(10, q.setFacetMinCount(10).getFacetMinCount());\n      assertEquals(\"lex\", q.setFacetSort(\"lex\").getFacetSortString());\n      assertEquals(10, q.setHighlightSnippets(10).getHighlightSnippets());\n      assertEquals(10, q.setHighlightFragsize(10).getHighlightFragsize());\n      assertEquals(true, q.setHighlightRequireFieldMatch(true).getHighlightRequireFieldMatch());\n      assertEquals(\"foo\", q.setHighlightSimplePre(\"foo\").getHighlightSimplePre());\n      assertEquals(\"foo\", q.setHighlightSimplePost(\"foo\").getHighlightSimplePost());\n      assertEquals(true, q.setHighlight(true).getHighlight());\n      assertEquals(\"foo\", q.setQuery(\"foo\").getQuery());\n      assertEquals(10, q.setRows(10).getRows().intValue());\n      assertEquals(10, q.setStart(10).getStart().intValue());\n      assertEquals(\"foo\", q.setQueryType(\"foo\").getQueryType());\n      assertEquals(10, q.setTimeAllowed(10).getTimeAllowed().intValue());\n      \n      // non-standard\n      assertEquals(\"foo\", q.setFacetPrefix(\"foo\").get( FacetParams.FACET_PREFIX, null ) );\n      assertEquals(\"foo\", q.setFacetPrefix(\"a\", \"foo\").getFieldParam( \"a\", FacetParams.FACET_PREFIX, null ) );\n\n      assertEquals( Boolean.TRUE, q.setMissing(Boolean.TRUE.toString()).getBool( FacetParams.FACET_MISSING ) );\n      assertEquals( Boolean.FALSE, q.setFacetMissing( Boolean.FALSE ).getBool( FacetParams.FACET_MISSING ) );      \n      assertEquals( \"true\", q.setParam( \"xxx\", true ).getParams( \"xxx\" )[0] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"901640553deed38877af5d6f5fd8d7a630dfd0b4":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"e26103c17ca63f5e64f0ba6a646b7139379f4a7c":["901640553deed38877af5d6f5fd8d7a630dfd0b4"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["e26103c17ca63f5e64f0ba6a646b7139379f4a7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["901640553deed38877af5d6f5fd8d7a630dfd0b4"],"901640553deed38877af5d6f5fd8d7a630dfd0b4":["e26103c17ca63f5e64f0ba6a646b7139379f4a7c"],"e26103c17ca63f5e64f0ba6a646b7139379f4a7c":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}