{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2989b58779e186266a5d5ab0c6fc46096e68b848","date":1350919624,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader#docs(FieldInfo,BlockTermState,Bits,DocsEnum,int).mjava","sourceNew":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","sourceOld":"  @Override\n  public DocsEnum docs(FieldInfo fieldInfo, BlockTermState termState, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    BlockDocsEnum docsEnum;\n    if (reuse instanceof BlockDocsEnum) {\n      docsEnum = (BlockDocsEnum) reuse;\n      if (!docsEnum.canReuse(docIn, fieldInfo)) {\n        docsEnum = new BlockDocsEnum(fieldInfo);\n      }\n    } else {\n      docsEnum = new BlockDocsEnum(fieldInfo);\n    }\n    return docsEnum.reset(liveDocs, (IntBlockTermState) termState, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["2989b58779e186266a5d5ab0c6fc46096e68b848"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e52115b56781006682fd92c6938efaf174304d":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","2989b58779e186266a5d5ab0c6fc46096e68b848"],"2989b58779e186266a5d5ab0c6fc46096e68b848":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["2989b58779e186266a5d5ab0c6fc46096e68b848","99eb4a732d1a908f4636ace52928876136bf1896"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["2989b58779e186266a5d5ab0c6fc46096e68b848","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"62e52115b56781006682fd92c6938efaf174304d":[],"2989b58779e186266a5d5ab0c6fc46096e68b848":["99eb4a732d1a908f4636ace52928876136bf1896","62e52115b56781006682fd92c6938efaf174304d","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["62e52115b56781006682fd92c6938efaf174304d"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}