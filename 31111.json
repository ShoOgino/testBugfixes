{"path":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","commits":[{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a FieldDoc object, stores the values used\n   * to sort the given document.  These values are not the raw\n   * values out of the index, but the internal representation\n   * of them.  This is so the given search hit can be collated\n   * by a MultiSearcher with other search hits.\n   * @param  doc  The FieldDoc to store sort values into.\n   * @return  The same FieldDoc passed in.\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields (final Entry entry) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i=0; i<n; ++i)\n      fields[i] = comparators[i].value(entry.slot);\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.docID,\n                        entry.score,\n                        fields);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","sourceNew":"  /**\n   * Given a FieldDoc object, stores the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param doc\n   *          The FieldDoc to store sort values into.\n   * @return The same FieldDoc passed in.\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.docID, entry.score, fields);\n  }\n\n","sourceOld":"  /**\n   * Given a FieldDoc object, stores the values used\n   * to sort the given document.  These values are not the raw\n   * values out of the index, but the internal representation\n   * of them.  This is so the given search hit can be collated\n   * by a MultiSearcher with other search hits.\n   * @param  doc  The FieldDoc to store sort values into.\n   * @return  The same FieldDoc passed in.\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields (final Entry entry) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i=0; i<n; ++i)\n      fields[i] = comparators[i].value(entry.slot);\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.docID,\n                        entry.score,\n                        fields);\n  }\n\n","bugFix":null,"bugIntro":["1c8ed50c3dc8a2400a303593e8ce6616be9d8429","128294f9d4a7662e4f21a98bf67ace65632fd87b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"128294f9d4a7662e4f21a98bf67ace65632fd87b","date":1251393000,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","sourceNew":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.docID, entry.score, fields);\n  }\n\n","sourceOld":"  /**\n   * Given a FieldDoc object, stores the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param doc\n   *          The FieldDoc to store sort values into.\n   * @return The same FieldDoc passed in.\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.docID, entry.score, fields);\n  }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c8ed50c3dc8a2400a303593e8ce6616be9d8429","date":1257976685,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","sourceNew":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","sourceOld":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.docID, entry.score, fields);\n  }\n\n","bugFix":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","sourceNew":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Comparable<?>[] fields = new Comparable[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","sourceOld":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Comparable[] fields = new Comparable[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","pathOld":"src/java/org/apache/lucene/search/FieldValueHitQueue#fillFields(Entry).mjava","sourceNew":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Comparable<?>[] fields = new Comparable[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","sourceOld":"  /**\n   * Given a queue Entry, creates a corresponding FieldDoc\n   * that contains the values used to sort the given document.\n   * These values are not the raw values out of the index, but the internal\n   * representation of them. This is so the given search hit can be collated by\n   * a MultiSearcher with other search hits.\n   * \n   * @param entry The Entry used to create a FieldDoc\n   * @return The newly created FieldDoc\n   * @see Searchable#search(Weight,Filter,int,Sort)\n   */\n  FieldDoc fillFields(final Entry entry) {\n    final int n = comparators.length;\n    final Comparable<?>[] fields = new Comparable[n];\n    for (int i = 0; i < n; ++i) {\n      fields[i] = comparators[i].value(entry.slot);\n    }\n    //if (maxscore > 1.0f) doc.score /= maxscore;   // normalize scores\n    return new FieldDoc(entry.doc, entry.score, fields);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"1c8ed50c3dc8a2400a303593e8ce6616be9d8429":["128294f9d4a7662e4f21a98bf67ace65632fd87b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"128294f9d4a7662e4f21a98bf67ace65632fd87b":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["1c8ed50c3dc8a2400a303593e8ce6616be9d8429"],"63bc3238545c6012bd44f5d294077997f236bc4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["128294f9d4a7662e4f21a98bf67ace65632fd87b"],"1c8ed50c3dc8a2400a303593e8ce6616be9d8429":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63bc3238545c6012bd44f5d294077997f236bc4e"],"128294f9d4a7662e4f21a98bf67ace65632fd87b":["1c8ed50c3dc8a2400a303593e8ce6616be9d8429"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}