{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","commits":[{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ff68fa27809e97b6e1ef3d18c252551954598b52"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"47a0f273b4cc0a01eefb175db0411e16f3467909","date":1484919485,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n      \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n      \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n    }\n  }\n\n","sourceOld":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"166900153b02650fec5efe2029ece78f3b06a046","date":1485013751,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n  }\n\n","sourceOld":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n      \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    for (int i = 0; i < values.length; i++) {\n      assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n      \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff68fa27809e97b6e1ef3d18c252551954598b52","date":1491852388,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","sourceNew":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 1; i <= values.length; i++) {\n      expected[i] = \"//result/doc[\" + i + \"]/\" + type + \"[@name='\" + field + \"'][.='\" + values[i-1] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e844d4f9ba6804f10747d7e51e83a9a8868c94","date":1500054875,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":5,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doTestPointFieldReturn(String,String,String[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testPointFieldReturn(String,String,String[]).mjava","sourceNew":"  private void doTestPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","sourceOld":"  private void testPointFieldReturn(String field, String type, String[] values) throws Exception {\n    SchemaField sf = h.getCore().getLatestSchema().getField(field);\n    assert sf.stored() || (sf.hasDocValues() && sf.useDocValuesAsStored()): \n      \"Unexpected field definition for \" + field; \n    for (int i=0; i < values.length; i++) {\n      assertU(adoc(\"id\", String.valueOf(i), field, values[i]));\n    }\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    assertU(commit());\n    String[] expected = new String[values.length + 1];\n    expected[0] = \"//*[@numFound='\" + values.length + \"']\"; \n    for (int i = 0; i < values.length; i++) {\n      expected[i + 1] = \"//result/doc[str[@name='id']='\" + i + \"']/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\";\n    }\n    assertQ(req(\"q\", \"*:*\", \"fl\", \"id, \" + field, \"rows\", String.valueOf(values.length)), expected);\n\n    // Check using RTG\n    if (Boolean.getBoolean(\"enable.update.log\")) {\n      for (int i = 0; i < values.length; i++) {\n        assertQ(req(\"qt\", \"/get\", \"id\", String.valueOf(i)),\n            \"//doc/\" + type + \"[@name='\" + field + \"'][.='\" + values[i] + \"']\");\n      }\n    }\n    clearIndex();\n    assertU(commit());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"166900153b02650fec5efe2029ece78f3b06a046":["47a0f273b4cc0a01eefb175db0411e16f3467909"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["166900153b02650fec5efe2029ece78f3b06a046"],"ff68fa27809e97b6e1ef3d18c252551954598b52":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"47a0f273b4cc0a01eefb175db0411e16f3467909":["46dc9ac8b3e748407baaef82453138ff3974480c"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"46dc9ac8b3e748407baaef82453138ff3974480c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["ff68fa27809e97b6e1ef3d18c252551954598b52"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","166900153b02650fec5efe2029ece78f3b06a046"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["166900153b02650fec5efe2029ece78f3b06a046"]},"commit2Childs":{"166900153b02650fec5efe2029ece78f3b06a046":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["aaf90fc29510e72665ac7934f34c3d1c25efad64"],"ff68fa27809e97b6e1ef3d18c252551954598b52":["17e844d4f9ba6804f10747d7e51e83a9a8868c94"],"47a0f273b4cc0a01eefb175db0411e16f3467909":["166900153b02650fec5efe2029ece78f3b06a046"],"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"46dc9ac8b3e748407baaef82453138ff3974480c":["47a0f273b4cc0a01eefb175db0411e16f3467909"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"17e844d4f9ba6804f10747d7e51e83a9a8868c94":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["ff68fa27809e97b6e1ef3d18c252551954598b52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}