{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#add(int,int).mjava","commits":[{"id":"3d58d08788c3fd51172ba34474cca42499d6391b","date":1354802133,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#add(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","sourceNew":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  ParallelTaxonomyArrays add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parents.length) {\n      int[] newarray = ArrayUtil.grow(parents);\n      newarray[ordinal] = parentOrdinal;\n      return new ParallelTaxonomyArrays(newarray);\n    }\n    parents[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  ParentArray add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parentOrdinals.length) {\n      int[] newarray = ArrayUtil.grow(parentOrdinals);\n      newarray[ordinal] = parentOrdinal;\n      return new ParentArray(newarray);\n    }\n    parentOrdinals[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"209b03e6aa9098ac043cc757e46f758400427b15","date":1355045906,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#add(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#add(int,int).mjava","sourceNew":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  ParallelTaxonomyArrays add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parents.length) {\n      int[] newarray = ArrayUtil.grow(parents, ordinal + 1);\n      newarray[ordinal] = parentOrdinal;\n      return new ParallelTaxonomyArrays(newarray);\n    }\n    parents[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  ParallelTaxonomyArrays add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parents.length) {\n      int[] newarray = ArrayUtil.grow(parents);\n      newarray[ordinal] = parentOrdinal;\n      return new ParallelTaxonomyArrays(newarray);\n    }\n    parents[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","bugFix":["3d58d08788c3fd51172ba34474cca42499d6391b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#add(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  ParallelTaxonomyArrays add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parents.length) {\n      int[] newarray = ArrayUtil.grow(parents, ordinal + 1);\n      newarray[ordinal] = parentOrdinal;\n      return new ParallelTaxonomyArrays(newarray);\n    }\n    parents[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2ae7e371df56ccde467b71db7e82066f05a5972","date":1363620258,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/TaxonomyIndexArrays#add(int,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParallelTaxonomyArrays#add(int,int).mjava","sourceNew":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  TaxonomyIndexArrays add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parents.length) {\n      int[] newarray = ArrayUtil.grow(parents, ordinal + 1);\n      newarray[ordinal] = parentOrdinal;\n      return new TaxonomyIndexArrays(newarray);\n    }\n    parents[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Adds the given ordinal/parent info and returns either a new instance if the\n   * underlying array had to grow, or this instance otherwise.\n   * <p>\n   * <b>NOTE:</b> you should call this method from a thread-safe code.\n   */\n  ParallelTaxonomyArrays add(int ordinal, int parentOrdinal) {\n    if (ordinal >= parents.length) {\n      int[] newarray = ArrayUtil.grow(parents, ordinal + 1);\n      newarray[ordinal] = parentOrdinal;\n      return new ParallelTaxonomyArrays(newarray);\n    }\n    parents[ordinal] = parentOrdinal;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2ae7e371df56ccde467b71db7e82066f05a5972":["209b03e6aa9098ac043cc757e46f758400427b15"],"209b03e6aa9098ac043cc757e46f758400427b15":["3d58d08788c3fd51172ba34474cca42499d6391b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","209b03e6aa9098ac043cc757e46f758400427b15"],"3d58d08788c3fd51172ba34474cca42499d6391b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f2ae7e371df56ccde467b71db7e82066f05a5972"]},"commit2Childs":{"f2ae7e371df56ccde467b71db7e82066f05a5972":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"209b03e6aa9098ac043cc757e46f758400427b15":["f2ae7e371df56ccde467b71db7e82066f05a5972","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","3d58d08788c3fd51172ba34474cca42499d6391b"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"3d58d08788c3fd51172ba34474cca42499d6391b":["209b03e6aa9098ac043cc757e46f758400427b15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}