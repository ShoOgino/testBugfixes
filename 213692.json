{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate a hashCode for this path, used when a CategoryPath serves as a\n   * hash-table key. If two objects are equal(), their hashCodes need to be\n   * equal, so like in equal(), hashCode does not consider unused portions of\n   * the internal buffers in its calculation.\n   * <P>\n   * The hash function used is modeled after Java's String.hashCode() - a\n   * simple multiplicative hash function with the multiplier 31. The same hash\n   * function also appeared in Kernighan & Ritchie's second edition of\n   * \"The C Programming Language\" (1988).\n   */\n  @Override\n  public int hashCode() {\n    if (ncomponents == 0) {\n      return 0;\n    }\n    int hash = ncomponents;\n    // Unfortunately, Arrays.hashCode() can only calculate a hash code\n    // for an entire arrays, and in our case we potentially have unused\n    // parts of the arrays that must be ignored, so must use our own loop\n    // over the characters. I wish that some future version of Java will\n    // add offset and length parameters to Arrays.hashCode (sort of like\n    // System.arraycopy()'s parameters).\n    for (int i = 0; i < ncomponents; i++) {\n      hash = hash * 31 + ends[i];\n    }\n    int len = ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 31 + chars[i];\n    }\n    return hash;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate a hashCode for this path, used when a CategoryPath serves as a\n   * hash-table key. If two objects are equal(), their hashCodes need to be\n   * equal, so like in equal(), hashCode does not consider unused portions of\n   * the internal buffers in its calculation.\n   * <P>\n   * The hash function used is modeled after Java's String.hashCode() - a\n   * simple multiplicative hash function with the multiplier 31. The same hash\n   * function also appeared in Kernighan & Ritchie's second edition of\n   * \"The C Programming Language\" (1988).\n   */\n  @Override\n  public int hashCode() {\n    if (ncomponents == 0) {\n      return 0;\n    }\n    int hash = ncomponents;\n    // Unfortunately, Arrays.hashCode() can only calculate a hash code\n    // for an entire arrays, and in our case we potentially have unused\n    // parts of the arrays that must be ignored, so must use our own loop\n    // over the characters. I wish that some future version of Java will\n    // add offset and length parameters to Arrays.hashCode (sort of like\n    // System.arraycopy()'s parameters).\n    for (int i = 0; i < ncomponents; i++) {\n      hash = hash * 31 + ends[i];\n    }\n    int len = ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 31 + chars[i];\n    }\n    return hash;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate a hashCode for this path, used when a CategoryPath serves as a\n   * hash-table key. If two objects are equal(), their hashCodes need to be\n   * equal, so like in equal(), hashCode does not consider unused portions of\n   * the internal buffers in its calculation.\n   * <P>\n   * The hash function used is modeled after Java's String.hashCode() - a\n   * simple multiplicative hash function with the multiplier 31. The same hash\n   * function also appeared in Kernighan & Ritchie's second edition of\n   * \"The C Programming Language\" (1988).\n   */\n  @Override\n  public int hashCode() {\n    if (ncomponents == 0) {\n      return 0;\n    }\n    int hash = ncomponents;\n    // Unfortunately, Arrays.hashCode() can only calculate a hash code\n    // for an entire arrays, and in our case we potentially have unused\n    // parts of the arrays that must be ignored, so must use our own loop\n    // over the characters. I wish that some future version of Java will\n    // add offset and length parameters to Arrays.hashCode (sort of like\n    // System.arraycopy()'s parameters).\n    for (int i = 0; i < ncomponents; i++) {\n      hash = hash * 31 + ends[i];\n    }\n    int len = ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 31 + chars[i];\n    }\n    return hash;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#hashCode().mjava","sourceNew":"  /**\n   * Calculate a hashCode for this path, used when a CategoryPath serves as a\n   * hash-table key. If two objects are equal(), their hashCodes need to be\n   * equal, so like in equal(), hashCode does not consider unused portions of\n   * the internal buffers in its calculation.\n   * <P>\n   * The hash function used is modeled after Java's String.hashCode() - a\n   * simple multiplicative hash function with the multiplier 31. The same hash\n   * function also appeared in Kernighan & Ritchie's second edition of\n   * \"The C Programming Language\" (1988).\n   */\n  @Override\n  public int hashCode() {\n    if (ncomponents == 0) {\n      return 0;\n    }\n    int hash = ncomponents;\n    // Unfortunately, Arrays.hashCode() can only calculate a hash code\n    // for an entire arrays, and in our case we potentially have unused\n    // parts of the arrays that must be ignored, so must use our own loop\n    // over the characters. I wish that some future version of Java will\n    // add offset and length parameters to Arrays.hashCode (sort of like\n    // System.arraycopy()'s parameters).\n    for (int i = 0; i < ncomponents; i++) {\n      hash = hash * 31 + ends[i];\n    }\n    int len = ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 31 + chars[i];\n    }\n    return hash;\n  }\n\n","sourceOld":"  /**\n   * Calculate a hashCode for this path, used when a CategoryPath serves as a\n   * hash-table key. If two objects are equal(), their hashCodes need to be\n   * equal, so like in equal(), hashCode does not consider unused portions of\n   * the internal buffers in its calculation.\n   * <P>\n   * The hash function used is modeled after Java's String.hashCode() - a\n   * simple multiplicative hash function with the multiplier 31. The same hash\n   * function also appeared in Kernighan & Ritchie's second edition of\n   * \"The C Programming Language\" (1988).\n   */\n  @Override\n  public int hashCode() {\n    if (ncomponents == 0) {\n      return 0;\n    }\n    int hash = ncomponents;\n    // Unfortunately, Arrays.hashCode() can only calculate a hash code\n    // for an entire arrays, and in our case we potentially have unused\n    // parts of the arrays that must be ignored, so must use our own loop\n    // over the characters. I wish that some future version of Java will\n    // add offset and length parameters to Arrays.hashCode (sort of like\n    // System.arraycopy()'s parameters).\n    for (int i = 0; i < ncomponents; i++) {\n      hash = hash * 31 + ends[i];\n    }\n    int len = ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      hash = hash * 31 + chars[i];\n    }\n    return hash;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}