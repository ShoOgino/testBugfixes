{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseNumericDocValues#advance(int).mjava","commits":[{"id":"9abf8f0376991d8b97ef287f53f330a54bdbdb66","date":1475480039,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      long loIndex = index;\n      long step = 1;\n      long hiIndex;\n      int hiDoc;\n\n      // gallop forward by exponentially growing the interval\n      // in order to find an interval so that the target doc\n      // is in ]lo, hi]. Compared to a regular binary search,\n      // this optimizes the case that the caller performs many\n      // advance calls by small deltas\n      do {\n        hiIndex = index + step;\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          hiDoc = NO_MORE_DOCS;\n          break;\n        }\n        hiDoc = (int) docIds.get(hiIndex);\n        if (hiDoc >= target) {\n          break;\n        }\n        step <<= 1;\n      } while (true);\n\n      // now binary search\n      while (loIndex + 1 < hiIndex) {\n        final long midIndex = (loIndex + 1 + hiIndex) >>> 1;\n        final int midDoc = (int) docIds.get(midIndex);\n        if (midDoc >= target) {\n          hiIndex = midIndex;\n          hiDoc = midDoc;\n        } else {\n          loIndex = midIndex;\n        }\n      }\n\n      index = (int) hiIndex;\n      return doc = hiDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3607fe579ac3eb5d35b8dc39dffa376491f417f0","date":1475480207,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      long loIndex = index;\n      long step = 1;\n      long hiIndex;\n      int hiDoc;\n\n      // gallop forward by exponentially growing the interval\n      // in order to find an interval so that the target doc\n      // is in ]lo, hi]. Compared to a regular binary search,\n      // this optimizes the case that the caller performs many\n      // advance calls by small deltas\n      do {\n        hiIndex = index + step;\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          hiDoc = NO_MORE_DOCS;\n          break;\n        }\n        hiDoc = (int) docIds.get(hiIndex);\n        if (hiDoc >= target) {\n          break;\n        }\n        step <<= 1;\n      } while (true);\n\n      // now binary search\n      while (loIndex + 1 < hiIndex) {\n        final long midIndex = (loIndex + 1 + hiIndex) >>> 1;\n        final int midDoc = (int) docIds.get(midIndex);\n        if (midDoc >= target) {\n          hiIndex = midIndex;\n          hiDoc = midDoc;\n        } else {\n          loIndex = midIndex;\n        }\n      }\n\n      index = (int) hiIndex;\n      return doc = hiDoc;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseNumericDocValues#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.SparseNumericDocValues#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      long loIndex = index;\n      long step = 1;\n      long hiIndex;\n      int hiDoc;\n\n      // gallop forward by exponentially growing the interval\n      // in order to find an interval so that the target doc\n      // is in ]lo, hi]. Compared to a regular binary search,\n      // this optimizes the case that the caller performs many\n      // advance calls by small deltas\n      do {\n        hiIndex = index + step;\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          hiDoc = NO_MORE_DOCS;\n          break;\n        }\n        hiDoc = (int) docIds.get(hiIndex);\n        if (hiDoc >= target) {\n          break;\n        }\n        step <<= 1;\n      } while (true);\n\n      // now binary search\n      while (loIndex + 1 < hiIndex) {\n        final long midIndex = (loIndex + 1 + hiIndex) >>> 1;\n        final int midDoc = (int) docIds.get(midIndex);\n        if (midDoc >= target) {\n          hiIndex = midIndex;\n          hiDoc = midDoc;\n        } else {\n          loIndex = midIndex;\n        }\n      }\n\n      index = (int) hiIndex;\n      return doc = hiDoc;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      long loIndex = index;\n      long step = 1;\n      long hiIndex;\n      int hiDoc;\n\n      // gallop forward by exponentially growing the interval\n      // in order to find an interval so that the target doc\n      // is in ]lo, hi]. Compared to a regular binary search,\n      // this optimizes the case that the caller performs many\n      // advance calls by small deltas\n      do {\n        hiIndex = index + step;\n        if (hiIndex >= docIDsLength) {\n          hiIndex = docIDsLength;\n          hiDoc = NO_MORE_DOCS;\n          break;\n        }\n        hiDoc = (int) docIds.get(hiIndex);\n        if (hiDoc >= target) {\n          break;\n        }\n        step <<= 1;\n      } while (true);\n\n      // now binary search\n      while (loIndex + 1 < hiIndex) {\n        final long midIndex = (loIndex + 1 + hiIndex) >>> 1;\n        final int midDoc = (int) docIds.get(midIndex);\n        if (midDoc >= target) {\n          hiIndex = midIndex;\n          hiDoc = midDoc;\n        } else {\n          loIndex = midIndex;\n        }\n      }\n\n      index = (int) hiIndex;\n      return doc = hiDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9abf8f0376991d8b97ef287f53f330a54bdbdb66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9abf8f0376991d8b97ef287f53f330a54bdbdb66","3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}