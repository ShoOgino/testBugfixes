{"path":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#isTripped().mjava","commits":[{"id":"8ef8e4fae9bcd156a117f5758819aeabdae3e963","date":1593674028,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#isTripped().mjava","pathOld":"/dev/null","sourceNew":"  // TODO: An optimization can be to trip the circuit breaker for a duration of time\n  // after the circuit breaker condition is matched. This will optimize for per call\n  // overhead of calculating the condition parameters but can result in false positives.\n  @Override\n  public boolean isTripped() {\n    if (!isEnabled()) {\n      return false;\n    }\n\n    long localAllowedMemory = getCurrentMemoryThreshold();\n    long localSeenMemory = calculateLiveMemoryUsage();\n\n    allowedMemory.set(localAllowedMemory);\n\n    seenMemory.set(localSeenMemory);\n\n    return (localSeenMemory >= localAllowedMemory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a761febaf4b3c09d4490395eb90617263016fc2a","date":1597909886,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#isTripped().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/circuitbreaker/MemoryCircuitBreaker#isTripped().mjava","sourceNew":"  // TODO: An optimization can be to trip the circuit breaker for a duration of time\n  // after the circuit breaker condition is matched. This will optimize for per call\n  // overhead of calculating the condition parameters but can result in false positives.\n  @Override\n  public boolean isTripped() {\n    if (!isEnabled()) {\n      return false;\n    }\n\n    if (!enabled) {\n      return false;\n    }\n\n    long localAllowedMemory = getCurrentMemoryThreshold();\n    long localSeenMemory = calculateLiveMemoryUsage();\n\n    allowedMemory.set(localAllowedMemory);\n\n    seenMemory.set(localSeenMemory);\n\n    return (localSeenMemory >= localAllowedMemory);\n  }\n\n","sourceOld":"  // TODO: An optimization can be to trip the circuit breaker for a duration of time\n  // after the circuit breaker condition is matched. This will optimize for per call\n  // overhead of calculating the condition parameters but can result in false positives.\n  @Override\n  public boolean isTripped() {\n    if (!isEnabled()) {\n      return false;\n    }\n\n    long localAllowedMemory = getCurrentMemoryThreshold();\n    long localSeenMemory = calculateLiveMemoryUsage();\n\n    allowedMemory.set(localAllowedMemory);\n\n    seenMemory.set(localSeenMemory);\n\n    return (localSeenMemory >= localAllowedMemory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a761febaf4b3c09d4490395eb90617263016fc2a"],"a761febaf4b3c09d4490395eb90617263016fc2a":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ef8e4fae9bcd156a117f5758819aeabdae3e963"],"8ef8e4fae9bcd156a117f5758819aeabdae3e963":["a761febaf4b3c09d4490395eb90617263016fc2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"a761febaf4b3c09d4490395eb90617263016fc2a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}