{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                         q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n          float fms = defaultMinSimilarity;\n          try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n          } catch (Exception ignored) { }\n         if(fms < 0.0f){\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n         } else if (fms >= 1.0f && fms != (int) fms) {\n           {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n         }\n         q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n                  qUpper = new FieldQueryNode(field,\n                                               EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n\t         * slop number is invalid)\n\t         */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n          if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n\t         * boost number is invalid)\n\t         */\n                  }\n          }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"383e6510a01a27ea3d860472f33049ed2c766e15","date":1424161215,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[25] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[15] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[17] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[25] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[26] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[27] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":["e91b7614171e0a6a82351457c2870d2a0124ba9a","f15bad88fcdb5cb75a8cd9f5dea23a87a3b04b6b"],"bugIntro":["471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[25] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[25] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[25] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[25] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[25] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = Float.valueOf(fuzzySlop.image.substring(1)).intValue();\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[25] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.valueOf(boost.image).floatValue();\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"471724efa83a52ac3ce4aec0a6e9f1836fa71bf3","date":1494775882,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop1 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGE_TO);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop2 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[24] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[25] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":["383e6510a01a27ea3d860472f33049ed2c766e15","e91b7614171e0a6a82351457c2870d2a0124ba9a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop1 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGE_TO);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop2 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[24] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_TO:\n        jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[24] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[25] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50","date":1580737953,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMaxEdits;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop1 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGE_TO);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop2 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[24] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMinSimilarity;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop1 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGE_TO);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop2 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[24] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final public QueryNode Term(CharSequence field) throws ParseException {Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMaxEdits;\n    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:{\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case TERM:{\n        term = jj_consume_token(TERM);\nq = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n        }\n      case REGEXPTERM:{\n        term = jj_consume_token(REGEXPTERM);\nregexp=true;\n        break;\n        }\n      case NUMBER:{\n        term = jj_consume_token(NUMBER);\n        break;\n        }\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case FUZZY_SLOP:{\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\nfuzzy=true;\n        break;\n        }\n      default:\n        jj_la1[13] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case CARAT:{\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case FUZZY_SLOP:{\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\nfuzzy=true;\n          break;\n          }\n        default:\n          jj_la1[14] = jj_gen;\n          ;\n        }\n        break;\n        }\n      default:\n        jj_la1[15] = jj_gen;\n        ;\n      }\nif (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n      }\n    case RANGEIN_START:\n    case RANGEEX_START:{\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case RANGEIN_START:{\n        jj_consume_token(RANGEIN_START);\nstartInc=true;\n        break;\n        }\n      case RANGEEX_START:{\n        jj_consume_token(RANGEEX_START);\n        break;\n        }\n      default:\n        jj_la1[16] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case RANGE_GOOP:{\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n        }\n      case RANGE_QUOTED:{\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n        }\n      case RANGE_TO:{\n        goop1 = jj_consume_token(RANGE_TO);\n        break;\n        }\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGE_TO);\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case RANGE_GOOP:{\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n        }\n      case RANGE_QUOTED:{\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n        }\n      case RANGE_TO:{\n        goop2 = jj_consume_token(RANGE_TO);\n        break;\n        }\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case RANGEIN_END:{\n        jj_consume_token(RANGEIN_END);\nendInc=true;\n        break;\n        }\n      case RANGEEX_END:{\n        jj_consume_token(RANGEEX_END);\n        break;\n        }\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case CARAT:{\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n        }\n      default:\n        jj_la1[20] = jj_gen;\n        ;\n      }\nif (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n      }\n    case QUOTED:{\n      term = jj_consume_token(QUOTED);\nq = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case FUZZY_SLOP:{\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n        }\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case CARAT:{\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n        }\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\nint phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n      }\n    default:\n      jj_la1[23] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\nif (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (\"\" != null) return q;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {\n  Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMaxEdits;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        term = jj_consume_token(TERM);\n                    q = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n      case REGEXPTERM:\n        term = jj_consume_token(REGEXPTERM);\n                             regexp=true;\n        break;\n      case NUMBER:\n        term = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[13] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                fuzzy=true;\n        break;\n      default:\n        jj_la1[14] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n        case FUZZY_SLOP:\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\n                                                         fuzzy=true;\n          break;\n        default:\n          jj_la1[15] = jj_gen;\n          ;\n        }\n        break;\n      default:\n        jj_la1[16] = jj_gen;\n        ;\n      }\n       if (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n    case RANGEIN_START:\n    case RANGEEX_START:\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_START:\n        jj_consume_token(RANGEIN_START);\n                            startInc=true;\n        break;\n      case RANGEEX_START:\n        jj_consume_token(RANGEEX_START);\n        break;\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop1 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGE_TO);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGE_GOOP:\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n      case RANGE_QUOTED:\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n      case RANGE_TO:\n        goop2 = jj_consume_token(RANGE_TO);\n        break;\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case RANGEIN_END:\n        jj_consume_token(RANGEIN_END);\n                          endInc=true;\n        break;\n      case RANGEEX_END:\n        jj_consume_token(RANGEEX_END);\n        break;\n      default:\n        jj_la1[20] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n          if (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n                      q = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case FUZZY_SLOP:\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[23] = jj_gen;\n        ;\n      }\n         int phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n    default:\n      jj_la1[24] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    if (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9","date":1600414700,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser#Term(CharSequence).mjava","sourceNew":"  final private QueryNode Term(CharSequence field) throws ParseException {QueryNode q;\n  Token term, fuzzySlop=null;\n    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n    case REGEXPTERM:{\n      term = jj_consume_token(REGEXPTERM);\nq = new RegexpQueryNode(field, term.image.substring(1, term.image.length() - 1));\n      break;\n      }\n    case NUMBER:\n    case TERM:{\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case TERM:{\n        term = jj_consume_token(TERM);\n        break;\n        }\n      case NUMBER:{\n        term = jj_consume_token(NUMBER);\n        break;\n        }\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\nq = new FieldQueryNode(field, discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case TILDE:{\n        q = FuzzyOp(field, term, q);\n        break;\n        }\n      default:\n        jj_la1[13] = jj_gen;\n        ;\n      }\n      break;\n      }\n    case RANGEIN_START:\n    case RANGEEX_START:{\n      q = TermRangeExpr(field);\n      break;\n      }\n    case QUOTED:{\n      q = QuotedTerm(field);\n      break;\n      }\n    default:\n      jj_la1[14] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n    case CARAT:{\n      q = Boost(q);\n      break;\n      }\n    default:\n      jj_la1[15] = jj_gen;\n      ;\n    }\n{if (\"\" != null) return q;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"  final public QueryNode Term(CharSequence field) throws ParseException {Token term, boost=null, fuzzySlop=null, goop1, goop2;\n  boolean fuzzy = false;\n  boolean regexp = false;\n  boolean startInc=false;\n  boolean endInc=false;\n  QueryNode q =null;\n  FieldQueryNode qLower, qUpper;\n  float defaultMinSimilarity = org.apache.lucene.search.FuzzyQuery.defaultMaxEdits;\n    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n    case TERM:\n    case REGEXPTERM:\n    case NUMBER:{\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case TERM:{\n        term = jj_consume_token(TERM);\nq = new FieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), term.beginColumn, term.endColumn);\n        break;\n        }\n      case REGEXPTERM:{\n        term = jj_consume_token(REGEXPTERM);\nregexp=true;\n        break;\n        }\n      case NUMBER:{\n        term = jj_consume_token(NUMBER);\n        break;\n        }\n      default:\n        jj_la1[12] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case FUZZY_SLOP:{\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\nfuzzy=true;\n        break;\n        }\n      default:\n        jj_la1[13] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case CARAT:{\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n        case FUZZY_SLOP:{\n          fuzzySlop = jj_consume_token(FUZZY_SLOP);\nfuzzy=true;\n          break;\n          }\n        default:\n          jj_la1[14] = jj_gen;\n          ;\n        }\n        break;\n        }\n      default:\n        jj_la1[15] = jj_gen;\n        ;\n      }\nif (fuzzy) {\n           float fms = defaultMinSimilarity;\n           try {\n            fms = Float.parseFloat(fuzzySlop.image.substring(1));\n           } catch (Exception ignored) { }\n           if(fms < 0.0f){\n                {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n          } else if (fms >= 1.0f && fms != (int) fms) {\n            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_EDITS));}\n          }\n          q = new FuzzyQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image), fms, term.beginColumn, term.endColumn);\n       } else if (regexp) {\n         String re = term.image.substring(1, term.image.length()-1);\n         q = new RegexpQueryNode(field, re, 0, re.length());\n       }\n      break;\n      }\n    case RANGEIN_START:\n    case RANGEEX_START:{\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case RANGEIN_START:{\n        jj_consume_token(RANGEIN_START);\nstartInc=true;\n        break;\n        }\n      case RANGEEX_START:{\n        jj_consume_token(RANGEEX_START);\n        break;\n        }\n      default:\n        jj_la1[16] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case RANGE_GOOP:{\n        goop1 = jj_consume_token(RANGE_GOOP);\n        break;\n        }\n      case RANGE_QUOTED:{\n        goop1 = jj_consume_token(RANGE_QUOTED);\n        break;\n        }\n      case RANGE_TO:{\n        goop1 = jj_consume_token(RANGE_TO);\n        break;\n        }\n      default:\n        jj_la1[17] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      jj_consume_token(RANGE_TO);\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case RANGE_GOOP:{\n        goop2 = jj_consume_token(RANGE_GOOP);\n        break;\n        }\n      case RANGE_QUOTED:{\n        goop2 = jj_consume_token(RANGE_QUOTED);\n        break;\n        }\n      case RANGE_TO:{\n        goop2 = jj_consume_token(RANGE_TO);\n        break;\n        }\n      default:\n        jj_la1[18] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case RANGEIN_END:{\n        jj_consume_token(RANGEIN_END);\nendInc=true;\n        break;\n        }\n      case RANGEEX_END:{\n        jj_consume_token(RANGEEX_END);\n        break;\n        }\n      default:\n        jj_la1[19] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case CARAT:{\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n        }\n      default:\n        jj_la1[20] = jj_gen;\n        ;\n      }\nif (goop1.kind == RANGE_QUOTED) {\n            goop1.image = goop1.image.substring(1, goop1.image.length()-1);\n          }\n          if (goop2.kind == RANGE_QUOTED) {\n            goop2.image = goop2.image.substring(1, goop2.image.length()-1);\n          }\n\n          qLower = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop1.image), goop1.beginColumn, goop1.endColumn);\n      qUpper = new FieldQueryNode(field,\n                                   EscapeQuerySyntaxImpl.discardEscapeChar(goop2.image), goop2.beginColumn, goop2.endColumn);\n          q = new TermRangeQueryNode(qLower, qUpper, startInc ? true : false, endInc ? true : false);\n      break;\n      }\n    case QUOTED:{\n      term = jj_consume_token(QUOTED);\nq = new QuotedFieldQueryNode(field, EscapeQuerySyntaxImpl.discardEscapeChar(term.image.substring(1, term.image.length()-1)), term.beginColumn + 1, term.endColumn - 1);\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case FUZZY_SLOP:{\n        fuzzySlop = jj_consume_token(FUZZY_SLOP);\n        break;\n        }\n      default:\n        jj_la1[21] = jj_gen;\n        ;\n      }\n      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n      case CARAT:{\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n        }\n      default:\n        jj_la1[22] = jj_gen;\n        ;\n      }\nint phraseSlop = 0;\n\n         if (fuzzySlop != null) {\n           try {\n             phraseSlop = (int)Float.parseFloat(fuzzySlop.image.substring(1));\n             q = new SlopQueryNode(q, phraseSlop);\n           }\n           catch (Exception ignored) {\n            /* Should this be handled somehow? (defaults to \"no PhraseSlop\", if\n           * slop number is invalid)\n           */\n           }\n         }\n      break;\n      }\n    default:\n      jj_la1[23] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\nif (boost != null) {\n      float f = (float)1.0;\n      try {\n        f = Float.parseFloat(boost.image);\n        // avoid boosting null queries, such as those caused by stop words\n          if (q != null) {\n            q = new BoostQueryNode(q, f);\n          }\n      } catch (Exception ignored) {\n        /* Should this be handled somehow? (defaults to \"no boost\", if\n           * boost number is invalid)\n           */\n      }\n    }\n      {if (\"\" != null) return q;}\n    throw new Error(\"Missing return statement in function\");\n}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["383e6510a01a27ea3d860472f33049ed2c766e15"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["383e6510a01a27ea3d860472f33049ed2c766e15"],"5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50":["471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"],"471724efa83a52ac3ce4aec0a6e9f1836fa71bf3":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"383e6510a01a27ea3d860472f33049ed2c766e15":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"ab68488225b6a6c357dda72ed11dedca9914a192":["383e6510a01a27ea3d860472f33049ed2c766e15","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["471724efa83a52ac3ce4aec0a6e9f1836fa71bf3"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9"],"cfb61e2d7e18571ab4a1eaf5a50a11519e9d79f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"471724efa83a52ac3ce4aec0a6e9f1836fa71bf3":["e9017cf144952056066919f1ebc7897ff9bd71b1","5b9aa8ff78b1007e7d0e7ab9173d0e146eac3e50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"383e6510a01a27ea3d860472f33049ed2c766e15":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["383e6510a01a27ea3d860472f33049ed2c766e15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}