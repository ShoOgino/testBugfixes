{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#setMinShingleSize(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#setMinShingleSize(int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#setMinShingleSize(int).mjava","sourceNew":"  /**\n   * <p>Set the min shingle size (default: 2).\n   * <p>This method requires that the passed in minShingleSize is not greater\n   * than maxShingleSize, so make sure that maxShingleSize is set before\n   * calling this method.\n   *\n   * @param minShingleSize min size of output shingles\n   */\n  public void setMinShingleSize(int minShingleSize) {\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Min shingle size must be >= 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n        (\"Min shingle size must be <= max shingle size\");\n    }\n    this.minShingleSize = minShingleSize;\n  }\n\n","sourceOld":"  /**\n   * <p>Set the min shingle size (default: 2).\n   * <p>This method requires that the passed in minShingleSize is not greater\n   * than maxShingleSize, so make sure that maxShingleSize is set before\n   * calling this method.\n   *\n   * @param minShingleSize min size of output shingles\n   */\n  public void setMinShingleSize(int minShingleSize) {\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Min shingle size must be >= 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n        (\"Min shingle size must be <= max shingle size\");\n    }\n    this.minShingleSize = minShingleSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#setMinShingleSize(int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleAnalyzerWrapper#setMinShingleSize(int).mjava","sourceNew":"  /**\n   * <p>Set the min shingle size (default: 2).\n   * <p>This method requires that the passed in minShingleSize is not greater\n   * than maxShingleSize, so make sure that maxShingleSize is set before\n   * calling this method.\n   *\n   * @param minShingleSize min size of output shingles\n   */\n  public void setMinShingleSize(int minShingleSize) {\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Min shingle size must be >= 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n        (\"Min shingle size must be <= max shingle size\");\n    }\n    this.minShingleSize = minShingleSize;\n  }\n\n","sourceOld":"  /**\n   * <p>Set the min shingle size (default: 2).\n   * <p>This method requires that the passed in minShingleSize is not greater\n   * than maxShingleSize, so make sure that maxShingleSize is set before\n   * calling this method.\n   *\n   * @param minShingleSize min size of output shingles\n   */\n  public void setMinShingleSize(int minShingleSize) {\n    if (minShingleSize < 2) {\n      throw new IllegalArgumentException(\"Min shingle size must be >= 2\");\n    }\n    if (minShingleSize > maxShingleSize) {\n      throw new IllegalArgumentException\n        (\"Min shingle size must be <= max shingle size\");\n    }\n    this.minShingleSize = minShingleSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}