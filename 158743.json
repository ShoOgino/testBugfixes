{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanNot().mjava","commits":[{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    checkSpans(MultiSpansWrapper.wrap(reader, snq, collector), collector, 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n    \n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq), 1,new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    checkSpans(MultiSpansWrapper.wrap(reader, snq, SpanWeight.Postings.PAYLOADS), collector, 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    checkSpans(MultiSpansWrapper.wrap(reader, snq, collector), collector, 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadSpans#testSpanNot().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testSpanNot().mjava","sourceNew":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    checkSpans(MultiSpansWrapper.wrap(reader, snq, SpanWeight.Postings.PAYLOADS), 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanNot() throws Exception {\n    SpanQuery[] clauses = new SpanQuery[2];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n    SpanQuery spq = new SpanNearQuery(clauses, 5, true);\n    SpanNotQuery snq = new SpanNotQuery(spq, new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\")));\n\n\n\n    Directory directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory,\n                                                     newIndexWriterConfig(new PayloadAnalyzer()).setSimilarity(similarity));\n\n    Document doc = new Document();\n    doc.add(newTextField(PayloadHelper.FIELD, \"one two three one four three\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader reader = writer.getReader();\n    writer.close();\n\n    PayloadSpanCollector collector = new PayloadSpanCollector();\n    checkSpans(MultiSpansWrapper.wrap(reader, snq, SpanWeight.Postings.PAYLOADS), collector, 1, new int[]{2});\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["29aea3139c4326c0501d75d51059855463220279"],"29aea3139c4326c0501d75d51059855463220279":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29aea3139c4326c0501d75d51059855463220279":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}