{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#endElement(String,String,String).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#endElement(String,String,String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#endElement(String,String,String).mjava","sourceNew":"  /**\n   * @see org.xml.sax.ContentHandler#endElement(java.lang.String,\n   *      java.lang.String, java.lang.String)\n   */\n  public void endElement(String uri, String local, String raw) {\n\n    if (token.length() > 0) {\n      String word = token.toString();\n      switch (currElement) {\n        case ELEM_CLASSES:\n          consumer.addClass(word);\n          break;\n        case ELEM_EXCEPTIONS:\n          exception.add(word);\n          exception = normalizeException(exception);\n          consumer.addException(getExceptionWord(exception),\n              (ArrayList) exception.clone());\n          break;\n        case ELEM_PATTERNS:\n          consumer.addPattern(getPattern(word), getInterletterValues(word));\n          break;\n        case ELEM_HYPHEN:\n          // nothing to do\n          break;\n      }\n      if (currElement != ELEM_HYPHEN) {\n        token.setLength(0);\n      }\n    }\n    if (currElement == ELEM_HYPHEN) {\n      currElement = ELEM_EXCEPTIONS;\n    } else {\n      currElement = 0;\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see org.xml.sax.ContentHandler#endElement(java.lang.String,\n   *      java.lang.String, java.lang.String)\n   */\n  public void endElement(String uri, String local, String raw) {\n\n    if (token.length() > 0) {\n      String word = token.toString();\n      switch (currElement) {\n        case ELEM_CLASSES:\n          consumer.addClass(word);\n          break;\n        case ELEM_EXCEPTIONS:\n          exception.add(word);\n          exception = normalizeException(exception);\n          consumer.addException(getExceptionWord(exception),\n              (ArrayList) exception.clone());\n          break;\n        case ELEM_PATTERNS:\n          consumer.addPattern(getPattern(word), getInterletterValues(word));\n          break;\n        case ELEM_HYPHEN:\n          // nothing to do\n          break;\n      }\n      if (currElement != ELEM_HYPHEN) {\n        token.setLength(0);\n      }\n    }\n    if (currElement == ELEM_HYPHEN) {\n      currElement = ELEM_EXCEPTIONS;\n    } else {\n      currElement = 0;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#endElement(String,String,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#endElement(String,String,String).mjava","sourceNew":"  /**\n   * @see org.xml.sax.ContentHandler#endElement(java.lang.String,\n   *      java.lang.String, java.lang.String)\n   */\n  @Override\n  public void endElement(String uri, String local, String raw) {\n\n    if (token.length() > 0) {\n      String word = token.toString();\n      switch (currElement) {\n        case ELEM_CLASSES:\n          consumer.addClass(word);\n          break;\n        case ELEM_EXCEPTIONS:\n          exception.add(word);\n          exception = normalizeException(exception);\n          consumer.addException(getExceptionWord(exception),\n              (ArrayList) exception.clone());\n          break;\n        case ELEM_PATTERNS:\n          consumer.addPattern(getPattern(word), getInterletterValues(word));\n          break;\n        case ELEM_HYPHEN:\n          // nothing to do\n          break;\n      }\n      if (currElement != ELEM_HYPHEN) {\n        token.setLength(0);\n      }\n    }\n    if (currElement == ELEM_HYPHEN) {\n      currElement = ELEM_EXCEPTIONS;\n    } else {\n      currElement = 0;\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see org.xml.sax.ContentHandler#endElement(java.lang.String,\n   *      java.lang.String, java.lang.String)\n   */\n  public void endElement(String uri, String local, String raw) {\n\n    if (token.length() > 0) {\n      String word = token.toString();\n      switch (currElement) {\n        case ELEM_CLASSES:\n          consumer.addClass(word);\n          break;\n        case ELEM_EXCEPTIONS:\n          exception.add(word);\n          exception = normalizeException(exception);\n          consumer.addException(getExceptionWord(exception),\n              (ArrayList) exception.clone());\n          break;\n        case ELEM_PATTERNS:\n          consumer.addPattern(getPattern(word), getInterletterValues(word));\n          break;\n        case ELEM_HYPHEN:\n          // nothing to do\n          break;\n      }\n      if (currElement != ELEM_HYPHEN) {\n        token.setLength(0);\n      }\n    }\n    if (currElement == ELEM_HYPHEN) {\n      currElement = ELEM_EXCEPTIONS;\n    } else {\n      currElement = 0;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#endElement(String,String,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#endElement(String,String,String).mjava","sourceNew":"  /**\n   * @see org.xml.sax.ContentHandler#endElement(java.lang.String,\n   *      java.lang.String, java.lang.String)\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void endElement(String uri, String local, String raw) {\n\n    if (token.length() > 0) {\n      String word = token.toString();\n      switch (currElement) {\n        case ELEM_CLASSES:\n          consumer.addClass(word);\n          break;\n        case ELEM_EXCEPTIONS:\n          exception.add(word);\n          exception = normalizeException(exception);\n          consumer.addException(getExceptionWord(exception), \n              (ArrayList) exception.clone());\n          break;\n        case ELEM_PATTERNS:\n          consumer.addPattern(getPattern(word), getInterletterValues(word));\n          break;\n        case ELEM_HYPHEN:\n          // nothing to do\n          break;\n      }\n      if (currElement != ELEM_HYPHEN) {\n        token.setLength(0);\n      }\n    }\n    if (currElement == ELEM_HYPHEN) {\n      currElement = ELEM_EXCEPTIONS;\n    } else {\n      currElement = 0;\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see org.xml.sax.ContentHandler#endElement(java.lang.String,\n   *      java.lang.String, java.lang.String)\n   */\n  @Override\n  public void endElement(String uri, String local, String raw) {\n\n    if (token.length() > 0) {\n      String word = token.toString();\n      switch (currElement) {\n        case ELEM_CLASSES:\n          consumer.addClass(word);\n          break;\n        case ELEM_EXCEPTIONS:\n          exception.add(word);\n          exception = normalizeException(exception);\n          consumer.addException(getExceptionWord(exception),\n              (ArrayList) exception.clone());\n          break;\n        case ELEM_PATTERNS:\n          consumer.addPattern(getPattern(word), getInterletterValues(word));\n          break;\n        case ELEM_HYPHEN:\n          // nothing to do\n          break;\n      }\n      if (currElement != ELEM_HYPHEN) {\n        token.setLength(0);\n      }\n    }\n    if (currElement == ELEM_HYPHEN) {\n      currElement = ELEM_EXCEPTIONS;\n    } else {\n      currElement = 0;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#endElement(String,String,String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/hyphenation/PatternParser#endElement(String,String,String).mjava","sourceNew":"  /**\n   * @see org.xml.sax.ContentHandler#endElement(java.lang.String,\n   *      java.lang.String, java.lang.String)\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void endElement(String uri, String local, String raw) {\n\n    if (token.length() > 0) {\n      String word = token.toString();\n      switch (currElement) {\n        case ELEM_CLASSES:\n          consumer.addClass(word);\n          break;\n        case ELEM_EXCEPTIONS:\n          exception.add(word);\n          exception = normalizeException(exception);\n          consumer.addException(getExceptionWord(exception), \n              (ArrayList) exception.clone());\n          break;\n        case ELEM_PATTERNS:\n          consumer.addPattern(getPattern(word), getInterletterValues(word));\n          break;\n        case ELEM_HYPHEN:\n          // nothing to do\n          break;\n      }\n      if (currElement != ELEM_HYPHEN) {\n        token.setLength(0);\n      }\n    }\n    if (currElement == ELEM_HYPHEN) {\n      currElement = ELEM_EXCEPTIONS;\n    } else {\n      currElement = 0;\n    }\n\n  }\n\n","sourceOld":"  /**\n   * @see org.xml.sax.ContentHandler#endElement(java.lang.String,\n   *      java.lang.String, java.lang.String)\n   */\n  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void endElement(String uri, String local, String raw) {\n\n    if (token.length() > 0) {\n      String word = token.toString();\n      switch (currElement) {\n        case ELEM_CLASSES:\n          consumer.addClass(word);\n          break;\n        case ELEM_EXCEPTIONS:\n          exception.add(word);\n          exception = normalizeException(exception);\n          consumer.addException(getExceptionWord(exception), \n              (ArrayList) exception.clone());\n          break;\n        case ELEM_PATTERNS:\n          consumer.addPattern(getPattern(word), getInterletterValues(word));\n          break;\n        case ELEM_HYPHEN:\n          // nothing to do\n          break;\n      }\n      if (currElement != ELEM_HYPHEN) {\n        token.setLength(0);\n      }\n    }\n    if (currElement == ELEM_HYPHEN) {\n      currElement = ELEM_EXCEPTIONS;\n    } else {\n      currElement = 0;\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}