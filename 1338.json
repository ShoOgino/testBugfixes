{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSplitOnWhitespace_Different_Field_Analysis().mjava","commits":[{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSplitOnWhitespace_Different_Field_Analysis().mjava","pathOld":"/dev/null","sourceNew":"  public void testSplitOnWhitespace_Different_Field_Analysis() throws Exception {\n    // When the *structure* of produced queries is different in each field, \n    // sow=true produces boolean-of-dismax query structure,\n    // and sow=false produces dismax-of-boolean query structure.\n    assertQ(req(\"qf\", \"text_sw title\",\n        \"q\", \"olive the other\",\n        \"defType\", \"edismax\",\n        \"sow\", \"true\",\n        \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((text_sw:oliv | title:olive))')]\",\n        \"//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((title:the))')]\",\n        \"//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((text_sw:other | title:other))')]\"\n    );\n    assertQ(req(\"qf\", \"text_sw title\",\n        \"q\", \"olive the other\",\n        \"defType\", \"edismax\",\n        \"sow\", \"false\",\n        \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'+DisjunctionMaxQuery(((text_sw:oliv text_sw:other) | (title:olive title:the title:other)))')]\"\n    );\n\n    // When field's analysis produce different query structures, mm processing is always done on the boolean query.\n    // sow=true produces (boolean-of-dismax)~<mm> query structure,\n    // and sow=false produces dismax-of-(boolean)~<mm> query structure.\n    assertQ(req(\"qf\", \"text_sw title\",\n        \"q\", \"olive the other\",\n        \"defType\", \"edismax\",\n        \"sow\", \"true\",\n        \"mm\", \"100%\",\n        \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'+(DisjunctionMaxQuery((text_sw:oliv | title:olive)) DisjunctionMaxQuery((title:the)) DisjunctionMaxQuery((text_sw:other | title:other)))~3')]\"\n    );\n    assertQ(req(\"qf\", \"text_sw title\",\n        \"q\", \"olive the other\",\n        \"defType\", \"edismax\",\n        \"sow\", \"false\",\n        \"mm\", \"100%\",\n        \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'+DisjunctionMaxQuery((((text_sw:oliv text_sw:other)~2) | ((title:olive title:the title:other)~3)))')]\"\n    );\n\n\n    // When the *structure* of produced queries is the same in each field, \n    // sow=false/true produce the same boolean-of-dismax query structure \n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(req(\"qf\", \"text_sw title\",\n          \"q\", \"olive blah other\",\n          \"defType\", \"edismax\",\n          \"sow\", sow,\n          \"debugQuery\", \"true\"),\n          \"//str[@name='parsedquery'][contains(.,'\"\n              + \"+(DisjunctionMaxQuery((text_sw:oliv | title:olive))\"\n              + \" DisjunctionMaxQuery((text_sw:blah | title:blah))\"\n              + \" DisjunctionMaxQuery((text_sw:other | title:other)))')]\"\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testSplitOnWhitespace_Different_Field_Analysis().mjava","pathOld":"/dev/null","sourceNew":"  public void testSplitOnWhitespace_Different_Field_Analysis() throws Exception {\n    // When the *structure* of produced queries is different in each field, \n    // sow=true produces boolean-of-dismax query structure,\n    // and sow=false produces dismax-of-boolean query structure.\n    assertQ(req(\"qf\", \"text_sw title\",\n        \"q\", \"olive the other\",\n        \"defType\", \"edismax\",\n        \"sow\", \"true\",\n        \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((text_sw:oliv | title:olive))')]\",\n        \"//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((title:the))')]\",\n        \"//str[@name='parsedquery'][contains(.,'DisjunctionMaxQuery((text_sw:other | title:other))')]\"\n    );\n    assertQ(req(\"qf\", \"text_sw title\",\n        \"q\", \"olive the other\",\n        \"defType\", \"edismax\",\n        \"sow\", \"false\",\n        \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'+DisjunctionMaxQuery(((text_sw:oliv text_sw:other) | (title:olive title:the title:other)))')]\"\n    );\n\n    // When field's analysis produce different query structures, mm processing is always done on the boolean query.\n    // sow=true produces (boolean-of-dismax)~<mm> query structure,\n    // and sow=false produces dismax-of-(boolean)~<mm> query structure.\n    assertQ(req(\"qf\", \"text_sw title\",\n        \"q\", \"olive the other\",\n        \"defType\", \"edismax\",\n        \"sow\", \"true\",\n        \"mm\", \"100%\",\n        \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'+(DisjunctionMaxQuery((text_sw:oliv | title:olive)) DisjunctionMaxQuery((title:the)) DisjunctionMaxQuery((text_sw:other | title:other)))~3')]\"\n    );\n    assertQ(req(\"qf\", \"text_sw title\",\n        \"q\", \"olive the other\",\n        \"defType\", \"edismax\",\n        \"sow\", \"false\",\n        \"mm\", \"100%\",\n        \"debugQuery\", \"true\"),\n        \"//str[@name='parsedquery'][contains(.,'+DisjunctionMaxQuery((((text_sw:oliv text_sw:other)~2) | ((title:olive title:the title:other)~3)))')]\"\n    );\n\n\n    // When the *structure* of produced queries is the same in each field, \n    // sow=false/true produce the same boolean-of-dismax query structure \n    for (String sow : Arrays.asList(\"true\", \"false\")) {\n      assertQ(req(\"qf\", \"text_sw title\",\n          \"q\", \"olive blah other\",\n          \"defType\", \"edismax\",\n          \"sow\", sow,\n          \"debugQuery\", \"true\"),\n          \"//str[@name='parsedquery'][contains(.,'\"\n              + \"+(DisjunctionMaxQuery((text_sw:oliv | title:olive))\"\n              + \" DisjunctionMaxQuery((text_sw:blah | title:blah))\"\n              + \" DisjunctionMaxQuery((text_sw:other | title:other)))')]\"\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c03778630c4604270d88c148afb8c7de35b51d3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e55782fb51a6e9789542818eb2161a3247f39ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e55782fb51a6e9789542818eb2161a3247f39ace"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":[],"e55782fb51a6e9789542818eb2161a3247f39ace":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c03778630c4604270d88c148afb8c7de35b51d3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}