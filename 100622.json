{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (VERBOSE && TEST_ITER > 1) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (VERBOSE && TEST_ITER > 1) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (VERBOSE && TEST_ITER > 1) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (VERBOSE && TEST_ITER > 1) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (VERBOSE && TEST_ITER > 1) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a41da77686b82534aa52589a42508ee89f01120","date":1301510877,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      int lastIterFailed = -1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          lastIterFailed = i;\n          if (i == TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + lastIterFailed + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (VERBOSE && TEST_ITER > 1) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      int lastIterFailed = -1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          lastIterFailed = i;\n          if (i == TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + lastIterFailed + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (VERBOSE && TEST_ITER > 1) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"169151a9ca12cfbed28320e111279a893365e780","date":1303907948,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          if (i >= TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + i + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      int lastIterFailed = -1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          lastIterFailed = i;\n          if (i == TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + lastIterFailed + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d5df8e07c035d62d982894b439322da40e0938","date":1303923139,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          if (i >= TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + i + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      int lastIterFailed = -1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          lastIterFailed = i;\n          if (i == TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + lastIterFailed + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          if (i >= TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + i + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (VERBOSE && TEST_ITER > 1) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3c12b2df00ba96fed86d45277197bc4d09f084","date":1306080516,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      final boolean verbose = VERBOSE && TEST_ITER > 1;\n      \n      final int currentIter[] = new int[1];\n      arg1.addListener(new RunListener() {\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          if (verbose) {\n            System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n          }\n        }\n      });\n      for (int i = 0; i < TEST_ITER; i++) {\n        currentIter[0] = i;\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          if (i >= TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + i + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      final boolean verbose = VERBOSE && TEST_ITER > 1;\n      \n      final int currentIter[] = new int[1];\n      arg1.addListener(new RunListener() {\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          if (verbose) {\n            System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n          }\n        }\n      });\n      for (int i = 0; i < TEST_ITER; i++) {\n        currentIter[0] = i;\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      int lastIterFailed = -1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          lastIterFailed = i;\n          if (i == TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + lastIterFailed + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      final boolean verbose = VERBOSE && TEST_ITER > 1;\n      \n      final int currentIter[] = new int[1];\n      arg1.addListener(new RunListener() {\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          if (verbose) {\n            System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n          }\n        }\n      });\n      for (int i = 0; i < TEST_ITER; i++) {\n        currentIter[0] = i;\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n            break;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      boolean verbose = VERBOSE && TEST_ITER > 1;\n      for (int i = 0; i < TEST_ITER; i++) {\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          if (i >= TEST_ITER_MIN - 1) {\n            if (verbose) {\n              System.out.println(\"\\nNOTE: iteration \" + i + \" failed !\");\n            }\n            break;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb2037f0b6c95cf65a182dc85883bca429889705","date":1314326112,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.LuceneTestCaseRunner#runChild(FrameworkMethod,RunNotifier).mjava","sourceNew":null,"sourceOld":"    @Override\n    protected void runChild(FrameworkMethod arg0, RunNotifier arg1) {\n      if (VERBOSE) {\n        System.out.println(\"\\nNOTE: running test \" + arg0.getName());\n      }\n      \n      // only print iteration info if the user requested more than one iterations\n      final boolean verbose = VERBOSE && TEST_ITER > 1;\n      \n      final int currentIter[] = new int[1];\n      arg1.addListener(new RunListener() {\n        @Override\n        public void testFailure(Failure failure) throws Exception {\n          if (verbose) {\n            System.out.println(\"\\nNOTE: iteration \" + currentIter[0] + \" failed! \");\n          }\n        }\n      });\n      for (int i = 0; i < TEST_ITER; i++) {\n        currentIter[0] = i;\n        if (verbose) {\n          System.out.println(\"\\nNOTE: running iter=\" + (1+i) + \" of \" + TEST_ITER);\n        }\n        super.runChild(arg0, arg1);\n        if (testsFailed) {\n          if (i >= TEST_ITER_MIN - 1) { // XXX is this still off-by-one?\n            break;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a41da77686b82534aa52589a42508ee89f01120":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["135621f3a0670a9394eb563224a3b76cc4dddc0f","9d3c12b2df00ba96fed86d45277197bc4d09f084"],"d4d5df8e07c035d62d982894b439322da40e0938":["45669a651c970812a680841b97a77cce06af559f","169151a9ca12cfbed28320e111279a893365e780"],"169151a9ca12cfbed28320e111279a893365e780":["1a41da77686b82534aa52589a42508ee89f01120"],"9d3c12b2df00ba96fed86d45277197bc4d09f084":["169151a9ca12cfbed28320e111279a893365e780"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","169151a9ca12cfbed28320e111279a893365e780"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1a41da77686b82534aa52589a42508ee89f01120","9d3c12b2df00ba96fed86d45277197bc4d09f084"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb2037f0b6c95cf65a182dc85883bca429889705":["9d3c12b2df00ba96fed86d45277197bc4d09f084"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","1a41da77686b82534aa52589a42508ee89f01120"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb2037f0b6c95cf65a182dc85883bca429889705"]},"commit2Childs":{"1a41da77686b82534aa52589a42508ee89f01120":["169151a9ca12cfbed28320e111279a893365e780","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"d4d5df8e07c035d62d982894b439322da40e0938":[],"169151a9ca12cfbed28320e111279a893365e780":["d4d5df8e07c035d62d982894b439322da40e0938","9d3c12b2df00ba96fed86d45277197bc4d09f084","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"9d3c12b2df00ba96fed86d45277197bc4d09f084":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","a3776dccca01c11e7046323cfad46a3b4a471233","eb2037f0b6c95cf65a182dc85883bca429889705"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["1a41da77686b82534aa52589a42508ee89f01120","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"eb2037f0b6c95cf65a182dc85883bca429889705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45669a651c970812a680841b97a77cce06af559f":["d4d5df8e07c035d62d982894b439322da40e0938"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","d4d5df8e07c035d62d982894b439322da40e0938","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}