{"path":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","commits":[{"id":"220577719e3753e52195ed66dc9af6c4e65e2873","date":1550042623,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws IOException {\n    String sampleObj = \"{k : v , \" +\n        \"mapk : {k1: v1, k2 : [v2_1 , v2_2 ]},\" +\n        \"listk : [ 1, 2, 3 ],\" +\n        \"maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ],\" +\n        \"}\";\n\n\n    Map m = (Map) Utils.fromJSONString(sampleObj);\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    new JavaBinCodec().marshal(m, baos);\n\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));\n\n    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(FastJavaBinDecoder.getEntryListener());\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(fastMap, new StringWriter(), true).toString());\n\n    Object newMap = new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(e -> {\n          e.listenContainer(new LinkedHashMap<>(), e_ -> {\n            Map rootMap = (Map) e_.ctx();\n            if (e_.type() == DataEntry.Type.ENTRY_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_ARRAYLIST_FUN),\n                  FastJavaBinDecoder.getEntryListener());\n            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_LINKED_HASHMAP_FUN), e1 -> {\n                Map m1 = (Map) e1.ctx();\n                if (\"k1\".equals(e1.name())) {\n                  m1.put(e1.name(), e1.val().toString());\n                }\n                //eat up k2\n              });\n            } else if (e_.type() == DataEntry.Type.STR) {\n              rootMap.put(e_.name(), e_.val().toString());\n            }\n\n          });\n        });\n    ((Map) m2.get(\"mapk\")).remove(\"k2\");\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(newMap, new StringWriter(), true).toString());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    String sampleObj = \"{k : v , \" +\n        \"mapk : {k1: v1, k2 : [v2_1 , v2_2 ]},\" +\n        \"listk : [ 1, 2, 3 ],\" +\n        \"maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ],\" +\n        \"}\";\n\n\n    Map m = (Map) Utils.fromJSONString(sampleObj);\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m, baos);\n    }\n\n    Map m2;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      m2 = (Map) jbc.unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));\n    }\n    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(FastJavaBinDecoder.getEntryListener());\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(fastMap, new StringWriter(), true).toString());\n\n    Object newMap = new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(e -> {\n          e.listenContainer(new LinkedHashMap<>(), e_ -> {\n            Map rootMap = (Map) e_.ctx();\n            if (e_.type() == DataEntry.Type.ENTRY_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_ARRAYLIST_FUN),\n                  FastJavaBinDecoder.getEntryListener());\n            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_LINKED_HASHMAP_FUN), e1 -> {\n                Map m1 = (Map) e1.ctx();\n                if (\"k1\".equals(e1.name())) {\n                  m1.put(e1.name(), e1.val().toString());\n                }\n                //eat up k2\n              });\n            } else if (e_.type() == DataEntry.Type.STR) {\n              rootMap.put(e_.name(), e_.val().toString());\n            }\n\n          });\n        });\n    ((Map) m2.get(\"mapk\")).remove(\"k2\");\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(newMap, new StringWriter(), true).toString());\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    String sampleObj = \"{k : v , \" +\n        \"mapk : {k1: v1, k2 : [v2_1 , v2_2 ]},\" +\n        \"listk : [ 1, 2, 3 ],\" +\n        \"maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ],\" +\n        \"}\";\n\n\n    Map m = (Map) Utils.fromJSONString(sampleObj);\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    new JavaBinCodec().marshal(m, baos);\n\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));\n\n    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(FastJavaBinDecoder.getEntryListener());\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(fastMap, new StringWriter(), true).toString());\n\n    Object newMap = new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(e -> {\n          e.listenContainer(new LinkedHashMap<>(), e_ -> {\n            Map rootMap = (Map) e_.ctx();\n            if (e_.type() == DataEntry.Type.ENTRY_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_ARRAYLIST_FUN),\n                  FastJavaBinDecoder.getEntryListener());\n            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_LINKED_HASHMAP_FUN), e1 -> {\n                Map m1 = (Map) e1.ctx();\n                if (\"k1\".equals(e1.name())) {\n                  m1.put(e1.name(), e1.val().toString());\n                }\n                //eat up k2\n              });\n            } else if (e_.type() == DataEntry.Type.STR) {\n              rootMap.put(e_.name(), e_.val().toString());\n            }\n\n          });\n        });\n    ((Map) m2.get(\"mapk\")).remove(\"k2\");\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(newMap, new StringWriter(), true).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    String sampleObj = \"{k : v , \" +\n        \"mapk : {k1: v1, k2 : [v2_1 , v2_2 ]},\" +\n        \"listk : [ 1, 2, 3 ],\" +\n        \"maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ],\" +\n        \"}\";\n\n\n    Map m = (Map) Utils.fromJSONString(sampleObj);\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m, baos);\n    }\n\n    Map m2;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      m2 = (Map) jbc.unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));\n    }\n    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(FastJavaBinDecoder.getEntryListener());\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(fastMap, new StringWriter(), true).toString());\n\n    Object newMap = new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(e -> {\n          e.listenContainer(new LinkedHashMap<>(), e_ -> {\n            Map rootMap = (Map) e_.ctx();\n            if (e_.type() == DataEntry.Type.ENTRY_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_ARRAYLIST_FUN),\n                  FastJavaBinDecoder.getEntryListener());\n            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_LINKED_HASHMAP_FUN), e1 -> {\n                Map m1 = (Map) e1.ctx();\n                if (\"k1\".equals(e1.name())) {\n                  m1.put(e1.name(), e1.val().toString());\n                }\n                //eat up k2\n              });\n            } else if (e_.type() == DataEntry.Type.STR) {\n              rootMap.put(e_.name(), e_.val().toString());\n            }\n\n          });\n        });\n    ((Map) m2.get(\"mapk\")).remove(\"k2\");\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(newMap, new StringWriter(), true).toString());\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    String sampleObj = \"{k : v , \" +\n        \"mapk : {k1: v1, k2 : [v2_1 , v2_2 ]},\" +\n        \"listk : [ 1, 2, 3 ],\" +\n        \"maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ],\" +\n        \"}\";\n\n\n    Map m = (Map) Utils.fromJSONString(sampleObj);\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    new JavaBinCodec().marshal(m, baos);\n\n    Map m2 = (Map) new JavaBinCodec().unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));\n\n    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(FastJavaBinDecoder.getEntryListener());\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(fastMap, new StringWriter(), true).toString());\n\n    Object newMap = new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(e -> {\n          e.listenContainer(new LinkedHashMap<>(), e_ -> {\n            Map rootMap = (Map) e_.ctx();\n            if (e_.type() == DataEntry.Type.ENTRY_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_ARRAYLIST_FUN),\n                  FastJavaBinDecoder.getEntryListener());\n            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_LINKED_HASHMAP_FUN), e1 -> {\n                Map m1 = (Map) e1.ctx();\n                if (\"k1\".equals(e1.name())) {\n                  m1.put(e1.name(), e1.val().toString());\n                }\n                //eat up k2\n              });\n            } else if (e_.type() == DataEntry.Type.STR) {\n              rootMap.put(e_.name(), e_.val().toString());\n            }\n\n          });\n        });\n    ((Map) m2.get(\"mapk\")).remove(\"k2\");\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(newMap, new StringWriter(), true).toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    String sampleObj = \"{k : v , \" +\n        \"mapk : {k1: v1, k2 : [v2_1 , v2_2 ]},\" +\n        \"listk : [ 1, 2, 3 ],\" +\n        \"maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ],\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) Utils.fromJSONString(sampleObj);\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m, baos);\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m2;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      m2 = (Map) jbc.unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(FastJavaBinDecoder.getEntryListener());\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(fastMap, new StringWriter(), true).toString());\n\n    @SuppressWarnings({\"unchecked\"})\n    Object newMap = new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(e -> {\n          e.listenContainer(new LinkedHashMap<>(), e_ -> {\n            @SuppressWarnings({\"rawtypes\"})\n            Map rootMap = (Map) e_.ctx();\n            if (e_.type() == DataEntry.Type.ENTRY_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_ARRAYLIST_FUN),\n                  FastJavaBinDecoder.getEntryListener());\n            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_LINKED_HASHMAP_FUN), e1 -> {\n                @SuppressWarnings({\"rawtypes\"})\n                Map m1 = (Map) e1.ctx();\n                if (\"k1\".equals(e1.name())) {\n                  m1.put(e1.name(), e1.val().toString());\n                }\n                //eat up k2\n              });\n            } else if (e_.type() == DataEntry.Type.STR) {\n              rootMap.put(e_.name(), e_.val().toString());\n            }\n\n          });\n        });\n    ((Map) m2.get(\"mapk\")).remove(\"k2\");\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(newMap, new StringWriter(), true).toString());\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    String sampleObj = \"{k : v , \" +\n        \"mapk : {k1: v1, k2 : [v2_1 , v2_2 ]},\" +\n        \"listk : [ 1, 2, 3 ],\" +\n        \"maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ],\" +\n        \"}\";\n\n\n    Map m = (Map) Utils.fromJSONString(sampleObj);\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m, baos);\n    }\n\n    Map m2;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      m2 = (Map) jbc.unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));\n    }\n    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(FastJavaBinDecoder.getEntryListener());\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(fastMap, new StringWriter(), true).toString());\n\n    Object newMap = new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(e -> {\n          e.listenContainer(new LinkedHashMap<>(), e_ -> {\n            Map rootMap = (Map) e_.ctx();\n            if (e_.type() == DataEntry.Type.ENTRY_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_ARRAYLIST_FUN),\n                  FastJavaBinDecoder.getEntryListener());\n            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_LINKED_HASHMAP_FUN), e1 -> {\n                Map m1 = (Map) e1.ctx();\n                if (\"k1\".equals(e1.name())) {\n                  m1.put(e1.name(), e1.val().toString());\n                }\n                //eat up k2\n              });\n            } else if (e_.type() == DataEntry.Type.STR) {\n              rootMap.put(e_.name(), e_.val().toString());\n            }\n\n          });\n        });\n    ((Map) m2.get(\"mapk\")).remove(\"k2\");\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(newMap, new StringWriter(), true).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5143a137c6366836cdc47feaad23a1f86ba50c3b","date":1599311985,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/TestFastJavabinDecoder#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    String sampleObj = \"{k : v , \" +\n        \"mapk : {k1: v1, k2 : [v2_1 , v2_2 ]},\" +\n        \"listk : [ 1, 2, 3 ],\" +\n        \"maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ],\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) Utils.fromJSONString(sampleObj);\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m, baos);\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m2;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      m2 = (Map) jbc.unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(FastJavaBinDecoder.getEntryListener());\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(fastMap, new StringWriter(), true).toString());\n\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    Object newMap = new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(e -> {\n          e.listenContainer(new LinkedHashMap<>(), e_ -> {\n            Map rootMap = (Map) e_.ctx();\n            if (e_.type() == DataEntry.Type.ENTRY_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), o -> new ArrayList<>()),\n                  FastJavaBinDecoder.getEntryListener());\n            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), o -> new LinkedHashMap<>()), e1 -> {\n                Map<CharSequence,String> m1 = (Map<CharSequence,String>) e1.ctx();\n                if (\"k1\".equals(e1.name())) {\n                  m1.put(e1.name(), e1.val().toString());\n                }\n                //eat up k2\n              });\n            } else if (e_.type() == DataEntry.Type.STR) {\n              rootMap.put(e_.name(), e_.val().toString());\n            }\n\n          });\n        });\n    ((Map) m2.get(\"mapk\")).remove(\"k2\");\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(newMap, new StringWriter(), true).toString());\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    String sampleObj = \"{k : v , \" +\n        \"mapk : {k1: v1, k2 : [v2_1 , v2_2 ]},\" +\n        \"listk : [ 1, 2, 3 ],\" +\n        \"maps : [ {id: kov1}, {id : kov2} ,{id:kov3 , longv : 234} ],\" +\n        \"}\";\n\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m = (Map) Utils.fromJSONString(sampleObj);\n    BinaryRequestWriter.BAOS baos = new BinaryRequestWriter.BAOS();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m, baos);\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m2;\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      m2 = (Map) jbc.unmarshal(new FastInputStream(null, baos.getbuf(), 0, baos.size()));\n    }\n    @SuppressWarnings({\"rawtypes\"})\n    LinkedHashMap fastMap = (LinkedHashMap) new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(FastJavaBinDecoder.getEntryListener());\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(fastMap, new StringWriter(), true).toString());\n\n    @SuppressWarnings({\"unchecked\"})\n    Object newMap = new FastJavaBinDecoder()\n        .withInputStream(new FastInputStream(null, baos.getbuf(), 0, baos.size()))\n        .decode(e -> {\n          e.listenContainer(new LinkedHashMap<>(), e_ -> {\n            @SuppressWarnings({\"rawtypes\"})\n            Map rootMap = (Map) e_.ctx();\n            if (e_.type() == DataEntry.Type.ENTRY_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_ARRAYLIST_FUN),\n                  FastJavaBinDecoder.getEntryListener());\n            } else if (e_.type() == DataEntry.Type.KEYVAL_ITER) {\n              e_.listenContainer(rootMap.computeIfAbsent(e_.name(), NEW_LINKED_HASHMAP_FUN), e1 -> {\n                @SuppressWarnings({\"rawtypes\"})\n                Map m1 = (Map) e1.ctx();\n                if (\"k1\".equals(e1.name())) {\n                  m1.put(e1.name(), e1.val().toString());\n                }\n                //eat up k2\n              });\n            } else if (e_.type() == DataEntry.Type.STR) {\n              rootMap.put(e_.name(), e_.val().toString());\n            }\n\n          });\n        });\n    ((Map) m2.get(\"mapk\")).remove(\"k2\");\n    assertEquals(Utils.writeJson(m2, new StringWriter(), true).toString(),\n        Utils.writeJson(newMap, new StringWriter(), true).toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8c5cdabe00d4d433e6a831e18f68201284973eef"],"220577719e3753e52195ed66dc9af6c4e65e2873":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["220577719e3753e52195ed66dc9af6c4e65e2873"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["220577719e3753e52195ed66dc9af6c4e65e2873","8c5cdabe00d4d433e6a831e18f68201284973eef"],"5143a137c6366836cdc47feaad23a1f86ba50c3b":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5143a137c6366836cdc47feaad23a1f86ba50c3b"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["5143a137c6366836cdc47feaad23a1f86ba50c3b"],"220577719e3753e52195ed66dc9af6c4e65e2873":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["9ba1b632c041956c93c41aa1143d16a567014891","1da93834e39ce341a13e42b611d0a83bd3114bba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["220577719e3753e52195ed66dc9af6c4e65e2873"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5143a137c6366836cdc47feaad23a1f86ba50c3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}