{"path":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  final void norms(String field, byte[] bytes, int offset) throws IOException {\n    InputStream normStream = normStream(field);\n    if (normStream == null)\n      return;\t\t\t\t\t  // use zeros in array\n    try {\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53df68381fe22c8eaf758533d0d5e1db43b925ac","date":1071529482,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm)norms.get(field);\n    if (norm == null)\n      return;\t\t\t\t\t  // use zeros in array\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    InputStream normStream = (InputStream)norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","sourceOld":"  final void norms(String field, byte[] bytes, int offset) throws IOException {\n    InputStream normStream = normStream(field);\n    if (normStream == null)\n      return;\t\t\t\t\t  // use zeros in array\n    try {\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ad07cf326135fbb108f766a0798c8ee00b17dcb","date":1077215339,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm)norms.get(field);\n    if (norm == null)\n      return;\t\t\t\t\t  // use zeros in array\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    InputStream normStream = (InputStream)norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm)norms.get(field);\n    if (norm == null)\n      return;\t\t\t\t\t  // use zeros in array\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    InputStream normStream = (InputStream)norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)\n      return;\t\t\t\t\t  // use zeros in array\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    InputStream normStream = (InputStream) norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm)norms.get(field);\n    if (norm == null)\n      return;\t\t\t\t\t  // use zeros in array\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    InputStream normStream = (InputStream)norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)\n      return;\t\t\t\t\t  // use zeros in array\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    IndexInput normStream = (IndexInput) norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)\n      return;\t\t\t\t\t  // use zeros in array\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    InputStream normStream = (InputStream) norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"950f3c7592cb559e2534e5089c78833250e156a3","date":1130557968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    IndexInput normStream = (IndexInput) norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null)\n      return;\t\t\t\t\t  // use zeros in array\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    IndexInput normStream = (IndexInput) norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8969a184df55d25d61e85be785987fbf830d4028","date":1168143561,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    IndexInput normStream = (IndexInput) norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(norm.normSeek);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    IndexInput normStream = (IndexInput) norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(0);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"111f5f9f92c974cb15ad5a47e0caec190ca207b7","date":1172978580,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    // Read from disk.  norm.in may be shared across  multiple norms and\n    // should only be used in a synchronized context.\n    norm.in.seek(norm.normSeek);\n    norm.in.readBytes(bytes, offset, maxDoc());\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    IndexInput normStream = (IndexInput) norm.in.clone();\n    try {                                         // read from disk\n      normStream.seek(norm.normSeek);\n      normStream.readBytes(bytes, offset, maxDoc());\n    } finally {\n      normStream.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    // Read from disk.  norm.in may be shared across  multiple norms and\n    // should only be used in a synchronized context.\n    norm.in.seek(norm.normSeek);\n    norm.in.readBytes(bytes, offset, maxDoc());\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    // Read from disk.  norm.in may be shared across  multiple norms and\n    // should only be used in a synchronized context.\n    norm.in.seek(norm.normSeek);\n    norm.in.readBytes(bytes, offset, maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n    \n    synchronized(norm) {\n      if (norm.bytes != null) {                     // can copy from cache\n        System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n        return;\n      }\n\n    // Read from disk.  norm.in may be shared across  multiple norms and\n    // should only be used in a synchronized context.\n      IndexInput normStream;\n      if (norm.useSingleNormStream) {\n        normStream = singleNormStream;\n      } else {\n        normStream = norm.in;\n      }\n      normStream.seek(norm.normSeek);\n      normStream.readBytes(bytes, offset, maxDoc());\n    }\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    if (norm.bytes != null) {                     // can copy from cache\n      System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n      return;\n    }\n\n    // Read from disk.  norm.in may be shared across  multiple norms and\n    // should only be used in a synchronized context.\n    norm.in.seek(norm.normSeek);\n    norm.in.readBytes(bytes, offset, maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n    \n    synchronized(norm) {\n      if (norm.bytes != null) {                     // can copy from cache\n        System.arraycopy(norm.bytes, 0, bytes, offset, maxDoc());\n        return;\n      }\n\n    // Read from disk.  norm.in may be shared across  multiple norms and\n    // should only be used in a synchronized context.\n      IndexInput normStream;\n      if (norm.useSingleNormStream) {\n        normStream = singleNormStream;\n      } else {\n        normStream = norm.in;\n      }\n      normStream.seek(norm.normSeek);\n      normStream.readBytes(bytes, offset, maxDoc());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      Arrays.fill(bytes, offset, bytes.length, DefaultSimilarity.encodeNorm(1.0f));\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      System.arraycopy(fakeNorms(), 0, bytes, offset, maxDoc());\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = norms.get(field);\n    if (norm == null) {\n      Arrays.fill(bytes, offset, bytes.length, DefaultSimilarity.encodeNorm(1.0f));\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = (Norm) norms.get(field);\n    if (norm == null) {\n      Arrays.fill(bytes, offset, bytes.length, DefaultSimilarity.encodeNorm(1.0f));\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  @Override\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = norms.get(field);\n    if (norm == null) {\n      Arrays.fill(bytes, offset, bytes.length, DefaultSimilarity.encodeNorm(1.0f));\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = norms.get(field);\n    if (norm == null) {\n      Arrays.fill(bytes, offset, bytes.length, DefaultSimilarity.encodeNorm(1.0f));\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  @Override\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = norms.get(field);\n    if (norm == null) {\n      Arrays.fill(bytes, offset, bytes.length, Similarity.getDefault().encodeNormValue(1.0f));\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  @Override\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = norms.get(field);\n    if (norm == null) {\n      Arrays.fill(bytes, offset, bytes.length, DefaultSimilarity.encodeNorm(1.0f));\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#norms(String,byte[],int).mjava","sourceNew":"  /** Read norms into a pre-allocated array. */\n  @Override\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = norms.get(field);\n    if (norm == null) {\n      Arrays.fill(bytes, offset, bytes.length, Similarity.getDefault().encodeNormValue(1.0f));\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","sourceOld":"  /** Read norms into a pre-allocated array. */\n  @Override\n  public synchronized void norms(String field, byte[] bytes, int offset)\n    throws IOException {\n\n    ensureOpen();\n    Norm norm = norms.get(field);\n    if (norm == null) {\n      Arrays.fill(bytes, offset, bytes.length, Similarity.getDefault().encodeNormValue(1.0f));\n      return;\n    }\n  \n    norm.bytes(bytes, offset, maxDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["111f5f9f92c974cb15ad5a47e0caec190ca207b7"],"e971ba25509e21a130fef61f0687be0446ca27a0":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"950f3c7592cb559e2534e5089c78833250e156a3":["e971ba25509e21a130fef61f0687be0446ca27a0"],"8a9e385641d717e641408d8fbbc62be8fc766357":["ef82ff03e4016c705811b2658e81471a645c0e49"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["8a9e385641d717e641408d8fbbc62be8fc766357"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"6db660b56f04fdb2853d25cdee8ee0d36559a521":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"111f5f9f92c974cb15ad5a47e0caec190ca207b7":["8969a184df55d25d61e85be785987fbf830d4028"],"8969a184df55d25d61e85be785987fbf830d4028":["950f3c7592cb559e2534e5089c78833250e156a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"]},"commit2Childs":{"328c1568e471f0c6eaa49ec00334ca59e573710f":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"e971ba25509e21a130fef61f0687be0446ca27a0":["950f3c7592cb559e2534e5089c78833250e156a3"],"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["ef82ff03e4016c705811b2658e81471a645c0e49"],"950f3c7592cb559e2534e5089c78833250e156a3":["8969a184df55d25d61e85be785987fbf830d4028"],"8a9e385641d717e641408d8fbbc62be8fc766357":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"53df68381fe22c8eaf758533d0d5e1db43b925ac":["9ad07cf326135fbb108f766a0798c8ee00b17dcb"],"9ad07cf326135fbb108f766a0798c8ee00b17dcb":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["e971ba25509e21a130fef61f0687be0446ca27a0"],"6db660b56f04fdb2853d25cdee8ee0d36559a521":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["53df68381fe22c8eaf758533d0d5e1db43b925ac"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8a9e385641d717e641408d8fbbc62be8fc766357"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"111f5f9f92c974cb15ad5a47e0caec190ca207b7":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"8969a184df55d25d61e85be785987fbf830d4028":["111f5f9f92c974cb15ad5a47e0caec190ca207b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}