{"path":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","commits":[{"id":"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a","date":1217778014,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer();\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    WhitespaceAnalyzer analyzer = new WhitespaceAnalyzer(TEST_VERSION_CURRENT);\n    IndexWriter writer = new IndexWriter(ramDir, analyzer, MaxFieldLength.UNLIMITED);\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","pathOld":"src/test/org/apache/lucene/search/TestSloppyPhraseQuery#checkPhraseQuery(Document,PhraseQuery,int,int).mjava","sourceNew":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","sourceOld":"  private float  checkPhraseQuery(Document doc, PhraseQuery query, int slop, int expectedNumResults) throws Exception {\n    query.setSlop(slop);\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    TopDocs td = searcher.search(query,null,10);\n    //System.out.println(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Expecting number of hits: \"+expectedNumResults+\" maxScore=\"+td.getMaxScore());\n    assertEquals(\"slop: \"+slop+\"  query: \"+query+\"  doc: \"+doc+\"  Wrong number of hits\", expectedNumResults, td.totalHits);\n\n    //QueryUtils.check(query,searcher);\n\n    searcher.close();\n    ramDir.close();\n\n    return td.getMaxScore();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"3b2ceed5f2320db5cc371e0dd95622cda9a9a56a":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b2ceed5f2320db5cc371e0dd95622cda9a9a56a"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}