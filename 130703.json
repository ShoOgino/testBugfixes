{"path":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"/dev/null","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      if (fields == null) {\n        // reader has no fields\n        continue;\n      }\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator(termsEnum);\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      final Fields fields = context.reader().fields();\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = fields.terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermStates(IndexReader,List[LeafReaderContext],TermStates[],Term[]).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":"  public void collectTermStates(IndexReader reader,\n                                List<LeafReaderContext> leaves, TermStates[] contextArray,\n                                Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermStates termStates = contextArray[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termStates == null) {\n            contextArray[i] = new TermStates(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termStates.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#collectTermContext(IndexReader,List[LeafReaderContext],TermContext[],Term[]).mjava","sourceNew":null,"sourceOld":"  public void collectTermContext(IndexReader reader,\n      List<LeafReaderContext> leaves, TermContext[] contextArray,\n      Term[] queryTerms) throws IOException {\n    TermsEnum termsEnum = null;\n    for (LeafReaderContext context : leaves) {\n      for (int i = 0; i < queryTerms.length; i++) {\n        Term term = queryTerms[i];\n        TermContext termContext = contextArray[i];\n        final Terms terms = context.reader().terms(term.field());\n        if (terms == null) {\n          // field does not exist\n          continue;\n        }\n        termsEnum = terms.iterator();\n        assert termsEnum != null;\n        \n        if (termsEnum == TermsEnum.EMPTY) continue;\n        if (termsEnum.seekExact(term.bytes())) {\n          if (termContext == null) {\n            contextArray[i] = new TermContext(reader.getContext(),\n                termsEnum.termState(), context.ord, termsEnum.docFreq(),\n                termsEnum.totalTermFreq());\n          } else {\n            termContext.register(termsEnum.termState(), context.ord,\n                termsEnum.docFreq(), termsEnum.totalTermFreq());\n          }\n          \n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["28288370235ed02234a64753cdbf0c6ec096304a"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}