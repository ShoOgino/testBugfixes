{"path":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ec890fad2ea96317f4429e0aa0085bb25673641","date":1326669938,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(result.input, result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":["56da903869515527852ee21ea7ef7bfe414cd40d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/VariableGapTermsIndexReader.FieldIndexData#loadTermsIndex().mjava","sourceNew":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","sourceOld":"    private void loadTermsIndex() throws IOException {\n      if (fst == null) {\n        IndexInput clone = (IndexInput) in.clone();\n        clone.seek(indexStart);\n        fst = new FST<Long>(clone, fstOutputs);\n        clone.close();\n\n        /*\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(fst, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        */\n\n        if (indexDivisor > 1) {\n          // subsample\n          final IntsRef scratchIntsRef = new IntsRef();\n          final PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n          final Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n          final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst);\n          BytesRefFSTEnum.InputOutput<Long> result;\n          int count = indexDivisor;\n          while((result = fstEnum.next()) != null) {\n            if (count == indexDivisor) {\n              builder.add(Util.toIntsRef(result.input, scratchIntsRef), result.output);\n              count = 0;\n            }\n            count++;\n          }\n          fst = builder.finish();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"1ec890fad2ea96317f4429e0aa0085bb25673641":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}