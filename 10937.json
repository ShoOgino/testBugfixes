{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","commits":[{"id":"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca","date":1436588269,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void testAddShard() throws Exception {\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setReplicationFactor(2)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2)\n        .setRouterName(\"implicit\")\n        .setShards(\"shardstart\");\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    assertTrue(\"Could not create the collection\", request.get(\"success\") != null);\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    CollectionAdminResponse resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard2\");\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard3\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"));\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard5\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    Map<String, Slice> slices = zkStateReader.getClusterState().getSlicesMap(collectionName);\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void testAddShard() throws Exception {\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setReplicationFactor(2)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2)\n        .setRouterName(\"implicit\")\n        .setShards(\"shardstart\");\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    assertTrue(\"Could not create the collection\", request.get(\"success\") != null);\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    CollectionAdminResponse resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard2\");\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard3\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"));\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard5\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState();\n    Map<String, Slice> slices = zkStateReader.getClusterState().getSlicesMap(collectionName);\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void testAddShard() throws Exception {\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setReplicationFactor(2)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2)\n        .setRouterName(\"implicit\")\n        .setShards(\"shardstart\");\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    assertTrue(\"Could not create the collection\", request.get(\"success\") != null);\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    CollectionAdminResponse resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard2\");\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard3\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"));\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard5\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    Map<String, Slice> slices = zkStateReader.getClusterState().getSlicesMap(collectionName);\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void testAddShard() throws Exception {\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setReplicationFactor(2)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2)\n        .setRouterName(\"implicit\")\n        .setShards(\"shardstart\");\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    assertTrue(\"Could not create the collection\", request.get(\"success\") != null);\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    CollectionAdminResponse resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard2\");\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard3\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"));\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard5\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    Map<String, Slice> slices = zkStateReader.getClusterState().getSlicesMap(collectionName);\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void testAddShard() throws Exception {\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setReplicationFactor(2)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2)\n        .setRouterName(\"implicit\")\n        .setShards(\"shardstart\");\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    assertTrue(\"Could not create the collection\", request.get(\"success\") != null);\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    CollectionAdminResponse resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard2\");\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard3\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"));\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard5\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.updateClusterState();\n    Map<String, Slice> slices = zkStateReader.getClusterState().getSlicesMap(collectionName);\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void testAddShard() throws Exception {\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setReplicationFactor(2)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2)\n        .setRouterName(\"implicit\")\n        .setShards(\"shardstart\");\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    assertTrue(\"Could not create the collection\", request.get(\"success\") != null);\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    CollectionAdminResponse resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard2\");\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard3\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"));\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard5\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    Map<String, Slice> slices = zkStateReader.getClusterState().getSlicesMap(collectionName);\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void testAddShard() throws Exception {\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.Create create = new CollectionAdminRequest.Create()\n        .setCollectionName(collectionName)\n        .setReplicationFactor(2)\n        .setMaxShardsPerNode(2)\n        .setStateFormat(2)\n        .setRouterName(\"implicit\")\n        .setShards(\"shardstart\");\n\n    NamedList<Object> request = create.process(cloudClient).getResponse();\n\n    assertTrue(\"Could not create the collection\", request.get(\"success\") != null);\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n\n    CollectionAdminRequest.CreateShard createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard1\");\n    CollectionAdminResponse resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard2\");\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard3\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"));\n    resp = createShard.process(cloudClient);\n    assertEquals(0, resp.getStatus());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    createShard = new CollectionAdminRequest.CreateShard()\n        .setCollectionName(collectionName)\n        .setShardName(\"shard5\");\n    try {\n      createShard.process(cloudClient);\n      fail(\"Should have exceeded the max number of replicas allowed\");\n    } catch (HttpSolrClient.RemoteSolrException se) {\n      assertTrue(\"Should have gotten the right error message back\",\n          se.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n    }\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    ZkStateReader zkStateReader = getCommonCloudSolrClient().getZkStateReader();\n    zkStateReader.forceUpdateCollection(collectionName);\n    Map<String, Slice> slices = zkStateReader.getClusterState().getSlicesMap(collectionName);\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionTooManyReplicasTest#testAddShard().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionTooManyReplicasTest#testAddShard().mjava","sourceNew":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddShard() throws Exception {\n\n    String collectionName = \"TooManyReplicasWhenAddingShards\";\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"shardstart\", 2)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n\n    // We have two nodes, maxShardsPerNode is set to 2. Therefore, we should be able to add 2 shards each with\n    // two replicas, but fail on the third.\n    CollectionAdminRequest.createShard(collectionName, \"shard1\")\n        .process(cluster.getSolrClient());\n\n    // Now we should have one replica on each Jetty, add another to reach maxShardsPerNode\n    CollectionAdminRequest.createShard(collectionName, \"shard2\")\n        .process(cluster.getSolrClient());\n\n    // Now fail to add the third as it should exceed maxShardsPerNode\n    Exception e = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard3\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // Hmmm, providing a nodeset also overrides the checks for max replicas, so prove it.\n    List<String> nodes = getAllNodeNames(collectionName);\n\n    CollectionAdminRequest.createShard(collectionName, \"shard4\")\n        .setNodeSet(StringUtils.join(nodes, \",\"))\n        .process(cluster.getSolrClient());\n\n    // And just for yucks, insure we fail the \"regular\" one again.\n    Exception e2 = expectThrows(Exception.class, () -> {\n      CollectionAdminRequest.createShard(collectionName, \"shard5\")\n          .process(cluster.getSolrClient());\n    });\n    assertTrue(\"Should have gotten the right error message back\",\n        e2.getMessage().contains(\"given the current number of live nodes and a maxShardsPerNode of\"));\n\n    // And finally, insure that there are all the replcias we expect. We should have shards 1, 2 and 4 and each\n    // should have exactly two replicas\n    waitForState(\"Expected shards shardstart, 1, 2 and 4, each with two active replicas\", collectionName, (n, c) -> {\n      return DocCollection.isFullyActive(n, c, 4, 2);\n    });\n    Map<String, Slice> slices = getCollectionState(collectionName).getSlicesMap();\n    assertEquals(\"There should be exaclty four slices\", slices.size(), 4);\n    assertNotNull(\"shardstart should exist\", slices.get(\"shardstart\"));\n    assertNotNull(\"shard1 should exist\", slices.get(\"shard1\"));\n    assertNotNull(\"shard2 should exist\", slices.get(\"shard2\"));\n    assertNotNull(\"shard4 should exist\", slices.get(\"shard4\"));\n    assertEquals(\"Shardstart should have exactly 2 replicas\", 2, slices.get(\"shardstart\").getReplicas().size());\n    assertEquals(\"Shard1 should have exactly 2 replicas\", 2, slices.get(\"shard1\").getReplicas().size());\n    assertEquals(\"Shard2 should have exactly 2 replicas\", 2, slices.get(\"shard2\").getReplicas().size());\n    assertEquals(\"Shard4 should have exactly 2 replicas\", 2, slices.get(\"shard4\").getReplicas().size());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a4efd3fffdd7acd625bb88e455c8097e17f75735","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","a4efd3fffdd7acd625bb88e455c8097e17f75735"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["b94236357aaa22b76c10629851fe4e376e0cea82","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3fd3cdfbce4b551bb8ca4678682a5a891d0890ca":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}