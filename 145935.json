{"path":"src/java/org/apache/lucene/analysis/PorterStemmer#step3().mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/PorterStemmer#step3().mjava","pathOld":"/dev/null","sourceNew":"  private final void step3() { \n    if (k == k0) return; /* For Bug 1 */ \n    switch (b[k-1]) {\n    case 'a': \n      if (ends(\"ational\")) { r(\"ate\"); break; }\n      if (ends(\"tional\")) { r(\"tion\"); break; }\n      break;\n    case 'c': \n      if (ends(\"enci\")) { r(\"ence\"); break; }\n      if (ends(\"anci\")) { r(\"ance\"); break; }\n      break;\n    case 'e': \n      if (ends(\"izer\")) { r(\"ize\"); break; }\n      break;\n    case 'l': \n      if (ends(\"bli\")) { r(\"ble\"); break; }\n      if (ends(\"alli\")) { r(\"al\"); break; }\n      if (ends(\"entli\")) { r(\"ent\"); break; }\n      if (ends(\"eli\")) { r(\"e\"); break; }\n      if (ends(\"ousli\")) { r(\"ous\"); break; }\n      break;\n    case 'o': \n      if (ends(\"ization\")) { r(\"ize\"); break; }\n      if (ends(\"ation\")) { r(\"ate\"); break; }\n      if (ends(\"ator\")) { r(\"ate\"); break; }\n      break;\n    case 's': \n      if (ends(\"alism\")) { r(\"al\"); break; }\n      if (ends(\"iveness\")) { r(\"ive\"); break; }\n      if (ends(\"fulness\")) { r(\"ful\"); break; }\n      if (ends(\"ousness\")) { r(\"ous\"); break; }\n      break;\n    case 't': \n      if (ends(\"aliti\")) { r(\"al\"); break; }\n      if (ends(\"iviti\")) { r(\"ive\"); break; }\n      if (ends(\"biliti\")) { r(\"ble\"); break; }\n      break;\n    case 'g': \n      if (ends(\"logi\")) { r(\"log\"); break; }\n    } \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"550e5928a06fd85cb8c02ada3deabeb57181aa69","date":1071423332,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/PorterStemmer#step3().mjava","pathOld":"src/java/org/apache/lucene/analysis/PorterStemmer#step3().mjava","sourceNew":"  private final void step3() {\n    if (k == k0) return; /* For Bug 1 */\n    switch (b[k-1]) {\n    case 'a':\n      if (ends(\"ational\")) { r(\"ate\"); break; }\n      if (ends(\"tional\")) { r(\"tion\"); break; }\n      break;\n    case 'c':\n      if (ends(\"enci\")) { r(\"ence\"); break; }\n      if (ends(\"anci\")) { r(\"ance\"); break; }\n      break;\n    case 'e':\n      if (ends(\"izer\")) { r(\"ize\"); break; }\n      break;\n    case 'l':\n      if (ends(\"bli\")) { r(\"ble\"); break; }\n      if (ends(\"alli\")) { r(\"al\"); break; }\n      if (ends(\"entli\")) { r(\"ent\"); break; }\n      if (ends(\"eli\")) { r(\"e\"); break; }\n      if (ends(\"ousli\")) { r(\"ous\"); break; }\n      break;\n    case 'o':\n      if (ends(\"ization\")) { r(\"ize\"); break; }\n      if (ends(\"ation\")) { r(\"ate\"); break; }\n      if (ends(\"ator\")) { r(\"ate\"); break; }\n      break;\n    case 's':\n      if (ends(\"alism\")) { r(\"al\"); break; }\n      if (ends(\"iveness\")) { r(\"ive\"); break; }\n      if (ends(\"fulness\")) { r(\"ful\"); break; }\n      if (ends(\"ousness\")) { r(\"ous\"); break; }\n      break;\n    case 't':\n      if (ends(\"aliti\")) { r(\"al\"); break; }\n      if (ends(\"iviti\")) { r(\"ive\"); break; }\n      if (ends(\"biliti\")) { r(\"ble\"); break; }\n      break;\n    case 'g':\n      if (ends(\"logi\")) { r(\"log\"); break; }\n    }\n  }\n\n","sourceOld":"  private final void step3() { \n    if (k == k0) return; /* For Bug 1 */ \n    switch (b[k-1]) {\n    case 'a': \n      if (ends(\"ational\")) { r(\"ate\"); break; }\n      if (ends(\"tional\")) { r(\"tion\"); break; }\n      break;\n    case 'c': \n      if (ends(\"enci\")) { r(\"ence\"); break; }\n      if (ends(\"anci\")) { r(\"ance\"); break; }\n      break;\n    case 'e': \n      if (ends(\"izer\")) { r(\"ize\"); break; }\n      break;\n    case 'l': \n      if (ends(\"bli\")) { r(\"ble\"); break; }\n      if (ends(\"alli\")) { r(\"al\"); break; }\n      if (ends(\"entli\")) { r(\"ent\"); break; }\n      if (ends(\"eli\")) { r(\"e\"); break; }\n      if (ends(\"ousli\")) { r(\"ous\"); break; }\n      break;\n    case 'o': \n      if (ends(\"ization\")) { r(\"ize\"); break; }\n      if (ends(\"ation\")) { r(\"ate\"); break; }\n      if (ends(\"ator\")) { r(\"ate\"); break; }\n      break;\n    case 's': \n      if (ends(\"alism\")) { r(\"al\"); break; }\n      if (ends(\"iveness\")) { r(\"ive\"); break; }\n      if (ends(\"fulness\")) { r(\"ful\"); break; }\n      if (ends(\"ousness\")) { r(\"ous\"); break; }\n      break;\n    case 't': \n      if (ends(\"aliti\")) { r(\"al\"); break; }\n      if (ends(\"iviti\")) { r(\"ive\"); break; }\n      if (ends(\"biliti\")) { r(\"ble\"); break; }\n      break;\n    case 'g': \n      if (ends(\"logi\")) { r(\"log\"); break; }\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/PorterStemmer#step3().mjava","sourceNew":null,"sourceOld":"  private final void step3() {\n    if (k == k0) return; /* For Bug 1 */\n    switch (b[k-1]) {\n    case 'a':\n      if (ends(\"ational\")) { r(\"ate\"); break; }\n      if (ends(\"tional\")) { r(\"tion\"); break; }\n      break;\n    case 'c':\n      if (ends(\"enci\")) { r(\"ence\"); break; }\n      if (ends(\"anci\")) { r(\"ance\"); break; }\n      break;\n    case 'e':\n      if (ends(\"izer\")) { r(\"ize\"); break; }\n      break;\n    case 'l':\n      if (ends(\"bli\")) { r(\"ble\"); break; }\n      if (ends(\"alli\")) { r(\"al\"); break; }\n      if (ends(\"entli\")) { r(\"ent\"); break; }\n      if (ends(\"eli\")) { r(\"e\"); break; }\n      if (ends(\"ousli\")) { r(\"ous\"); break; }\n      break;\n    case 'o':\n      if (ends(\"ization\")) { r(\"ize\"); break; }\n      if (ends(\"ation\")) { r(\"ate\"); break; }\n      if (ends(\"ator\")) { r(\"ate\"); break; }\n      break;\n    case 's':\n      if (ends(\"alism\")) { r(\"al\"); break; }\n      if (ends(\"iveness\")) { r(\"ive\"); break; }\n      if (ends(\"fulness\")) { r(\"ful\"); break; }\n      if (ends(\"ousness\")) { r(\"ous\"); break; }\n      break;\n    case 't':\n      if (ends(\"aliti\")) { r(\"al\"); break; }\n      if (ends(\"iviti\")) { r(\"ive\"); break; }\n      if (ends(\"biliti\")) { r(\"ble\"); break; }\n      break;\n    case 'g':\n      if (ends(\"logi\")) { r(\"log\"); break; }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"550e5928a06fd85cb8c02ada3deabeb57181aa69":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["550e5928a06fd85cb8c02ada3deabeb57181aa69"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["550e5928a06fd85cb8c02ada3deabeb57181aa69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"550e5928a06fd85cb8c02ada3deabeb57181aa69":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}