{"path":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","commits":[{"id":"73bb5a57dc75b54a39494f99986599cae7dff417","date":1361040620,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    commit();\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    commit();\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    commit();\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    commit();\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"404b171beda23ddce9e45366a3dbd6444d8d029c","date":1391180301,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    commit();\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    SolrCore core = h.getCoreInc();\n    try {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    } finally {\n      core.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final AtomicReader reader = searcher.getAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86c3ff7c47b47e868bd4d7a89e629518c03eb040","date":1458748577,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n\n        // check reversability of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        \n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c","date":1458780235,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n\n        // check reversability of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n\n        // check reversability of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        \n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n\n        // check reversability of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n\n        // check reversability of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","date":1465691899,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"booldv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n        assertEquals(\"solr\", reader.getSortedDocValues(\"stringdv\").get(0).utf8ToString());\n        assertEquals(\"T\", reader.getSortedDocValues(\"booldv\").get(0).utf8ToString());\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n        final SchemaField boolDv = schema.getField(\"booldv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n        \n        values = boolDv.getType().getValueSource(boolDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(\"true\", values.strVal(0));\n        assertEquals(true, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n        tstToObj(schema.getField(\"booldv\"), true);\n        tstToObj(schema.getField(\"booldvs\"), true);\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"booldv\").getDocValuesType());\n\n        NumericDocValues dvs = reader.getNumericDocValues(\"floatdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals((long) Float.floatToIntBits(1), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"intdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(2L, dvs.longValue());\n        dvs = reader.getNumericDocValues(\"doubledv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(Double.doubleToLongBits(3), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"longdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(4L, dvs.longValue());\n        SortedDocValues sdv = reader.getSortedDocValues(\"stringdv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"solr\", sdv.binaryValue().utf8ToString());\n        sdv = reader.getSortedDocValues(\"booldv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"T\", sdv.binaryValue().utf8ToString());\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n        final SchemaField boolDv = schema.getField(\"booldv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n        \n        values = boolDv.getType().getValueSource(boolDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(\"true\", values.strVal(0));\n        assertEquals(true, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n        tstToObj(schema.getField(\"booldv\"), true);\n        tstToObj(schema.getField(\"booldvs\"), true);\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"booldv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n        assertEquals(\"solr\", reader.getSortedDocValues(\"stringdv\").get(0).utf8ToString());\n        assertEquals(\"T\", reader.getSortedDocValues(\"booldv\").get(0).utf8ToString());\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n        final SchemaField boolDv = schema.getField(\"booldv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n        \n        values = boolDv.getType().getValueSource(boolDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(\"true\", values.strVal(0));\n        assertEquals(true, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n        tstToObj(schema.getField(\"booldv\"), true);\n        tstToObj(schema.getField(\"booldvs\"), true);\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"booldv\").getDocValuesType());\n\n        NumericDocValues dvs = reader.getNumericDocValues(\"floatdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals((long) Float.floatToIntBits(1), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"intdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(2L, dvs.longValue());\n        dvs = reader.getNumericDocValues(\"doubledv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(Double.doubleToLongBits(3), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"longdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(4L, dvs.longValue());\n        SortedDocValues sdv = reader.getSortedDocValues(\"stringdv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"solr\", sdv.binaryValue().utf8ToString());\n        sdv = reader.getSortedDocValues(\"booldv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"T\", sdv.binaryValue().utf8ToString());\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n        final SchemaField boolDv = schema.getField(\"booldv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n        \n        values = boolDv.getType().getValueSource(boolDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(\"true\", values.strVal(0));\n        assertEquals(true, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n        tstToObj(schema.getField(\"booldv\"), true);\n        tstToObj(schema.getField(\"booldvs\"), true);\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"booldv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n        assertEquals(\"solr\", reader.getSortedDocValues(\"stringdv\").get(0).utf8ToString());\n        assertEquals(\"T\", reader.getSortedDocValues(\"booldv\").get(0).utf8ToString());\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n        final SchemaField boolDv = schema.getField(\"booldv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n        \n        values = boolDv.getType().getValueSource(boolDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(\"true\", values.strVal(0));\n        assertEquals(true, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n        tstToObj(schema.getField(\"booldv\"), true);\n        tstToObj(schema.getField(\"booldvs\"), true);\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e07c409cff8701e4dc3d45934b021a949a5a8822","date":1475694629,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getSlowAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"booldv\").getDocValuesType());\n\n        NumericDocValues dvs = reader.getNumericDocValues(\"floatdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals((long) Float.floatToIntBits(1), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"intdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(2L, dvs.longValue());\n        dvs = reader.getNumericDocValues(\"doubledv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(Double.doubleToLongBits(3), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"longdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(4L, dvs.longValue());\n        SortedDocValues sdv = reader.getSortedDocValues(\"stringdv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"solr\", sdv.binaryValue().utf8ToString());\n        sdv = reader.getSortedDocValues(\"booldv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"T\", sdv.binaryValue().utf8ToString());\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n        final SchemaField boolDv = schema.getField(\"booldv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n        \n        values = boolDv.getType().getValueSource(boolDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(\"true\", values.strVal(0));\n        assertEquals(true, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n        tstToObj(schema.getField(\"booldv\"), true);\n        tstToObj(schema.getField(\"booldvs\"), true);\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"booldv\").getDocValuesType());\n\n        NumericDocValues dvs = reader.getNumericDocValues(\"floatdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals((long) Float.floatToIntBits(1), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"intdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(2L, dvs.longValue());\n        dvs = reader.getNumericDocValues(\"doubledv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(Double.doubleToLongBits(3), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"longdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(4L, dvs.longValue());\n        SortedDocValues sdv = reader.getSortedDocValues(\"stringdv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"solr\", sdv.binaryValue().utf8ToString());\n        sdv = reader.getSortedDocValues(\"booldv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"T\", sdv.binaryValue().utf8ToString());\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n        final SchemaField boolDv = schema.getField(\"booldv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n        \n        values = boolDv.getType().getValueSource(boolDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(\"true\", values.strVal(0));\n        assertEquals(true, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n        tstToObj(schema.getField(\"booldv\"), true);\n        tstToObj(schema.getField(\"booldvs\"), true);\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/DocValuesTest#testDocValues().mjava","sourceNew":"  @Test\n  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getSlowAtomicReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"booldv\").getDocValuesType());\n\n        NumericDocValues dvs = reader.getNumericDocValues(\"floatdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals((long) Float.floatToIntBits(1), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"intdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(2L, dvs.longValue());\n        dvs = reader.getNumericDocValues(\"doubledv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(Double.doubleToLongBits(3), dvs.longValue());\n        dvs = reader.getNumericDocValues(\"longdv\");\n        assertEquals(0, dvs.nextDoc());\n        assertEquals(4L, dvs.longValue());\n        SortedDocValues sdv = reader.getSortedDocValues(\"stringdv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"solr\", sdv.binaryValue().utf8ToString());\n        sdv = reader.getSortedDocValues(\"booldv\");\n        assertEquals(0, sdv.nextDoc());\n        assertEquals(\"T\", sdv.binaryValue().utf8ToString());\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n        final SchemaField boolDv = schema.getField(\"booldv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n        \n        values = boolDv.getType().getValueSource(boolDv, null).getValues(null, searcher.getSlowAtomicReader().leaves().get(0));\n        assertEquals(\"true\", values.strVal(0));\n        assertEquals(true, values.objectVal(0));\n\n        // check reversibility of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n        tstToObj(schema.getField(\"booldv\"), true);\n        tstToObj(schema.getField(\"booldvs\"), true);\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","sourceOld":"  public void testDocValues() throws IOException {\n    assertU(adoc(\"id\", \"1\"));\n    assertU(commit());\n    try (SolrCore core = h.getCoreInc()) {\n      final RefCounted<SolrIndexSearcher> searcherRef = core.openNewSearcher(true, true);\n      final SolrIndexSearcher searcher = searcherRef.get();\n      try {\n        final LeafReader reader = searcher.getLeafReader();\n        assertEquals(1, reader.numDocs());\n        final FieldInfos infos = reader.getFieldInfos();\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"floatdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"intdv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"doubledv\").getDocValuesType());\n        assertEquals(DocValuesType.NUMERIC, infos.fieldInfo(\"longdv\").getDocValuesType());\n        assertEquals(DocValuesType.SORTED, infos.fieldInfo(\"stringdv\").getDocValuesType());\n\n        assertEquals((long) Float.floatToIntBits(1), reader.getNumericDocValues(\"floatdv\").get(0));\n        assertEquals(2L, reader.getNumericDocValues(\"intdv\").get(0));\n        assertEquals(Double.doubleToLongBits(3), reader.getNumericDocValues(\"doubledv\").get(0));\n        assertEquals(4L, reader.getNumericDocValues(\"longdv\").get(0));\n\n        final IndexSchema schema = core.getLatestSchema();\n        final SchemaField floatDv = schema.getField(\"floatdv\");\n        final SchemaField intDv = schema.getField(\"intdv\");\n        final SchemaField doubleDv = schema.getField(\"doubledv\");\n        final SchemaField longDv = schema.getField(\"longdv\");\n\n        FunctionValues values = floatDv.getType().getValueSource(floatDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(1f, values.floatVal(0), 0f);\n        assertEquals(1f, values.objectVal(0));\n        values = intDv.getType().getValueSource(intDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(2, values.intVal(0));\n        assertEquals(2, values.objectVal(0));\n        values = doubleDv.getType().getValueSource(doubleDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(3d, values.doubleVal(0), 0d);\n        assertEquals(3d, values.objectVal(0));\n        values = longDv.getType().getValueSource(longDv, null).getValues(null, searcher.getLeafReader().leaves().get(0));\n        assertEquals(4L, values.longVal(0));\n        assertEquals(4L, values.objectVal(0));\n\n        // check reversability of created fields\n        tstToObj(schema.getField(\"floatdv\"), -1.5f);\n        tstToObj(schema.getField(\"floatdvs\"), -1.5f);\n        tstToObj(schema.getField(\"doubledv\"), -1.5d);\n        tstToObj(schema.getField(\"doubledvs\"), -1.5d);\n        tstToObj(schema.getField(\"intdv\"), -7);\n        tstToObj(schema.getField(\"intdvs\"), -7);\n        tstToObj(schema.getField(\"longdv\"), -11L);\n        tstToObj(schema.getField(\"longdvs\"), -11L);\n        tstToObj(schema.getField(\"datedv\"), new Date(1000));\n        tstToObj(schema.getField(\"datedvs\"), new Date(1000));\n        tstToObj(schema.getField(\"stringdv\"), \"foo\");\n        tstToObj(schema.getField(\"stringdvs\"), \"foo\");\n\n      } finally {\n        searcherRef.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86c3ff7c47b47e868bd4d7a89e629518c03eb040":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c","e07c409cff8701e4dc3d45934b021a949a5a8822"],"08970e5b8411182a29412c177eff67ec1110095b":["73bb5a57dc75b54a39494f99986599cae7dff417"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c","0158ced21948b6626f733c1c42c1e18d94449789"],"7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c":["86c3ff7c47b47e868bd4d7a89e629518c03eb040"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73bb5a57dc75b54a39494f99986599cae7dff417"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["404b171beda23ddce9e45366a3dbd6444d8d029c"],"404b171beda23ddce9e45366a3dbd6444d8d029c":["08970e5b8411182a29412c177eff67ec1110095b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"73bb5a57dc75b54a39494f99986599cae7dff417":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0158ced21948b6626f733c1c42c1e18d94449789":["7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c"]},"commit2Childs":{"86c3ff7c47b47e868bd4d7a89e629518c03eb040":["7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c"],"7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"e07c409cff8701e4dc3d45934b021a949a5a8822":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["86c3ff7c47b47e868bd4d7a89e629518c03eb040"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7f1f5e4b31ec44927335e2ad6eebc4c1f8c0abf5"],"08970e5b8411182a29412c177eff67ec1110095b":["404b171beda23ddce9e45366a3dbd6444d8d029c"],"7fb4d22b2ab02a1d0d2f3064e04fe9fbbac5e08c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e07c409cff8701e4dc3d45934b021a949a5a8822"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95303ff3749680c743b9425f9cf99e6e4065e8a8","73bb5a57dc75b54a39494f99986599cae7dff417"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"404b171beda23ddce9e45366a3dbd6444d8d029c":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"73bb5a57dc75b54a39494f99986599cae7dff417":["08970e5b8411182a29412c177eff67ec1110095b","95303ff3749680c743b9425f9cf99e6e4065e8a8"],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}