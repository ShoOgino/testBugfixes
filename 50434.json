{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","commits":[{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TermAllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","sourceNew":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) throws IOException {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","sourceOld":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) throws IOException {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/AllGroupHeadsCollectorTest#createExpectedGroupHeads(String,GroupDoc[],Sort,boolean,int[]).mjava","sourceNew":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) throws IOException {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","sourceOld":"  private int[] createExpectedGroupHeads(String searchTerm, GroupDoc[] groupDocs, Sort docSort, boolean sortByScoreOnly, int[] fieldIdToDocID) throws IOException {\n    Map<BytesRef, List<GroupDoc>> groupHeads = new HashMap<BytesRef, List<GroupDoc>>();\n    for (GroupDoc groupDoc : groupDocs) {\n      if (!groupDoc.content.startsWith(searchTerm)) {\n        continue;\n      }\n\n      if (!groupHeads.containsKey(groupDoc.group)) {\n        List<GroupDoc> list = new ArrayList<GroupDoc>();\n        list.add(groupDoc);\n        groupHeads.put(groupDoc.group, list);\n        continue;\n      }\n      groupHeads.get(groupDoc.group).add(groupDoc);\n    }\n\n    int[] allGroupHeads = new int[groupHeads.size()];\n    int i = 0;\n    for (BytesRef groupValue : groupHeads.keySet()) {\n      List<GroupDoc> docs = groupHeads.get(groupValue);\n      Collections.sort(docs, getComparator(docSort, sortByScoreOnly, fieldIdToDocID));\n      allGroupHeads[i++] = docs.get(0).id;\n    }\n\n    return allGroupHeads;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}