{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4778b794a897685e2f6c62caa1ac04983d1e69f","date":1467997674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertMatchNoDocsQuery(\"3\", null);\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertMatchNoDocsQuery(\"3\", null);\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95365faacc7051f7df50654fdafdec298de7c084","date":1600189650,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalyzer ignores them\n    assertMatchNoDocsQuery(\"3\", null);\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertMatchNoDocsQuery(\"3\", null);\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestQPHelper#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalyzer ignores them\n    assertMatchNoDocsQuery(\"3\", null);\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertMatchNoDocsQuery(\"3\", null);\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"680b6449f09827f58fe987aff279e014c311d966":["f4778b794a897685e2f6c62caa1ac04983d1e69f","95365faacc7051f7df50654fdafdec298de7c084"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"95365faacc7051f7df50654fdafdec298de7c084":["f4778b794a897685e2f6c62caa1ac04983d1e69f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","f4778b794a897685e2f6c62caa1ac04983d1e69f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f4778b794a897685e2f6c62caa1ac04983d1e69f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["680b6449f09827f58fe987aff279e014c311d966","95365faacc7051f7df50654fdafdec298de7c084","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"95365faacc7051f7df50654fdafdec298de7c084":["680b6449f09827f58fe987aff279e014c311d966"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}