{"path":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/java/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9d760ce88b54634b37e6de1cf1ff5d6d66cd622","date":1376037561,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"788184b02a01588fb0bca602e39018a580397a99","date":1378925127,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<Object>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap<>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"/select\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"/select\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/ClusteringComponentTest#testComponent().mjava","sourceNew":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"/select\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testComponent() throws Exception {\n    SolrCore core = h.getCore();\n\n    SearchComponent sc = core.getSearchComponent(\"clustering\");\n    assertTrue(\"sc is null and it shouldn't be\", sc != null);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(CommonParams.Q, \"*:*\");\n\n    params.add(ClusteringParams.USE_SEARCH_RESULTS, \"true\");\n\n\n    SolrRequestHandler handler = core.getRequestHandler(\"standard\");\n    SolrQueryResponse rsp;\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    NamedList<?> values = rsp.getValues();\n    Object clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n\n    params = new ModifiableSolrParams();\n    params.add(ClusteringComponent.COMPONENT_NAME, \"true\");\n    params.add(ClusteringParams.ENGINE_NAME, \"mock\");\n    params.add(ClusteringParams.USE_COLLECTION, \"true\");\n    params.add(QueryComponent.COMPONENT_NAME, \"false\");\n\n    handler = core.getRequestHandler(\"docClustering\");\n\n    rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap<>());\n    req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    values = rsp.getValues();\n    clusters = values.get(\"clusters\");\n    //System.out.println(\"Clusters: \" + clusters);\n    assertTrue(\"clusters is null and it shouldn't be\", clusters != null);\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["788184b02a01588fb0bca602e39018a580397a99"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","b9d760ce88b54634b37e6de1cf1ff5d6d66cd622"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"788184b02a01588fb0bca602e39018a580397a99":["b9d760ce88b54634b37e6de1cf1ff5d6d66cd622"],"30c8e5574b55d57947e989443dfde611646530ee":["ecd75942508378ccc92c3a26f71db6cba9f25784","28288370235ed02234a64753cdbf0c6ec096304a"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b9d760ce88b54634b37e6de1cf1ff5d6d66cd622":["c26f00b574427b55127e869b935845554afde1fa"],"28288370235ed02234a64753cdbf0c6ec096304a":["ecd75942508378ccc92c3a26f71db6cba9f25784","5ff704ef91e9ae30ca59babb23ece85720701b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["ecd75942508378ccc92c3a26f71db6cba9f25784"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b9d760ce88b54634b37e6de1cf1ff5d6d66cd622"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"788184b02a01588fb0bca602e39018a580397a99":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"30c8e5574b55d57947e989443dfde611646530ee":[],"b9d760ce88b54634b37e6de1cf1ff5d6d66cd622":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","788184b02a01588fb0bca602e39018a580397a99"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["30c8e5574b55d57947e989443dfde611646530ee","28288370235ed02234a64753cdbf0c6ec096304a","5ff704ef91e9ae30ca59babb23ece85720701b60"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}