{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMinMaxScale().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMinMaxScale().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMinMaxScale().mjava","sourceNew":"  @Test\n  public void testMinMaxScale() throws Exception {\n    String cexpr = \"let(echo=true, a=minMaxScale(matrix(array(1,2,3,4,5), array(10,20,30,40,50))), \" +\n                                  \"b=minMaxScale(matrix(array(1,2,3,4,5), array(10,20,30,40,50)), 0, 100),\" +\n                                  \"c=minMaxScale(array(1,2,3,4,5)),\" +\n                                  \"d=minMaxScale(array(1,2,3,4,5), 0, 100))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"a\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 0,0);\n    assertEquals(row1.get(1).doubleValue(), .25,0);\n    assertEquals(row1.get(2).doubleValue(), .5,0);\n    assertEquals(row1.get(3).doubleValue(), .75, 0);\n    assertEquals(row1.get(4).doubleValue(), 1, 0);\n\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 0,0);\n    assertEquals(row2.get(1).doubleValue(), .25,0);\n    assertEquals(row2.get(2).doubleValue(), .5,0);\n    assertEquals(row2.get(3).doubleValue(), .75,0);\n    assertEquals(row2.get(4).doubleValue(), 1,0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 0,0);\n    assertEquals(row1.get(1).doubleValue(), 25,0);\n    assertEquals(row1.get(2).doubleValue(), 50,0);\n    assertEquals(row1.get(3).doubleValue(), 75,0);\n    assertEquals(row1.get(4).doubleValue(), 100,0);\n\n    row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 0,0);\n    assertEquals(row2.get(1).doubleValue(), 25,0);\n    assertEquals(row2.get(2).doubleValue(), 50,0);\n    assertEquals(row2.get(3).doubleValue(), 75,0);\n    assertEquals(row2.get(4).doubleValue(), 100,0);\n\n    List<Number> row3= (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(row3.get(0).doubleValue(), 0,0);\n    assertEquals(row3.get(1).doubleValue(), .25,0);\n    assertEquals(row3.get(2).doubleValue(), .5,0);\n    assertEquals(row3.get(3).doubleValue(), .75,0);\n    assertEquals(row3.get(4).doubleValue(), 1,0);\n\n    List<Number> row4= (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(row4.get(0).doubleValue(), 0,0);\n    assertEquals(row4.get(1).doubleValue(), 25,0);\n    assertEquals(row4.get(2).doubleValue(), 50,0);\n    assertEquals(row4.get(3).doubleValue(), 75,0);\n    assertEquals(row4.get(4).doubleValue(), 100,0);\n  }\n\n","sourceOld":"  @Test\n  public void testMinMaxScale() throws Exception {\n    String cexpr = \"let(echo=true, a=minMaxScale(matrix(array(1,2,3,4,5), array(10,20,30,40,50))), \" +\n                                  \"b=minMaxScale(matrix(array(1,2,3,4,5), array(10,20,30,40,50)), 0, 100),\" +\n                                  \"c=minMaxScale(array(1,2,3,4,5)),\" +\n                                  \"d=minMaxScale(array(1,2,3,4,5), 0, 100))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"a\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 0,0);\n    assertEquals(row1.get(1).doubleValue(), .25,0);\n    assertEquals(row1.get(2).doubleValue(), .5,0);\n    assertEquals(row1.get(3).doubleValue(), .75, 0);\n    assertEquals(row1.get(4).doubleValue(), 1, 0);\n\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 0,0);\n    assertEquals(row2.get(1).doubleValue(), .25,0);\n    assertEquals(row2.get(2).doubleValue(), .5,0);\n    assertEquals(row2.get(3).doubleValue(), .75,0);\n    assertEquals(row2.get(4).doubleValue(), 1,0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 0,0);\n    assertEquals(row1.get(1).doubleValue(), 25,0);\n    assertEquals(row1.get(2).doubleValue(), 50,0);\n    assertEquals(row1.get(3).doubleValue(), 75,0);\n    assertEquals(row1.get(4).doubleValue(), 100,0);\n\n    row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 0,0);\n    assertEquals(row2.get(1).doubleValue(), 25,0);\n    assertEquals(row2.get(2).doubleValue(), 50,0);\n    assertEquals(row2.get(3).doubleValue(), 75,0);\n    assertEquals(row2.get(4).doubleValue(), 100,0);\n\n    List<Number> row3= (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(row3.get(0).doubleValue(), 0,0);\n    assertEquals(row3.get(1).doubleValue(), .25,0);\n    assertEquals(row3.get(2).doubleValue(), .5,0);\n    assertEquals(row3.get(3).doubleValue(), .75,0);\n    assertEquals(row3.get(4).doubleValue(), 1,0);\n\n    List<Number> row4= (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(row4.get(0).doubleValue(), 0,0);\n    assertEquals(row4.get(1).doubleValue(), 25,0);\n    assertEquals(row4.get(2).doubleValue(), 50,0);\n    assertEquals(row4.get(3).doubleValue(), 75,0);\n    assertEquals(row4.get(4).doubleValue(), 100,0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMinMaxScale().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMinMaxScale().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testMinMaxScale() throws Exception {\n    String cexpr = \"let(echo=true, a=minMaxScale(matrix(array(1,2,3,4,5), array(10,20,30,40,50))), \" +\n                                  \"b=minMaxScale(matrix(array(1,2,3,4,5), array(10,20,30,40,50)), 0, 100),\" +\n                                  \"c=minMaxScale(array(1,2,3,4,5)),\" +\n                                  \"d=minMaxScale(array(1,2,3,4,5), 0, 100))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"a\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 0,0);\n    assertEquals(row1.get(1).doubleValue(), .25,0);\n    assertEquals(row1.get(2).doubleValue(), .5,0);\n    assertEquals(row1.get(3).doubleValue(), .75, 0);\n    assertEquals(row1.get(4).doubleValue(), 1, 0);\n\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 0,0);\n    assertEquals(row2.get(1).doubleValue(), .25,0);\n    assertEquals(row2.get(2).doubleValue(), .5,0);\n    assertEquals(row2.get(3).doubleValue(), .75,0);\n    assertEquals(row2.get(4).doubleValue(), 1,0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 0,0);\n    assertEquals(row1.get(1).doubleValue(), 25,0);\n    assertEquals(row1.get(2).doubleValue(), 50,0);\n    assertEquals(row1.get(3).doubleValue(), 75,0);\n    assertEquals(row1.get(4).doubleValue(), 100,0);\n\n    row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 0,0);\n    assertEquals(row2.get(1).doubleValue(), 25,0);\n    assertEquals(row2.get(2).doubleValue(), 50,0);\n    assertEquals(row2.get(3).doubleValue(), 75,0);\n    assertEquals(row2.get(4).doubleValue(), 100,0);\n\n    List<Number> row3= (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(row3.get(0).doubleValue(), 0,0);\n    assertEquals(row3.get(1).doubleValue(), .25,0);\n    assertEquals(row3.get(2).doubleValue(), .5,0);\n    assertEquals(row3.get(3).doubleValue(), .75,0);\n    assertEquals(row3.get(4).doubleValue(), 1,0);\n\n    List<Number> row4= (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(row4.get(0).doubleValue(), 0,0);\n    assertEquals(row4.get(1).doubleValue(), 25,0);\n    assertEquals(row4.get(2).doubleValue(), 50,0);\n    assertEquals(row4.get(3).doubleValue(), 75,0);\n    assertEquals(row4.get(4).doubleValue(), 100,0);\n  }\n\n","sourceOld":"  @Test\n  public void testMinMaxScale() throws Exception {\n    String cexpr = \"let(echo=true, a=minMaxScale(matrix(array(1,2,3,4,5), array(10,20,30,40,50))), \" +\n                                  \"b=minMaxScale(matrix(array(1,2,3,4,5), array(10,20,30,40,50)), 0, 100),\" +\n                                  \"c=minMaxScale(array(1,2,3,4,5)),\" +\n                                  \"d=minMaxScale(array(1,2,3,4,5), 0, 100))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"a\");\n    List<Number> row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 0,0);\n    assertEquals(row1.get(1).doubleValue(), .25,0);\n    assertEquals(row1.get(2).doubleValue(), .5,0);\n    assertEquals(row1.get(3).doubleValue(), .75, 0);\n    assertEquals(row1.get(4).doubleValue(), 1, 0);\n\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 0,0);\n    assertEquals(row2.get(1).doubleValue(), .25,0);\n    assertEquals(row2.get(2).doubleValue(), .5,0);\n    assertEquals(row2.get(3).doubleValue(), .75,0);\n    assertEquals(row2.get(4).doubleValue(), 1,0);\n\n    matrix = (List<List<Number>>)tuples.get(0).get(\"b\");\n    row1 = matrix.get(0);\n    assertEquals(row1.get(0).doubleValue(), 0,0);\n    assertEquals(row1.get(1).doubleValue(), 25,0);\n    assertEquals(row1.get(2).doubleValue(), 50,0);\n    assertEquals(row1.get(3).doubleValue(), 75,0);\n    assertEquals(row1.get(4).doubleValue(), 100,0);\n\n    row2 = matrix.get(1);\n    assertEquals(row2.get(0).doubleValue(), 0,0);\n    assertEquals(row2.get(1).doubleValue(), 25,0);\n    assertEquals(row2.get(2).doubleValue(), 50,0);\n    assertEquals(row2.get(3).doubleValue(), 75,0);\n    assertEquals(row2.get(4).doubleValue(), 100,0);\n\n    List<Number> row3= (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(row3.get(0).doubleValue(), 0,0);\n    assertEquals(row3.get(1).doubleValue(), .25,0);\n    assertEquals(row3.get(2).doubleValue(), .5,0);\n    assertEquals(row3.get(3).doubleValue(), .75,0);\n    assertEquals(row3.get(4).doubleValue(), 1,0);\n\n    List<Number> row4= (List<Number>)tuples.get(0).get(\"d\");\n    assertEquals(row4.get(0).doubleValue(), 0,0);\n    assertEquals(row4.get(1).doubleValue(), 25,0);\n    assertEquals(row4.get(2).doubleValue(), 50,0);\n    assertEquals(row4.get(3).doubleValue(), 75,0);\n    assertEquals(row4.get(4).doubleValue(), 100,0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}