{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testCopyIntoCFS().mjava","commits":[{"id":"32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f","date":1306408552,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testCopyIntoCFS().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to\n  // a CFS, given MP preferences\n  public void testCopyIntoCFS() throws Exception {\n    // create an index, no CFS (so we can assert that existing segments are not affected)\n    Directory target = newDirectory();\n    LogMergePolicy lmp = newLogMergePolicy(false);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);\n    IndexWriter w = new IndexWriter(target, conf);\n    w.addDocument(new Document());\n    w.commit();\n    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());\n\n    // prepare second index, no-CFS too + .del file + separate norms file\n    Directory src = newDirectory();\n    LogMergePolicy lmp2 = newLogMergePolicy(false);\n    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(lmp2);\n    IndexWriter w2 = new IndexWriter(src, conf2);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some text\", Store.YES, Index.ANALYZED));\n    w2.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"d\", \"delete\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    w2.addDocument(doc);\n    w2.commit();\n    w2.deleteDocuments(new Term(\"d\", \"delete\"));\n    w2.commit();\n    w2.close();\n\n    // create separate norms file\n    IndexReader r = IndexReader.open(src, false);\n    r.setNorm(0, \"c\", (byte) 1);\n    r.close();\n    assertTrue(\".del file not found\", src.fileExists(\"_0_1.del\"));\n    assertTrue(\"separate norms file not found\", src.fileExists(\"_0_1.s0\"));\n    \n    // Case 1: force 'CFS' on target\n    lmp.setUseCompoundFile(true);\n    lmp.setNoCFSRatio(1.0);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"existing segments should not be modified by addIndexes\", w.segmentInfos.info(0).getUseCompoundFile());\n    assertTrue(\"segment should have been converted to a CFS by addIndexes\", w.segmentInfos.info(1).getUseCompoundFile());\n    assertTrue(\".del file not found\", target.fileExists(\"_1_1.del\"));\n    assertTrue(\"separate norms file not found\", target.fileExists(\"_1_1.s0\"));\n\n    // Case 2: LMP disallows CFS\n    lmp.setUseCompoundFile(false);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"segment should not have been converted to a CFS by addIndexes if MP disallows\", w.segmentInfos.info(2).getUseCompoundFile());\n\n    w.close();\n\n    // cleanup\n    src.close();\n    target.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testCopyIntoCFS().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to\n  // a CFS, given MP preferences\n  public void testCopyIntoCFS() throws Exception {\n    // create an index, no CFS (so we can assert that existing segments are not affected)\n    Directory target = newDirectory();\n    LogMergePolicy lmp = newLogMergePolicy(false);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);\n    IndexWriter w = new IndexWriter(target, conf);\n    w.addDocument(new Document());\n    w.commit();\n    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());\n\n    // prepare second index, no-CFS too + .del file + separate norms file\n    Directory src = newDirectory();\n    LogMergePolicy lmp2 = newLogMergePolicy(false);\n    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(lmp2);\n    IndexWriter w2 = new IndexWriter(src, conf2);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some text\", Store.YES, Index.ANALYZED));\n    w2.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"d\", \"delete\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    w2.addDocument(doc);\n    w2.commit();\n    w2.deleteDocuments(new Term(\"d\", \"delete\"));\n    w2.commit();\n    w2.close();\n\n    // create separate norms file\n    IndexReader r = IndexReader.open(src, false);\n    r.setNorm(0, \"c\", (byte) 1);\n    r.close();\n    assertTrue(\".del file not found\", src.fileExists(\"_0_1.del\"));\n    assertTrue(\"separate norms file not found\", src.fileExists(\"_0_1.s0\"));\n    \n    // Case 1: force 'CFS' on target\n    lmp.setUseCompoundFile(true);\n    lmp.setNoCFSRatio(1.0);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"existing segments should not be modified by addIndexes\", w.segmentInfos.info(0).getUseCompoundFile());\n    assertTrue(\"segment should have been converted to a CFS by addIndexes\", w.segmentInfos.info(1).getUseCompoundFile());\n    assertTrue(\".del file not found\", target.fileExists(\"_1_1.del\"));\n    assertTrue(\"separate norms file not found\", target.fileExists(\"_1_1.s0\"));\n\n    // Case 2: LMP disallows CFS\n    lmp.setUseCompoundFile(false);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"segment should not have been converted to a CFS by addIndexes if MP disallows\", w.segmentInfos.info(2).getUseCompoundFile());\n\n    w.close();\n\n    // cleanup\n    src.close();\n    target.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testCopyIntoCFS().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to\n  // a CFS, given MP preferences\n  public void testCopyIntoCFS() throws Exception {\n    // create an index, no CFS (so we can assert that existing segments are not affected)\n    Directory target = newDirectory();\n    LogMergePolicy lmp = newLogMergePolicy(false);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);\n    IndexWriter w = new IndexWriter(target, conf);\n    w.addDocument(new Document());\n    w.commit();\n    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());\n\n    // prepare second index, no-CFS too + .del file + separate norms file\n    Directory src = newDirectory();\n    LogMergePolicy lmp2 = newLogMergePolicy(false);\n    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(lmp2);\n    IndexWriter w2 = new IndexWriter(src, conf2);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some text\", Store.YES, Index.ANALYZED));\n    w2.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"d\", \"delete\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    w2.addDocument(doc);\n    w2.commit();\n    w2.deleteDocuments(new Term(\"d\", \"delete\"));\n    w2.commit();\n    w2.close();\n\n    // create separate norms file\n    IndexReader r = IndexReader.open(src, false);\n    r.setNorm(0, \"c\", (byte) 1);\n    r.close();\n    assertTrue(\".del file not found\", src.fileExists(\"_0_1.del\"));\n    assertTrue(\"separate norms file not found\", src.fileExists(\"_0_1.s0\"));\n    \n    // Case 1: force 'CFS' on target\n    lmp.setUseCompoundFile(true);\n    lmp.setNoCFSRatio(1.0);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"existing segments should not be modified by addIndexes\", w.segmentInfos.info(0).getUseCompoundFile());\n    assertTrue(\"segment should have been converted to a CFS by addIndexes\", w.segmentInfos.info(1).getUseCompoundFile());\n    assertTrue(\".del file not found\", target.fileExists(\"_1_1.del\"));\n    assertTrue(\"separate norms file not found\", target.fileExists(\"_1_1.s0\"));\n\n    // Case 2: LMP disallows CFS\n    lmp.setUseCompoundFile(false);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"segment should not have been converted to a CFS by addIndexes if MP disallows\", w.segmentInfos.info(2).getUseCompoundFile());\n\n    w.close();\n\n    // cleanup\n    src.close();\n    target.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testCopyIntoCFS().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testCopyIntoCFS().mjava","sourceNew":"  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to\n  // a CFS, given MP preferences\n  public void testCopyIntoCFS() throws Exception {\n    // create an index, no CFS (so we can assert that existing segments are not affected)\n    Directory target = newDirectory();\n    LogMergePolicy lmp = newLogMergePolicy(false);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);\n    IndexWriter w = new IndexWriter(target, conf);\n    w.addDocument(new Document());\n    w.commit();\n    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());\n\n    // prepare second index, no-CFS too + .del file + separate norms file\n    Directory src = newDirectory();\n    LogMergePolicy lmp2 = newLogMergePolicy(false);\n    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(lmp2);\n    IndexWriter w2 = new IndexWriter(src, conf2);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", TextField.TYPE_STORED, \"some text\"));\n    w2.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"d\", \"delete\"));\n    w2.addDocument(doc);\n    w2.commit();\n    w2.deleteDocuments(new Term(\"d\", \"delete\"));\n    w2.commit();\n    w2.close();\n\n    // create separate norms file\n    IndexReader r = IndexReader.open(src, false);\n    r.setNorm(0, \"c\", (byte) 1);\n    r.close();\n    assertTrue(\".del file not found\", src.fileExists(\"_0_1.del\"));\n    assertTrue(\"separate norms file not found\", src.fileExists(\"_0_1.s0\"));\n    \n    // Case 1: force 'CFS' on target\n    lmp.setUseCompoundFile(true);\n    lmp.setNoCFSRatio(1.0);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"existing segments should not be modified by addIndexes\", w.segmentInfos.info(0).getUseCompoundFile());\n    assertTrue(\"segment should have been converted to a CFS by addIndexes\", w.segmentInfos.info(1).getUseCompoundFile());\n    assertTrue(\".del file not found\", target.fileExists(\"_1_1.del\"));\n    assertTrue(\"separate norms file not found\", target.fileExists(\"_1_1.s0\"));\n\n    // Case 2: LMP disallows CFS\n    lmp.setUseCompoundFile(false);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"segment should not have been converted to a CFS by addIndexes if MP disallows\", w.segmentInfos.info(2).getUseCompoundFile());\n\n    w.close();\n\n    // cleanup\n    src.close();\n    target.close();\n  }\n\n","sourceOld":"  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to\n  // a CFS, given MP preferences\n  public void testCopyIntoCFS() throws Exception {\n    // create an index, no CFS (so we can assert that existing segments are not affected)\n    Directory target = newDirectory();\n    LogMergePolicy lmp = newLogMergePolicy(false);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);\n    IndexWriter w = new IndexWriter(target, conf);\n    w.addDocument(new Document());\n    w.commit();\n    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());\n\n    // prepare second index, no-CFS too + .del file + separate norms file\n    Directory src = newDirectory();\n    LogMergePolicy lmp2 = newLogMergePolicy(false);\n    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(lmp2);\n    IndexWriter w2 = new IndexWriter(src, conf2);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some text\", Store.YES, Index.ANALYZED));\n    w2.addDocument(doc);\n    doc = new Document();\n    doc.add(new Field(\"d\", \"delete\", Store.NO, Index.NOT_ANALYZED_NO_NORMS));\n    w2.addDocument(doc);\n    w2.commit();\n    w2.deleteDocuments(new Term(\"d\", \"delete\"));\n    w2.commit();\n    w2.close();\n\n    // create separate norms file\n    IndexReader r = IndexReader.open(src, false);\n    r.setNorm(0, \"c\", (byte) 1);\n    r.close();\n    assertTrue(\".del file not found\", src.fileExists(\"_0_1.del\"));\n    assertTrue(\"separate norms file not found\", src.fileExists(\"_0_1.s0\"));\n    \n    // Case 1: force 'CFS' on target\n    lmp.setUseCompoundFile(true);\n    lmp.setNoCFSRatio(1.0);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"existing segments should not be modified by addIndexes\", w.segmentInfos.info(0).getUseCompoundFile());\n    assertTrue(\"segment should have been converted to a CFS by addIndexes\", w.segmentInfos.info(1).getUseCompoundFile());\n    assertTrue(\".del file not found\", target.fileExists(\"_1_1.del\"));\n    assertTrue(\"separate norms file not found\", target.fileExists(\"_1_1.s0\"));\n\n    // Case 2: LMP disallows CFS\n    lmp.setUseCompoundFile(false);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"segment should not have been converted to a CFS by addIndexes if MP disallows\", w.segmentInfos.info(2).getUseCompoundFile());\n\n    w.close();\n\n    // cleanup\n    src.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testCopyIntoCFS().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testCopyIntoCFS().mjava","sourceNew":"  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to\n  // a CFS, given MP preferences\n  public void testCopyIntoCFS() throws Exception {\n    // create an index, no CFS (so we can assert that existing segments are not affected)\n    Directory target = newDirectory();\n    LogMergePolicy lmp = newLogMergePolicy(false);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);\n    IndexWriter w = new IndexWriter(target, conf);\n    w.addDocument(new Document());\n    w.commit();\n    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());\n\n    // prepare second index, no-CFS too + .del file + separate norms file\n    Directory src = newDirectory();\n    LogMergePolicy lmp2 = newLogMergePolicy(false);\n    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(lmp2);\n    IndexWriter w2 = new IndexWriter(src, conf2);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some text\", TextField.TYPE_STORED));\n    w2.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"d\", \"delete\"));\n    w2.addDocument(doc);\n    w2.commit();\n    w2.deleteDocuments(new Term(\"d\", \"delete\"));\n    w2.commit();\n    w2.close();\n\n    // create separate norms file\n    IndexReader r = IndexReader.open(src, false);\n    r.setNorm(0, \"c\", (byte) 1);\n    r.close();\n    assertTrue(\".del file not found\", src.fileExists(\"_0_1.del\"));\n    assertTrue(\"separate norms file not found\", src.fileExists(\"_0_1.s0\"));\n    \n    // Case 1: force 'CFS' on target\n    lmp.setUseCompoundFile(true);\n    lmp.setNoCFSRatio(1.0);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"existing segments should not be modified by addIndexes\", w.segmentInfos.info(0).getUseCompoundFile());\n    assertTrue(\"segment should have been converted to a CFS by addIndexes\", w.segmentInfos.info(1).getUseCompoundFile());\n    assertTrue(\".del file not found\", target.fileExists(\"_1_1.del\"));\n    assertTrue(\"separate norms file not found\", target.fileExists(\"_1_1.s0\"));\n\n    // Case 2: LMP disallows CFS\n    lmp.setUseCompoundFile(false);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"segment should not have been converted to a CFS by addIndexes if MP disallows\", w.segmentInfos.info(2).getUseCompoundFile());\n\n    w.close();\n\n    // cleanup\n    src.close();\n    target.close();\n  }\n\n","sourceOld":"  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to\n  // a CFS, given MP preferences\n  public void testCopyIntoCFS() throws Exception {\n    // create an index, no CFS (so we can assert that existing segments are not affected)\n    Directory target = newDirectory();\n    LogMergePolicy lmp = newLogMergePolicy(false);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);\n    IndexWriter w = new IndexWriter(target, conf);\n    w.addDocument(new Document());\n    w.commit();\n    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());\n\n    // prepare second index, no-CFS too + .del file + separate norms file\n    Directory src = newDirectory();\n    LogMergePolicy lmp2 = newLogMergePolicy(false);\n    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(lmp2);\n    IndexWriter w2 = new IndexWriter(src, conf2);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", TextField.TYPE_STORED, \"some text\"));\n    w2.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"d\", \"delete\"));\n    w2.addDocument(doc);\n    w2.commit();\n    w2.deleteDocuments(new Term(\"d\", \"delete\"));\n    w2.commit();\n    w2.close();\n\n    // create separate norms file\n    IndexReader r = IndexReader.open(src, false);\n    r.setNorm(0, \"c\", (byte) 1);\n    r.close();\n    assertTrue(\".del file not found\", src.fileExists(\"_0_1.del\"));\n    assertTrue(\"separate norms file not found\", src.fileExists(\"_0_1.s0\"));\n    \n    // Case 1: force 'CFS' on target\n    lmp.setUseCompoundFile(true);\n    lmp.setNoCFSRatio(1.0);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"existing segments should not be modified by addIndexes\", w.segmentInfos.info(0).getUseCompoundFile());\n    assertTrue(\"segment should have been converted to a CFS by addIndexes\", w.segmentInfos.info(1).getUseCompoundFile());\n    assertTrue(\".del file not found\", target.fileExists(\"_1_1.del\"));\n    assertTrue(\"separate norms file not found\", target.fileExists(\"_1_1.s0\"));\n\n    // Case 2: LMP disallows CFS\n    lmp.setUseCompoundFile(false);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"segment should not have been converted to a CFS by addIndexes if MP disallows\", w.segmentInfos.info(2).getUseCompoundFile());\n\n    w.close();\n\n    // cleanup\n    src.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6a3fe8668125a7bb217ab4b515c348a6d21ddf9","date":1322493662,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#testCopyIntoCFS().mjava","sourceNew":null,"sourceOld":"  // LUCENE-3126: tests that if a non-CFS segment is copied, it is converted to\n  // a CFS, given MP preferences\n  public void testCopyIntoCFS() throws Exception {\n    // create an index, no CFS (so we can assert that existing segments are not affected)\n    Directory target = newDirectory();\n    LogMergePolicy lmp = newLogMergePolicy(false);\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, null).setMergePolicy(lmp);\n    IndexWriter w = new IndexWriter(target, conf);\n    w.addDocument(new Document());\n    w.commit();\n    assertFalse(w.segmentInfos.info(0).getUseCompoundFile());\n\n    // prepare second index, no-CFS too + .del file + separate norms file\n    Directory src = newDirectory();\n    LogMergePolicy lmp2 = newLogMergePolicy(false);\n    IndexWriterConfig conf2 = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setMergePolicy(lmp2);\n    IndexWriter w2 = new IndexWriter(src, conf2);\n    Document doc = new Document();\n    doc.add(new Field(\"c\", \"some text\", TextField.TYPE_STORED));\n    w2.addDocument(doc);\n    doc = new Document();\n    doc.add(new StringField(\"d\", \"delete\"));\n    w2.addDocument(doc);\n    w2.commit();\n    w2.deleteDocuments(new Term(\"d\", \"delete\"));\n    w2.commit();\n    w2.close();\n\n    // create separate norms file\n    IndexReader r = IndexReader.open(src, false);\n    r.setNorm(0, \"c\", (byte) 1);\n    r.close();\n    assertTrue(\".del file not found\", src.fileExists(\"_0_1.del\"));\n    assertTrue(\"separate norms file not found\", src.fileExists(\"_0_1.s0\"));\n    \n    // Case 1: force 'CFS' on target\n    lmp.setUseCompoundFile(true);\n    lmp.setNoCFSRatio(1.0);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"existing segments should not be modified by addIndexes\", w.segmentInfos.info(0).getUseCompoundFile());\n    assertTrue(\"segment should have been converted to a CFS by addIndexes\", w.segmentInfos.info(1).getUseCompoundFile());\n    assertTrue(\".del file not found\", target.fileExists(\"_1_1.del\"));\n    assertTrue(\"separate norms file not found\", target.fileExists(\"_1_1.s0\"));\n\n    // Case 2: LMP disallows CFS\n    lmp.setUseCompoundFile(false);\n    w.addIndexes(src);\n    w.commit();\n    assertFalse(\"segment should not have been converted to a CFS by addIndexes if MP disallows\", w.segmentInfos.info(2).getUseCompoundFile());\n\n    w.close();\n\n    // cleanup\n    src.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a6a3fe8668125a7bb217ab4b515c348a6d21ddf9":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a3fe8668125a7bb217ab4b515c348a6d21ddf9"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f"]},"commit2Childs":{"32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","1509f151d7692d84fae414b2b799ac06ba60fcb4","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a6a3fe8668125a7bb217ab4b515c348a6d21ddf9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32dd6d3e87d9e4f05e3e9de40bebf1ff1482771f","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["a6a3fe8668125a7bb217ab4b515c348a6d21ddf9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}