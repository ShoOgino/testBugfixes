{"path":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testFeatureMissing().mjava","commits":[{"id":"39b2b262e31fd11314f2073628a34014b9b38593","date":1558680357,"type":0,"author":"Colin Goodheart-Smithe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testFeatureMissing().mjava","pathOld":"/dev/null","sourceNew":"  public void testFeatureMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FeatureField(\"field\", \"name\", 1.3F));\n    doc.add(newStringField(\"value\", \"1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FeatureField(\"field\", \"name\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(FeatureField.newFeatureSort(\"field\", \"name\"));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits.value);\n    // null is treated as 0\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"1.3\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d7b23c44af81bfb0690fa0326d87ffe20964c60","date":1562310802,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testFeatureMissing().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFeatureSort#testFeatureMissing().mjava","sourceNew":"  public void testFeatureMissing() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig config = newIndexWriterConfig().setMergePolicy(newLogMergePolicy(random().nextBoolean()));\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, config);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FeatureField(\"field\", \"name\", 1.3F));\n    doc.add(newStringField(\"value\", \"1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FeatureField(\"field\", \"name\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(FeatureField.newFeatureSort(\"field\", \"name\"));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits.value);\n    // null is treated as 0\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"1.3\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testFeatureMissing() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FeatureField(\"field\", \"name\", 1.3F));\n    doc.add(newStringField(\"value\", \"1.3\", Field.Store.YES));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(new FeatureField(\"field\", \"name\", 4.2F));\n    doc.add(newStringField(\"value\", \"4.2\", Field.Store.YES));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(ir);\n    Sort sort = new Sort(FeatureField.newFeatureSort(\"field\", \"name\"));\n\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 10, sort);\n    assertEquals(3, td.totalHits.value);\n    // null is treated as 0\n    assertEquals(\"4.2\", searcher.doc(td.scoreDocs[0].doc).get(\"value\"));\n    assertEquals(\"1.3\", searcher.doc(td.scoreDocs[1].doc).get(\"value\"));\n    assertNull(searcher.doc(td.scoreDocs[2].doc).get(\"value\"));\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9d7b23c44af81bfb0690fa0326d87ffe20964c60":["39b2b262e31fd11314f2073628a34014b9b38593"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"39b2b262e31fd11314f2073628a34014b9b38593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d7b23c44af81bfb0690fa0326d87ffe20964c60"]},"commit2Childs":{"9d7b23c44af81bfb0690fa0326d87ffe20964c60":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39b2b262e31fd11314f2073628a34014b9b38593"],"39b2b262e31fd11314f2073628a34014b9b38593":["9d7b23c44af81bfb0690fa0326d87ffe20964c60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}