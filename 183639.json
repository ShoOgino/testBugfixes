{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","commits":[{"id":"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d","date":1467828398,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      String nodeId = node.getString(\"node\");\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"stats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d4ff6bc316c2cad4d245958a058040d9add305","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      String nodeId = node.getString(\"node\");\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      String nodeId = node.getString(\"node\");\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"stats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96c0517ff9245636a3c4971947e2abf0dfe38c8d","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      String nodeId = node.getString(\"node\");\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c85e76ff5e2b9aa8275fc633ea21ee189bfc8d9","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cda901ebf604e61588e415a44a713882e11dac43","date":1474654111,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"/dev/null","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0083b99694eda9623bc01747fd55949a79af54fa","date":1488215006,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = termFreqValue.floatValue() * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01624b85de12fb02335810bdf325124e59040772","date":1490254940,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(DISTRIB, \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f4c5d3859373c3a74734e85efa122b17514e3e8","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(DISTRIB, \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(\"distrib\", \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.getFields().containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(DISTRIB, \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.getFields().containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.fields.containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(DISTRIB, \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.fields.containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.getFields().containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(DISTRIB, \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(request, collection);\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.getFields().containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.getFields().containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(DISTRIB, \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      NamedList response = client.request(request, collection);\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.getFields().containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c","date":1600965744,"type":3,"author":"S N Munendra","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/ScoreNodesStream#open().mjava","sourceNew":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.getFields().containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(request, collection);\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.getFields().containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","sourceOld":"  public void open() throws IOException {\n    stream.open();\n    Tuple node = null;\n    StringBuilder builder = new StringBuilder();\n    String field = null;\n    String collection = null;\n    while(true) {\n      node = stream.read();\n      if(node.EOF) {\n        break;\n      }\n\n      if(facet) {\n        //Turn the facet tuple into a node.\n        String nodeId = node.getString(bucket);\n        node.put(\"node\", nodeId);\n        node.remove(bucket);\n        node.put(\"collection\", facetCollection);\n        node.put(\"field\", bucket);\n      }\n\n      if(!node.getFields().containsKey(\"node\")) {\n        throw new IOException(\"node field not present in the Tuple\");\n      }\n\n      String nodeId = node.getString(\"node\");\n\n      nodes.put(nodeId, node);\n      if(builder.length() > 0) {\n        builder.append(\",\");\n        field = node.getString(\"field\");\n        collection = node.getString(\"collection\");\n      }\n      builder.append(nodeId);\n    }\n\n    CloudSolrClient client = clientCache.getCloudSolrClient(zkHost);\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CommonParams.QT, \"/terms\");\n    params.add(TermsParams.TERMS, \"true\");\n    params.add(TermsParams.TERMS_FIELD, field);\n    params.add(TermsParams.TERMS_STATS, \"true\");\n    params.add(TermsParams.TERMS_LIST, builder.toString());\n    params.add(TermsParams.TERMS_LIMIT, Integer.toString(nodes.size()));\n    params.add(DISTRIB, \"true\");\n\n    QueryRequest request = new QueryRequest(params);\n\n\n    try {\n\n      //Get the response from the terms component\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList response = client.request(request, collection);\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Number> stats = (NamedList<Number>)response.get(\"indexstats\");\n      long numDocs = stats.get(\"numDocs\").longValue();\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<NamedList<Number>> fields = (NamedList<NamedList<Number>>)response.get(\"terms\");\n\n      int size = fields.size();\n      for(int i=0; i<size; i++) {\n        String fieldName = fields.getName(i);\n        NamedList<Number> terms = fields.get(fieldName);\n        int tsize = terms.size();\n        for(int t=0; t<tsize; t++) {\n          String term = terms.getName(t);\n          Number docFreq = terms.get(term);\n          Tuple tuple = nodes.get(term);\n          if(!tuple.getFields().containsKey(termFreq)) {\n            throw new Exception(\"termFreq field not present in the Tuple\");\n          }\n          Number termFreqValue = (Number)tuple.get(termFreq);\n          float score = (float)(Math.log(termFreqValue.floatValue())+1.0) * (float) (Math.log((numDocs + 1) / (docFreq.doubleValue() + 1)) + 1.0);\n          tuple.put(\"nodeScore\", score);\n          tuple.put(\"docFreq\", docFreq);\n          tuple.put(\"numDocs\", numDocs);\n        }\n      }\n    } catch (Exception e) {\n      throw new IOException(e);\n    }\n\n    tuples = nodes.values().iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cda901ebf604e61588e415a44a713882e11dac43":["7c85e76ff5e2b9aa8275fc633ea21ee189bfc8d9"],"c6d4ff6bc316c2cad4d245958a058040d9add305":["8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":["0083b99694eda9623bc01747fd55949a79af54fa"],"7c85e76ff5e2b9aa8275fc633ea21ee189bfc8d9":["96c0517ff9245636a3c4971947e2abf0dfe38c8d"],"01624b85de12fb02335810bdf325124e59040772":["0083b99694eda9623bc01747fd55949a79af54fa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0083b99694eda9623bc01747fd55949a79af54fa":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"96c0517ff9245636a3c4971947e2abf0dfe38c8d":["c6d4ff6bc316c2cad4d245958a058040d9add305"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7c85e76ff5e2b9aa8275fc633ea21ee189bfc8d9","cda901ebf604e61588e415a44a713882e11dac43"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["01624b85de12fb02335810bdf325124e59040772"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c"]},"commit2Childs":{"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cda901ebf604e61588e415a44a713882e11dac43":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c6d4ff6bc316c2cad4d245958a058040d9add305":["96c0517ff9245636a3c4971947e2abf0dfe38c8d"],"6f4c5d3859373c3a74734e85efa122b17514e3e8":[],"7c85e76ff5e2b9aa8275fc633ea21ee189bfc8d9":["cda901ebf604e61588e415a44a713882e11dac43","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"01624b85de12fb02335810bdf325124e59040772":["804a8d5358fe7b7563b85ee7838714d720b89272"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0083b99694eda9623bc01747fd55949a79af54fa":["6f4c5d3859373c3a74734e85efa122b17514e3e8","01624b85de12fb02335810bdf325124e59040772"],"96c0517ff9245636a3c4971947e2abf0dfe38c8d":["7c85e76ff5e2b9aa8275fc633ea21ee189bfc8d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0083b99694eda9623bc01747fd55949a79af54fa"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c"],"8b92f86e90a95b8fc860ddecd9470ffb89a9fa7d":["c6d4ff6bc316c2cad4d245958a058040d9add305"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f4c5d3859373c3a74734e85efa122b17514e3e8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}