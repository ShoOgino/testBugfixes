{"path":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ece4f96ab6715698025e610d433ee875571cc9f","date":1278715475,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n      \n      // before looping over each core, let's check the names and fail \n      // fast if the same one is reused multiple times.\n      { // local scope, won't need these vars again\n        NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core/@name\", \n                                                XPathConstants.NODESET);\n        Set<String> names = new HashSet<String>();\n        for (int i=0; i<nodes.getLength(); i++) {\n          String name = DOMUtil.getText(nodes.item(i));\n          if (names.contains(name)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Multiple cores found with same name: \" + \n                                    name);\n          }\n          names.add(name);\n        }\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n      \n      // before looping over each core, let's check the names and fail \n      // fast if the same one is reused multiple times.\n      { // local scope, won't need these vars again\n        NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core/@name\", \n                                                XPathConstants.NODESET);\n        Set<String> names = new HashSet<String>();\n        for (int i=0; i<nodes.getLength(); i++) {\n          String name = DOMUtil.getText(nodes.item(i));\n          if (names.contains(name)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Multiple cores found with same name: \" + \n                                    name);\n          }\n          names.add(name);\n        }\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if(name.equals(defaultCoreName)){\n            if(defaultCoreFound) throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"Only one 'DEFAULT_CORE' is allowed \");            \n            defaultCoreFound = true;\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if(solrConfigFilenameOverride != null) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n      \n      // before looping over each core, let's check the names and fail \n      // fast if the same one is reused multiple times.\n      { // local scope, won't need these vars again\n        NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core/@name\", \n                                                XPathConstants.NODESET);\n        Set<String> names = new HashSet<String>();\n        for (int i=0; i<nodes.getLength(); i++) {\n          String name = DOMUtil.getText(nodes.item(i));\n          if (names.contains(name)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Multiple cores found with same name: \" + \n                                    name);\n          }\n          names.add(name);\n        }\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if(solrConfigFilenameOverride != null) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n      \n      // before looping over each core, let's check the names and fail \n      // fast if the same one is reused multiple times.\n      { // local scope, won't need these vars again\n        NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core/@name\", \n                                                XPathConstants.NODESET);\n        Set<String> names = new HashSet<String>();\n        for (int i=0; i<nodes.getLength(); i++) {\n          String name = DOMUtil.getText(nodes.item(i));\n          if (names.contains(name)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Multiple cores found with same name: \" + \n                                    name);\n          }\n          names.add(name);\n        }\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if(solrConfigFilenameOverride != null) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool( \"solr/@persistent\", false );\n      libDir     = cfg.get(     \"solr/@sharedLib\", null);\n      adminPath  = cfg.get(     \"solr/cores/@adminPath\", null );\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false );\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n      \n      // before looping over each core, let's check the names and fail \n      // fast if the same one is reused multiple times.\n      { // local scope, won't need these vars again\n        NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core/@name\", \n                                                XPathConstants.NODESET);\n        Set<String> names = new HashSet<String>();\n        for (int i=0; i<nodes.getLength(); i++) {\n          String name = DOMUtil.getText(nodes.item(i));\n          if (names.contains(name)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Multiple cores found with same name: \" + \n                                    name);\n          }\n          names.add(name);\n        }\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n          if(solrConfigFilenameOverride != null && name.equals(\"\")) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    }\n\n    finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f4245d1ce3fc22feae2d4d0341e09c623d18b58","date":1293820574,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if(solrConfigFilenameOverride != null) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if(solrConfigFilenameOverride != null) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if(solrConfigFilenameOverride != null) {\n            p.setConfigName(solrConfigFilenameOverride);\n          } else if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputStream).mjava","sourceNew":null,"sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputStream cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    try {\n      Config cfg = new Config(loader, null, cfgis, null);\n      String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n      if(dcoreName != null) {\n        defaultCoreName = dcoreName;\n      }\n      persistent = cfg.getBool(\"solr/@persistent\", false);\n      libDir = cfg.get(\"solr/@sharedLib\", null);\n      zkHost = cfg.get(\"solr/@zkHost\" , null);\n      adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n      shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n      int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n      hostPort = System.getProperty(\"hostPort\");\n      if (hostPort == null) {\n        hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n      }\n\n      hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n      host = cfg.get(\"solr/cores/@host\", null);\n\n      if(shareSchema){\n        indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n      }\n      adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n      managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n      \n      zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n      initZooKeeper(zkHost, zkClientTimeout);\n\n      if (libDir != null) {\n        File f = FileUtils.resolvePath(new File(dir), libDir);\n        log.info( \"loading shared library: \"+f.getAbsolutePath() );\n        libLoader = SolrResourceLoader.createClassLoader(f, null);\n      }\n\n      if (adminPath != null) {\n        if (adminHandler == null) {\n          coreAdminHandler = new CoreAdminHandler(this);\n        } else {\n          coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n        }\n      }\n\n      try {\n        containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n      } catch (Throwable e) {\n        SolrConfig.severeErrors.add(e);\n        SolrException.logOnce(log,null,e);\n      }\n\n      NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n      boolean defaultCoreFound = false;\n      for (int i=0; i<nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        try {\n          String name = DOMUtil.getAttr(node, \"name\", null);\n          if (null == name) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"Each core in solr.xml must have a 'name'\");\n          }\n          if (name.equals(defaultCoreName)){\n            // for the default core we use a blank name,\n            // later on attempts to access it by it's full name will \n            // be mapped to this.\n            name=\"\";\n          }\n          CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n          // deal with optional settings\n          String opt = DOMUtil.getAttr(node, \"config\", null);\n\n          if (opt != null) {\n            p.setConfigName(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"schema\", null);\n          if (opt != null) {\n            p.setSchemaName(opt);\n          }\n          if (zkController != null) {\n            opt = DOMUtil.getAttr(node, \"shard\", null);\n            if (opt != null && opt.length() > 0) {\n              p.getCloudDescriptor().setShardId(opt);\n            }\n            opt = DOMUtil.getAttr(node, \"collection\", null);\n            if (opt != null) {\n              p.getCloudDescriptor().setCollectionName(opt);\n            }\n          }\n          opt = DOMUtil.getAttr(node, \"properties\", null);\n          if (opt != null) {\n            p.setPropertiesName(opt);\n          }\n          opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n          if (opt != null) {\n            p.setDataDir(opt);\n          }\n\n          p.setCoreProperties(readProperties(cfg, node));\n\n          SolrCore core = create(p);\n          register(name, core, false);\n        }\n        catch (Throwable ex) {\n          SolrConfig.severeErrors.add( ex );\n          SolrException.logOnce(log,null,ex);\n        }\n      }\n    } finally {\n      if (cfgis != null) {\n        try { cfgis.close(); } catch (Exception xany) {}\n      }\n    }\n    \n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["3ece4f96ab6715698025e610d433ee875571cc9f"],"70ad682703b8585f5d0a637efec044d57ec05efb":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","4f4245d1ce3fc22feae2d4d0341e09c623d18b58"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","3ece4f96ab6715698025e610d433ee875571cc9f"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["4f4245d1ce3fc22feae2d4d0341e09c623d18b58"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4f4245d1ce3fc22feae2d4d0341e09c623d18b58"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","b24326411db492f92ea49f6fb947c90bc73cf19e"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","b24326411db492f92ea49f6fb947c90bc73cf19e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f4245d1ce3fc22feae2d4d0341e09c623d18b58":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"3ece4f96ab6715698025e610d433ee875571cc9f":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3ece4f96ab6715698025e610d433ee875571cc9f","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b24326411db492f92ea49f6fb947c90bc73cf19e"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4f4245d1ce3fc22feae2d4d0341e09c623d18b58","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"1da8d55113b689b06716246649de6f62430f15c0":["5f4e87790277826a2aea119328600dfb07761f32","3ece4f96ab6715698025e610d433ee875571cc9f"],"b24326411db492f92ea49f6fb947c90bc73cf19e":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3ece4f96ab6715698025e610d433ee875571cc9f":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","5f4e87790277826a2aea119328600dfb07761f32","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4f4245d1ce3fc22feae2d4d0341e09c623d18b58":["70ad682703b8585f5d0a637efec044d57ec05efb","b24326411db492f92ea49f6fb947c90bc73cf19e","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["70ad682703b8585f5d0a637efec044d57ec05efb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}