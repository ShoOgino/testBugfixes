{"path":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[Path],Path).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[Path],Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[File],File).mjava","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<Path> merges, Path outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current.get(), b.current.get()) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current.bytes(), 0, top.current.length());\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","sourceOld":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<File> merges, File outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current.get(), b.current.get()) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current.bytes(), 0, top.current.length());\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(Directory,List[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/OfflineSorter#mergePartitions(List[Path],Path).mjava","sourceNew":"  /** Merge a list of sorted temporary files (partitions) into an output file.  Note that this closes the\n   *  incoming {@link IndexOutput}. */\n  void mergePartitions(Directory trackingDir, List<String> segments) throws IOException {\n    long start = System.currentTimeMillis();\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(segments.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current.get(), b.current.get()) < 0;\n      }\n    };\n\n    ByteSequencesReader[] streams = new ByteSequencesReader[segments.size()];\n\n    String newSegmentName = null;\n\n    try (IndexOutput out = trackingDir.createTempOutput(tempFileNamePrefix, \"sort\", IOContext.DEFAULT)) {\n      newSegmentName = out.getName();\n      ByteSequencesWriter writer = new ByteSequencesWriter(out);\n\n      // Open streams and read the top for each file\n      for (int i = 0; i < segments.size(); i++) {\n        streams[i] = new ByteSequencesReader(dir.openInput(segments.get(i), IOContext.READONCE));\n        byte[] line = streams[i].read();\n        assert line != null;\n        queue.insertWithOverflow(new FileAndTop(i, line));\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        writer.write(top.current.bytes(), 0, top.current.length());\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      IOUtils.close(streams);\n    }\n\n    IOUtils.deleteFiles(trackingDir, segments);\n\n    segments.clear();\n    segments.add(newSegmentName);\n\n    sortInfo.tempMergeFiles++;\n  }\n\n","sourceOld":"  /** Merge a list of sorted temporary files (partitions) into an output file */\n  void mergePartitions(List<Path> merges, Path outputFile) throws IOException {\n    long start = System.currentTimeMillis();\n\n    ByteSequencesWriter out = new ByteSequencesWriter(outputFile);\n\n    PriorityQueue<FileAndTop> queue = new PriorityQueue<FileAndTop>(merges.size()) {\n      @Override\n      protected boolean lessThan(FileAndTop a, FileAndTop b) {\n        return comparator.compare(a.current.get(), b.current.get()) < 0;\n      }\n    };\n\n    ByteSequencesReader [] streams = new ByteSequencesReader [merges.size()];\n    try {\n      // Open streams and read the top for each file\n      for (int i = 0; i < merges.size(); i++) {\n        streams[i] = new ByteSequencesReader(merges.get(i));\n        byte line[] = streams[i].read();\n        if (line != null) {\n          queue.insertWithOverflow(new FileAndTop(i, line));\n        }\n      }\n  \n      // Unix utility sort() uses ordered array of files to pick the next line from, updating\n      // it as it reads new lines. The PQ used here is a more elegant solution and has \n      // a nicer theoretical complexity bound :) The entire sorting process is I/O bound anyway\n      // so it shouldn't make much of a difference (didn't check).\n      FileAndTop top;\n      while ((top = queue.top()) != null) {\n        out.write(top.current.bytes(), 0, top.current.length());\n        if (!streams[top.fd].read(top.current)) {\n          queue.pop();\n        } else {\n          queue.updateTop();\n        }\n      }\n  \n      sortInfo.mergeTime += System.currentTimeMillis() - start;\n      sortInfo.mergeRounds++;\n    } finally {\n      // The logic below is: if an exception occurs in closing out, it has a priority over exceptions\n      // happening in closing streams.\n      try {\n        IOUtils.close(streams);\n      } finally {\n        IOUtils.close(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["2b84d416bbd661ae4b2a28d103bdfccb851e00de"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}