{"path":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","commits":[{"id":"90de13b766293d1744c908f8c4f754d7bd7f1580","date":1429108933,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","pathOld":"/dev/null","sourceNew":"  private static FieldType randomFieldType() throws Exception {\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if ((method.getModifiers() & Modifier.PUBLIC) != 0 && method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        for (int i = 0; i < args.length; ++i) {\n          args[i] = randomValue(parameterTypes[i]);\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["067bb525d2e4993889147c508e2ccb5158f409b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","sourceNew":"  private static FieldType randomFieldType() throws Exception {\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if ((method.getModifiers() & Modifier.PUBLIC) != 0 && method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        if (method.getName().equals(\"setDimensions\")) {\n          args[0] = 1 + random().nextInt(15);\n          args[1] = 1 + random().nextInt(100);\n        } else {\n          for (int i = 0; i < args.length; ++i) {\n            args[i] = randomValue(parameterTypes[i]);\n          }\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","sourceOld":"  private static FieldType randomFieldType() throws Exception {\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if ((method.getModifiers() & Modifier.PUBLIC) != 0 && method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        for (int i = 0; i < args.length; ++i) {\n          args[i] = randomValue(parameterTypes[i]);\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":["067bb525d2e4993889147c508e2ccb5158f409b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","sourceNew":"  private static FieldType randomFieldType() throws Exception {\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if ((method.getModifiers() & Modifier.PUBLIC) != 0 && method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        if (method.getName().equals(\"setPointDimensions\")) {\n          args[0] = 1 + random().nextInt(15);\n          args[1] = 1 + random().nextInt(100);\n        } else {\n          for (int i = 0; i < args.length; ++i) {\n            args[i] = randomValue(parameterTypes[i]);\n          }\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","sourceOld":"  private static FieldType randomFieldType() throws Exception {\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if ((method.getModifiers() & Modifier.PUBLIC) != 0 && method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        if (method.getName().equals(\"setDimensions\")) {\n          args[0] = 1 + random().nextInt(15);\n          args[1] = 1 + random().nextInt(100);\n        } else {\n          for (int i = 0; i < args.length; ++i) {\n            args[i] = randomValue(parameterTypes[i]);\n          }\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":["067bb525d2e4993889147c508e2ccb5158f409b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"067bb525d2e4993889147c508e2ccb5158f409b1","date":1457385185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","sourceNew":"  private static FieldType randomFieldType() throws Exception {\n    // setDimensions handled special as values must be in-bounds.\n    Method setDimensionsMethod = FieldType.class.getMethod(\"setDimensions\", int.class, int.class);\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if (method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        if (method.equals(setDimensionsMethod)) {\n          args[0] = 1 + random().nextInt(PointValues.MAX_DIMENSIONS);\n          args[1] = 1 + random().nextInt(PointValues.MAX_NUM_BYTES);\n        } else {\n          for (int i = 0; i < args.length; ++i) {\n            args[i] = randomValue(parameterTypes[i]);\n          }\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","sourceOld":"  private static FieldType randomFieldType() throws Exception {\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if ((method.getModifiers() & Modifier.PUBLIC) != 0 && method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        if (method.getName().equals(\"setPointDimensions\")) {\n          args[0] = 1 + random().nextInt(15);\n          args[1] = 1 + random().nextInt(100);\n        } else {\n          for (int i = 0; i < args.length; ++i) {\n            args[i] = randomValue(parameterTypes[i]);\n          }\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","bugFix":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","ca792c26af46bd6c4a08d81117c60440cf6a7e3d","90de13b766293d1744c908f8c4f754d7bd7f1580"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","sourceNew":"  private static FieldType randomFieldType() throws Exception {\n    // setDimensions handled special as values must be in-bounds.\n    Method setDimensionsMethodA = FieldType.class.getMethod(\"setDimensions\", int.class, int.class);\n    Method setDimensionsMethodB = FieldType.class.getMethod(\"setDimensions\", int.class, int.class, int.class);\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if (method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        if (method.equals(setDimensionsMethodA)) {\n          args[0] = 1 + random().nextInt(PointValues.MAX_DIMENSIONS);\n          args[1] = 1 + random().nextInt(PointValues.MAX_NUM_BYTES);\n        } else if (method.equals(setDimensionsMethodB)) {\n          args[0] = 1 + random().nextInt(PointValues.MAX_DIMENSIONS);\n          args[1] = 1 + random().nextInt((Integer)args[0]);\n          args[2] = 1 + random().nextInt(PointValues.MAX_NUM_BYTES);\n        } else {\n          for (int i = 0; i < args.length; ++i) {\n            args[i] = randomValue(parameterTypes[i]);\n          }\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","sourceOld":"  private static FieldType randomFieldType() throws Exception {\n    // setDimensions handled special as values must be in-bounds.\n    Method setDimensionsMethod = FieldType.class.getMethod(\"setDimensions\", int.class, int.class);\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if (method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        if (method.equals(setDimensionsMethod)) {\n          args[0] = 1 + random().nextInt(PointValues.MAX_DIMENSIONS);\n          args[1] = 1 + random().nextInt(PointValues.MAX_NUM_BYTES);\n        } else {\n          for (int i = 0; i < args.length; ++i) {\n            args[i] = randomValue(parameterTypes[i]);\n          }\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestFieldType#randomFieldType().mjava","sourceNew":"  private static FieldType randomFieldType() throws Exception {\n    // setDimensions handled special as values must be in-bounds.\n    Method setDimensionsMethodA = FieldType.class.getMethod(\"setDimensions\", int.class, int.class);\n    Method setDimensionsMethodB = FieldType.class.getMethod(\"setDimensions\", int.class, int.class, int.class);\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if (method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        if (method.equals(setDimensionsMethodA)) {\n          args[0] = 1 + random().nextInt(PointValues.MAX_INDEX_DIMENSIONS);\n          args[1] = 1 + random().nextInt(PointValues.MAX_NUM_BYTES);\n        } else if (method.equals(setDimensionsMethodB)) {\n          args[0] = 1 + random().nextInt(PointValues.MAX_DIMENSIONS);\n          args[1] = 1 + Math.min((Integer)args[0] - 1, random().nextInt(PointValues.MAX_INDEX_DIMENSIONS));\n          args[2] = 1 + random().nextInt(PointValues.MAX_NUM_BYTES);\n        } else {\n          for (int i = 0; i < args.length; ++i) {\n            args[i] = randomValue(parameterTypes[i]);\n          }\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","sourceOld":"  private static FieldType randomFieldType() throws Exception {\n    // setDimensions handled special as values must be in-bounds.\n    Method setDimensionsMethodA = FieldType.class.getMethod(\"setDimensions\", int.class, int.class);\n    Method setDimensionsMethodB = FieldType.class.getMethod(\"setDimensions\", int.class, int.class, int.class);\n    FieldType ft = new FieldType();\n    for (Method method : FieldType.class.getMethods()) {\n      if (method.getName().startsWith(\"set\")) {\n        final Class<?>[] parameterTypes = method.getParameterTypes();\n        final Object[] args = new Object[parameterTypes.length];\n        if (method.equals(setDimensionsMethodA)) {\n          args[0] = 1 + random().nextInt(PointValues.MAX_DIMENSIONS);\n          args[1] = 1 + random().nextInt(PointValues.MAX_NUM_BYTES);\n        } else if (method.equals(setDimensionsMethodB)) {\n          args[0] = 1 + random().nextInt(PointValues.MAX_DIMENSIONS);\n          args[1] = 1 + random().nextInt((Integer)args[0]);\n          args[2] = 1 + random().nextInt(PointValues.MAX_NUM_BYTES);\n        } else {\n          for (int i = 0; i < args.length; ++i) {\n            args[i] = randomValue(parameterTypes[i]);\n          }\n        }\n        method.invoke(ft, args);\n      }\n    }\n    return ft;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["067bb525d2e4993889147c508e2ccb5158f409b1"],"067bb525d2e4993889147c508e2ccb5158f409b1":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["90de13b766293d1744c908f8c4f754d7bd7f1580"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"90de13b766293d1744c908f8c4f754d7bd7f1580":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["067bb525d2e4993889147c508e2ccb5158f409b1"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"067bb525d2e4993889147c508e2ccb5158f409b1":["f6652c943595e92c187ee904c382863013eae28f"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["90de13b766293d1744c908f8c4f754d7bd7f1580"],"90de13b766293d1744c908f8c4f754d7bd7f1580":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}