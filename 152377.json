{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testLBClient().mjava","commits":[{"id":"15fb22f207e0cbf913dbc9857b6a4fe30390a625","date":1475989569,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testLBClient().mjava","pathOld":"/dev/null","sourceNew":"  public void testLBClient() throws IOException, SolrServerException {\n    \n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    int threadCount = atLeast(2);\n    final ExecutorService threads = ExecutorUtil.newMDCAwareFixedThreadPool(threadCount,\n        new SolrjNamedThreadFactory(getClass().getSimpleName()+\"TestScheduler\"));\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool);\n    try{\n      final LBHttpSolrClient roundRobin = new LBHttpSolrClient.Builder().\n                withBaseSolrUrl(fooUrl).\n                withBaseSolrUrl(barUrl).\n                withHttpClient(httpClient)\n                .build();\n      \n      List<ConcurrentUpdateSolrClient> concurrentClients = Arrays.asList(\n          new ConcurrentUpdateSolrClient.Builder(fooUrl)\n          .withHttpClient(httpClient).withThreadCount(threadCount)\n          .withQueueSize(10)\n         .withExecutorService(threads).build(),\n           new ConcurrentUpdateSolrClient.Builder(barUrl)\n          .withHttpClient(httpClient).withThreadCount(threadCount)\n          .withQueueSize(10)\n         .withExecutorService(threads).build()); \n      \n      for (int i=0; i<2; i++) {\n        roundRobin.deleteByQuery(\"*:*\");\n      }\n      \n      for (int i=0; i<57; i++) {\n        final SolrInputDocument doc = new SolrInputDocument(\"id\", \"\"+i);\n        if (random().nextBoolean()) {\n          final ConcurrentUpdateSolrClient concurrentClient = concurrentClients.get(random().nextInt(concurrentClients.size()));\n          concurrentClient.add(doc); // here we are testing that CUSC and plain clients reuse pool \n          concurrentClient.blockUntilFinished();\n        } else {\n          if (random().nextBoolean()) {\n            roundRobin.add(doc);\n          } else {\n            final UpdateRequest updateRequest = new UpdateRequest();\n            updateRequest.add(doc); // here we mimic CloudSolrClient impl\n            final List<String> urls = Arrays.asList(fooUrl, barUrl);\n            Collections.shuffle(urls, random());\n            LBHttpSolrClient.Req req = new LBHttpSolrClient.Req(updateRequest, \n                    urls);\n             roundRobin.request(req);\n          }\n        }\n      }\n      \n      for (int i=0; i<2; i++) {\n        roundRobin.commit();\n      }\n      int total=0;\n      for (int i=0; i<2; i++) {\n        total += roundRobin.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n      }\n      assertEquals(57, total);\n      PoolStats stats = pool.getTotalStats();\n      //System.out.println(\"\\n\"+stats);\n      assertEquals(\"expected number of connections shouldn't exceed number of endpoints\" + stats, \n          2, stats.getAvailable());\n    }finally {\n      threads.shutdown();\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testLBClient().mjava","pathOld":"/dev/null","sourceNew":"  public void testLBClient() throws IOException, SolrServerException {\n    \n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    int threadCount = atLeast(2);\n    final ExecutorService threads = ExecutorUtil.newMDCAwareFixedThreadPool(threadCount,\n        new SolrjNamedThreadFactory(getClass().getSimpleName()+\"TestScheduler\"));\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool);\n    try{\n      final LBHttpSolrClient roundRobin = new LBHttpSolrClient.Builder().\n                withBaseSolrUrl(fooUrl).\n                withBaseSolrUrl(barUrl).\n                withHttpClient(httpClient)\n                .build();\n      \n      List<ConcurrentUpdateSolrClient> concurrentClients = Arrays.asList(\n          new ConcurrentUpdateSolrClient.Builder(fooUrl)\n          .withHttpClient(httpClient).withThreadCount(threadCount)\n          .withQueueSize(10)\n         .withExecutorService(threads).build(),\n           new ConcurrentUpdateSolrClient.Builder(barUrl)\n          .withHttpClient(httpClient).withThreadCount(threadCount)\n          .withQueueSize(10)\n         .withExecutorService(threads).build()); \n      \n      for (int i=0; i<2; i++) {\n        roundRobin.deleteByQuery(\"*:*\");\n      }\n      \n      for (int i=0; i<57; i++) {\n        final SolrInputDocument doc = new SolrInputDocument(\"id\", \"\"+i);\n        if (random().nextBoolean()) {\n          final ConcurrentUpdateSolrClient concurrentClient = concurrentClients.get(random().nextInt(concurrentClients.size()));\n          concurrentClient.add(doc); // here we are testing that CUSC and plain clients reuse pool \n          concurrentClient.blockUntilFinished();\n        } else {\n          if (random().nextBoolean()) {\n            roundRobin.add(doc);\n          } else {\n            final UpdateRequest updateRequest = new UpdateRequest();\n            updateRequest.add(doc); // here we mimic CloudSolrClient impl\n            final List<String> urls = Arrays.asList(fooUrl, barUrl);\n            Collections.shuffle(urls, random());\n            LBHttpSolrClient.Req req = new LBHttpSolrClient.Req(updateRequest, \n                    urls);\n             roundRobin.request(req);\n          }\n        }\n      }\n      \n      for (int i=0; i<2; i++) {\n        roundRobin.commit();\n      }\n      int total=0;\n      for (int i=0; i<2; i++) {\n        total += roundRobin.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n      }\n      assertEquals(57, total);\n      PoolStats stats = pool.getTotalStats();\n      //System.out.println(\"\\n\"+stats);\n      assertEquals(\"expected number of connections shouldn't exceed number of endpoints\" + stats, \n          2, stats.getAvailable());\n    }finally {\n      threads.shutdown();\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testLBClient().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/HttpSolrClientConPoolTest#testLBClient().mjava","sourceNew":"  public void testLBClient() throws IOException, SolrServerException {\n    \n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    int threadCount = atLeast(2);\n    final ExecutorService threads = ExecutorUtil.newMDCAwareFixedThreadPool(threadCount,\n        new SolrNamedThreadFactory(getClass().getSimpleName()+\"TestScheduler\"));\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool);\n    try{\n      final LBHttpSolrClient roundRobin = new LBHttpSolrClient.Builder().\n                withBaseSolrUrl(fooUrl).\n                withBaseSolrUrl(barUrl).\n                withHttpClient(httpClient)\n                .build();\n      \n      List<ConcurrentUpdateSolrClient> concurrentClients = Arrays.asList(\n          new ConcurrentUpdateSolrClient.Builder(fooUrl)\n          .withHttpClient(httpClient).withThreadCount(threadCount)\n          .withQueueSize(10)\n         .withExecutorService(threads).build(),\n           new ConcurrentUpdateSolrClient.Builder(barUrl)\n          .withHttpClient(httpClient).withThreadCount(threadCount)\n          .withQueueSize(10)\n         .withExecutorService(threads).build()); \n      \n      for (int i=0; i<2; i++) {\n        roundRobin.deleteByQuery(\"*:*\");\n      }\n      \n      for (int i=0; i<57; i++) {\n        final SolrInputDocument doc = new SolrInputDocument(\"id\", \"\"+i);\n        if (random().nextBoolean()) {\n          final ConcurrentUpdateSolrClient concurrentClient = concurrentClients.get(random().nextInt(concurrentClients.size()));\n          concurrentClient.add(doc); // here we are testing that CUSC and plain clients reuse pool \n          concurrentClient.blockUntilFinished();\n        } else {\n          if (random().nextBoolean()) {\n            roundRobin.add(doc);\n          } else {\n            final UpdateRequest updateRequest = new UpdateRequest();\n            updateRequest.add(doc); // here we mimic CloudSolrClient impl\n            final List<String> urls = Arrays.asList(fooUrl, barUrl);\n            Collections.shuffle(urls, random());\n            LBHttpSolrClient.Req req = new LBHttpSolrClient.Req(updateRequest, \n                    urls);\n             roundRobin.request(req);\n          }\n        }\n      }\n      \n      for (int i=0; i<2; i++) {\n        roundRobin.commit();\n      }\n      int total=0;\n      for (int i=0; i<2; i++) {\n        total += roundRobin.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n      }\n      assertEquals(57, total);\n      PoolStats stats = pool.getTotalStats();\n      //System.out.println(\"\\n\"+stats);\n      assertEquals(\"expected number of connections shouldn't exceed number of endpoints\" + stats, \n          2, stats.getAvailable());\n    }finally {\n      threads.shutdown();\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","sourceOld":"  public void testLBClient() throws IOException, SolrServerException {\n    \n    PoolingHttpClientConnectionManager pool = HttpClientUtil.createPoolingConnectionManager();\n    final HttpSolrClient client1 ;\n    int threadCount = atLeast(2);\n    final ExecutorService threads = ExecutorUtil.newMDCAwareFixedThreadPool(threadCount,\n        new SolrjNamedThreadFactory(getClass().getSimpleName()+\"TestScheduler\"));\n    CloseableHttpClient httpClient = HttpClientUtil.createClient(new ModifiableSolrParams(), pool);\n    try{\n      final LBHttpSolrClient roundRobin = new LBHttpSolrClient.Builder().\n                withBaseSolrUrl(fooUrl).\n                withBaseSolrUrl(barUrl).\n                withHttpClient(httpClient)\n                .build();\n      \n      List<ConcurrentUpdateSolrClient> concurrentClients = Arrays.asList(\n          new ConcurrentUpdateSolrClient.Builder(fooUrl)\n          .withHttpClient(httpClient).withThreadCount(threadCount)\n          .withQueueSize(10)\n         .withExecutorService(threads).build(),\n           new ConcurrentUpdateSolrClient.Builder(barUrl)\n          .withHttpClient(httpClient).withThreadCount(threadCount)\n          .withQueueSize(10)\n         .withExecutorService(threads).build()); \n      \n      for (int i=0; i<2; i++) {\n        roundRobin.deleteByQuery(\"*:*\");\n      }\n      \n      for (int i=0; i<57; i++) {\n        final SolrInputDocument doc = new SolrInputDocument(\"id\", \"\"+i);\n        if (random().nextBoolean()) {\n          final ConcurrentUpdateSolrClient concurrentClient = concurrentClients.get(random().nextInt(concurrentClients.size()));\n          concurrentClient.add(doc); // here we are testing that CUSC and plain clients reuse pool \n          concurrentClient.blockUntilFinished();\n        } else {\n          if (random().nextBoolean()) {\n            roundRobin.add(doc);\n          } else {\n            final UpdateRequest updateRequest = new UpdateRequest();\n            updateRequest.add(doc); // here we mimic CloudSolrClient impl\n            final List<String> urls = Arrays.asList(fooUrl, barUrl);\n            Collections.shuffle(urls, random());\n            LBHttpSolrClient.Req req = new LBHttpSolrClient.Req(updateRequest, \n                    urls);\n             roundRobin.request(req);\n          }\n        }\n      }\n      \n      for (int i=0; i<2; i++) {\n        roundRobin.commit();\n      }\n      int total=0;\n      for (int i=0; i<2; i++) {\n        total += roundRobin.query(new SolrQuery(\"*:*\")).getResults().getNumFound();\n      }\n      assertEquals(57, total);\n      PoolStats stats = pool.getTotalStats();\n      //System.out.println(\"\\n\"+stats);\n      assertEquals(\"expected number of connections shouldn't exceed number of endpoints\" + stats, \n          2, stats.getAvailable());\n    }finally {\n      threads.shutdown();\n      HttpClientUtil.close(httpClient);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15fb22f207e0cbf913dbc9857b6a4fe30390a625"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15fb22f207e0cbf913dbc9857b6a4fe30390a625","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15fb22f207e0cbf913dbc9857b6a4fe30390a625":["fb03700c9690d16b15fb4f56f6ec36b128fd894e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}