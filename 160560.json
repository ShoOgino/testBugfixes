{"path":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6f5294d2268ddd0b29523c7d7cbf960825baa19","date":1426448430,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","date":1451604685,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='46']\"\n        ,\"//result/doc[2]/str[@name='id'][.='43']\");\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='46']\"\n        ,\"//result/doc[2]/str[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='43']\"\n        ,\"//result/doc[2]/str[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","bugFix":null,"bugIntro":["0c49644277f679076861896c254bd95b97909b74"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='46']\"\n        ,\"//result/doc[2]/str[@name='id'][.='43']\");\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='46']\"\n        ,\"//result/doc[2]/str[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='43']\"\n        ,\"//result/doc[2]/str[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='46']\"\n        ,\"//result/doc[2]/str[@name='id'][.='43']\");\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='46']\"\n        ,\"//result/doc[2]/str[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='43']\"\n        ,\"//result/doc[2]/str[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='46']\"\n        ,\"//result/doc[2]/int[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='43']\"\n        ,\"//result/doc[2]/int[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/int[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0c49644277f679076861896c254bd95b97909b74","date":1527241182,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    // requires 'q' or a single content stream\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      try (SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {}) {\n        mlt.handleRequestBody(req, new SolrQueryResponse());\n      }\n    });\n    assertEquals(ex.getMessage(), MoreLikeThisHandler.ERR_MSG_QUERY_OR_TEXT_REQUIRED);\n    assertEquals(ex.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    // requires a single content stream (more than one is not supported).\n    ex = expectThrows(SolrException.class, () -> {\n      try (SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {}) {\n        ArrayList<ContentStream> streams = new ArrayList<>(2);\n        streams.add(new ContentStreamBase.StringStream(\"hello\"));\n        streams.add(new ContentStreamBase.StringStream(\"there\"));\n        req.setContentStreams(streams);\n        mlt.handleRequestBody(req, new SolrQueryResponse());\n      }\n    });\n    assertEquals(ex.getMessage(), MoreLikeThisHandler.ERR_MSG_SINGLE_STREAM_ONLY);\n    assertEquals(ex.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    params.set(CommonParams.Q, \"id:42\");\n\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelikethis - tom cruise\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='46']\",\n          \"//result/doc[2]/str[@name='id'][.='43']\");\n    }\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelikethis - tom cruise\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='46']\",\n          \"//result/doc[2]/str[@name='id'][.='43']\");\n    }\n    \n    params.set(CommonParams.Q, \"id:44\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelike this - harrison ford\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='45']\");\n    }\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelike this - harrison ford\", mltreq,\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\",\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\",\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\",\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n      );\n    }\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(mltreq, \"//result/doc[1]/str[@name='id'][.='45']\");\n    }\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelikethis with weights\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='43']\",\n          \"//result/doc[2]/str[@name='id'][.='46']\");\n    }\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(mltreq, \"//result/doc[1]/str[@name='id'][.='45']\");\n    }\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(mltreq,\n          \"//result/doc[1]/str[@name='id'][.='45']\",\n          \"//lst[@name='debug']/lst[@name='explain']\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    SolrQueryRequestBase req = new SolrQueryRequestBase( core, params) {};\n    \n    // requires 'q' or single content stream\n    try {\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n\n    // requires 'q' or single content stream\n    try {\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"hello\" ) );\n      streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n      req.setContentStreams( streams );\n      mlt.handleRequestBody( req, new SolrQueryResponse() );\n    }\n    catch( Exception ex ) {} // expected\n    finally {\n      req.close();\n    }\n    \n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='46']\"\n        ,\"//result/doc[2]/str[@name='id'][.='43']\");\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest( core, params);\n    assertQ(\"morelikethis - tom cruise\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='46']\"\n        ,\"//result/doc[2]/str[@name='id'][.='43']\");\n    \n    params.set(CommonParams.Q, \"id:44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelike this - harrison ford\",mltreq\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\"\n        ,\"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n        );\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(\"morelikethis with weights\",mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='43']\"\n        ,\"//result/doc[2]/str[@name='id'][.='46']\");\n\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\");\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    mltreq.close(); mltreq = new LocalSolrQueryRequest(h.getCore(), params);\n    assertQ(mltreq\n        ,\"//result/doc[1]/str[@name='id'][.='45']\"\n        ,\"//lst[@name='debug']/lst[@name='explain']\"\n    );\n\n    // params.put(MoreLikeThisParams.QF,new String[]{\"foo_ti\"});\n    // String response = h.query(mltreq);\n    // System.out.println(response);\n\n    mltreq.close();\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c67319af8a636ba1fd231243ec06e16f94a868a5","12925d9335ba6189c7f25c39780e9da11bccd551","8d701c455e4783533e275f01bf3e813737b7e593","fa96fdb58cefcada21fc51faf37114033f044f3f","dd36d5d7353f6cf7c2cccbd79385b298db7bc906","a71f63026529f3c1f03cfdd664910873ab2369ae","b6f5294d2268ddd0b29523c7d7cbf960825baa19","19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","be4da9fa3a0ba5b4246b7587ae016cf1f57bf865"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/MoreLikeThisHandlerTest#testInterface().mjava","sourceNew":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    // requires 'q' or a single content stream\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      try (MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n           SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {}) {\n        mlt.handleRequestBody(req, new SolrQueryResponse());\n      }\n    });\n    assertEquals(ex.getMessage(), MoreLikeThisHandler.ERR_MSG_QUERY_OR_TEXT_REQUIRED);\n    assertEquals(ex.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    // requires a single content stream (more than one is not supported).\n    ex = expectThrows(SolrException.class, () -> {\n      try (MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n           SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {}) {\n        ArrayList<ContentStream> streams = new ArrayList<>(2);\n        streams.add(new ContentStreamBase.StringStream(\"hello\"));\n        streams.add(new ContentStreamBase.StringStream(\"there\"));\n        req.setContentStreams(streams);\n        mlt.handleRequestBody(req, new SolrQueryResponse());\n      }\n    });\n    assertEquals(ex.getMessage(), MoreLikeThisHandler.ERR_MSG_SINGLE_STREAM_ONLY);\n    assertEquals(ex.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    params.set(CommonParams.Q, \"id:42\");\n\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelikethis - tom cruise\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='46']\",\n          \"//result/doc[2]/str[@name='id'][.='43']\");\n    }\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelikethis - tom cruise\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='46']\",\n          \"//result/doc[2]/str[@name='id'][.='43']\");\n    }\n    \n    params.set(CommonParams.Q, \"id:44\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelike this - harrison ford\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='45']\");\n    }\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelike this - harrison ford\", mltreq,\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\",\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\",\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\",\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n      );\n    }\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(mltreq, \"//result/doc[1]/str[@name='id'][.='45']\");\n    }\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelikethis with weights\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='43']\",\n          \"//result/doc[2]/str[@name='id'][.='46']\");\n    }\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(mltreq, \"//result/doc[1]/str[@name='id'][.='45']\");\n    }\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(mltreq,\n          \"//result/doc[1]/str[@name='id'][.='45']\",\n          \"//lst[@name='debug']/lst[@name='explain']\"\n      );\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInterface() throws Exception\n  {\n    SolrCore core = h.getCore();\n    MoreLikeThisHandler mlt = new MoreLikeThisHandler();\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    assertU(adoc(\"id\",\"42\",\"name\",\"Tom Cruise\",\"subword\",\"Top Gun\",\"subword\",\"Risky Business\",\"subword\",\"The Color of Money\",\"subword\",\"Minority Report\",\"subword\", \"Days of Thunder\",\"subword\", \"Eyes Wide Shut\",\"subword\", \"Far and Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"43\",\"name\",\"Tom Hanks\",\"subword\",\"The Green Mile\",\"subword\",\"Forest Gump\",\"subword\",\"Philadelphia Story\",\"subword\",\"Big\",\"subword\",\"Cast Away\", \"foo_ti\",\"10\"));\n    assertU(adoc(\"id\",\"44\",\"name\",\"Harrison Ford\",\"subword\",\"Star Wars\",\"subword\",\"Indiana Jones\",\"subword\",\"Patriot Games\",\"subword\",\"Regarding Henry\"));\n    assertU(adoc(\"id\",\"45\",\"name\",\"George Harrison\",\"subword\",\"Yellow Submarine\",\"subword\",\"Help\",\"subword\",\"Magical Mystery Tour\",\"subword\",\"Sgt. Peppers Lonley Hearts Club Band\"));\n    assertU(adoc(\"id\",\"46\",\"name\",\"Nicole Kidman\",\"subword\",\"Batman\",\"subword\",\"Days of Thunder\",\"subword\",\"Eyes Wide Shut\",\"subword\",\"Far and Away\"));\n    assertU(commit());\n\n    params.set(MoreLikeThisParams.MLT, \"true\");\n    params.set(MoreLikeThisParams.SIMILARITY_FIELDS, \"name,subword\");\n    params.set(MoreLikeThisParams.INTERESTING_TERMS, \"details\");\n    params.set(MoreLikeThisParams.MIN_TERM_FREQ,\"1\");\n    params.set(MoreLikeThisParams.MIN_DOC_FREQ,\"1\");\n    params.set(\"indent\",\"true\");\n\n    // requires 'q' or a single content stream\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      try (SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {}) {\n        mlt.handleRequestBody(req, new SolrQueryResponse());\n      }\n    });\n    assertEquals(ex.getMessage(), MoreLikeThisHandler.ERR_MSG_QUERY_OR_TEXT_REQUIRED);\n    assertEquals(ex.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    // requires a single content stream (more than one is not supported).\n    ex = expectThrows(SolrException.class, () -> {\n      try (SolrQueryRequestBase req = new SolrQueryRequestBase(core, params) {}) {\n        ArrayList<ContentStream> streams = new ArrayList<>(2);\n        streams.add(new ContentStreamBase.StringStream(\"hello\"));\n        streams.add(new ContentStreamBase.StringStream(\"there\"));\n        req.setContentStreams(streams);\n        mlt.handleRequestBody(req, new SolrQueryResponse());\n      }\n    });\n    assertEquals(ex.getMessage(), MoreLikeThisHandler.ERR_MSG_SINGLE_STREAM_ONLY);\n    assertEquals(ex.code(), SolrException.ErrorCode.BAD_REQUEST.code);\n\n    params.set(CommonParams.Q, \"id:42\");\n\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelikethis - tom cruise\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='46']\",\n          \"//result/doc[2]/str[@name='id'][.='43']\");\n    }\n\n    params.set(MoreLikeThisParams.BOOST, \"true\");\n\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelikethis - tom cruise\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='46']\",\n          \"//result/doc[2]/str[@name='id'][.='43']\");\n    }\n    \n    params.set(CommonParams.Q, \"id:44\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelike this - harrison ford\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='45']\");\n    }\n\n    // test MoreLikeThis debug\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelike this - harrison ford\", mltreq,\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='rawMLTQuery']\",\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='boostedMLTQuery']\",\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/str[@name='realMLTQuery']\",\n          \"//lst[@name='debug']/lst[@name='moreLikeThis']/lst[@name='44']/lst[@name='explain']/str[@name='45']\"\n      );\n    }\n\n    // test that qparser plugins work\n    params.remove(CommonParams.DEBUG_QUERY);\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(mltreq, \"//result/doc[1]/str[@name='id'][.='45']\");\n    }\n\n    params.set(CommonParams.Q, \"id:42\");\n    params.set(MoreLikeThisParams.QF,\"name^5.0 subword^0.1\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(\"morelikethis with weights\", mltreq,\n          \"//result/doc[1]/str[@name='id'][.='43']\",\n          \"//result/doc[2]/str[@name='id'][.='46']\");\n    }\n\n    // test that qparser plugins work w/ the MoreLikeThisHandler\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.Q, \"{!field f=id}44\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(mltreq, \"//result/doc[1]/str[@name='id'][.='45']\");\n    }\n\n    // test that debugging works (test for MoreLikeThis*Handler*)\n    params.set(CommonParams.QT, \"/mlt\");\n    params.set(CommonParams.DEBUG_QUERY, \"true\");\n    try (SolrQueryRequest mltreq = new LocalSolrQueryRequest( core, params)) {\n      assertQ(mltreq,\n          \"//result/doc[1]/str[@name='id'][.='45']\",\n          \"//lst[@name='debug']/lst[@name='explain']\"\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6f5294d2268ddd0b29523c7d7cbf960825baa19":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1"],"28288370235ed02234a64753cdbf0c6ec096304a":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b6f5294d2268ddd0b29523c7d7cbf960825baa19"],"ba055e19afc289adcb5bedaf68513793a7254012":["0c49644277f679076861896c254bd95b97909b74"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1":["b6f5294d2268ddd0b29523c7d7cbf960825baa19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c49644277f679076861896c254bd95b97909b74":["28288370235ed02234a64753cdbf0c6ec096304a"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"b6f5294d2268ddd0b29523c7d7cbf960825baa19":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b6f5294d2268ddd0b29523c7d7cbf960825baa19","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["0c49644277f679076861896c254bd95b97909b74"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19cb756f0ad73c8d898cb8bfdd9f04bcc6e3b7c1":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"0c49644277f679076861896c254bd95b97909b74":["ba055e19afc289adcb5bedaf68513793a7254012"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}