{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    switch (entry.format) {\n      case CONST_COMPRESSED: {\n        final long constant = entry.minValue;\n        final Bits live = getLiveBits(entry.missingOffset, (int)entry.count);\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return live.get((int)index) ? constant : 0;\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      }\n      case GCD_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      }\n      case SPARSE_COMPRESSED:\n        final SparseNumericDocValues values = getSparseNumericDocValues(entry);\n        final long missingValue;\n        switch (entry.numberType) {\n          case ORDINAL:\n            missingValue = -1L;\n            break;\n          case VALUE:\n            missingValue = 0L;\n            break;\n          default:\n            throw new AssertionError();\n        }\n        return new SparseNumericDocValuesRandomAccessWrapper(values, missingValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    switch (entry.format) {\n      case CONST_COMPRESSED: {\n        final long constant = entry.minValue;\n        final Bits live = getLiveBits(entry.missingOffset, (int)entry.count);\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return live.get((int)index) ? constant : 0;\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      }\n      case GCD_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      }\n      case SPARSE_COMPRESSED:\n        final SparseNumericDocValues values = getSparseNumericDocValues(entry);\n        final long missingValue;\n        switch (entry.numberType) {\n          case ORDINAL:\n            missingValue = -1L;\n            break;\n          case VALUE:\n            missingValue = 0L;\n            break;\n          default:\n            throw new AssertionError();\n        }\n        return new SparseNumericDocValuesRandomAccessWrapper(values, missingValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      final LongValues normValues = getNumericValues(entry);\n      return new NumericDocValues() {\n\n        int doc = -1;\n\n        @Override\n        public long longValue() throws IOException {\n          return normValues.get(doc);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n      };\n    } else {\n      // sparse\n      final LongValues values = getNumericValues(entry);\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      return new NumericDocValues() {\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public long longValue() throws IOException {\n          return values.get(disi.index());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  LongValues getNumeric(NumericEntry entry) throws IOException {\n    switch (entry.format) {\n      case CONST_COMPRESSED: {\n        final long constant = entry.minValue;\n        final Bits live = getLiveBits(entry.missingOffset, (int)entry.count);\n        return new LongValues() {\n          @Override\n          public long get(long index) {\n            return live.get((int)index) ? constant : 0;\n          }\n        };\n      }\n      case DELTA_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long delta = entry.minValue;\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return delta + values.get(id);\n          }\n        };\n      }\n      case GCD_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long min = entry.minValue;\n        final long mult = entry.gcd;\n        final LongValues quotientReader = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return min + mult * quotientReader.get(id);\n          }\n        };\n      }\n      case TABLE_COMPRESSED: {\n        RandomAccessInput slice = this.data.randomAccessSlice(entry.offset, entry.endOffset - entry.offset);\n        final long table[] = entry.table;\n        final LongValues ords = DirectReader.getInstance(slice, entry.bitsPerValue, 0);\n        return new LongValues() {\n          @Override\n          public long get(long id) {\n            return table[(int) ords.get(id)];\n          }\n        };\n      }\n      case SPARSE_COMPRESSED:\n        final SparseNumericDocValues values = getSparseNumericDocValues(entry);\n        final long missingValue;\n        switch (entry.numberType) {\n          case ORDINAL:\n            missingValue = -1L;\n            break;\n          case VALUE:\n            missingValue = 0L;\n            break;\n          default:\n            throw new AssertionError();\n        }\n        return new SparseNumericDocValuesRandomAccessWrapper(values, missingValue);\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      final LongValues normValues = getNumericValues(entry);\n      return new NumericDocValues() {\n\n        int doc = -1;\n\n        @Override\n        public long longValue() throws IOException {\n          return normValues.get(doc);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n      };\n    } else {\n      // sparse\n      final LongValues values = getNumericValues(entry);\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      return new NumericDocValues() {\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public long longValue() throws IOException {\n          return values.get(disi.index());\n        }\n      };\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      final LongValues normValues = getNumericValues(entry);\n      return new NumericDocValues() {\n\n        int doc = -1;\n\n        @Override\n        public long longValue() throws IOException {\n          return normValues.get(doc);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) {\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n      };\n    } else {\n      // sparse\n      final LongValues values = getNumericValues(entry);\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      return new NumericDocValues() {\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public long longValue() throws IOException {\n          return values.get(disi.index());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      final LongValues normValues = getNumericValues(entry);\n      return new NumericDocValues() {\n\n        int doc = -1;\n\n        @Override\n        public long longValue() throws IOException {\n          return normValues.get(doc);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n      };\n    } else {\n      // sparse\n      final LongValues values = getNumericValues(entry);\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      return new NumericDocValues() {\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public long longValue() throws IOException {\n          return values.get(disi.index());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      final LongValues normValues = getNumericValues(entry);\n      return new NumericDocValues() {\n\n        int doc = -1;\n\n        @Override\n        public long longValue() throws IOException {\n          return normValues.get(doc);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) {\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n      };\n    } else {\n      // sparse\n      final LongValues values = getNumericValues(entry);\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      return new NumericDocValues() {\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public long longValue() throws IOException {\n          return values.get(disi.index());\n        }\n      };\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      final LongValues normValues = getNumericValues(entry);\n      return new NumericDocValues() {\n\n        int doc = -1;\n\n        @Override\n        public long longValue() throws IOException {\n          return normValues.get(doc);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n      };\n    } else {\n      // sparse\n      final LongValues values = getNumericValues(entry);\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      return new NumericDocValues() {\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public long longValue() throws IOException {\n          return values.get(disi.index());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f41255666b78a4e257ec4e0eb099e332f06a4a0c","date":1477483663,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new DenseNumericDocValues(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return table[(int) values.get(doc)];\n            }\n          };\n        } else {\n          final long mul = entry.gcd;\n          final long delta = entry.minValue;\n          return new DenseNumericDocValues(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return mul * values.get(doc) + delta;\n            }\n          };\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new SparseNumericDocValues(disi) {\n            @Override\n            public long longValue() throws IOException {\n              return table[(int) values.get(disi.index())];\n            }\n          };\n        } else {\n          final long mul = entry.gcd;\n          final long delta = entry.minValue;\n          return new SparseNumericDocValues(disi) {\n            @Override\n            public long longValue() throws IOException {\n              return mul * values.get(disi.index()) + delta;\n            }\n          };\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      final LongValues normValues = getNumericValues(entry);\n      return new NumericDocValues() {\n\n        int doc = -1;\n\n        @Override\n        public long longValue() throws IOException {\n          return normValues.get(doc);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public boolean advanceExact(int target) {\n          doc = target;\n          return true;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n      };\n    } else {\n      // sparse\n      final LongValues values = getNumericValues(entry);\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      return new NumericDocValues() {\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return disi.advanceExact(target);\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public long longValue() throws IOException {\n          return values.get(disi.index());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new DenseNumericDocValues(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return table[(int) values.get(doc)];\n            }\n          };\n        } else {\n          final long mul = entry.gcd;\n          final long delta = entry.minValue;\n          return new DenseNumericDocValues(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return mul * values.get(doc) + delta;\n            }\n          };\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new SparseNumericDocValues(disi) {\n            @Override\n            public long longValue() throws IOException {\n              return table[(int) values.get(disi.index())];\n            }\n          };\n        } else {\n          final long mul = entry.gcd;\n          final long delta = entry.minValue;\n          return new SparseNumericDocValues(disi) {\n            @Override\n            public long longValue() throws IOException {\n              return mul * values.get(disi.index()) + delta;\n            }\n          };\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      final LongValues normValues = getNumericValues(entry);\n      return new NumericDocValues() {\n\n        int doc = -1;\n\n        @Override\n        public long longValue() throws IOException {\n          return normValues.get(doc);\n        }\n\n        @Override\n        public int docID() {\n          return doc;\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return advance(doc + 1);\n        }\n\n        @Override\n        public int advance(int target) throws IOException {\n          if (target >= maxDoc) {\n            return doc = NO_MORE_DOCS;\n          }\n          return doc = target;\n        }\n\n        @Override\n        public long cost() {\n          return maxDoc;\n        }\n\n      };\n    } else {\n      // sparse\n      final LongValues values = getNumericValues(entry);\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      return new NumericDocValues() {\n\n        @Override\n        public int advance(int target) throws IOException {\n          return disi.advance(target);\n        }\n\n        @Override\n        public int nextDoc() throws IOException {\n          return disi.nextDoc();\n        }\n\n        @Override\n        public int docID() {\n          return disi.docID();\n        }\n\n        @Override\n        public long cost() {\n          return disi.cost();\n        }\n\n        @Override\n        public long longValue() throws IOException {\n          return values.get(disi.index());\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740ee098a9980924f1de3e712c61e1bdd3869b9c","date":1481818674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new DenseNumericDocValues(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return table[(int) values.get(doc)];\n            }\n          };\n        } else {\n          final long mul = entry.gcd;\n          final long delta = entry.minValue;\n          return new DenseNumericDocValues(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return mul * values.get(doc) + delta;\n            }\n          };\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new SparseNumericDocValues(disi) {\n            @Override\n            public long longValue() throws IOException {\n              return table[(int) values.get(disi.index())];\n            }\n          };\n        } else {\n          final long mul = entry.gcd;\n          final long delta = entry.minValue;\n          return new SparseNumericDocValues(disi) {\n            @Override\n            public long longValue() throws IOException {\n              return mul * values.get(disi.index()) + delta;\n            }\n          };\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new DenseNumericDocValues(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return table[(int) values.get(doc)];\n            }\n          };\n        } else {\n          final long mul = entry.gcd;\n          final long delta = entry.minValue;\n          return new DenseNumericDocValues(maxDoc) {\n            @Override\n            public long longValue() throws IOException {\n              return mul * values.get(doc) + delta;\n            }\n          };\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n        if (entry.table != null) {\n          final long[] table = entry.table;\n          return new SparseNumericDocValues(disi) {\n            @Override\n            public long longValue() throws IOException {\n              return table[(int) values.get(disi.index())];\n            }\n          };\n        } else {\n          final long mul = entry.gcd;\n          final long delta = entry.minValue;\n          return new SparseNumericDocValues(disi) {\n            @Override\n            public long longValue() throws IOException {\n              return mul * values.get(disi.index()) + delta;\n            }\n          };\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb9d1512598fc72005b830d5e2b88e61a0f4b374","date":1543843391,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues, entry.name);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02d47321ea7c7780a0e0cb7a3676d109d9d62542","date":1543843794,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          return new DenseNumericDocValues(maxDoc) {\n            final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry);\n\n            @Override\n            public long longValue() throws IOException {\n              return vBPVReader.getLongValue(doc);\n            }\n          };\n        } else {\n          final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues, entry.name);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          return new SparseNumericDocValues(disi) {\n            final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry);\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              return vBPVReader.getLongValue(index);\n            }\n          };\n        } else {\n          final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues, entry.name);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e86b9927b3acb1937be9daf7b71fe0733edc2206","date":1544534047,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues, entry.name);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          return new DenseNumericDocValues(maxDoc) {\n            final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry);\n\n            @Override\n            public long longValue() throws IOException {\n              return vBPVReader.getLongValue(doc);\n            }\n          };\n        } else {\n          final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues, entry.name);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          return new SparseNumericDocValues(disi) {\n            final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry);\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              return vBPVReader.getLongValue(index);\n            }\n          };\n        } else {\n          final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e","date":1544534277,"type":3,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues, entry.name);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd70c9571310639a77f0123aea0db41077d9bb6","date":1544538617,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          return new DenseNumericDocValues(maxDoc) {\n            final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry);\n\n            @Override\n            public long longValue() throws IOException {\n              return vBPVReader.getLongValue(doc);\n            }\n          };\n        } else {\n          final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = disiCacheFactory.createCachedIndexedDISI(\n          data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues, entry.name);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          return new SparseNumericDocValues(disi) {\n            final VaryingBPVReader vBPVReader = new VaryingBPVReader(entry);\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              return vBPVReader.getLongValue(index);\n            }\n          };\n        } else {\n          final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":5,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":5,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(NumericEntry).mjava","sourceNew":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private NumericDocValues getNumeric(NumericEntry entry) throws IOException {\n    if (entry.docsWithFieldOffset == -2) {\n      // empty\n      return DocValues.emptyNumeric();\n    } else if (entry.docsWithFieldOffset == -1) {\n      // dense\n      if (entry.bitsPerValue == 0) {\n        return new DenseNumericDocValues(maxDoc) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // dense but split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new DenseNumericDocValues(maxDoc) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int block = doc >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(doc & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(doc)];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new DenseNumericDocValues(maxDoc) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(doc) + delta;\n              }\n            };\n          }\n        }\n      }\n    } else {\n      // sparse\n      final IndexedDISI disi = new IndexedDISI(data, entry.docsWithFieldOffset, entry.docsWithFieldLength, entry.numValues);\n      if (entry.bitsPerValue == 0) {\n        return new SparseNumericDocValues(disi) {\n          @Override\n          public long longValue() throws IOException {\n            return entry.minValue;\n          }\n        };\n      } else {\n        final RandomAccessInput slice = data.randomAccessSlice(entry.valuesOffset, entry.valuesLength);\n        if (entry.blockShift >= 0) {\n          // sparse and split into blocks of different bits per value\n          final int shift = entry.blockShift;\n          final long mul = entry.gcd;\n          final int mask = (1 << shift) - 1;\n          return new SparseNumericDocValues(disi) {\n            int block = -1;\n            long delta;\n            long offset;\n            long blockEndOffset;\n            LongValues values;\n\n            @Override\n            public long longValue() throws IOException {\n              final int index = disi.index();\n              final int block = index >>> shift;\n              if (this.block != block) {\n                int bitsPerValue;\n                do {\n                  offset = blockEndOffset;\n                  bitsPerValue = slice.readByte(offset++);\n                  delta = slice.readLong(offset);\n                  offset += Long.BYTES;\n                  if (bitsPerValue == 0) {\n                    blockEndOffset = offset;\n                  } else {\n                    final int length = slice.readInt(offset);\n                    offset += Integer.BYTES;\n                    blockEndOffset = offset + length;\n                  }\n                  this.block ++;\n                } while (this.block != block);\n                values = bitsPerValue == 0 ? LongValues.ZEROES : DirectReader.getInstance(slice, bitsPerValue, offset);\n              }\n              return mul * values.get(index & mask) + delta;\n            }\n          };\n        } else {\n          final LongValues values = DirectReader.getInstance(slice, entry.bitsPerValue);\n          if (entry.table != null) {\n            final long[] table = entry.table;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return table[(int) values.get(disi.index())];\n              }\n            };\n          } else {\n            final long mul = entry.gcd;\n            final long delta = entry.minValue;\n            return new SparseNumericDocValues(disi) {\n              @Override\n              public long longValue() throws IOException {\n                return mul * values.get(disi.index()) + delta;\n              }\n            };\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["02d47321ea7c7780a0e0cb7a3676d109d9d62542","5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["740ee098a9980924f1de3e712c61e1bdd3869b9c"],"f41255666b78a4e257ec4e0eb099e332f06a4a0c":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["e86b9927b3acb1937be9daf7b71fe0733edc2206"],"740ee098a9980924f1de3e712c61e1bdd3869b9c":["f41255666b78a4e257ec4e0eb099e332f06a4a0c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["cfd70c9571310639a77f0123aea0db41077d9bb6","03e17b020972a0d6e8d6823f545571a66646a167"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["fb9d1512598fc72005b830d5e2b88e61a0f4b374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f41255666b78a4e257ec4e0eb099e332f06a4a0c"],"9856095f7afb5a607bf5e65077615ed91273508c":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","740ee098a9980924f1de3e712c61e1bdd3869b9c"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["23e44daeaa8b89694d10df5999956c8e14a7dd09","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["03e17b020972a0d6e8d6823f545571a66646a167"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"23e44daeaa8b89694d10df5999956c8e14a7dd09":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"cfd70c9571310639a77f0123aea0db41077d9bb6":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"fb9d1512598fc72005b830d5e2b88e61a0f4b374":["02d47321ea7c7780a0e0cb7a3676d109d9d62542"],"f41255666b78a4e257ec4e0eb099e332f06a4a0c":["740ee098a9980924f1de3e712c61e1bdd3869b9c","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"5c74cb19c6e988ccfef4286a1f3f0e5930f0863e":["cfd70c9571310639a77f0123aea0db41077d9bb6"],"740ee098a9980924f1de3e712c61e1bdd3869b9c":["fb9d1512598fc72005b830d5e2b88e61a0f4b374","9856095f7afb5a607bf5e65077615ed91273508c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"e86b9927b3acb1937be9daf7b71fe0733edc2206":["5c74cb19c6e988ccfef4286a1f3f0e5930f0863e"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","084884d4602f4d1c7411eab29e897e349ce62675"],"02d47321ea7c7780a0e0cb7a3676d109d9d62542":["cfd70c9571310639a77f0123aea0db41077d9bb6","e86b9927b3acb1937be9daf7b71fe0733edc2206"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["f41255666b78a4e257ec4e0eb099e332f06a4a0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}