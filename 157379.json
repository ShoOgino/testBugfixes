{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory(random);\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory(random);\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = new MockRAMDirectory();\n\n    TestIndexReaderReopen.createIndex(dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterFullMerge().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderClone#testReadOnlyCloneAfterOptimize().mjava","sourceNew":"  // open non-readOnly reader1 on multi-segment index, then\n  // fully merge the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterFullMerge() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.forceMerge(1);\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","sourceOld":"  // open non-readOnly reader1 on multi-segment index, then\n  // optimize the index, then clone to readOnly reader2\n  public void testReadOnlyCloneAfterOptimize() throws Exception {\n    final Directory dir1 = newDirectory();\n\n    TestIndexReaderReopen.createIndex(random, dir1, true);\n    IndexReader reader1 = IndexReader.open(dir1, false);\n    IndexWriter w = new IndexWriter(dir1, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.optimize();\n    w.close();\n    IndexReader reader2 = reader1.clone(true);\n    assertTrue(isReadOnly(reader2));\n    reader1.close();\n    reader2.close();\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d14e8d18c0e3970c20354dbeeb49da11bd587fbd","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}