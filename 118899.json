{"path":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testMap().mjava","commits":[{"id":"fe90d104db258964b96e50418b9caa0c156eafda","date":1561555614,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testMap().mjava","pathOld":"/dev/null","sourceNew":"  public void testMap() {\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"primitive\", 1234L);\n    map.put(\"string\", \"string\");\n    long actual = sizeOf(map);\n    long estimated = RamUsageEstimator.sizeOfObject(map);\n    assertTrue(estimated > actual); // RamUsageTester under-estimates the size of map\n\n    // test recursion\n    map.clear();\n    map.put(\"string[]\", new String[]{\"foo\", \"bar\"});\n    map.put(\"map\", Collections.singletonMap(\"foo\", \"bar\"));\n    map.put(\"self\", map);\n    actual = sizeOf(map);\n    estimated = RamUsageEstimator.sizeOfObject(map);\n    assertTrue(estimated > actual);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0633445968876e74a19e422a3a955ca6e00ad0da","date":1561710807,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testMap().mjava","sourceNew":"  public void testMap() {\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"primitive\", 1234L);\n    map.put(\"string\", \"string\");\n    for (int i = 0; i < 100; i++) {\n      map.put(\"complex \" + i, new Term(\"foo \" + i, \"bar \" + i));\n    }\n    long actual = sizeOf(map);\n    long estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.2);\n\n    // test recursion\n    map.put(\"self\", map);\n    actual = sizeOf(map);\n    estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.2);\n  }\n\n","sourceOld":"  public void testMap() {\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"primitive\", 1234L);\n    map.put(\"string\", \"string\");\n    long actual = sizeOf(map);\n    long estimated = RamUsageEstimator.sizeOfObject(map);\n    assertTrue(estimated > actual); // RamUsageTester under-estimates the size of map\n\n    // test recursion\n    map.clear();\n    map.put(\"string[]\", new String[]{\"foo\", \"bar\"});\n    map.put(\"map\", Collections.singletonMap(\"foo\", \"bar\"));\n    map.put(\"self\", map);\n    actual = sizeOf(map);\n    estimated = RamUsageEstimator.sizeOfObject(map);\n    assertTrue(estimated > actual);\n  }\n\n","bugFix":null,"bugIntro":["4b710453e45deb1882aaf2cc141294c52fb73af3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f11195b881bc723ee52f8d777cd39b31ea9e61e1","date":1562047058,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testMap().mjava","sourceNew":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8898\")\n  public void testMap() {\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"primitive\", 1234L);\n    map.put(\"string\", \"string\");\n    for (int i = 0; i < 100; i++) {\n      map.put(\"complex \" + i, new Term(\"foo \" + i, \"bar \" + i));\n    }\n    long actual = sizeOf(map);\n    long estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.2);\n\n    // test recursion\n    map.put(\"self\", map);\n    actual = sizeOf(map);\n    estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.2);\n  }\n\n","sourceOld":"  public void testMap() {\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"primitive\", 1234L);\n    map.put(\"string\", \"string\");\n    for (int i = 0; i < 100; i++) {\n      map.put(\"complex \" + i, new Term(\"foo \" + i, \"bar \" + i));\n    }\n    long actual = sizeOf(map);\n    long estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.2);\n\n    // test recursion\n    map.put(\"self\", map);\n    actual = sizeOf(map);\n    estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.2);\n  }\n\n","bugFix":null,"bugIntro":["4b710453e45deb1882aaf2cc141294c52fb73af3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b710453e45deb1882aaf2cc141294c52fb73af3","date":1562074649,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testMap().mjava","sourceNew":"  //@AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8898\")\n  public void testMap() {\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"primitive\", 1234L);\n    map.put(\"string\", \"string\");\n    for (int i = 0; i < 100; i++) {\n      map.put(\"complex \" + i, new Term(\"foo \" + i, \"bar \" + i));\n    }\n    double errorFactor = COMPRESSED_REFS_ENABLED ? 0.2 : 0.3;\n    long actual = sizeOf(map);\n    long estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * errorFactor);\n\n    // test recursion\n    map.put(\"self\", map);\n    actual = sizeOf(map);\n    estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * errorFactor);\n  }\n\n","sourceOld":"  @AwaitsFix(bugUrl=\"https://issues.apache.org/jira/browse/LUCENE-8898\")\n  public void testMap() {\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"primitive\", 1234L);\n    map.put(\"string\", \"string\");\n    for (int i = 0; i < 100; i++) {\n      map.put(\"complex \" + i, new Term(\"foo \" + i, \"bar \" + i));\n    }\n    long actual = sizeOf(map);\n    long estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.2);\n\n    // test recursion\n    map.put(\"self\", map);\n    actual = sizeOf(map);\n    estimated = RamUsageEstimator.sizeOfObject(map);\n    assertEquals((double)actual, (double)estimated, (double)actual * 0.2);\n  }\n\n","bugFix":["f11195b881bc723ee52f8d777cd39b31ea9e61e1","0633445968876e74a19e422a3a955ca6e00ad0da"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0633445968876e74a19e422a3a955ca6e00ad0da":["fe90d104db258964b96e50418b9caa0c156eafda"],"4b710453e45deb1882aaf2cc141294c52fb73af3":["f11195b881bc723ee52f8d777cd39b31ea9e61e1"],"fe90d104db258964b96e50418b9caa0c156eafda":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f11195b881bc723ee52f8d777cd39b31ea9e61e1":["0633445968876e74a19e422a3a955ca6e00ad0da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b710453e45deb1882aaf2cc141294c52fb73af3"]},"commit2Childs":{"0633445968876e74a19e422a3a955ca6e00ad0da":["f11195b881bc723ee52f8d777cd39b31ea9e61e1"],"4b710453e45deb1882aaf2cc141294c52fb73af3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe90d104db258964b96e50418b9caa0c156eafda":["0633445968876e74a19e422a3a955ca6e00ad0da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe90d104db258964b96e50418b9caa0c156eafda"],"f11195b881bc723ee52f8d777cd39b31ea9e61e1":["4b710453e45deb1882aaf2cc141294c52fb73af3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}