{"path":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testIntervalQueries().mjava","commits":[{"id":"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c","date":1597407672,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testIntervalQueries().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testIntervalQueries() throws IOException {\n    String field = FLD_TEXT_POS_OFFS;\n\n    withReader(\n        List.of(\n            Map.of(field, values(\"foo baz foo\")),\n            Map.of(field, values(\"bas baz foo\")),\n            Map.of(field, values(\"bar baz foo xyz\"))),\n        reader -> {\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.unordered(\n                      Intervals.term(\"foo\"),\n                      Intervals.term(\"bas\"),\n                      Intervals.term(\"baz\")))),\n              containsInAnyOrder(\n                  fmt(\"1: (field_text_offs: '>bas baz foo<')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.maxgaps(1,\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\"))))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.containing(\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\")),\n                      Intervals.term(\"foo\")))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.containedBy(\n                      Intervals.term(\"foo\"),\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\"))))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.overlapping(\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\")),\n                      Intervals.term(\"foo\")))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0","date":1599736633,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testIntervalQueries().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/matchhighlight/TestMatchRegionRetriever#testIntervalQueries().mjava","sourceNew":"  @Test\n  public void testIntervalQueries() throws IOException {\n    String field = FLD_TEXT_POS_OFFS;\n\n    new IndexBuilder(this::toField)\n        .doc(field, \"foo baz foo\")\n        .doc(field, \"bas baz foo\")\n        .doc(field, \"bar baz foo xyz\")\n        .build(analyzer, reader -> {\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.unordered(\n                      Intervals.term(\"foo\"),\n                      Intervals.term(\"bas\"),\n                      Intervals.term(\"baz\")))),\n              containsInAnyOrder(\n                  fmt(\"1: (field_text_offs: '>bas baz foo<')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.maxgaps(1,\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\"))))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.containing(\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\")),\n                      Intervals.term(\"foo\")))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.containedBy(\n                      Intervals.term(\"foo\"),\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\"))))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.overlapping(\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\")),\n                      Intervals.term(\"foo\")))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n        }\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testIntervalQueries() throws IOException {\n    String field = FLD_TEXT_POS_OFFS;\n\n    withReader(\n        List.of(\n            Map.of(field, values(\"foo baz foo\")),\n            Map.of(field, values(\"bas baz foo\")),\n            Map.of(field, values(\"bar baz foo xyz\"))),\n        reader -> {\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.unordered(\n                      Intervals.term(\"foo\"),\n                      Intervals.term(\"bas\"),\n                      Intervals.term(\"baz\")))),\n              containsInAnyOrder(\n                  fmt(\"1: (field_text_offs: '>bas baz foo<')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.maxgaps(1,\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\"))))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.containing(\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\")),\n                      Intervals.term(\"foo\")))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.containedBy(\n                      Intervals.term(\"foo\"),\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\"))))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n\n          assertThat(\n              highlights(reader, new IntervalQuery(field,\n                  Intervals.overlapping(\n                      Intervals.unordered(\n                          Intervals.term(\"foo\"),\n                          Intervals.term(\"bar\")),\n                      Intervals.term(\"foo\")))),\n              containsInAnyOrder(\n                  fmt(\"2: (field_text_offs: '>bar baz foo< xyz')\", field)\n              ));\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"]},"commit2Childs":{"2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c":["930e5c340e08514a7f57a54cf65e2f8f1f90c8f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fb36690ce41edd0bebf4e4babc0fa8c9b0f2e5c"],"930e5c340e08514a7f57a54cf65e2f8f1f90c8f0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}