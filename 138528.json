{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = 1000 * RANDOM_MULTIPLIER;\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, Field.Index.NOT_ANALYZED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterDelete#testDeleteAllSlowly().mjava","sourceNew":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDeleteAllSlowly() throws Exception {\n    final Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random, dir);\n    final int NUM_DOCS = atLeast(1000);\n    final List<Integer> ids = new ArrayList<Integer>(NUM_DOCS);\n    for(int id=0;id<NUM_DOCS;id++) {\n      ids.add(id);\n    }\n    Collections.shuffle(ids, random);\n    for(int id : ids) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", \"\"+id, StringField.TYPE_UNSTORED));\n      w.addDocument(doc);\n    }\n    Collections.shuffle(ids, random);\n    int upto = 0;\n    while(upto < ids.size()) {\n      final int left = ids.size() - upto;\n      final int inc = Math.min(left, _TestUtil.nextInt(random, 1, 20));\n      final int limit = upto + inc;\n      while(upto < limit) {\n        w.deleteDocuments(new Term(\"id\", \"\"+ids.get(upto++)));\n      }\n      final IndexReader r = w.getReader();\n      assertEquals(NUM_DOCS - upto, r.numDocs());\n      r.close();\n    }\n\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f83af14a2a8131b14d7aee6274c740334e0363d3"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}