{"path":"src/java/org/apache/solr/schema/DateField#parseMath(Date,String).mjava","commits":[{"id":"487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1","date":1185690521,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/DateField#parseMath(Date,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    /* :TODO: let Locale/TimeZone come from init args for rounding only */\n    final DateMathParser p = new DateMathParser(UTC, Locale.US);\n    \n    if (null != now) p.setNow(now);\n    \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          p.setNow(toObject(val.substring(0,zz)));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n    \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9ec4db60270decb71278f6fc40d45eae8322899a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ec4db60270decb71278f6fc40d45eae8322899a","date":1218782912,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/DateField#parseMath(Date,String).mjava","pathOld":"src/java/org/apache/solr/schema/DateField#parseMath(Date,String).mjava","sourceNew":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n    \n    if (null != now) p.setNow(now);\n    \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          p.setNow(toObject(val.substring(0,zz)));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n    \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    /* :TODO: let Locale/TimeZone come from init args for rounding only */\n    final DateMathParser p = new DateMathParser(UTC, Locale.US);\n    \n    if (null != now) p.setNow(now);\n    \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          p.setNow(toObject(val.substring(0,zz)));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n    \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":["487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/DateField#parseMath(Date,String).mjava","pathOld":"src/java/org/apache/solr/schema/DateField#parseMath(Date,String).mjava","sourceNew":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n    \n    if (null != now) p.setNow(now);\n    \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDate(val.substring(0,zz+1)));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n    \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n    \n    if (null != now) p.setNow(now);\n    \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          p.setNow(toObject(val.substring(0,zz)));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n    \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/DateField#parseMath(Date,String).mjava","pathOld":"src/java/org/apache/solr/schema/DateField#parseMath(Date,String).mjava","sourceNew":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n    \n    if (null != now) p.setNow(now);\n    \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDate(val.substring(0,zz+1)));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n    \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses a String which may be a date (in the standard format)\n   * followed by an optional math expression.\n   * @param now an optional fixed date to use as \"NOW\" in the DateMathParser\n   * @param val the string to parse\n   */\n  public Date parseMath(Date now, String val) {\n    String math = null;\n    final DateMathParser p = new DateMathParser(MATH_TZ, MATH_LOCALE);\n    \n    if (null != now) p.setNow(now);\n    \n    if (val.startsWith(NOW)) {\n      math = val.substring(NOW.length());\n    } else {\n      final int zz = val.indexOf(Z);\n      if (0 < zz) {\n        math = val.substring(zz+1);\n        try {\n          // p.setNow(toObject(val.substring(0,zz)));\n          p.setNow(parseDate(val.substring(0,zz+1)));\n        } catch (ParseException e) {\n          throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                   \"Invalid Date in Date Math String:'\"\n                                   +val+'\\'',e);\n        }\n      } else {\n        throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                                 \"Invalid Date String:'\" +val+'\\'');\n      }\n    }\n\n    if (null == math || math.equals(\"\")) {\n      return p.getNow();\n    }\n    \n    try {\n      return p.parseMath(math);\n    } catch (ParseException e) {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST,\n                               \"Invalid Date Math String:'\" +val+'\\'',e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9ec4db60270decb71278f6fc40d45eae8322899a":["487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["9ec4db60270decb71278f6fc40d45eae8322899a"],"ad94625fb8d088209f46650c8097196fec67f00c":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1":["9ec4db60270decb71278f6fc40d45eae8322899a"],"9ec4db60270decb71278f6fc40d45eae8322899a":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["487bcb36f5ba67741dd4dc6ebea3dc32420c4fb1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}