{"path":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics().mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics().mjava","pathOld":"/dev/null","sourceNew":"  private void requestMetrics() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc98d193c3159b69faf72b927788663d81bae571","date":1491986509,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics().mjava","sourceNew":"  private void requestMetrics() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","sourceOld":"  private void requestMetrics() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics().mjava","pathOld":"/dev/null","sourceNew":"  private void requestMetrics() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b92ded2659c9795a606f40ec031e6d09c801275","date":1493043122,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics().mjava","sourceNew":"  private void requestMetrics(boolean softFail) throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(500);\n      }\n    }\n    if (softFail && !found) {\n      return;\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","sourceOld":"  private void requestMetrics() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/StatsReloadRaceTest#requestMetrics().mjava","sourceNew":null,"sourceOld":"  private void requestMetrics() throws Exception {\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    String registry = \"solr.core.\" + h.coreName;\n    String key = \"SEARCHER.searcher.indexVersion\";\n    boolean found = false;\n    int count = 10;\n    while (!found && count-- > 0) {\n      h.getCoreContainer().getRequestHandler(\"/admin/metrics\").handleRequest(\n          req(\"prefix\", \"SEARCHER\", \"registry\", registry, \"compact\", \"true\"), rsp);\n\n      NamedList values = rsp.getValues();\n      NamedList metrics = (NamedList)values.get(\"metrics\");\n      metrics = (NamedList)metrics.get(registry);\n      // this is not guaranteed to exist right away after core reload - there's a\n      // small window between core load and before searcher metrics are registered\n      // so we may have to check a few times\n      if (metrics.get(key) != null) {\n        found = true;\n        assertTrue(metrics.get(key) instanceof Long);\n        break;\n      } else {\n        Thread.sleep(1000);\n      }\n    }\n    assertTrue(\"Key \" + key + \" not found in registry \" + registry, found);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7b92ded2659c9795a606f40ec031e6d09c801275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b92ded2659c9795a606f40ec031e6d09c801275":["cc98d193c3159b69faf72b927788663d81bae571"],"cc98d193c3159b69faf72b927788663d81bae571":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b92ded2659c9795a606f40ec031e6d09c801275"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"7b92ded2659c9795a606f40ec031e6d09c801275":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cc98d193c3159b69faf72b927788663d81bae571":["7b92ded2659c9795a606f40ec031e6d09c801275"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cc98d193c3159b69faf72b927788663d81bae571"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}