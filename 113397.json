{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#findDownReplicasInSlice(ClusterState,DocCollection,Slice,Collection[DownReplica]).mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#findDownReplicasInSlice(ClusterState,DocCollection,Slice,Collection[DownReplica]).mjava","pathOld":"/dev/null","sourceNew":"  private static int findDownReplicasInSlice(ClusterState clusterState, DocCollection collection, Slice slice, final Collection<DownReplica> badReplicas) {\n    int goodReplicas = 0;\n    Collection<Replica> replicas = slice.getReplicas();\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        // on a live node?\n        boolean live = clusterState.liveNodesContain(replica.getNodeName());\n        String state = replica.getStr(ZkStateReader.STATE_PROP);\n        \n        boolean okayState = (state.equals(ZkStateReader.DOWN)\n            || state.equals(ZkStateReader.RECOVERING) || state\n            .equals(ZkStateReader.ACTIVE));\n        \n        log.debug(\"Process replica name={} live={} state={}\", replica.getName(), live, state);\n        \n        if (live && okayState) {\n          goodReplicas++;\n        } else {\n          DownReplica badReplica = new DownReplica();\n          badReplica.replica = replica;\n          badReplica.slice = slice;\n          badReplica.collection = collection;\n          badReplicas.add(badReplica);\n        }\n      }\n    }\n    log.debug(\"bad replicas for slice {}\", badReplicas);\n    return goodReplicas;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#findDownReplicasInSlice(ClusterState,DocCollection,Slice,Collection[DownReplica]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#findDownReplicasInSlice(ClusterState,DocCollection,Slice,Collection[DownReplica]).mjava","sourceNew":"  private static int findDownReplicasInSlice(ClusterState clusterState, DocCollection collection, Slice slice, final Collection<DownReplica> badReplicas) {\n    int goodReplicas = 0;\n    Collection<Replica> replicas = slice.getReplicas();\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        // on a live node?\n        boolean live = clusterState.liveNodesContain(replica.getNodeName());\n        final Replica.State state = replica.getState();\n        \n        final boolean okayState = state == Replica.State.DOWN\n            || state == Replica.State.RECOVERING\n            || state == Replica.State.ACTIVE;\n        \n        log.debug(\"Process replica name={} live={} state={}\", replica.getName(), live, state.toString());\n        \n        if (live && okayState) {\n          goodReplicas++;\n        } else {\n          DownReplica badReplica = new DownReplica();\n          badReplica.replica = replica;\n          badReplica.slice = slice;\n          badReplica.collection = collection;\n          badReplicas.add(badReplica);\n        }\n      }\n    }\n    log.debug(\"bad replicas for slice {}\", badReplicas);\n    return goodReplicas;\n  }\n\n","sourceOld":"  private static int findDownReplicasInSlice(ClusterState clusterState, DocCollection collection, Slice slice, final Collection<DownReplica> badReplicas) {\n    int goodReplicas = 0;\n    Collection<Replica> replicas = slice.getReplicas();\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        // on a live node?\n        boolean live = clusterState.liveNodesContain(replica.getNodeName());\n        String state = replica.getStr(ZkStateReader.STATE_PROP);\n        \n        boolean okayState = (state.equals(ZkStateReader.DOWN)\n            || state.equals(ZkStateReader.RECOVERING) || state\n            .equals(ZkStateReader.ACTIVE));\n        \n        log.debug(\"Process replica name={} live={} state={}\", replica.getName(), live, state);\n        \n        if (live && okayState) {\n          goodReplicas++;\n        } else {\n          DownReplica badReplica = new DownReplica();\n          badReplica.replica = replica;\n          badReplica.slice = slice;\n          badReplica.collection = collection;\n          badReplicas.add(badReplica);\n        }\n      }\n    }\n    log.debug(\"bad replicas for slice {}\", badReplicas);\n    return goodReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#findDownReplicasInSlice(ClusterState,DocCollection,Slice,Collection[DownReplica]).mjava","sourceNew":null,"sourceOld":"  private static int findDownReplicasInSlice(ClusterState clusterState, DocCollection collection, Slice slice, final Collection<DownReplica> badReplicas) {\n    int goodReplicas = 0;\n    Collection<Replica> replicas = slice.getReplicas();\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        // on a live node?\n        boolean live = clusterState.liveNodesContain(replica.getNodeName());\n        final Replica.State state = replica.getState();\n        \n        final boolean okayState = state == Replica.State.DOWN\n            || state == Replica.State.RECOVERING\n            || state == Replica.State.ACTIVE;\n        \n        log.debug(\"Process replica name={} live={} state={}\", replica.getName(), live, state.toString());\n        \n        if (live && okayState) {\n          goodReplicas++;\n        } else {\n          DownReplica badReplica = new DownReplica();\n          badReplica.replica = replica;\n          badReplica.slice = slice;\n          badReplica.collection = collection;\n          badReplicas.add(badReplica);\n        }\n      }\n    }\n    log.debug(\"bad replicas for slice {}\", badReplicas);\n    return goodReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#findDownReplicasInSlice(ClusterState,DocCollection,Slice,Collection[DownReplica]).mjava","sourceNew":null,"sourceOld":"  private static int findDownReplicasInSlice(ClusterState clusterState, DocCollection collection, Slice slice, final Collection<DownReplica> badReplicas) {\n    int goodReplicas = 0;\n    Collection<Replica> replicas = slice.getReplicas();\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        // on a live node?\n        boolean live = clusterState.liveNodesContain(replica.getNodeName());\n        final Replica.State state = replica.getState();\n        \n        final boolean okayState = state == Replica.State.DOWN\n            || state == Replica.State.RECOVERING\n            || state == Replica.State.ACTIVE;\n        \n        log.debug(\"Process replica name={} live={} state={}\", replica.getName(), live, state.toString());\n        \n        if (live && okayState) {\n          goodReplicas++;\n        } else {\n          DownReplica badReplica = new DownReplica();\n          badReplica.replica = replica;\n          badReplica.slice = slice;\n          badReplica.collection = collection;\n          badReplicas.add(badReplica);\n        }\n      }\n    }\n    log.debug(\"bad replicas for slice {}\", badReplicas);\n    return goodReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerAutoReplicaFailoverThread#findDownReplicasInSlice(ClusterState,DocCollection,Slice,Collection[DownReplica]).mjava","sourceNew":null,"sourceOld":"  private static int findDownReplicasInSlice(ClusterState clusterState, DocCollection collection, Slice slice, final Collection<DownReplica> badReplicas) {\n    int goodReplicas = 0;\n    Collection<Replica> replicas = slice.getReplicas();\n    if (replicas != null) {\n      for (Replica replica : replicas) {\n        // on a live node?\n        boolean live = clusterState.liveNodesContain(replica.getNodeName());\n        final Replica.State state = replica.getState();\n        \n        final boolean okayState = state == Replica.State.DOWN\n            || state == Replica.State.RECOVERING\n            || state == Replica.State.ACTIVE;\n        \n        log.debug(\"Process replica name={} live={} state={}\", replica.getName(), live, state.toString());\n        \n        if (live && okayState) {\n          goodReplicas++;\n        } else {\n          DownReplica badReplica = new DownReplica();\n          badReplica.replica = replica;\n          badReplica.slice = slice;\n          badReplica.collection = collection;\n          badReplicas.add(badReplica);\n        }\n      }\n    }\n    log.debug(\"bad replicas for slice {}\", badReplicas);\n    return goodReplicas;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a219f1dcad1700e84807666bdbd2b573e8de7021","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a219f1dcad1700e84807666bdbd2b573e8de7021","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}