{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZkRead#get(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"42f6b881386654cc8e0dab45bc451dc41b627f68","date":1574147118,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZkRead#get(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Command\n  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String path = req.getPathTemplateValues().get(\"*\");\n    if (path == null || path.isEmpty()) path = \"/\";\n    byte[] d = null;\n    try {\n      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n      if (l != null && !l.isEmpty()) {\n        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n\n        rsp.add(path, (MapWriter) ew -> {\n          for (String s : l) {\n            try {\n              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n              ew.put(s, (MapWriter) ew1 -> {\n                ew1.put(\"version\", stat.getVersion());\n                ew1.put(\"aversion\", stat.getAversion());\n                ew1.put(\"children\", stat.getNumChildren());\n                ew1.put(\"ctime\", stat.getCtime());\n                ew1.put(\"cversion\", stat.getCversion());\n                ew1.put(\"czxid\", stat.getCzxid());\n                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n                ew1.put(\"mtime\", stat.getMtime());\n                ew1.put(\"mzxid\", stat.getMzxid());\n                ew1.put(\"pzxid\", stat.getPzxid());\n                ew1.put(\"dataLength\", stat.getDataLength());\n              });\n            } catch (Exception e) {\n              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n            }\n          }\n        });\n\n      } else {\n        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n        if (d == null || d.length == 0) {\n          rsp.add(path, null);\n          return;\n        }\n\n        Map<String, String> map = new HashMap<>(1);\n        map.put(WT, \"raw\");\n        map.put(OMIT_HEADER, \"true\");\n        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n\n\n        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n\n      }\n\n    } catch (Exception e) {\n      rsp.add(CONTENT, new ContentStreamBase.StringStream(Utils.toJSONString(Collections.singletonMap(\"error\", e.getMessage()))));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedb82f40fd431141e6baeedc018c99a07ab6a0","date":1574190486,"type":4,"author":"noble","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZkRead#get(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Command\n  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String path = req.getPathTemplateValues().get(\"*\");\n    if (path == null || path.isEmpty()) path = \"/\";\n    byte[] d = null;\n    try {\n      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n      if (l != null && !l.isEmpty()) {\n        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n\n        rsp.add(path, (MapWriter) ew -> {\n          for (String s : l) {\n            try {\n              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n              ew.put(s, (MapWriter) ew1 -> {\n                ew1.put(\"version\", stat.getVersion());\n                ew1.put(\"aversion\", stat.getAversion());\n                ew1.put(\"children\", stat.getNumChildren());\n                ew1.put(\"ctime\", stat.getCtime());\n                ew1.put(\"cversion\", stat.getCversion());\n                ew1.put(\"czxid\", stat.getCzxid());\n                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n                ew1.put(\"mtime\", stat.getMtime());\n                ew1.put(\"mzxid\", stat.getMzxid());\n                ew1.put(\"pzxid\", stat.getPzxid());\n                ew1.put(\"dataLength\", stat.getDataLength());\n              });\n            } catch (Exception e) {\n              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n            }\n          }\n        });\n\n      } else {\n        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n        if (d == null || d.length == 0) {\n          rsp.add(path, null);\n          return;\n        }\n\n        Map<String, String> map = new HashMap<>(1);\n        map.put(WT, \"raw\");\n        map.put(OMIT_HEADER, \"true\");\n        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n\n\n        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n\n      }\n\n    } catch (Exception e) {\n      rsp.add(CONTENT, new ContentStreamBase.StringStream(Utils.toJSONString(Collections.singletonMap(\"error\", e.getMessage()))));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7","date":1583235377,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZkRead#get(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Command\n  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String path = req.getPathTemplateValues().get(\"*\");\n    if (path == null || path.isEmpty()) path = \"/\";\n    byte[] d = null;\n    try {\n      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n      if (l != null && !l.isEmpty()) {\n        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n\n        rsp.add(path, (MapWriter) ew -> {\n          for (String s : l) {\n            try {\n              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n              ew.put(s, (MapWriter) ew1 -> {\n                ew1.put(\"version\", stat.getVersion());\n                ew1.put(\"aversion\", stat.getAversion());\n                ew1.put(\"children\", stat.getNumChildren());\n                ew1.put(\"ctime\", stat.getCtime());\n                ew1.put(\"cversion\", stat.getCversion());\n                ew1.put(\"czxid\", stat.getCzxid());\n                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n                ew1.put(\"mtime\", stat.getMtime());\n                ew1.put(\"mzxid\", stat.getMzxid());\n                ew1.put(\"pzxid\", stat.getPzxid());\n                ew1.put(\"dataLength\", stat.getDataLength());\n              });\n            } catch (Exception e) {\n              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n            }\n          }\n        });\n\n      } else {\n        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n        if (d == null || d.length == 0) {\n          rsp.add(path, null);\n          return;\n        }\n\n        Map<String, String> map = new HashMap<>(1);\n        map.put(WT, \"raw\");\n        map.put(OMIT_HEADER, \"true\");\n        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n\n\n        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n\n      }\n\n    } catch (Exception e) {\n      rsp.add(CONTENT, new ContentStreamBase.StringStream(Utils.toJSONString(Collections.singletonMap(\"error\", e.getMessage()))));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38fb691372ae1411a8a486192885334fd3ae7244","date":1583496514,"type":4,"author":"noble","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZkRead#get(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @Command\n  public void get(SolrQueryRequest req, SolrQueryResponse rsp) {\n    String path = req.getPathTemplateValues().get(\"*\");\n    if (path == null || path.isEmpty()) path = \"/\";\n    byte[] d = null;\n    try {\n      List<String> l = coreContainer.getZkController().getZkClient().getChildren(path, null, false);\n      if (l != null && !l.isEmpty()) {\n        String prefix = path.endsWith(\"/\") ? path : path + \"/\";\n\n        rsp.add(path, (MapWriter) ew -> {\n          for (String s : l) {\n            try {\n              Stat stat = coreContainer.getZkController().getZkClient().exists(prefix + s, null, false);\n              ew.put(s, (MapWriter) ew1 -> {\n                ew1.put(\"version\", stat.getVersion());\n                ew1.put(\"aversion\", stat.getAversion());\n                ew1.put(\"children\", stat.getNumChildren());\n                ew1.put(\"ctime\", stat.getCtime());\n                ew1.put(\"cversion\", stat.getCversion());\n                ew1.put(\"czxid\", stat.getCzxid());\n                ew1.put(\"ephemeralOwner\", stat.getEphemeralOwner());\n                ew1.put(\"mtime\", stat.getMtime());\n                ew1.put(\"mzxid\", stat.getMzxid());\n                ew1.put(\"pzxid\", stat.getPzxid());\n                ew1.put(\"dataLength\", stat.getDataLength());\n              });\n            } catch (Exception e) {\n              ew.put(\"s\", Collections.singletonMap(\"error\", e.getMessage()));\n            }\n          }\n        });\n\n      } else {\n        d = coreContainer.getZkController().getZkClient().getData(path, null, null, false);\n        if (d == null || d.length == 0) {\n          rsp.add(path, null);\n          return;\n        }\n\n        Map<String, String> map = new HashMap<>(1);\n        map.put(WT, \"raw\");\n        map.put(OMIT_HEADER, \"true\");\n        req.setParams(SolrParams.wrapDefaults(new MapSolrParams(map), req.getParams()));\n\n\n        rsp.add(CONTENT, new ContentStreamBase.ByteArrayStream(d, null,\n            d[0] == '{' ? CommonParams.JSON_MIME : BinaryResponseParser.BINARY_CONTENT_TYPE));\n\n      }\n\n    } catch (Exception e) {\n      rsp.add(CONTENT, new ContentStreamBase.StringStream(Utils.toJSONString(Collections.singletonMap(\"error\", e.getMessage()))));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"42f6b881386654cc8e0dab45bc451dc41b627f68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38fb691372ae1411a8a486192885334fd3ae7244":["bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7"],"bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7":["fbedb82f40fd431141e6baeedc018c99a07ab6a0"],"fbedb82f40fd431141e6baeedc018c99a07ab6a0":["42f6b881386654cc8e0dab45bc451dc41b627f68"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["38fb691372ae1411a8a486192885334fd3ae7244"]},"commit2Childs":{"42f6b881386654cc8e0dab45bc451dc41b627f68":["fbedb82f40fd431141e6baeedc018c99a07ab6a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42f6b881386654cc8e0dab45bc451dc41b627f68"],"38fb691372ae1411a8a486192885334fd3ae7244":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7":["38fb691372ae1411a8a486192885334fd3ae7244"],"fbedb82f40fd431141e6baeedc018c99a07ab6a0":["bd680b8f0b159dc1c7a01439c3c7f065bf3e69c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}