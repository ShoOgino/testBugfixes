{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testEmptyResultSet().mjava","commits":[{"id":"0e96b72278dd6fa3cf8dbd7e2df029e223d13fde","date":1470138337,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testEmptyResultSet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyResultSet() throws Exception {\n      MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n      props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n      EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n\n      jdbcDataSource.init(context, props);\n\n      connection.setAutoCommit(false);\n\n      Statement statement = mockControl.createMock(Statement.class);\n      EasyMock.expect(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n          .andReturn(statement);\n      statement.setFetchSize(500);\n      statement.setMaxRows(0);\n      EasyMock.expect(statement.execute(\"query\")).andReturn(true);\n      ResultSet resultSet = mockControl.createMock(ResultSet.class);\n      EasyMock.expect(statement.getResultSet()).andReturn(resultSet);\n      ResultSetMetaData metaData = mockControl.createMock(ResultSetMetaData.class);\n      EasyMock.expect(resultSet.getMetaData()).andReturn(metaData);\n      EasyMock.expect(metaData.getColumnCount()).andReturn(0);\n      EasyMock.expect(resultSet.next()).andReturn(false);\n      resultSet.close();\n      EasyMock.expect(statement.getMoreResults()).andReturn(false);\n      EasyMock.expect(statement.getUpdateCount()).andReturn(-1);\n      statement.close();\n\n      mockControl.replay();\n\n      Iterator<Map<String,Object>> resultSetIterator = jdbcDataSource.getData(\"query\");\n      resultSetIterator.hasNext();\n      resultSetIterator.hasNext();\n\n      mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testEmptyResultSet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyResultSet() throws Exception {\n      MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n      props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n      EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n\n      jdbcDataSource.init(context, props);\n\n      connection.setAutoCommit(false);\n\n      Statement statement = mockControl.createMock(Statement.class);\n      EasyMock.expect(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n          .andReturn(statement);\n      statement.setFetchSize(500);\n      statement.setMaxRows(0);\n      EasyMock.expect(statement.execute(\"query\")).andReturn(true);\n      ResultSet resultSet = mockControl.createMock(ResultSet.class);\n      EasyMock.expect(statement.getResultSet()).andReturn(resultSet);\n      ResultSetMetaData metaData = mockControl.createMock(ResultSetMetaData.class);\n      EasyMock.expect(resultSet.getMetaData()).andReturn(metaData);\n      EasyMock.expect(metaData.getColumnCount()).andReturn(0);\n      EasyMock.expect(resultSet.next()).andReturn(false);\n      resultSet.close();\n      EasyMock.expect(statement.getMoreResults()).andReturn(false);\n      EasyMock.expect(statement.getUpdateCount()).andReturn(-1);\n      statement.close();\n\n      mockControl.replay();\n\n      Iterator<Map<String,Object>> resultSetIterator = jdbcDataSource.getData(\"query\");\n      resultSetIterator.hasNext();\n      resultSetIterator.hasNext();\n\n      mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testEmptyResultSet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEmptyResultSet() throws Exception {\n      MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n      props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n      EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n\n      jdbcDataSource.init(context, props);\n\n      connection.setAutoCommit(false);\n\n      Statement statement = mockControl.createMock(Statement.class);\n      EasyMock.expect(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n          .andReturn(statement);\n      statement.setFetchSize(500);\n      statement.setMaxRows(0);\n      EasyMock.expect(statement.execute(\"query\")).andReturn(true);\n      ResultSet resultSet = mockControl.createMock(ResultSet.class);\n      EasyMock.expect(statement.getResultSet()).andReturn(resultSet);\n      ResultSetMetaData metaData = mockControl.createMock(ResultSetMetaData.class);\n      EasyMock.expect(resultSet.getMetaData()).andReturn(metaData);\n      EasyMock.expect(metaData.getColumnCount()).andReturn(0);\n      EasyMock.expect(resultSet.next()).andReturn(false);\n      resultSet.close();\n      EasyMock.expect(statement.getMoreResults()).andReturn(false);\n      EasyMock.expect(statement.getUpdateCount()).andReturn(-1);\n      statement.close();\n\n      mockControl.replay();\n\n      Iterator<Map<String,Object>> resultSetIterator = jdbcDataSource.getData(\"query\");\n      resultSetIterator.hasNext();\n      resultSetIterator.hasNext();\n\n      mockControl.verify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","date":1487462440,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testEmptyResultSet().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testEmptyResultSet().mjava","sourceNew":"  @Test\n  public void testEmptyResultSet() throws Exception {\n      MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n      props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n      when(dataSource.getConnection()).thenReturn(connection);\n\n      jdbcDataSource.init(context, props);\n\n      Statement statement = mock(Statement.class);\n      when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n          .thenReturn(statement);\n      when(statement.execute(\"query\")).thenReturn(true);\n      ResultSet resultSet = mock(ResultSet.class);\n      when(statement.getResultSet()).thenReturn(resultSet);\n      ResultSetMetaData metaData = mock(ResultSetMetaData.class);\n      when(resultSet.getMetaData()).thenReturn(metaData);\n      when(metaData.getColumnCount()).thenReturn(0);\n      when(resultSet.next()).thenReturn(false);\n      when(statement.getMoreResults()).thenReturn(false);\n      when(statement.getUpdateCount()).thenReturn(-1);\n\n      Iterator<Map<String,Object>> resultSetIterator = jdbcDataSource.getData(\"query\");\n      resultSetIterator.hasNext();\n      resultSetIterator.hasNext();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n      verify(statement).setFetchSize(500);\n      verify(statement).setMaxRows(0);\n      verify(statement).execute(\"query\");\n      verify(statement).getResultSet();\n      verify(resultSet).getMetaData();\n      verify(metaData).getColumnCount();\n      verify(resultSet).next();\n      verify(resultSet).close();\n      verify(statement).getMoreResults();\n      verify(statement).getUpdateCount();\n      verify(statement).close();\n  }\n\n","sourceOld":"  @Test\n  public void testEmptyResultSet() throws Exception {\n      MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n      props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n      EasyMock.expect(dataSource.getConnection()).andReturn(connection);\n\n      jdbcDataSource.init(context, props);\n\n      connection.setAutoCommit(false);\n\n      Statement statement = mockControl.createMock(Statement.class);\n      EasyMock.expect(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n          .andReturn(statement);\n      statement.setFetchSize(500);\n      statement.setMaxRows(0);\n      EasyMock.expect(statement.execute(\"query\")).andReturn(true);\n      ResultSet resultSet = mockControl.createMock(ResultSet.class);\n      EasyMock.expect(statement.getResultSet()).andReturn(resultSet);\n      ResultSetMetaData metaData = mockControl.createMock(ResultSetMetaData.class);\n      EasyMock.expect(resultSet.getMetaData()).andReturn(metaData);\n      EasyMock.expect(metaData.getColumnCount()).andReturn(0);\n      EasyMock.expect(resultSet.next()).andReturn(false);\n      resultSet.close();\n      EasyMock.expect(statement.getMoreResults()).andReturn(false);\n      EasyMock.expect(statement.getUpdateCount()).andReturn(-1);\n      statement.close();\n\n      mockControl.replay();\n\n      Iterator<Map<String,Object>> resultSetIterator = jdbcDataSource.getData(\"query\");\n      resultSetIterator.hasNext();\n      resultSetIterator.hasNext();\n\n      mockControl.verify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource#testEmptyResultSet().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEmptyResultSet() throws Exception {\n      MockInitialContextFactory.bind(\"java:comp/env/jdbc/JndiDB\", dataSource);\n\n      props.put(JdbcDataSource.JNDI_NAME, \"java:comp/env/jdbc/JndiDB\");\n      when(dataSource.getConnection()).thenReturn(connection);\n\n      jdbcDataSource.init(context, props);\n\n      Statement statement = mock(Statement.class);\n      when(connection.createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY))\n          .thenReturn(statement);\n      when(statement.execute(\"query\")).thenReturn(true);\n      ResultSet resultSet = mock(ResultSet.class);\n      when(statement.getResultSet()).thenReturn(resultSet);\n      ResultSetMetaData metaData = mock(ResultSetMetaData.class);\n      when(resultSet.getMetaData()).thenReturn(metaData);\n      when(metaData.getColumnCount()).thenReturn(0);\n      when(resultSet.next()).thenReturn(false);\n      when(statement.getMoreResults()).thenReturn(false);\n      when(statement.getUpdateCount()).thenReturn(-1);\n\n      Iterator<Map<String,Object>> resultSetIterator = jdbcDataSource.getData(\"query\");\n      resultSetIterator.hasNext();\n      resultSetIterator.hasNext();\n\n      verify(connection).setAutoCommit(false);\n      verify(connection).createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);\n      verify(statement).setFetchSize(500);\n      verify(statement).setMaxRows(0);\n      verify(statement).execute(\"query\");\n      verify(statement).getResultSet();\n      verify(resultSet).getMetaData();\n      verify(metaData).getColumnCount();\n      verify(resultSet).next();\n      verify(resultSet).close();\n      verify(statement).getMoreResults();\n      verify(statement).getUpdateCount();\n      verify(statement).close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["0e96b72278dd6fa3cf8dbd7e2df029e223d13fde"],"0e96b72278dd6fa3cf8dbd7e2df029e223d13fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e96b72278dd6fa3cf8dbd7e2df029e223d13fde"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e96b72278dd6fa3cf8dbd7e2df029e223d13fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e96b72278dd6fa3cf8dbd7e2df029e223d13fde","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"0e96b72278dd6fa3cf8dbd7e2df029e223d13fde":["f7a0f6f6b8a4cc8b82386e74e45ab3c097f2453e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}