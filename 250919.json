{"path":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","commits":[{"id":"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","date":1320267737,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","pathOld":"/dev/null","sourceNew":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    DocsEnum docs = terms.docs(MultiFields.getLiveDocs(r), termBytes, null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    DocsEnum docs = terms.docs(MultiFields.getLiveDocs(r), termBytes, null);\n    if (docs == null) return -1;\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = _TestUtil.docs(random, termsEnum, MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    InvertedFields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    InvertedFields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b2e7536fb06d1abad6c7543a0657bdad5242c5e","date":1341417762,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRTGBase#getFirstMatch(IndexReader,Term).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":"  protected int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#getFirstMatch(IndexReader,Term).mjava","sourceNew":null,"sourceOld":"  public int getFirstMatch(IndexReader r, Term t) throws IOException {\n    Fields fields = MultiFields.getFields(r);\n    if (fields == null) return -1;\n    Terms terms = fields.terms(t.field());\n    if (terms == null) return -1;\n    BytesRef termBytes = t.bytes();\n    final TermsEnum termsEnum = terms.iterator(null);\n    if (!termsEnum.seekExact(termBytes, false)) {\n      return -1;\n    }\n    DocsEnum docs = termsEnum.docs(MultiFields.getLiveDocs(r), null, false);\n    int id = docs.nextDoc();\n    if (id != DocIdSetIterator.NO_MORE_DOCS) {\n      int next = docs.nextDoc();\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    return id == DocIdSetIterator.NO_MORE_DOCS ? -1 : id;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["872cff1d3a554e0cd64014cd97f88d3002b0f491","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"e2297162a22c55456e200caef2cbcb00fe381120":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e2297162a22c55456e200caef2cbcb00fe381120"],"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["872cff1d3a554e0cd64014cd97f88d3002b0f491","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["e2297162a22c55456e200caef2cbcb00fe381120","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","2b2e7536fb06d1abad6c7543a0657bdad5242c5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"2b2e7536fb06d1abad6c7543a0657bdad5242c5e":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b2e7536fb06d1abad6c7543a0657bdad5242c5e"]},"commit2Childs":{"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e2297162a22c55456e200caef2cbcb00fe381120":["872cff1d3a554e0cd64014cd97f88d3002b0f491","b65b350ca9588f9fc76ce7d6804160d06c45ff42"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","b65b350ca9588f9fc76ce7d6804160d06c45ff42","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["e2297162a22c55456e200caef2cbcb00fe381120"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2b2e7536fb06d1abad6c7543a0657bdad5242c5e"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d08eba3d52b63561ebf936481ce73e6b6a14aa03","0d22ac6a4146774c1bc8400160fc0b6150294e92"],"2b2e7536fb06d1abad6c7543a0657bdad5242c5e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","b65b350ca9588f9fc76ce7d6804160d06c45ff42","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}