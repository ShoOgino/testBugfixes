{"path":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(Collector,int).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(Collector,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(Collector).mjava","sourceNew":"  @Override\n  public boolean score(Collector collector, int maxDoc) throws IOException {\n    if (maxDoc != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"maxDoc must be Integer.MAX_VALUE\");\n    }\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    FakeScorer scorer = new FakeScorer();\n    collector.setScorer(scorer);\n    if (drillDownCollector != null) {\n      drillDownCollector.setScorer(scorer);\n      drillDownCollector.setNextReader(context);\n    }\n    for (DocsAndCost dim : dims) {\n      dim.sidewaysCollector.setScorer(scorer);\n      dim.sidewaysCollector.setNextReader(context);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    int numBits = 0;\n    for (DocsAndCost dim : dims) {\n      if (dim.disi != null) {\n        dim.disi.nextDoc();\n      } else if (dim.bits != null) {\n        numBits++;\n      }\n    }\n\n    final int numDims = dims.length;\n\n    Bits[] bits = new Bits[numBits];\n    Collector[] bitsSidewaysCollectors = new Collector[numBits];\n\n    DocIdSetIterator[] disis = new DocIdSetIterator[numDims-numBits];\n    Collector[] sidewaysCollectors = new Collector[numDims-numBits];\n    long drillDownCost = 0;\n    int disiUpto = 0;\n    int bitsUpto = 0;\n    for (int dim=0;dim<numDims;dim++) {\n      DocIdSetIterator disi = dims[dim].disi;\n      if (dims[dim].bits == null) {\n        disis[disiUpto] = disi;\n        sidewaysCollectors[disiUpto] = dims[dim].sidewaysCollector;\n        disiUpto++;\n        if (disi != null) {\n          drillDownCost += disi.cost();\n        }\n      } else {\n        bits[bitsUpto] = dims[dim].bits;\n        bitsSidewaysCollectors[bitsUpto] = dims[dim].sidewaysCollector;\n        bitsUpto++;\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (bitsUpto > 0 || scoreSubDocsAtOnce || baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"queryFirst: baseScorer=\" + baseScorer + \" disis.length=\" + disis.length + \" bits.length=\" + bits.length);\n      doQueryFirstScoring(collector, disis, sidewaysCollectors, bits, bitsSidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].disi == null || dims[1].disi.cost() < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, disis, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, disis, sidewaysCollectors);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public void score(Collector collector) throws IOException {\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    collector.setScorer(this);\n    if (drillDownCollector != null) {\n      drillDownCollector.setScorer(this);\n      drillDownCollector.setNextReader(context);\n    }\n    for (DocsAndCost dim : dims) {\n      dim.sidewaysCollector.setScorer(this);\n      dim.sidewaysCollector.setNextReader(context);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    int numBits = 0;\n    for (DocsAndCost dim : dims) {\n      if (dim.disi != null) {\n        dim.disi.nextDoc();\n      } else if (dim.bits != null) {\n        numBits++;\n      }\n    }\n\n    final int numDims = dims.length;\n\n    Bits[] bits = new Bits[numBits];\n    Collector[] bitsSidewaysCollectors = new Collector[numBits];\n\n    DocIdSetIterator[] disis = new DocIdSetIterator[numDims-numBits];\n    Collector[] sidewaysCollectors = new Collector[numDims-numBits];\n    long drillDownCost = 0;\n    int disiUpto = 0;\n    int bitsUpto = 0;\n    for (int dim=0;dim<numDims;dim++) {\n      DocIdSetIterator disi = dims[dim].disi;\n      if (dims[dim].bits == null) {\n        disis[disiUpto] = disi;\n        sidewaysCollectors[disiUpto] = dims[dim].sidewaysCollector;\n        disiUpto++;\n        if (disi != null) {\n          drillDownCost += disi.cost();\n        }\n      } else {\n        bits[bitsUpto] = dims[dim].bits;\n        bitsSidewaysCollectors[bitsUpto] = dims[dim].sidewaysCollector;\n        bitsUpto++;\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (bitsUpto > 0 || scoreSubDocsAtOnce || baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"queryFirst: baseScorer=\" + baseScorer + \" disis.length=\" + disis.length + \" bits.length=\" + bits.length);\n      doQueryFirstScoring(collector, disis, sidewaysCollectors, bits, bitsSidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].disi == null || dims[1].disi.cost() < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, disis, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, disis, sidewaysCollectors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(Collector,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(Collector).mjava","sourceNew":"  @Override\n  public boolean score(Collector collector, int maxDoc) throws IOException {\n    if (maxDoc != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"maxDoc must be Integer.MAX_VALUE\");\n    }\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    FakeScorer scorer = new FakeScorer();\n    collector.setScorer(scorer);\n    if (drillDownCollector != null) {\n      drillDownCollector.setScorer(scorer);\n      drillDownCollector.setNextReader(context);\n    }\n    for (DocsAndCost dim : dims) {\n      dim.sidewaysCollector.setScorer(scorer);\n      dim.sidewaysCollector.setNextReader(context);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    int numBits = 0;\n    for (DocsAndCost dim : dims) {\n      if (dim.disi != null) {\n        dim.disi.nextDoc();\n      } else if (dim.bits != null) {\n        numBits++;\n      }\n    }\n\n    final int numDims = dims.length;\n\n    Bits[] bits = new Bits[numBits];\n    Collector[] bitsSidewaysCollectors = new Collector[numBits];\n\n    DocIdSetIterator[] disis = new DocIdSetIterator[numDims-numBits];\n    Collector[] sidewaysCollectors = new Collector[numDims-numBits];\n    long drillDownCost = 0;\n    int disiUpto = 0;\n    int bitsUpto = 0;\n    for (int dim=0;dim<numDims;dim++) {\n      DocIdSetIterator disi = dims[dim].disi;\n      if (dims[dim].bits == null) {\n        disis[disiUpto] = disi;\n        sidewaysCollectors[disiUpto] = dims[dim].sidewaysCollector;\n        disiUpto++;\n        if (disi != null) {\n          drillDownCost += disi.cost();\n        }\n      } else {\n        bits[bitsUpto] = dims[dim].bits;\n        bitsSidewaysCollectors[bitsUpto] = dims[dim].sidewaysCollector;\n        bitsUpto++;\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (bitsUpto > 0 || scoreSubDocsAtOnce || baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"queryFirst: baseScorer=\" + baseScorer + \" disis.length=\" + disis.length + \" bits.length=\" + bits.length);\n      doQueryFirstScoring(collector, disis, sidewaysCollectors, bits, bitsSidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].disi == null || dims[1].disi.cost() < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, disis, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, disis, sidewaysCollectors);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public void score(Collector collector) throws IOException {\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    collector.setScorer(this);\n    if (drillDownCollector != null) {\n      drillDownCollector.setScorer(this);\n      drillDownCollector.setNextReader(context);\n    }\n    for (DocsAndCost dim : dims) {\n      dim.sidewaysCollector.setScorer(this);\n      dim.sidewaysCollector.setNextReader(context);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    int numBits = 0;\n    for (DocsAndCost dim : dims) {\n      if (dim.disi != null) {\n        dim.disi.nextDoc();\n      } else if (dim.bits != null) {\n        numBits++;\n      }\n    }\n\n    final int numDims = dims.length;\n\n    Bits[] bits = new Bits[numBits];\n    Collector[] bitsSidewaysCollectors = new Collector[numBits];\n\n    DocIdSetIterator[] disis = new DocIdSetIterator[numDims-numBits];\n    Collector[] sidewaysCollectors = new Collector[numDims-numBits];\n    long drillDownCost = 0;\n    int disiUpto = 0;\n    int bitsUpto = 0;\n    for (int dim=0;dim<numDims;dim++) {\n      DocIdSetIterator disi = dims[dim].disi;\n      if (dims[dim].bits == null) {\n        disis[disiUpto] = disi;\n        sidewaysCollectors[disiUpto] = dims[dim].sidewaysCollector;\n        disiUpto++;\n        if (disi != null) {\n          drillDownCost += disi.cost();\n        }\n      } else {\n        bits[bitsUpto] = dims[dim].bits;\n        bitsSidewaysCollectors[bitsUpto] = dims[dim].sidewaysCollector;\n        bitsUpto++;\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (bitsUpto > 0 || scoreSubDocsAtOnce || baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"queryFirst: baseScorer=\" + baseScorer + \" disis.length=\" + disis.length + \" bits.length=\" + bits.length);\n      doQueryFirstScoring(collector, disis, sidewaysCollectors, bits, bitsSidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].disi == null || dims[1].disi.cost() < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, disis, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, disis, sidewaysCollectors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(LeafCollector,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(Collector,int).mjava","sourceNew":"  @Override\n  public boolean score(LeafCollector collector, int maxDoc) throws IOException {\n    if (maxDoc != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"maxDoc must be Integer.MAX_VALUE\");\n    }\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    FakeScorer scorer = new FakeScorer();\n    collector.setScorer(scorer);\n    if (drillDownCollector != null) {\n      drillDownLeafCollector = drillDownCollector.getLeafCollector(context);\n      drillDownLeafCollector.setScorer(scorer);\n    } else {\n      drillDownLeafCollector = null;\n    }\n    for (DocsAndCost dim : dims) {\n      dim.sidewaysLeafCollector = dim.sidewaysCollector.getLeafCollector(context);\n      dim.sidewaysLeafCollector.setScorer(scorer);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    int numBits = 0;\n    for (DocsAndCost dim : dims) {\n      if (dim.disi != null) {\n        dim.disi.nextDoc();\n      } else if (dim.bits != null) {\n        numBits++;\n      }\n    }\n\n    final int numDims = dims.length;\n\n    Bits[] bits = new Bits[numBits];\n    LeafCollector[] bitsSidewaysCollectors = new LeafCollector[numBits];\n\n    DocIdSetIterator[] disis = new DocIdSetIterator[numDims-numBits];\n    LeafCollector[] sidewaysCollectors = new LeafCollector[numDims-numBits];\n    long drillDownCost = 0;\n    int disiUpto = 0;\n    int bitsUpto = 0;\n    for (int dim=0;dim<numDims;dim++) {\n      DocIdSetIterator disi = dims[dim].disi;\n      if (dims[dim].bits == null) {\n        disis[disiUpto] = disi;\n        sidewaysCollectors[disiUpto] = dims[dim].sidewaysLeafCollector;\n        disiUpto++;\n        if (disi != null) {\n          drillDownCost += disi.cost();\n        }\n      } else {\n        bits[bitsUpto] = dims[dim].bits;\n        bitsSidewaysCollectors[bitsUpto] = dims[dim].sidewaysLeafCollector;\n        bitsUpto++;\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (bitsUpto > 0 || scoreSubDocsAtOnce || baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"queryFirst: baseScorer=\" + baseScorer + \" disis.length=\" + disis.length + \" bits.length=\" + bits.length);\n      doQueryFirstScoring(collector, disis, sidewaysCollectors, bits, bitsSidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].disi == null || dims[1].disi.cost() < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, disis, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, disis, sidewaysCollectors);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean score(Collector collector, int maxDoc) throws IOException {\n    if (maxDoc != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"maxDoc must be Integer.MAX_VALUE\");\n    }\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    FakeScorer scorer = new FakeScorer();\n    collector.setScorer(scorer);\n    if (drillDownCollector != null) {\n      drillDownCollector.setScorer(scorer);\n      drillDownCollector.setNextReader(context);\n    }\n    for (DocsAndCost dim : dims) {\n      dim.sidewaysCollector.setScorer(scorer);\n      dim.sidewaysCollector.setNextReader(context);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    int numBits = 0;\n    for (DocsAndCost dim : dims) {\n      if (dim.disi != null) {\n        dim.disi.nextDoc();\n      } else if (dim.bits != null) {\n        numBits++;\n      }\n    }\n\n    final int numDims = dims.length;\n\n    Bits[] bits = new Bits[numBits];\n    Collector[] bitsSidewaysCollectors = new Collector[numBits];\n\n    DocIdSetIterator[] disis = new DocIdSetIterator[numDims-numBits];\n    Collector[] sidewaysCollectors = new Collector[numDims-numBits];\n    long drillDownCost = 0;\n    int disiUpto = 0;\n    int bitsUpto = 0;\n    for (int dim=0;dim<numDims;dim++) {\n      DocIdSetIterator disi = dims[dim].disi;\n      if (dims[dim].bits == null) {\n        disis[disiUpto] = disi;\n        sidewaysCollectors[disiUpto] = dims[dim].sidewaysCollector;\n        disiUpto++;\n        if (disi != null) {\n          drillDownCost += disi.cost();\n        }\n      } else {\n        bits[bitsUpto] = dims[dim].bits;\n        bitsSidewaysCollectors[bitsUpto] = dims[dim].sidewaysCollector;\n        bitsUpto++;\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (bitsUpto > 0 || scoreSubDocsAtOnce || baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"queryFirst: baseScorer=\" + baseScorer + \" disis.length=\" + disis.length + \" bits.length=\" + bits.length);\n      doQueryFirstScoring(collector, disis, sidewaysCollectors, bits, bitsSidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].disi == null || dims[1].disi.cost() < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, disis, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, disis, sidewaysCollectors);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(LeafCollector,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(Collector,int).mjava","sourceNew":"  @Override\n  public boolean score(LeafCollector collector, int maxDoc) throws IOException {\n    if (maxDoc != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"maxDoc must be Integer.MAX_VALUE\");\n    }\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    FakeScorer scorer = new FakeScorer();\n    collector.setScorer(scorer);\n    if (drillDownCollector != null) {\n      drillDownLeafCollector = drillDownCollector.getLeafCollector(context);\n      drillDownLeafCollector.setScorer(scorer);\n    } else {\n      drillDownLeafCollector = null;\n    }\n    for (DocsAndCost dim : dims) {\n      dim.sidewaysLeafCollector = dim.sidewaysCollector.getLeafCollector(context);\n      dim.sidewaysLeafCollector.setScorer(scorer);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    int numBits = 0;\n    for (DocsAndCost dim : dims) {\n      if (dim.disi != null) {\n        dim.disi.nextDoc();\n      } else if (dim.bits != null) {\n        numBits++;\n      }\n    }\n\n    final int numDims = dims.length;\n\n    Bits[] bits = new Bits[numBits];\n    LeafCollector[] bitsSidewaysCollectors = new LeafCollector[numBits];\n\n    DocIdSetIterator[] disis = new DocIdSetIterator[numDims-numBits];\n    LeafCollector[] sidewaysCollectors = new LeafCollector[numDims-numBits];\n    long drillDownCost = 0;\n    int disiUpto = 0;\n    int bitsUpto = 0;\n    for (int dim=0;dim<numDims;dim++) {\n      DocIdSetIterator disi = dims[dim].disi;\n      if (dims[dim].bits == null) {\n        disis[disiUpto] = disi;\n        sidewaysCollectors[disiUpto] = dims[dim].sidewaysLeafCollector;\n        disiUpto++;\n        if (disi != null) {\n          drillDownCost += disi.cost();\n        }\n      } else {\n        bits[bitsUpto] = dims[dim].bits;\n        bitsSidewaysCollectors[bitsUpto] = dims[dim].sidewaysLeafCollector;\n        bitsUpto++;\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (bitsUpto > 0 || scoreSubDocsAtOnce || baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"queryFirst: baseScorer=\" + baseScorer + \" disis.length=\" + disis.length + \" bits.length=\" + bits.length);\n      doQueryFirstScoring(collector, disis, sidewaysCollectors, bits, bitsSidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].disi == null || dims[1].disi.cost() < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, disis, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, disis, sidewaysCollectors);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean score(Collector collector, int maxDoc) throws IOException {\n    if (maxDoc != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"maxDoc must be Integer.MAX_VALUE\");\n    }\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    FakeScorer scorer = new FakeScorer();\n    collector.setScorer(scorer);\n    if (drillDownCollector != null) {\n      drillDownCollector.setScorer(scorer);\n      drillDownCollector.setNextReader(context);\n    }\n    for (DocsAndCost dim : dims) {\n      dim.sidewaysCollector.setScorer(scorer);\n      dim.sidewaysCollector.setNextReader(context);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    int numBits = 0;\n    for (DocsAndCost dim : dims) {\n      if (dim.disi != null) {\n        dim.disi.nextDoc();\n      } else if (dim.bits != null) {\n        numBits++;\n      }\n    }\n\n    final int numDims = dims.length;\n\n    Bits[] bits = new Bits[numBits];\n    Collector[] bitsSidewaysCollectors = new Collector[numBits];\n\n    DocIdSetIterator[] disis = new DocIdSetIterator[numDims-numBits];\n    Collector[] sidewaysCollectors = new Collector[numDims-numBits];\n    long drillDownCost = 0;\n    int disiUpto = 0;\n    int bitsUpto = 0;\n    for (int dim=0;dim<numDims;dim++) {\n      DocIdSetIterator disi = dims[dim].disi;\n      if (dims[dim].bits == null) {\n        disis[disiUpto] = disi;\n        sidewaysCollectors[disiUpto] = dims[dim].sidewaysCollector;\n        disiUpto++;\n        if (disi != null) {\n          drillDownCost += disi.cost();\n        }\n      } else {\n        bits[bitsUpto] = dims[dim].bits;\n        bitsSidewaysCollectors[bitsUpto] = dims[dim].sidewaysCollector;\n        bitsUpto++;\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (bitsUpto > 0 || scoreSubDocsAtOnce || baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"queryFirst: baseScorer=\" + baseScorer + \" disis.length=\" + disis.length + \" bits.length=\" + bits.length);\n      doQueryFirstScoring(collector, disis, sidewaysCollectors, bits, bitsSidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].disi == null || dims[1].disi.cost() < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, disis, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, disis, sidewaysCollectors);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["acf00221f44c5f08ccea014f2492b53af15ecd66","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae73da626f97850c922c42736f808d0378e165f0"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}