{"path":"lucene/facet/src/test/org/apache/lucene/util/collections/ObjectToFloatMapTest#test4().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/ObjectToFloatMapTest#test4().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/collections/ObjectToFloatMapTest#test4().mjava","sourceNew":"  // now with random data.. and lots of it\n  @Test\n  public void test4() {\n    ObjectToFloatMap<Integer> map = new ObjectToFloatMap<Integer>();\n    int length = ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS;\n    \n    // for a repeatable random sequence\n    long seed = random().nextLong();\n    Random random = new Random(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      map.put(i*128, value);\n    }\n\n    assertEquals(length, map.size());\n\n    // now repeat\n    random.setSeed(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      \n      assertTrue(map.containsValue(value));\n      assertTrue(map.containsKey(i*128));\n      assertEquals(0, Float.compare(value, map.remove(i*128)));\n    }\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  // now with random data.. and lots of it\n  @Test\n  public void test4() {\n    ObjectToFloatMap<Integer> map = new ObjectToFloatMap<Integer>();\n    int length = ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS;\n    \n    // for a repeatable random sequence\n    long seed = random().nextLong();\n    Random random = new Random(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      map.put(i*128, value);\n    }\n\n    assertEquals(length, map.size());\n\n    // now repeat\n    random.setSeed(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      \n      assertTrue(map.containsValue(value));\n      assertTrue(map.containsKey(i*128));\n      assertEquals(0, Float.compare(value, map.remove(i*128)));\n    }\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/ObjectToFloatMapTest#test4().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/ObjectToFloatMapTest#test4().mjava","sourceNew":"  // now with random data.. and lots of it\n  @Test\n  public void test4() {\n    ObjectToFloatMap<Integer> map = new ObjectToFloatMap<Integer>();\n    int length = ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS;\n    \n    // for a repeatable random sequence\n    long seed = random().nextLong();\n    Random random = new Random(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      map.put(i*128, value);\n    }\n\n    assertEquals(length, map.size());\n\n    // now repeat\n    random.setSeed(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      \n      assertTrue(map.containsValue(value));\n      assertTrue(map.containsKey(i*128));\n      assertEquals(0, Float.compare(value, map.remove(i*128)));\n    }\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","sourceOld":"  // now with random data.. and lots of it\n  @Test\n  public void test4() {\n    ObjectToFloatMap<Integer> map = new ObjectToFloatMap<Integer>();\n    int length = ArrayHashMapTest.RANDOM_TEST_NUM_ITERATIONS;\n    \n    // for a repeatable random sequence\n    long seed = random().nextLong();\n    Random random = new Random(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      map.put(i*128, value);\n    }\n\n    assertEquals(length, map.size());\n\n    // now repeat\n    random.setSeed(seed);\n\n    for (int i = 0; i < length; ++i) {\n      int value = random.nextInt(Integer.MAX_VALUE);\n      \n      assertTrue(map.containsValue(value));\n      assertTrue(map.containsKey(i*128));\n      assertEquals(0, Float.compare(value, map.remove(i*128)));\n    }\n    assertEquals(0, map.size());\n    assertTrue(map.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}