{"path":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","commits":[{"id":"f6dba7919de4ff4ed6ff17f90619203772722f08","date":1180451647,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","pathOld":"/dev/null","sourceNew":"      public void tweakBufferSizes() {\n        Iterator it = allIndexInputs.iterator();\n        int count = 0;\n        while(it.hasNext()) {\n          BufferedIndexInput bii = (BufferedIndexInput) it.next();\n          int bufferSize = 1024+(int) Math.abs(rand.nextInt() % 32768);\n          bii.setBufferSize(bufferSize);\n          count++;\n        }\n        //System.out.println(\"tweak'd \" + count + \" buffer sizes\");\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d34c8b8a760c050d0e5c4b802584b3de2002e431","date":1220117586,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","sourceNew":"      public void tweakBufferSizes() {\n        Iterator it = allIndexInputs.iterator();\n        //int count = 0;\n        while(it.hasNext()) {\n          BufferedIndexInput bii = (BufferedIndexInput) it.next();\n          int bufferSize = 1024+(int) Math.abs(rand.nextInt() % 32768);\n          bii.setBufferSize(bufferSize);\n          //count++;\n        }\n        //System.out.println(\"tweak'd \" + count + \" buffer sizes\");\n      }\n\n","sourceOld":"      public void tweakBufferSizes() {\n        Iterator it = allIndexInputs.iterator();\n        int count = 0;\n        while(it.hasNext()) {\n          BufferedIndexInput bii = (BufferedIndexInput) it.next();\n          int bufferSize = 1024+(int) Math.abs(rand.nextInt() % 32768);\n          bii.setBufferSize(bufferSize);\n          count++;\n        }\n        //System.out.println(\"tweak'd \" + count + \" buffer sizes\");\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","sourceNew":"      public void tweakBufferSizes() {\n        //int count = 0;\n        for (final IndexInput ip : allIndexInputs) {\n          BufferedIndexInput bii = (BufferedIndexInput) ip;\n          int bufferSize = 1024+(int) Math.abs(rand.nextInt() % 32768);\n          bii.setBufferSize(bufferSize);\n          //count++;\n        }\n        //System.out.println(\"tweak'd \" + count + \" buffer sizes\");\n      }\n\n","sourceOld":"      public void tweakBufferSizes() {\n        Iterator it = allIndexInputs.iterator();\n        //int count = 0;\n        while(it.hasNext()) {\n          BufferedIndexInput bii = (BufferedIndexInput) it.next();\n          int bufferSize = 1024+(int) Math.abs(rand.nextInt() % 32768);\n          bii.setBufferSize(bufferSize);\n          //count++;\n        }\n        //System.out.println(\"tweak'd \" + count + \" buffer sizes\");\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","sourceNew":"      public void tweakBufferSizes() {\n        //int count = 0;\n        for (final IndexInput ip : allIndexInputs) {\n          BufferedIndexInput bii = (BufferedIndexInput) ip;\n          int bufferSize = 1024+Math.abs(rand.nextInt() % 32768);\n          bii.setBufferSize(bufferSize);\n          //count++;\n        }\n        //System.out.println(\"tweak'd \" + count + \" buffer sizes\");\n      }\n\n","sourceOld":"      public void tweakBufferSizes() {\n        //int count = 0;\n        for (final IndexInput ip : allIndexInputs) {\n          BufferedIndexInput bii = (BufferedIndexInput) ip;\n          int bufferSize = 1024+(int) Math.abs(rand.nextInt() % 32768);\n          bii.setBufferSize(bufferSize);\n          //count++;\n        }\n        //System.out.println(\"tweak'd \" + count + \" buffer sizes\");\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","pathOld":"src/test/org/apache/lucene/store/TestBufferedIndexInput.MockFSDirectory#tweakBufferSizes().mjava","sourceNew":"      public void tweakBufferSizes() {\n        //int count = 0;\n        for (final IndexInput ip : allIndexInputs) {\n          BufferedIndexInput bii = (BufferedIndexInput) ip;\n          int bufferSize = 1024+Math.abs(rand.nextInt() % 32768);\n          bii.setBufferSize(bufferSize);\n          //count++;\n        }\n        //System.out.println(\"tweak'd \" + count + \" buffer sizes\");\n      }\n\n","sourceOld":"      public void tweakBufferSizes() {\n        //int count = 0;\n        for (final IndexInput ip : allIndexInputs) {\n          BufferedIndexInput bii = (BufferedIndexInput) ip;\n          int bufferSize = 1024+Math.abs(rand.nextInt() % 32768);\n          bii.setBufferSize(bufferSize);\n          //count++;\n        }\n        //System.out.println(\"tweak'd \" + count + \" buffer sizes\");\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f6dba7919de4ff4ed6ff17f90619203772722f08":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d34c8b8a760c050d0e5c4b802584b3de2002e431":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["d34c8b8a760c050d0e5c4b802584b3de2002e431"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"f6dba7919de4ff4ed6ff17f90619203772722f08":["d34c8b8a760c050d0e5c4b802584b3de2002e431"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"d34c8b8a760c050d0e5c4b802584b3de2002e431":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}