{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e75d826d1f37079d934ae6ec2016a235d96c041","date":1321875173,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      public void update(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      public void update(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      public void update(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1","date":1378862385,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab8657e27d6bdd6107b9d64da71c635e1f47b59e","date":1390524786,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<String>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cba13865da71de3b9b0937fcbc66d726089356d","date":1537507909,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"074c4e385ea7c9ae29556e95c886ea0ccc614029","date":1571011658,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", (Iterable<String>) values::iterator);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = (document, req, commitWithin, overwrite) -> {\n      Assert.assertNotNull(req.getParams());\n      docs.add(document);\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()), handler);\n\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\",\n        iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#testIteratable().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", (Iterable<String>) values::iterator);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = (document, req, commitWithin, overwrite) -> {\n      Assert.assertNotNull(req.getParams());\n      docs.add(document);\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()), handler);\n\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\",\n        iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 20-Sep-2018\n  public void testIteratable() throws IOException {\n    final List<String> values = new ArrayList<>();\n    values.add(\"iterItem1\");\n    values.add(\"iterItem2\");\n\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteByQuery(\"*:*\");\n\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\");\n    // imagine someone adding a custom Bean that implements Iterable \n    // but is not a Collection\n    doc.addField(\"iter\", new Iterable<String>() { \n        @Override\n        public Iterator<String> iterator() { return values.iterator(); } \n      });\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<>();\n    JavaBinUpdateRequestCodec.StreamingUpdateHandler handler = new JavaBinUpdateRequestCodec.StreamingUpdateHandler() {\n      @Override\n      public void update(SolrInputDocument document, UpdateRequest req, Integer commitWithin, Boolean overwrite) {\n        Assert.assertNotNull(req.getParams());\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n \n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n\n    SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(0);\n    SolrInputField iter = outDoc.getField(\"iter\");\n    Assert.assertNotNull(\"iter field is null\", iter);\n    Object iterVal = iter.getValue();\n    Assert.assertTrue(\"iterVal is not a Collection\", \n                      iterVal instanceof Collection);\n    Assert.assertEquals(\"iterVal contents\", values, iterVal);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["0e75d826d1f37079d934ae6ec2016a235d96c041","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["4cba13865da71de3b9b0937fcbc66d726089356d"],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e75d826d1f37079d934ae6ec2016a235d96c041":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cba13865da71de3b9b0937fcbc66d726089356d":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"acd9883560fd89e6448b2b447302fe543040cd4f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7530de27b87b961b51f01bd1299b7004d46e8823":["0e75d826d1f37079d934ae6ec2016a235d96c041"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["074c4e385ea7c9ae29556e95c886ea0ccc614029"],"b0b597c65628ca9e73913a07e81691f8229bae35":["8d35c84fdef07284c122012ca4000d3b7285a66e","074c4e385ea7c9ae29556e95c886ea0ccc614029"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acd9883560fd89e6448b2b447302fe543040cd4f"],"d5fc588fc7c6e55c0d778665292d023bf8d5f3b1":["ab8657e27d6bdd6107b9d64da71c635e1f47b59e"],"c26f00b574427b55127e869b935845554afde1fa":["0e75d826d1f37079d934ae6ec2016a235d96c041"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["074c4e385ea7c9ae29556e95c886ea0ccc614029","b0b597c65628ca9e73913a07e81691f8229bae35"],"ab8657e27d6bdd6107b9d64da71c635e1f47b59e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"0e75d826d1f37079d934ae6ec2016a235d96c041":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"4cba13865da71de3b9b0937fcbc66d726089356d":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d5fc588fc7c6e55c0d778665292d023bf8d5f3b1"],"acd9883560fd89e6448b2b447302fe543040cd4f":["4cba13865da71de3b9b0937fcbc66d726089356d"],"074c4e385ea7c9ae29556e95c886ea0ccc614029":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}