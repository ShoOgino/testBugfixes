{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testConsistentFieldNumbers().mjava","commits":[{"id":"a6b82a3644db30161c3cbd3e23aeefe19cb88113","date":1435478870,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testConsistentFieldNumbers().mjava","pathOld":"/dev/null","sourceNew":"  public void testConsistentFieldNumbers() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we use IW.rollback and then open another, the 2nd IW can easily write to the same segment name:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Empty first commit:\n    w.commit();\n\n    Document doc = new Document();\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.maxDoc());\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(2, r2.maxDoc());\n    w.rollback();\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setIndexCommit(r2.getIndexCommit());\n\n    IndexWriter w2 = new IndexWriter(dir, iwc);\n    r2.close();\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w2.addDocument(doc);\n    w2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testConsistentFieldNumbers().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testConsistentFieldNumbers().mjava","sourceNew":"  public void testConsistentFieldNumbers() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we use IW.rollback and then open another, the 2nd IW can easily write to the same segment name:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Empty first commit:\n    w.commit();\n\n    Document doc = new Document();\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.maxDoc());\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(2, r2.maxDoc());\n    w.rollback();\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setIndexCommit(r2.getIndexCommit());\n\n    IndexWriter w2 = new IndexWriter(dir, iwc);\n    r2.close();\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w2.addDocument(doc);\n    w2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConsistentFieldNumbers() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we use IW.rollback and then open another, the 2nd IW can easily write to the same segment name:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Empty first commit:\n    w.commit();\n\n    Document doc = new Document();\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.maxDoc());\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(2, r2.maxDoc());\n    w.rollback();\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setIndexCommit(r2.getIndexCommit());\n\n    IndexWriter w2 = new IndexWriter(dir, iwc);\n    r2.close();\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w2.addDocument(doc);\n    w2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testConsistentFieldNumbers().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testConsistentFieldNumbers().mjava","sourceNew":"  public void testConsistentFieldNumbers() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Empty first commit:\n    w.commit();\n\n    Document doc = new Document();\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.maxDoc());\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(2, r2.maxDoc());\n    w.rollback();\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setIndexCommit(r2.getIndexCommit());\n\n    IndexWriter w2 = new IndexWriter(dir, iwc);\n    r2.close();\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w2.addDocument(doc);\n    w2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConsistentFieldNumbers() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we use IW.rollback and then open another, the 2nd IW can easily write to the same segment name:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Empty first commit:\n    w.commit();\n\n    Document doc = new Document();\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.maxDoc());\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(2, r2.maxDoc());\n    w.rollback();\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setIndexCommit(r2.getIndexCommit());\n\n    IndexWriter w2 = new IndexWriter(dir, iwc);\n    r2.close();\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w2.addDocument(doc);\n    w2.close();\n    dir.close();\n  }\n\n","bugFix":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testConsistentFieldNumbers().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterFromReader#testConsistentFieldNumbers().mjava","sourceNew":"  public void testConsistentFieldNumbers() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Empty first commit:\n    w.commit();\n\n    Document doc = new Document();\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.maxDoc());\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(2, r2.maxDoc());\n    w.rollback();\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setIndexCommit(r2.getIndexCommit());\n\n    IndexWriter w2 = new IndexWriter(dir, iwc);\n    r2.close();\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w2.addDocument(doc);\n    w2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testConsistentFieldNumbers() throws Exception {\n    Directory dir = newDirectory();\n    if (dir instanceof MockDirectoryWrapper) {\n      // Since we use IW.rollback and then open another, the 2nd IW can easily write to the same segment name:\n      ((MockDirectoryWrapper) dir).setPreventDoubleWrite(false);\n    }\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    // Empty first commit:\n    w.commit();\n\n    Document doc = new Document();\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r = DirectoryReader.open(w);\n    assertEquals(1, r.maxDoc());\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    w.addDocument(doc);\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    r.close();\n    assertEquals(2, r2.maxDoc());\n    w.rollback();\n\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setIndexCommit(r2.getIndexCommit());\n\n    IndexWriter w2 = new IndexWriter(dir, iwc);\n    r2.close();\n\n    doc = new Document();\n    doc.add(newStringField(\"f1\", \"foo\", Field.Store.NO));\n    doc.add(newStringField(\"f0\", \"foo\", Field.Store.NO));\n    w2.addDocument(doc);\n    w2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2a1862266772deb28cdcb7d996b64d2177022687":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["2a1862266772deb28cdcb7d996b64d2177022687"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2a1862266772deb28cdcb7d996b64d2177022687","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"]},"commit2Childs":{"2a1862266772deb28cdcb7d996b64d2177022687":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6b82a3644db30161c3cbd3e23aeefe19cb88113"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6b82a3644db30161c3cbd3e23aeefe19cb88113":["2a1862266772deb28cdcb7d996b64d2177022687"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}