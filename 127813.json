{"path":"solr/core/src/java/org/apache/solr/util/hll/HLL#sparseProbabilisticAlgorithmCardinality().mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#sparseProbabilisticAlgorithmCardinality().mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    // Cardinality helpers\n    /**\n     * Computes the exact cardinality value returned by the HLL algorithm when\n     * represented as a {@link HLLType#SPARSE} HLL. Kept\n     * separate from {@link #cardinality()} for testing purposes. {@link #type}\n     * must be {@link HLLType#SPARSE}.\n     *\n     * @return the exact, unrounded cardinality given by the HLL algorithm\n     */\n    /*package, for testing*/ double sparseProbabilisticAlgorithmCardinality() {\n        final int m = this.m/*for performance*/;\n\n        // compute the \"indicator function\" -- sum(2^(-M[j])) where M[j] is the\n        // 'j'th register value\n        double sum = 0;\n        int numberOfZeroes = 0/*\"V\" in the paper*/;\n        for(int j=0; j<m; j++) {\n            final long register;\n            if (sparseProbabilisticStorage.containsKey(j)) {\n              register = sparseProbabilisticStorage.lget();\n            } else {\n              register = 0;\n            }\n\n            sum += 1.0 / (1L << register);\n            if(register == 0L) numberOfZeroes++;\n        }\n\n        // apply the estimate and correction to the indicator function\n        final double estimator = alphaMSquared / sum;\n        if((numberOfZeroes != 0) && (estimator < smallEstimatorCutoff)) {\n            return HLLUtil.smallEstimator(m, numberOfZeroes);\n        } else if(estimator <= largeEstimatorCutoff) {\n            return estimator;\n        } else {\n            return HLLUtil.largeEstimator(log2m, regwidth, estimator);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#sparseProbabilisticAlgorithmCardinality().mjava","pathOld":"/dev/null","sourceNew":"    // ------------------------------------------------------------------------\n    // Cardinality helpers\n    /**\n     * Computes the exact cardinality value returned by the HLL algorithm when\n     * represented as a {@link HLLType#SPARSE} HLL. Kept\n     * separate from {@link #cardinality()} for testing purposes. {@link #type}\n     * must be {@link HLLType#SPARSE}.\n     *\n     * @return the exact, unrounded cardinality given by the HLL algorithm\n     */\n    /*package, for testing*/ double sparseProbabilisticAlgorithmCardinality() {\n        final int m = this.m/*for performance*/;\n\n        // compute the \"indicator function\" -- sum(2^(-M[j])) where M[j] is the\n        // 'j'th register value\n        double sum = 0;\n        int numberOfZeroes = 0/*\"V\" in the paper*/;\n        for(int j=0; j<m; j++) {\n            final long register;\n            if (sparseProbabilisticStorage.containsKey(j)) {\n              register = sparseProbabilisticStorage.lget();\n            } else {\n              register = 0;\n            }\n\n            sum += 1.0 / (1L << register);\n            if(register == 0L) numberOfZeroes++;\n        }\n\n        // apply the estimate and correction to the indicator function\n        final double estimator = alphaMSquared / sum;\n        if((numberOfZeroes != 0) && (estimator < smallEstimatorCutoff)) {\n            return HLLUtil.smallEstimator(m, numberOfZeroes);\n        } else if(estimator <= largeEstimatorCutoff) {\n            return estimator;\n        } else {\n            return HLLUtil.largeEstimator(log2m, regwidth, estimator);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","date":1440409984,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLL#sparseProbabilisticAlgorithmCardinality().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/hll/HLL#sparseProbabilisticAlgorithmCardinality().mjava","sourceNew":"    // ------------------------------------------------------------------------\n    // Cardinality helpers\n    /**\n     * Computes the exact cardinality value returned by the HLL algorithm when\n     * represented as a {@link HLLType#SPARSE} HLL. Kept\n     * separate from {@link #cardinality()} for testing purposes. {@link #type}\n     * must be {@link HLLType#SPARSE}.\n     *\n     * @return the exact, unrounded cardinality given by the HLL algorithm\n     */\n    /*package, for testing*/ double sparseProbabilisticAlgorithmCardinality() {\n        final int m = this.m/*for performance*/;\n\n        // compute the \"indicator function\" -- sum(2^(-M[j])) where M[j] is the\n        // 'j'th register value\n        double sum = 0;\n        int numberOfZeroes = 0/*\"V\" in the paper*/;\n        for(int j=0; j<m; j++) {\n            final long register;\n            if (sparseProbabilisticStorage.containsKey(j)) {\n              register = sparseProbabilisticStorage.get(j);\n            } else {\n              register = 0;\n            }\n\n            sum += 1.0 / (1L << register);\n            if(register == 0L) numberOfZeroes++;\n        }\n\n        // apply the estimate and correction to the indicator function\n        final double estimator = alphaMSquared / sum;\n        if((numberOfZeroes != 0) && (estimator < smallEstimatorCutoff)) {\n            return HLLUtil.smallEstimator(m, numberOfZeroes);\n        } else if(estimator <= largeEstimatorCutoff) {\n            return estimator;\n        } else {\n            return HLLUtil.largeEstimator(log2m, regwidth, estimator);\n        }\n    }\n\n","sourceOld":"    // ------------------------------------------------------------------------\n    // Cardinality helpers\n    /**\n     * Computes the exact cardinality value returned by the HLL algorithm when\n     * represented as a {@link HLLType#SPARSE} HLL. Kept\n     * separate from {@link #cardinality()} for testing purposes. {@link #type}\n     * must be {@link HLLType#SPARSE}.\n     *\n     * @return the exact, unrounded cardinality given by the HLL algorithm\n     */\n    /*package, for testing*/ double sparseProbabilisticAlgorithmCardinality() {\n        final int m = this.m/*for performance*/;\n\n        // compute the \"indicator function\" -- sum(2^(-M[j])) where M[j] is the\n        // 'j'th register value\n        double sum = 0;\n        int numberOfZeroes = 0/*\"V\" in the paper*/;\n        for(int j=0; j<m; j++) {\n            final long register;\n            if (sparseProbabilisticStorage.containsKey(j)) {\n              register = sparseProbabilisticStorage.lget();\n            } else {\n              register = 0;\n            }\n\n            sum += 1.0 / (1L << register);\n            if(register == 0L) numberOfZeroes++;\n        }\n\n        // apply the estimate and correction to the indicator function\n        final double estimator = alphaMSquared / sum;\n        if((numberOfZeroes != 0) && (estimator < smallEstimatorCutoff)) {\n            return HLLUtil.smallEstimator(m, numberOfZeroes);\n        } else if(estimator <= largeEstimatorCutoff) {\n            return estimator;\n        } else {\n            return HLLUtil.largeEstimator(log2m, regwidth, estimator);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}