{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","commits":[{"id":"08ff4ce2031320460b178bbe9ab0bbb5b04f58ec","date":1498503790,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testNodeLostMultipleReplica().mjava","sourceNew":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","sourceOld":"  public void testNodeLostMultipleReplica() {\n    String nodeValues = \" {\" +\n        \"    'node4':{\" +\n        \"      'node':'10.0.0.4:8987_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node3':{\" +\n        \"      'node':'10.0.0.4:8989_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"    'node2':{\" +\n        \"      'node':'10.0.0.4:7574_solr',\" +\n        \"      'cores':1,\" +\n        \"      'freedisk':884.7097854614258},\" +\n        \"}\";\n\n    ClusterDataProvider provider = getClusterDataProvider((Map<String, Map>) Utils.fromJSONString(nodeValues), clusterState);\n    Map policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    AutoScalingConfig config = new AutoScalingConfig(policies);\n    Policy policy = config.getPolicy();\n    Policy.Session session = policy.createSession(provider);\n    Policy.Suggester suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    SolrRequest operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // lets change the policy such that all replicas that were on node1\n    // can now fit on node2\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNull(operation);\n\n    // now lets change the policy such that a node can have 2 shard2 replicas\n    policies = (Map) Utils.fromJSONString(\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 50}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, 'nodeRole': 'overseer'}\" +\n        \"    { 'replica': '<2', 'shard': 'shard1', 'node': '#ANY'},\" +\n        \"    { 'replica': '<3', 'shard': 'shard2', 'node': '#ANY'},\" +\n        \"  ]\" +\n        \"}\");\n    config = new AutoScalingConfig(policies);\n    policy = config.getPolicy();\n    session = policy.createSession(provider);\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r3\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertNotNull(operation);\n    assertEquals(\"node2\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r5\", operation.getParams().get(\"replica\"));\n\n    session = suggester.getSession();\n    suggester = session.getSuggester(MOVEREPLICA)\n        .hint(Hint.SRC_NODE, \"node1\");\n    operation = suggester.getOperation();\n    assertEquals(\"node3\", operation.getParams().get(\"targetNode\"));\n    assertEquals(\"r1\", operation.getParams().get(\"replica\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["08ff4ce2031320460b178bbe9ab0bbb5b04f58ec","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"08ff4ce2031320460b178bbe9ab0bbb5b04f58ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","08ff4ce2031320460b178bbe9ab0bbb5b04f58ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08ff4ce2031320460b178bbe9ab0bbb5b04f58ec":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}