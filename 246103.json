{"path":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,int,IOContext).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, int codecId, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (codecId == fieldInfo.getCodecId() && fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              codecId, fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DocValuesWriterBase.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DefaultDocValuesConsumer.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05","date":1323284809,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DocValuesWriterBase.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValuesType(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DocValuesWriterBase.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, DocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, DocValues> values = new TreeMap<String, DocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DocValuesWriterBase.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValuesType(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DocValuesWriterBase.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValuesType(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, DocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, DocValues> values = new TreeMap<String, DocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DocValuesWriterBase.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValuesType(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, IndexDocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, IndexDocValues> values = new TreeMap<String, IndexDocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DocValuesWriterBase.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValues(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesReaderBase#load(FieldInfos,String,int,Directory,IOContext).mjava","sourceNew":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, DocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, DocValues> values = new TreeMap<String, DocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DocValuesWriterBase.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValuesType(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","sourceOld":"  // Only opens files... doesn't actually load any values\n  protected TreeMap<String, DocValues> load(FieldInfos fieldInfos,\n      String segment, int docCount, Directory dir, IOContext context)\n      throws IOException {\n    TreeMap<String, DocValues> values = new TreeMap<String, DocValues>();\n    boolean success = false;\n    try {\n\n      for (FieldInfo fieldInfo : fieldInfos) {\n        if (fieldInfo.hasDocValues()) {\n          final String field = fieldInfo.name;\n          // TODO can we have a compound file per segment and codec for\n          // docvalues?\n          final String id = DocValuesWriterBase.docValuesId(segment,\n              fieldInfo.number);\n          values.put(field,\n              loadDocValues(docCount, dir, id, fieldInfo.getDocValuesType(), context));\n        }\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        // if we fail we must close all opened resources if there are any\n        closeInternal(values.values());\n      }\n    }\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05"],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"ecd41ba3cdd1b4d825aa53d1987e4360cf45cb05":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}