{"path":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","commits":[{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   */\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   */\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","sourceNew":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   */\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","sourceNew":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   */\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","sourceNew":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   */\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c850d2a2bc88f4751bf05e1ee6799940462331eb","date":1472140972,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/DataOutput#writeStringSet(Set[String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Writes a String set.\n   * <p>\n   * First the size is written as an {@link #writeInt(int) Int32},\n   * followed by each value written as a\n   * {@link #writeString(String) String}.\n   * \n   * @param set Input set. May be null (equivalent to an empty set)\n   * @deprecated Use {@link #writeMapOfStrings(Map)} instead.\n   */\n  @Deprecated\n  public void writeStringSet(Set<String> set) throws IOException {\n    if (set == null) {\n      writeInt(0);\n    } else {\n      writeInt(set.size());\n      for(String value : set) {\n        writeString(value);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","79700663e164dece87bed4adfd3e28bab6cb1385"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1494abe5dc85557ec2e2772f87660d48f831c3a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79700663e164dece87bed4adfd3e28bab6cb1385":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c850d2a2bc88f4751bf05e1ee6799940462331eb":["79700663e164dece87bed4adfd3e28bab6cb1385"],"299a2348fa24151d150182211b6208a38e5e3450":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","79700663e164dece87bed4adfd3e28bab6cb1385"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["79700663e164dece87bed4adfd3e28bab6cb1385","c850d2a2bc88f4751bf05e1ee6799940462331eb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["79700663e164dece87bed4adfd3e28bab6cb1385","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","1494abe5dc85557ec2e2772f87660d48f831c3a5"],"79700663e164dece87bed4adfd3e28bab6cb1385":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c850d2a2bc88f4751bf05e1ee6799940462331eb","299a2348fa24151d150182211b6208a38e5e3450","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c850d2a2bc88f4751bf05e1ee6799940462331eb":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"299a2348fa24151d150182211b6208a38e5e3450":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}