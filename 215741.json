{"path":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","commits":[{"id":"6acdc953f67c10fad15168f245289efcd16588d7","date":1320400495,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,int,int,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param mergeFactor mergeFactor to use when indexing\n   * @param ramMB the max amount or memory in MB to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, int mergeFactor, int ramMB, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(Version.LUCENE_CURRENT, null).setRAMBufferSizeMB(ramMB));\n      ((TieredMergePolicy) writer.getConfig().getMergePolicy()).setMaxMergeAtOnce(mergeFactor);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param optimize whether or not the spellcheck index should be optimized\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean optimize) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      // close writer\n      if (optimize)\n        writer.optimize();\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator());\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copyChars(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copy(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b81e3ff3a32401864ef467eed77b80685e20169","date":1327850263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicIndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copyChars(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copyChars(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copyChars(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicIndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copyChars(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copyChars(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copyChars(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d334a3e8e6b94298d8cf2802a403a096c06f0b92","date":1329766559,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copyChars(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        Iterator<String> iter = dict.getWordsIterator();\n        BytesRef currentTerm = new BytesRef();\n        \n        terms: while (iter.hasNext()) {\n          String word = iter.next();\n  \n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            // we have a non-empty index, check if the term exists\n            currentTerm.copyChars(word);\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/SpellChecker#indexDictionary(Dictionary,IndexWriterConfig,boolean).mjava","sourceNew":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","sourceOld":"  /**\n   * Indexes the data from the given {@link Dictionary}.\n   * @param dict Dictionary to index\n   * @param config {@link IndexWriterConfig} to use\n   * @param fullMerge whether or not the spellcheck index should be fully merged\n   * @throws AlreadyClosedException if the Spellchecker is already closed\n   * @throws IOException\n   */\n  public final void indexDictionary(Dictionary dict, IndexWriterConfig config, boolean fullMerge) throws IOException {\n    synchronized (modifyCurrentIndexLock) {\n      ensureOpen();\n      final Directory dir = this.spellIndex;\n      final IndexWriter writer = new IndexWriter(dir, config);\n      IndexSearcher indexSearcher = obtainSearcher();\n      final List<TermsEnum> termsEnums = new ArrayList<TermsEnum>();\n\n      final IndexReader reader = searcher.getIndexReader();\n      if (reader.maxDoc() > 0) {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) throws IOException {\n            Terms terms = r.terms(F_WORD);\n            if (terms != null)\n              termsEnums.add(terms.iterator(null));\n          }\n        }.run();\n      }\n      \n      boolean isEmpty = termsEnums.isEmpty();\n\n      try { \n        BytesRefIterator iter = dict.getWordsIterator();\n        BytesRef currentTerm;\n        \n        terms: while ((currentTerm = iter.next()) != null) {\n  \n          String word = currentTerm.utf8ToString();\n          int len = word.length();\n          if (len < 3) {\n            continue; // too short we bail but \"too long\" is fine...\n          }\n  \n          if (!isEmpty) {\n            for (TermsEnum te : termsEnums) {\n              if (te.seekExact(currentTerm, false)) {\n                continue terms;\n              }\n            }\n          }\n  \n          // ok index the word\n          Document doc = createDocument(word, getMin(len), getMax(len));\n          writer.addDocument(doc);\n        }\n      } finally {\n        releaseSearcher(indexSearcher);\n      }\n      if (fullMerge) {\n        writer.forceMerge(1);\n      }\n      // close writer\n      writer.close();\n      // TODO: this isn't that great, maybe in the future SpellChecker should take\n      // IWC in its ctor / keep its writer open?\n      \n      // also re-open the spell index to see our own changes when the next suggestion\n      // is fetched:\n      swapSearcher(dir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"9b81e3ff3a32401864ef467eed77b80685e20169":["e6e919043fa85ee891123768dd655a98edbbf63c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["5cab9a86bd67202d20b6adc463008c8e982b070a","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["9b81e3ff3a32401864ef467eed77b80685e20169"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["6acdc953f67c10fad15168f245289efcd16588d7"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3cc749c053615f5871f3b95715fe292f34e70a53"],"6acdc953f67c10fad15168f245289efcd16588d7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["e6e919043fa85ee891123768dd655a98edbbf63c","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9b81e3ff3a32401864ef467eed77b80685e20169":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"d334a3e8e6b94298d8cf2802a403a096c06f0b92":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6acdc953f67c10fad15168f245289efcd16588d7"],"3cc749c053615f5871f3b95715fe292f34e70a53":["e6e919043fa85ee891123768dd655a98edbbf63c"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"e6e919043fa85ee891123768dd655a98edbbf63c":["9b81e3ff3a32401864ef467eed77b80685e20169","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d334a3e8e6b94298d8cf2802a403a096c06f0b92"],"6acdc953f67c10fad15168f245289efcd16588d7":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}