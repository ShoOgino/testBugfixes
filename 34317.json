{"path":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllEqual().mjava","commits":[{"id":"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","date":1342443326,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllEqual().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testPForAllZeros().mjava","sourceNew":"  /**\n   * Should not encode extra information other than single int\n   */\n  public void testAllEqual() throws Exception {\n    initRandom();\n    int sz=ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data=new int[sz];\n    byte[] res = new byte[sz*8];\n    int[] copy = new int[sz];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    int ensz;\n    int header;\n\n    Arrays.fill(data,gen.nextInt());\n    header = ForUtil.compress(data,resBuffer); // test For\n    ensz = ForUtil.getEncodedSize(header);\n    assert ensz == 4;\n\n    ForUtil.decompress(resBuffer,copy,header);\n    assert cmp(data,sz,copy,sz)==true;\n\n    Arrays.fill(data,gen.nextInt());\n    header = PForUtil.compress(data,resBuffer); // test PFor\n    ensz = PForUtil.getEncodedSize(header);\n    assert ensz == 4;\n\n    PForUtil.decompress(resBuffer,copy,header);\n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","sourceOld":"  /**\n   * Should not encode extra information other than header\n   */\n  public void testPForAllZeros() throws Exception {\n    int sz=ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int ensz;\n    int[] data=new int[sz];\n    byte[] res = new byte[4+sz*8];\n    int[] copy = new int[sz];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n\n    Arrays.fill(data,0);\n    ensz = ForUtil.compress(data,sz,resBuffer); // test For\n    ForUtil.decompress(resBuffer,copy);\n    assert ensz == 4;\n    assert cmp(data,sz,copy,sz)==true;\n\n    Arrays.fill(data,0);\n    ensz = PForUtil.compress(data,sz,resBuffer); // test PFor\n    PForUtil.decompress(resBuffer,copy);\n    assert ensz == 4;\n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testAllEqual().mjava","sourceNew":null,"sourceOld":"  /**\n   * Should not encode extra information other than single int\n   */\n  public void testAllEqual() throws Exception {\n    initRandom();\n    int sz=ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    int[] data=new int[sz];\n    byte[] res = new byte[sz*8];\n    int[] copy = new int[sz];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    int ensz;\n    int header;\n\n    Arrays.fill(data,gen.nextInt());\n    header = ForUtil.compress(data,resBuffer); // test For\n    ensz = ForUtil.getEncodedSize(header);\n    assert ensz == 4;\n\n    ForUtil.decompress(resBuffer,copy,header);\n    assert cmp(data,sz,copy,sz)==true;\n\n    Arrays.fill(data,gen.nextInt());\n    header = PForUtil.compress(data,resBuffer); // test PFor\n    ensz = PForUtil.getEncodedSize(header);\n    assert ensz == 4;\n\n    PForUtil.decompress(resBuffer,copy,header);\n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a91a0a325d8dbf4d5759c5b368c5eae7ec8483b5":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}