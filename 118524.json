{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (pcmList == null) {\n      pcmList = new ArrayList<OffCorrectMap>();\n    }\n    pcmList.add(new OffCorrectMap(off, cumulativeDiff));\n  }\n\n","sourceOld":"  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (pcmList == null) {\n      pcmList = new ArrayList<OffCorrectMap>();\n    }\n    pcmList.add(new OffCorrectMap(off, cumulativeDiff));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2eb61c2f9d963a72b965977387ef58e30adec4c8","date":1282919602,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    offsets[size] = off;\n    diffs[size++] = cumulativeDiff; \n  }\n\n","sourceOld":"  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (pcmList == null) {\n      pcmList = new ArrayList<OffCorrectMap>();\n    }\n    pcmList.add(new OffCorrectMap(off, cumulativeDiff));\n  }\n\n","bugFix":null,"bugIntro":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    offsets[size] = off;\n    diffs[size++] = cumulativeDiff; \n  }\n\n","sourceOld":"  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (pcmList == null) {\n      pcmList = new ArrayList<OffCorrectMap>();\n    }\n    pcmList.add(new OffCorrectMap(off, cumulativeDiff));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3a908bacd530957eaa6d2dfebdd534afd9ac60e","date":1327209646,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","sourceOld":"  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    offsets[size] = off;\n    diffs[size++] = cumulativeDiff; \n  }\n\n","bugFix":["2eb61c2f9d963a72b965977387ef58e30adec4c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579dc30b5d3235c34cda518b2b6018d71a61879c","date":1327235122,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","sourceOld":"  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    offsets[size] = off;\n    diffs[size++] = cumulativeDiff; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","sourceOld":"  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    offsets[size] = off;\n    diffs[size++] = cumulativeDiff; \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3c513f6a7b209507ab4d62b6329103b8fcb80f","date":1327704228,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size - 1])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size - 1] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size - 1])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size - 1] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size - 1])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size - 1] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/charfilter/BaseCharFilter#addOffCorrectMap(int,int).mjava","sourceNew":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size - 1])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size - 1] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   *   Adds an offset correction mapping at the given output stream offset.\n   * </p>\n   * <p>\n   *   Assumption: the offset given with each successive call to this method\n   *   will not be smaller than the offset given at the previous invocation.\n   * </p>\n   *\n   * @param off The output stream offset at which to apply the correction\n   * @param cumulativeDiff The input offset is given by adding this\n   *                       to the output offset\n   */\n  protected void addOffCorrectMap(int off, int cumulativeDiff) {\n    if (offsets == null) {\n      offsets = new int[64];\n      diffs = new int[64];\n    } else if (size == offsets.length) {\n      offsets = ArrayUtil.grow(offsets);\n      diffs = ArrayUtil.grow(diffs);\n    }\n    \n    assert (size == 0 || off >= offsets[size - 1])\n        : \"Offset #\" + size + \"(\" + off + \") is less than the last recorded offset \"\n          + offsets[size - 1] + \"\\n\" + Arrays.toString(offsets) + \"\\n\" + Arrays.toString(diffs);\n    \n    if (size == 0 || off != offsets[size - 1]) {\n      offsets[size] = off;\n      diffs[size++] = cumulativeDiff;\n    } else { // Overwrite the diff at the last recorded offset\n      diffs[size - 1] = cumulativeDiff;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["af3c513f6a7b209507ab4d62b6329103b8fcb80f"],"2eb61c2f9d963a72b965977387ef58e30adec4c8":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["579dc30b5d3235c34cda518b2b6018d71a61879c","af3c513f6a7b209507ab4d62b6329103b8fcb80f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["2eb61c2f9d963a72b965977387ef58e30adec4c8","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["2eb61c2f9d963a72b965977387ef58e30adec4c8"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","2eb61c2f9d963a72b965977387ef58e30adec4c8"],"579dc30b5d3235c34cda518b2b6018d71a61879c":["2eb61c2f9d963a72b965977387ef58e30adec4c8","e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"af3c513f6a7b209507ab4d62b6329103b8fcb80f":["e3a908bacd530957eaa6d2dfebdd534afd9ac60e"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","af3c513f6a7b209507ab4d62b6329103b8fcb80f"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2eb61c2f9d963a72b965977387ef58e30adec4c8":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","e3a908bacd530957eaa6d2dfebdd534afd9ac60e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","579dc30b5d3235c34cda518b2b6018d71a61879c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"e3a908bacd530957eaa6d2dfebdd534afd9ac60e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","579dc30b5d3235c34cda518b2b6018d71a61879c","af3c513f6a7b209507ab4d62b6329103b8fcb80f"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["2eb61c2f9d963a72b965977387ef58e30adec4c8","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"579dc30b5d3235c34cda518b2b6018d71a61879c":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"af3c513f6a7b209507ab4d62b6329103b8fcb80f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}