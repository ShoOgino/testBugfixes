{"path":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n        \n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","a3584d3db8b472772e3329d9d95d584b68ae997e","9e14e42055f4437435a5d7051e6ab30c151b85c5","1525b4dfbc0d413b8d7247da232009778e624836","8a7bae141a6116aeace7e625f86925690abb646c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n        \n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n        \n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb57e8385192a8db78b9a00d00a1425c3d1977b0","date":1331153368,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n        \n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final Context root = new Context(server, context, Context.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\",\n            Handler.REQUEST);\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n        \n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1525b4dfbc0d413b8d7247da232009778e624836","date":1351101135,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      connector.setLowResourcesMaxIdleTime(1500);\n      QueuedThreadPool threadPool = (QueuedThreadPool) connector\n          .getThreadPool();\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":["9e14e42055f4437435a5d7051e6ab30c151b85c5","8a7bae141a6116aeace7e625f86925690abb646c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      connector.setLowResourcesMaxIdleTime(1500);\n      QueuedThreadPool threadPool = (QueuedThreadPool) connector\n          .getThreadPool();\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // SelectChannelConnector connector = new SelectChannelConnector();\n      // Normal SocketConnector is what solr's example server uses by default\n      SocketConnector connector = new SocketConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      if (!stopAtShutdown) {\n        QueuedThreadPool threadPool = (QueuedThreadPool) connector\n            .getThreadPool();\n        if (threadPool != null) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (!stopAtShutdown) {\n        for (Connector connector : server.getConnectors()) {\n          if (connector instanceof SocketConnector) {\n            QueuedThreadPool threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n                .getThreadPool();\n            if (threadPool != null) {\n              threadPool.setMaxStopTimeMs(100);\n            }\n          }\n        }\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      connector.setLowResourcesMaxIdleTime(1500);\n      QueuedThreadPool threadPool = (QueuedThreadPool) connector\n          .getThreadPool();\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      connector.setLowResourcesMaxIdleTime(1500);\n      QueuedThreadPool threadPool = (QueuedThreadPool) connector\n          .getThreadPool();\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c33aa37f7cb15bff94880004576bd9347e871dbc","date":1355453481,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      connector.setLowResourcesMaxIdleTime(1500);\n      QueuedThreadPool threadPool = (QueuedThreadPool) connector\n          .getThreadPool();\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      connector.setLowResourcesMaxIdleTime(1500);\n      QueuedThreadPool threadPool = (QueuedThreadPool) connector\n          .getThreadPool();\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8a7bae141a6116aeace7e625f86925690abb646c","date":1355523598,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      connector.setLowResourcesMaxIdleTime(1500);\n      QueuedThreadPool threadPool = (QueuedThreadPool) connector\n          .getThreadPool();\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1525b4dfbc0d413b8d7247da232009778e624836"],"bugIntro":["9e14e42055f4437435a5d7051e6ab30c151b85c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":["9e14e42055f4437435a5d7051e6ab30c151b85c5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      SelectChannelConnector connector = new SelectChannelConnector();\n      connector.setPort(port);\n      connector.setReuseAddress(true);\n      connector.setLowResourcesMaxIdleTime(1500);\n      QueuedThreadPool threadPool = (QueuedThreadPool) connector\n          .getThreadPool();\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        if (!stopAtShutdown) {\n          threadPool.setMaxStopTimeMs(100);\n        }\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7734ce13985aba556e3623d51c2d870ed8142847","date":1360796678,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = Boolean.getBoolean(\"tests.jettySsl\");\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n\n      if (useSsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = Boolean.getBoolean(\"tests.jettySsl\");\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n\n      if (useSsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = Boolean.getBoolean(\"tests.jettySsl\");\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n\n      if (useSsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = Boolean.getBoolean(\"tests.jettySsl\");\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n\n      if (useSsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ad87868b299ae70f519de3945968de8f3604216","date":1380203849,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.useSsl;\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = Boolean.getBoolean(\"tests.jettySsl\");\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n\n      if (useSsl) {\n        if (null != System.getProperty(\"javax.net.ssl.keyStore\")) {\n          sslcontext.setKeyStorePath\n            (System.getProperty(\"javax.net.ssl.keyStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.keyStorePassword\")) {\n          sslcontext.setKeyStorePassword\n            (System.getProperty(\"javax.net.ssl.keyStorePassword\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStore\")) {\n          sslcontext.setTrustStore\n            (System.getProperty(\"javax.net.ssl.trustStore\"));\n        }\n        if (null != System.getProperty(\"javax.net.ssl.trustStorePassword\")) {\n          sslcontext.setTrustStorePassword\n            (System.getProperty(\"javax.net.ssl.trustStorePassword\"));\n        }\n        sslcontext.setNeedClientAuth(Boolean.getBoolean(\"tests.jettySsl.clientAuth\"));\n      }\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ffd767eab030540a93f22b95e2c78f887f6eafc","date":1385270558,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.useSsl;\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.useSsl;\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09bf2ac3af855efa1f7631177ce8dad43bace34b","date":1386879352,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.useSsl;\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<FilterHolder>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.useSsl;\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.useSsl;\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<FilterHolder>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.useSsl;\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dee311b2816356910363a8d15fc076caf6367eb","date":1392012517,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<FilterHolder>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.useSsl;\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<FilterHolder>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<FilterHolder>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9e14e42055f4437435a5d7051e6ab30c151b85c5","date":1405344913,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Connectors by default inherit server's thread pool.\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setMaxIdleTimeMs((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setMaxStopTimeMs((int) TimeUnit.MINUTES.toMillis(1));\n      server.setThreadPool(qtp);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (server.getThreadPool() == null) {\n        // Connectors by default inherit server's thread pool.\n        QueuedThreadPool qtp = new QueuedThreadPool();\n        qtp.setMaxThreads(10000);\n        qtp.setMaxIdleTimeMs((int) TimeUnit.SECONDS.toMillis(5));\n        qtp.setMaxStopTimeMs((int) TimeUnit.SECONDS.toMillis(1));\n        server.setThreadPool(qtp);\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      final QueuedThreadPool threadPool;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n        threadPool = (QueuedThreadPool) c.getThreadPool();\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n      if (threadPool != null) {\n        threadPool.setMaxThreads(10000);\n        threadPool.setMaxIdleTimeMs(5000);\n        threadPool.setMaxStopTimeMs(30000);\n      }\n      \n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      \n      for (Connector connector : server.getConnectors()) {\n        QueuedThreadPool threadPool = null;\n        if (connector instanceof SocketConnector) {\n          threadPool = (QueuedThreadPool) ((SocketConnector) connector)\n              .getThreadPool();\n        }\n        if (connector instanceof SelectChannelConnector) {\n          threadPool = (QueuedThreadPool) ((SelectChannelConnector) connector)\n              .getThreadPool();\n        }\n        \n        if (threadPool != null) {\n          threadPool.setMaxThreads(10000);\n          threadPool.setMaxIdleTimeMs(5000);\n          if (!stopAtShutdown) {\n            threadPool.setMaxStopTimeMs(100);\n          }\n        }\n        \n      }\n\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","1525b4dfbc0d413b8d7247da232009778e624836","a69439d0df009e0bb0038d1e427159f449dd670d","8a7bae141a6116aeace7e625f86925690abb646c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c16014bcb6ebca7a3716242a417a37a567e4683","date":1419870793,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Connectors by default inherit server's thread pool.\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setMaxIdleTimeMs((int) TimeUnit.MILLISECONDS.toMillis(200));\n      qtp.setMaxStopTimeMs((int) TimeUnit.MINUTES.toMillis(1));\n      server.setThreadPool(qtp);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (server.getThreadPool() == null) {\n        // Connectors by default inherit server's thread pool.\n        QueuedThreadPool qtp = new QueuedThreadPool();\n        qtp.setMaxThreads(10000);\n        qtp.setMaxIdleTimeMs((int) TimeUnit.SECONDS.toMillis(5));\n        qtp.setMaxStopTimeMs((int) TimeUnit.SECONDS.toMillis(1));\n        server.setThreadPool(qtp);\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Connectors by default inherit server's thread pool.\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setMaxIdleTimeMs((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setMaxStopTimeMs((int) TimeUnit.MINUTES.toMillis(1));\n      server.setThreadPool(qtp);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (server.getThreadPool() == null) {\n        // Connectors by default inherit server's thread pool.\n        QueuedThreadPool qtp = new QueuedThreadPool();\n        qtp.setMaxThreads(10000);\n        qtp.setMaxIdleTimeMs((int) TimeUnit.SECONDS.toMillis(5));\n        qtp.setMaxStopTimeMs((int) TimeUnit.SECONDS.toMillis(1));\n        server.setThreadPool(qtp);\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","date":1420472758,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n\n      server = new Server(qtp);\n      server.setStopAtShutdown(stopAtShutdown);\n      server.manage(qtp);\n\n      ServerConnector connector;\n      if (useSsl) {\n        HttpConfiguration configuration = new HttpConfiguration();\n        configuration.setSecureScheme(\"https\");\n        configuration.addCustomizer(new SecureRequestCustomizer());\n        connector = new ServerConnector(server, new SslConnectionFactory(sslcontext, \"http/1.1\"),\n            new HttpConnectionFactory(configuration));\n      } else {\n        connector = new ServerConnector(server, new HttpConnectionFactory());\n      }\n\n      connector.setReuseAddress(true);\n      connector.setSoLingerTime(0);\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Enable Low Resources Management\n      LowResourceMonitor lowResources = new LowResourceMonitor(server);\n      lowResources.setLowResourcesIdleTimeout(1500);\n      lowResources.setMaxConnections(10000);\n      server.addBean(lowResources);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n      connector.setPort(port);\n\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setStopTimeout((int) TimeUnit.SECONDS.toMillis(1));\n\n      server = new Server(qtp);\n      server.setStopAtShutdown(stopAtShutdown);\n      server.manage(qtp);\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server, context, ServletContextHandler.SESSIONS);\n    root.addFilter(GzipFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST));\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    server = new Server(port);\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    server.setStopAtShutdown(stopAtShutdown);\n    if (!stopAtShutdown) {\n      server.setGracefulShutdown(0);\n    }\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      final String connectorName = System.getProperty(\"tests.jettyConnector\", \"SelectChannel\");\n\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      final Connector connector;\n      if (\"SelectChannel\".equals(connectorName)) {\n        final SelectChannelConnector c = useSsl\n          ? new SslSelectChannelConnector(sslcontext)\n          : new SelectChannelConnector();\n        c.setReuseAddress(true);\n        c.setLowResourcesMaxIdleTime(1500);\n        c.setSoLingerTime(0);\n        connector = c;\n      } else if (\"Socket\".equals(connectorName)) {\n        final SocketConnector c = useSsl\n          ? new SslSocketConnector(sslcontext)\n          : new SocketConnector();\n        c.setReuseAddress(true);\n        c.setSoLingerTime(0);\n        connector = c;\n      } else {\n        throw new IllegalArgumentException(\"Illegal value for system property 'tests.jettyConnector': \" + connectorName);\n      }\n\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Connectors by default inherit server's thread pool.\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setMaxIdleTimeMs((int) TimeUnit.MILLISECONDS.toMillis(200));\n      qtp.setMaxStopTimeMs((int) TimeUnit.MINUTES.toMillis(1));\n      server.setThreadPool(qtp);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      if (server.getThreadPool() == null) {\n        // Connectors by default inherit server's thread pool.\n        QueuedThreadPool qtp = new QueuedThreadPool();\n        qtp.setMaxThreads(10000);\n        qtp.setMaxIdleTimeMs((int) TimeUnit.SECONDS.toMillis(5));\n        qtp.setMaxStopTimeMs((int) TimeUnit.SECONDS.toMillis(1));\n        server.setThreadPool(qtp);\n      }\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server,context,ServletContextHandler.SESSIONS);\n    root.setHandler(new GzipHandler());\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":["9b26da217d39e3ab00cf66ccad07eb82d19d520a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n\n      server = new Server(qtp);\n      server.setStopAtShutdown(stopAtShutdown);\n      server.manage(qtp);\n\n      ServerConnector connector;\n      if (useSsl) {\n        HttpConfiguration configuration = new HttpConfiguration();\n        configuration.setSecureScheme(\"https\");\n        configuration.addCustomizer(new SecureRequestCustomizer());\n        connector = new ServerConnector(server, new SslConnectionFactory(sslcontext, \"http/1.1\"),\n            new HttpConnectionFactory(configuration));\n      } else {\n        connector = new ServerConnector(server, new HttpConnectionFactory());\n      }\n\n      connector.setReuseAddress(true);\n      connector.setSoLingerTime(0);\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Enable Low Resources Management\n      LowResourceMonitor lowResources = new LowResourceMonitor(server);\n      lowResources.setLowResourcesIdleTimeout(1500);\n      lowResources.setMaxConnections(10000);\n      server.addBean(lowResources);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n      connector.setPort(port);\n\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setStopTimeout((int) TimeUnit.SECONDS.toMillis(1));\n\n      server = new Server(qtp);\n      server.setStopAtShutdown(stopAtShutdown);\n      server.manage(qtp);\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server, context, ServletContextHandler.SESSIONS);\n    root.addFilter(GzipFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST));\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n        if (coreRootDirectory != null)\n          System.setProperty(\"coreRootDirectory\", coreRootDirectory);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n\n      server = new Server(qtp);\n      server.setStopAtShutdown(stopAtShutdown);\n      server.manage(qtp);\n\n      ServerConnector connector;\n      if (useSsl) {\n        HttpConfiguration configuration = new HttpConfiguration();\n        configuration.setSecureScheme(\"https\");\n        configuration.addCustomizer(new SecureRequestCustomizer());\n        connector = new ServerConnector(server, new SslConnectionFactory(sslcontext, \"http/1.1\"),\n            new HttpConnectionFactory(configuration));\n      } else {\n        connector = new ServerConnector(server, new HttpConnectionFactory());\n      }\n\n      connector.setReuseAddress(true);\n      connector.setSoLingerTime(0);\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Enable Low Resources Management\n      LowResourceMonitor lowResources = new LowResourceMonitor(server);\n      lowResources.setLowResourcesIdleTimeout(1500);\n      lowResources.setMaxConnections(10000);\n      server.addBean(lowResources);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n      connector.setPort(port);\n\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setStopTimeout((int) TimeUnit.SECONDS.toMillis(1));\n\n      server = new Server(qtp);\n      server.setStopAtShutdown(stopAtShutdown);\n      server.manage(qtp);\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server, context, ServletContextHandler.SESSIONS);\n    root.addFilter(GzipFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST));\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02dcd6f50ddccf04be4560b3acbd93a90a932d32","date":1423125776,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n\n    System.setProperty(\"solr.solr.home\", solrHome);\n    \n    QueuedThreadPool qtp = new QueuedThreadPool();\n    qtp.setMaxThreads(10000);\n    qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n    qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n    server = new Server(qtp);\n    server.manage(qtp);\n    server.setStopAtShutdown(stopAtShutdown);\n    \n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      ServerConnector connector;\n      if (useSsl) {\n        HttpConfiguration configuration = new HttpConfiguration();\n        configuration.setSecureScheme(\"https\");\n        configuration.addCustomizer(new SecureRequestCustomizer());\n        connector = new ServerConnector(server, new SslConnectionFactory(sslcontext, \"http/1.1\"),\n            new HttpConnectionFactory(configuration));\n      } else {\n        connector = new ServerConnector(server, new HttpConnectionFactory());\n      }\n\n      connector.setReuseAddress(true);\n      connector.setSoLingerTime(0);\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Enable Low Resources Management\n      LowResourceMonitor lowResources = new LowResourceMonitor(server);\n      lowResources.setLowResourcesIdleTimeout(1500);\n      lowResources.setMaxConnections(10000);\n      server.addBean(lowResources);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n      connector.setPort(port);\n      server.setConnectors(new Connector[] {connector});\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server, context, ServletContextHandler.SESSIONS);\n    root.addFilter(GzipFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST));\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n        if (coreRootDirectory != null)\n          System.setProperty(\"coreRootDirectory\", coreRootDirectory);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n\n    System.setProperty(\"solr.solr.home\", solrHome);\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n\n      server = new Server(qtp);\n      server.setStopAtShutdown(stopAtShutdown);\n      server.manage(qtp);\n\n      ServerConnector connector;\n      if (useSsl) {\n        HttpConfiguration configuration = new HttpConfiguration();\n        configuration.setSecureScheme(\"https\");\n        configuration.addCustomizer(new SecureRequestCustomizer());\n        connector = new ServerConnector(server, new SslConnectionFactory(sslcontext, \"http/1.1\"),\n            new HttpConnectionFactory(configuration));\n      } else {\n        connector = new ServerConnector(server, new HttpConnectionFactory());\n      }\n\n      connector.setReuseAddress(true);\n      connector.setSoLingerTime(0);\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Enable Low Resources Management\n      LowResourceMonitor lowResources = new LowResourceMonitor(server);\n      lowResources.setLowResourcesIdleTimeout(1500);\n      lowResources.setMaxConnections(10000);\n      server.addBean(lowResources);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n      connector.setPort(port);\n\n      QueuedThreadPool qtp = new QueuedThreadPool();\n      qtp.setMaxThreads(10000);\n      qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n      qtp.setStopTimeout((int) TimeUnit.SECONDS.toMillis(1));\n\n      server = new Server(qtp);\n      server.setStopAtShutdown(stopAtShutdown);\n      server.manage(qtp);\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server, context, ServletContextHandler.SESSIONS);\n    root.addFilter(GzipFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST));\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n        if (coreRootDirectory != null)\n          System.setProperty(\"coreRootDirectory\", coreRootDirectory);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c66158bb16e902a21272772f1b911f04b1a55abb","date":1424959524,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":"  private void init(int port) {\n\n    System.setProperty(\"solr.solr.home\", solrHome);\n\n    QueuedThreadPool qtp = new QueuedThreadPool();\n    qtp.setMaxThreads(10000);\n    qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n    qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n    server = new Server(qtp);\n    server.manage(qtp);\n    server.setStopAtShutdown(config.stopAtShutdown);\n\n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final SslContextFactory sslcontext = SSLConfig.createContextFactory(config.sslConfig);\n\n      ServerConnector connector;\n      if (sslcontext != null) {\n        HttpConfiguration configuration = new HttpConfiguration();\n        configuration.setSecureScheme(\"https\");\n        configuration.addCustomizer(new SecureRequestCustomizer());\n        connector = new ServerConnector(server, new SslConnectionFactory(sslcontext, \"http/1.1\"),\n            new HttpConnectionFactory(configuration));\n      } else {\n        connector = new ServerConnector(server, new HttpConnectionFactory());\n      }\n\n      connector.setReuseAddress(true);\n      connector.setSoLingerTime(0);\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Enable Low Resources Management\n      LowResourceMonitor lowResources = new LowResourceMonitor(server);\n      lowResources.setLowResourcesIdleTimeout(1500);\n      lowResources.setMaxConnections(10000);\n      server.addBean(lowResources);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n      connector.setPort(port);\n      server.setConnectors(new Connector[] {connector});\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server, config.context, ServletContextHandler.SESSIONS);\n    root.addFilter(GzipFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST));\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n\n        lastPort = getFirstConnectorPort();\n\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n        if (coreRootDirectory != null)\n          System.setProperty(\"coreRootDirectory\", coreRootDirectory);\n\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        extraFilters = new LinkedList<>();\n        for (Class<? extends Filter> filterClass : config.extraFilters.keySet()) {\n          extraFilters.add(root.addFilter(filterClass, config.extraFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n        }\n\n        for (ServletHolder servletHolder : config.extraServlets.keySet()) {\n          String pathSpec = config.extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n\n    System.setProperty(\"solr.solr.home\", solrHome);\n    \n    QueuedThreadPool qtp = new QueuedThreadPool();\n    qtp.setMaxThreads(10000);\n    qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n    qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n    server = new Server(qtp);\n    server.manage(qtp);\n    server.setStopAtShutdown(stopAtShutdown);\n    \n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      ServerConnector connector;\n      if (useSsl) {\n        HttpConfiguration configuration = new HttpConfiguration();\n        configuration.setSecureScheme(\"https\");\n        configuration.addCustomizer(new SecureRequestCustomizer());\n        connector = new ServerConnector(server, new SslConnectionFactory(sslcontext, \"http/1.1\"),\n            new HttpConnectionFactory(configuration));\n      } else {\n        connector = new ServerConnector(server, new HttpConnectionFactory());\n      }\n\n      connector.setReuseAddress(true);\n      connector.setSoLingerTime(0);\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Enable Low Resources Management\n      LowResourceMonitor lowResources = new LowResourceMonitor(server);\n      lowResources.setLowResourcesIdleTimeout(1500);\n      lowResources.setMaxConnections(10000);\n      server.addBean(lowResources);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n      connector.setPort(port);\n      server.setConnectors(new Connector[] {connector});\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server, context, ServletContextHandler.SESSIONS);\n    root.addFilter(GzipFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST));\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n        if (coreRootDirectory != null)\n          System.setProperty(\"coreRootDirectory\", coreRootDirectory);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":["9b26da217d39e3ab00cf66ccad07eb82d19d520a","ea0f43f20834b3c8930e074b144aba27a935fee8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/client/solrj/embedded/JettySolrRunner#init(String,String,int,boolean).mjava","sourceNew":null,"sourceOld":"  private void init(String solrHome, String context, int port, boolean stopAtShutdown) {\n    this.context = context;\n    this.solrHome = solrHome;\n    this.stopAtShutdown = stopAtShutdown;\n\n    System.setProperty(\"solr.solr.home\", solrHome);\n    \n    QueuedThreadPool qtp = new QueuedThreadPool();\n    qtp.setMaxThreads(10000);\n    qtp.setIdleTimeout((int) TimeUnit.SECONDS.toMillis(5));\n    qtp.setStopTimeout((int) TimeUnit.MINUTES.toMillis(1));\n    server = new Server(qtp);\n    server.manage(qtp);\n    server.setStopAtShutdown(stopAtShutdown);\n    \n    if (System.getProperty(\"jetty.testMode\") != null) {\n      // if this property is true, then jetty will be configured to use SSL\n      // leveraging the same system properties as java to specify\n      // the keystore/truststore if they are set unless specific config\n      // is passed via the constructor.\n      //\n      // This means we will use the same truststore, keystore (and keys) for\n      // the server as well as any client actions taken by this JVM in\n      // talking to that server, but for the purposes of testing that should \n      // be good enough\n      final boolean useSsl = sslConfig == null ? false : sslConfig.isSSLMode();\n      final SslContextFactory sslcontext = new SslContextFactory(false);\n      sslInit(useSsl, sslcontext);\n\n      ServerConnector connector;\n      if (useSsl) {\n        HttpConfiguration configuration = new HttpConfiguration();\n        configuration.setSecureScheme(\"https\");\n        configuration.addCustomizer(new SecureRequestCustomizer());\n        connector = new ServerConnector(server, new SslConnectionFactory(sslcontext, \"http/1.1\"),\n            new HttpConnectionFactory(configuration));\n      } else {\n        connector = new ServerConnector(server, new HttpConnectionFactory());\n      }\n\n      connector.setReuseAddress(true);\n      connector.setSoLingerTime(0);\n      connector.setPort(port);\n      connector.setHost(\"127.0.0.1\");\n\n      // Enable Low Resources Management\n      LowResourceMonitor lowResources = new LowResourceMonitor(server);\n      lowResources.setLowResourcesIdleTimeout(1500);\n      lowResources.setMaxConnections(10000);\n      server.addBean(lowResources);\n\n      server.setConnectors(new Connector[] {connector});\n      server.setSessionIdManager(new HashSessionIdManager(new Random()));\n    } else {\n      ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n      connector.setPort(port);\n      server.setConnectors(new Connector[] {connector});\n    }\n\n    // Initialize the servlets\n    final ServletContextHandler root = new ServletContextHandler(server, context, ServletContextHandler.SESSIONS);\n    root.addFilter(GzipFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST));\n    server.addLifeCycleListener(new LifeCycle.Listener() {\n\n      @Override\n      public void lifeCycleStopping(LifeCycle arg0) {\n        System.clearProperty(\"hostPort\");\n      }\n\n      @Override\n      public void lifeCycleStopped(LifeCycle arg0) {}\n\n      @Override\n      public void lifeCycleStarting(LifeCycle arg0) {\n        synchronized (JettySolrRunner.this) {\n          waitOnSolr = true;\n          JettySolrRunner.this.notify();\n        }\n      }\n\n      @Override\n      public void lifeCycleStarted(LifeCycle arg0) {\n        lastPort = getFirstConnectorPort();\n        System.setProperty(\"hostPort\", Integer.toString(lastPort));\n        if (solrConfigFilename != null) System.setProperty(\"solrconfig\",\n            solrConfigFilename);\n        if (schemaFilename != null) System.setProperty(\"schema\", \n            schemaFilename);\n        if (coreRootDirectory != null)\n          System.setProperty(\"coreRootDirectory\", coreRootDirectory);\n//        SolrDispatchFilter filter = new SolrDispatchFilter();\n//        FilterHolder fh = new FilterHolder(filter);\n        debugFilter = root.addFilter(DebugFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (extraRequestFilters != null) {\n          extraFilters = new LinkedList<>();\n          for (Class filterClass : extraRequestFilters.keySet()) {\n            extraFilters.add(root.addFilter(filterClass, extraRequestFilters.get(filterClass),\n              EnumSet.of(DispatcherType.REQUEST)));\n          }\n        }\n        for (ServletHolder servletHolder : extraServlets.keySet()) {\n          String pathSpec = extraServlets.get(servletHolder);\n          root.addServlet(servletHolder, pathSpec);\n        }\n        dispatchFilter = root.addFilter(SolrDispatchFilter.class, \"*\", EnumSet.of(DispatcherType.REQUEST) );\n        if (solrConfigFilename != null) System.clearProperty(\"solrconfig\");\n        if (schemaFilename != null) System.clearProperty(\"schema\");\n        System.clearProperty(\"solr.solr.home\");\n      }\n\n      @Override\n      public void lifeCycleFailure(LifeCycle arg0, Throwable arg1) {\n        System.clearProperty(\"hostPort\");\n      }\n    });\n\n    // for some reason, there must be a servlet for this to get applied\n    root.addServlet(Servlet404.class, \"/*\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1525b4dfbc0d413b8d7247da232009778e624836","a69439d0df009e0bb0038d1e427159f449dd670d"],"9e14e42055f4437435a5d7051e6ab30c151b85c5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a69439d0df009e0bb0038d1e427159f449dd670d":["8a7bae141a6116aeace7e625f86925690abb646c"],"eb57e8385192a8db78b9a00d00a1425c3d1977b0":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["02dcd6f50ddccf04be4560b3acbd93a90a932d32","c66158bb16e902a21272772f1b911f04b1a55abb"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5ffd767eab030540a93f22b95e2c78f887f6eafc":["2ad87868b299ae70f519de3945968de8f3604216"],"3b41f996b22bd5518650f897d050088ff808ec03":["a69439d0df009e0bb0038d1e427159f449dd670d","7734ce13985aba556e3623d51c2d870ed8142847"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c16014bcb6ebca7a3716242a417a37a567e4683":["9e14e42055f4437435a5d7051e6ab30c151b85c5"],"f2126b84bd093fa3d921582a109a0ee578c28126":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","1525b4dfbc0d413b8d7247da232009778e624836"],"02dcd6f50ddccf04be4560b3acbd93a90a932d32":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"8a7bae141a6116aeace7e625f86925690abb646c":["c33aa37f7cb15bff94880004576bd9347e871dbc"],"c33aa37f7cb15bff94880004576bd9347e871dbc":["7530de27b87b961b51f01bd1299b7004d46e8823"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","eb57e8385192a8db78b9a00d00a1425c3d1977b0"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9dee311b2816356910363a8d15fc076caf6367eb"],"2ad87868b299ae70f519de3945968de8f3604216":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"7734ce13985aba556e3623d51c2d870ed8142847":["a69439d0df009e0bb0038d1e427159f449dd670d"],"9dee311b2816356910363a8d15fc076caf6367eb":["09bf2ac3af855efa1f7631177ce8dad43bace34b"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["eb57e8385192a8db78b9a00d00a1425c3d1977b0"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["2c16014bcb6ebca7a3716242a417a37a567e4683"],"09bf2ac3af855efa1f7631177ce8dad43bace34b":["5ffd767eab030540a93f22b95e2c78f887f6eafc"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["2ad87868b299ae70f519de3945968de8f3604216","09bf2ac3af855efa1f7631177ce8dad43bace34b"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["7734ce13985aba556e3623d51c2d870ed8142847"],"7530de27b87b961b51f01bd1299b7004d46e8823":["1525b4dfbc0d413b8d7247da232009778e624836"],"1525b4dfbc0d413b8d7247da232009778e624836":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c66158bb16e902a21272772f1b911f04b1a55abb"],"c66158bb16e902a21272772f1b911f04b1a55abb":["02dcd6f50ddccf04be4560b3acbd93a90a932d32"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"9e14e42055f4437435a5d7051e6ab30c151b85c5":["2c16014bcb6ebca7a3716242a417a37a567e4683"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3b41f996b22bd5518650f897d050088ff808ec03","7734ce13985aba556e3623d51c2d870ed8142847"],"eb57e8385192a8db78b9a00d00a1425c3d1977b0":["38e3b736c7ca086d61b7dbb841c905ee115490da","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["02dcd6f50ddccf04be4560b3acbd93a90a932d32"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"5ffd767eab030540a93f22b95e2c78f887f6eafc":["09bf2ac3af855efa1f7631177ce8dad43bace34b"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c16014bcb6ebca7a3716242a417a37a567e4683":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"02dcd6f50ddccf04be4560b3acbd93a90a932d32":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c66158bb16e902a21272772f1b911f04b1a55abb"],"8a7bae141a6116aeace7e625f86925690abb646c":["a69439d0df009e0bb0038d1e427159f449dd670d"],"c33aa37f7cb15bff94880004576bd9347e871dbc":["8a7bae141a6116aeace7e625f86925690abb646c"],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9e14e42055f4437435a5d7051e6ab30c151b85c5"],"2ad87868b299ae70f519de3945968de8f3604216":["5ffd767eab030540a93f22b95e2c78f887f6eafc","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7734ce13985aba556e3623d51c2d870ed8142847":["3b41f996b22bd5518650f897d050088ff808ec03","054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["f2126b84bd093fa3d921582a109a0ee578c28126","1525b4dfbc0d413b8d7247da232009778e624836"],"9dee311b2816356910363a8d15fc076caf6367eb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"09bf2ac3af855efa1f7631177ce8dad43bace34b":["9dee311b2816356910363a8d15fc076caf6367eb","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["eb57e8385192a8db78b9a00d00a1425c3d1977b0","0d22ac6a4146774c1bc8400160fc0b6150294e92","38e3b736c7ca086d61b7dbb841c905ee115490da","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["2ad87868b299ae70f519de3945968de8f3604216"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c33aa37f7cb15bff94880004576bd9347e871dbc"],"1525b4dfbc0d413b8d7247da232009778e624836":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f2126b84bd093fa3d921582a109a0ee578c28126","7530de27b87b961b51f01bd1299b7004d46e8823"],"c66158bb16e902a21272772f1b911f04b1a55abb":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d22ac6a4146774c1bc8400160fc0b6150294e92","3b41f996b22bd5518650f897d050088ff808ec03","f2126b84bd093fa3d921582a109a0ee578c28126","38e3b736c7ca086d61b7dbb841c905ee115490da","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}