{"path":"lucene/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","commits":[{"id":"8be6e1e4fbbc94d90b78f175c03ff389b6949373","date":1306674752,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#writeLabel(int).mjava","sourceNew":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeVInt(v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","sourceOld":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeVInt(v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#writeLabel(int).mjava","sourceNew":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeVInt(v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","sourceOld":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeVInt(v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#writeLabel(int).mjava","sourceNew":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeVInt(v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","sourceOld":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeVInt(v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b3d500d9caea2bb55ac8d2399642dc13b88d739","date":1326050845,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","sourceNew":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeShort((short) v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","sourceOld":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeVInt(v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","sourceNew":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeShort((short) v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","sourceOld":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeShort((short) v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b3d500d9caea2bb55ac8d2399642dc13b88d739":["8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b3d500d9caea2bb55ac8d2399642dc13b88d739"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8be6e1e4fbbc94d90b78f175c03ff389b6949373"]},"commit2Childs":{"8be6e1e4fbbc94d90b78f175c03ff389b6949373":["8b3d500d9caea2bb55ac8d2399642dc13b88d739","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"8b3d500d9caea2bb55ac8d2399642dc13b88d739":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be6e1e4fbbc94d90b78f175c03ff389b6949373","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}