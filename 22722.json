{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/SnowballPorterFilterFactoryTest[TestSnowballPorterFilterFactory]#test().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/SnowballPorterFilterFactoryTest[TestSnowballPorterFilterFactory]#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/SnowballPorterFilterFactoryTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballPorterFilterFactory#test().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/SnowballPorterFilterFactoryTest[TestSnowballPorterFilterFactory]#test().mjava","sourceNew":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    EnglishStemmer stemmer = new EnglishStemmer();\n    String[] test = {\"The\", \"fledgling\", \"banks\", \"were\", \"counting\", \"on\", \"a\", \"big\", \"boom\", \"in\", \"banking\"};\n    String[] gold = new String[test.length];\n    for (int i = 0; i < test.length; i++) {\n      stemmer.setCurrent(test[i]);\n      stemmer.stem();\n      gold[i] = stemmer.getCurrent();\n    }\n\n    SnowballPorterFilterFactory factory = new SnowballPorterFilterFactory();\n    Map<String, String> args = new HashMap<String, String>();\n    args.put(\"language\", \"English\");\n\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    factory.init(args);\n    factory.inform(new LinesMockSolrResourceLoader(new ArrayList<String>()));\n    Tokenizer tokenizer = new MockTokenizer(\n        new StringReader(StrUtils.join(Arrays.asList(test), ' ')), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, gold);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"280bf88d9ed3d9923e393961b594d9553970e4fd":["3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"280bf88d9ed3d9923e393961b594d9553970e4fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3241e06e642196396b80bb293acd9c0814d079e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["280bf88d9ed3d9923e393961b594d9553970e4fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["280bf88d9ed3d9923e393961b594d9553970e4fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}