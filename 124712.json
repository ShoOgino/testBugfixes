{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","pathOld":"/dev/null","sourceNew":"  /**This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir,SolrCore core, final Runnable listener){\n    if(listener==null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryWatchers){\n      if(confDirectoryWatchers.containsKey(confDir)){\n        confDirectoryWatchers.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) { }\n        });\n\n\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\"This conf directory is not valid\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","sourceNew":"  /**This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir,SolrCore core, final Runnable listener){\n    if(listener==null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners){\n      if(confDirectoryListeners.containsKey(confDir)){\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) { }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\"This conf directory is not valid\");\n      }\n    }\n  }\n\n","sourceOld":"  /**This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir,SolrCore core, final Runnable listener){\n    if(listener==null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryWatchers){\n      if(confDirectoryWatchers.containsKey(confDir)){\n        confDirectoryWatchers.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) { }\n        });\n\n\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\"This conf directory is not valid\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","sourceNew":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners) {\n      if (confDirectoryListeners.containsKey(confDir)) {\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) {\n          }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"This conf directory is not valid\");\n      }\n    }\n  }\n\n","sourceOld":"  /**This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir,SolrCore core, final Runnable listener){\n    if(listener==null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners){\n      if(confDirectoryListeners.containsKey(confDir)){\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) { }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\"This conf directory is not valid\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","sourceNew":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners) {\n      if (confDirectoryListeners.containsKey(confDir)) {\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) {\n          }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"This conf directory is not valid\");\n      }\n    }\n  }\n\n","sourceOld":"  /**This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir,SolrCore core, final Runnable listener){\n    if(listener==null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners){\n      if(confDirectoryListeners.containsKey(confDir)){\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) { }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\"This conf directory is not valid\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7024c01cc4ffd944ceadd1ab3d519a95b3b5034e","date":1427940041,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","sourceNew":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners) {\n      if (confDirectoryListeners.containsKey(confDir)) {\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) {\n          }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"This conf directory is not valid \"+ confDir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners) {\n      if (confDirectoryListeners.containsKey(confDir)) {\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) {\n          }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"This conf directory is not valid\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","sourceNew":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners) {\n      if (confDirectoryListeners.containsKey(confDir)) {\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) {\n          }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"This conf directory is not valid \"+ confDir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners) {\n      if (confDirectoryListeners.containsKey(confDir)) {\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) {\n          }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"This conf directory is not valid\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54bb8da55080e4569804e0661b83a3c72cbd8d4d","date":1429691126,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","sourceNew":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(final String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) {\n      throw new NullPointerException(\"listener cannot be null\");\n    }\n    synchronized (confDirectoryListeners) {\n      final Set<Runnable> confDirListeners = getConfDirListeners(confDir);\n      confDirListeners.add(listener);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          unregisterConfListener(confDir, listener);\n        }\n        \n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n  }\n\n","sourceOld":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) throw new NullPointerException(\"listener cannot be null\");\n    synchronized (confDirectoryListeners) {\n      if (confDirectoryListeners.containsKey(confDir)) {\n        confDirectoryListeners.get(confDir).add(listener);\n        core.addCloseHook(new CloseHook() {\n          @Override\n          public void preClose(SolrCore core) {\n            unRegisterConfListener(listener);\n          }\n\n          @Override\n          public void postClose(SolrCore core) {\n          }\n        });\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"This conf directory is not valid \"+ confDir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#registerConfListenerForCore(String,SolrCore,Runnable).mjava","sourceNew":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(final String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) {\n      throw new NullPointerException(\"listener cannot be null\");\n    }\n    synchronized (confDirectoryListeners) {\n      final Set<Runnable> confDirListeners = getConfDirListeners(confDir);\n      confDirListeners.add(listener);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          unregisterConfListener(confDir, listener);\n        }\n\n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n  }\n\n","sourceOld":"  /**\n   * This will give a callback to the listener whenever a child is modified in the\n   * conf directory. It is the responsibility of the listener to check if the individual\n   * item of interest has been modified.  When the last core which was interested in\n   * this conf directory is gone the listeners will be removed automatically.\n   */\n  public void registerConfListenerForCore(final String confDir, SolrCore core, final Runnable listener) {\n    if (listener == null) {\n      throw new NullPointerException(\"listener cannot be null\");\n    }\n    synchronized (confDirectoryListeners) {\n      final Set<Runnable> confDirListeners = getConfDirListeners(confDir);\n      confDirListeners.add(listener);\n      core.addCloseHook(new CloseHook() {\n        @Override\n        public void preClose(SolrCore core) {\n          unregisterConfListener(confDir, listener);\n        }\n        \n        @Override\n        public void postClose(SolrCore core) {\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["08f9f60ad238cb88d12306a20077e84d1f1f93e4","fbcfc050b9f253136eaa5950b57248b2109eac11"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["7024c01cc4ffd944ceadd1ab3d519a95b3b5034e"],"7024c01cc4ffd944ceadd1ab3d519a95b3b5034e":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7024c01cc4ffd944ceadd1ab3d519a95b3b5034e"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["54bb8da55080e4569804e0661b83a3c72cbd8d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"54bb8da55080e4569804e0661b83a3c72cbd8d4d":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"7024c01cc4ffd944ceadd1ab3d519a95b3b5034e":["54bb8da55080e4569804e0661b83a3c72cbd8d4d","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7024c01cc4ffd944ceadd1ab3d519a95b3b5034e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}