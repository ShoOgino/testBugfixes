{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71946974c05b5dc4d3201f8abf4ecd2609bba400","date":1319655558,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    // disable VelocityResponseWriter from example configuration\n    System.setProperty(\"solr.velocity.enabled\", \"false\");\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40dcf585f281c731bd0a97da2f92a720802c80e","date":1319743848,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    // disable VelocityResponseWriter from example configuration\n    System.setProperty(\"solr.velocity.enabled\", \"false\");\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(LuceneTestCase.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(LuceneTestCase.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(SolrTestCaseJ4.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(LuceneTestCase.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(LuceneTestCase.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random.nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0383cd09ec14aa4b39144430fd2bf7f866eb5ec","date":1363621241,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = new File(LuceneTestCase.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    \n    File dataDir = new File(LuceneTestCase.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":["26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = new File(LuceneTestCase.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1416f9d09d016a6894cd17e1caac137dad2bba59","date":1395941020,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = new File(this.dataDir,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = new File(LuceneTestCase.TEMP_DIR,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = new File(this.dataDir,\n        getClass().getName() + \"-\" + System.currentTimeMillis());\n    dataDir.mkdirs();\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e25c332f157326faecb36f76173033c1284776a5","date":1414729852,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", ExternalPaths.EXAMPLE_HOME);\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd","date":1420472758,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    SocketConnector connector = new SocketConnector();\n    connector.setMaxIdleTime(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fb2b12b2408a672ea95299757dbda27408ee84","date":1440773278,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception \n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521","date":1461254038,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n    \n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":["d0383cd09ec14aa4b39144430fd2bf7f866eb5ec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n    \n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"269c5aee1e7702d512e3f45bf1f01afd15a2af5f","date":1516133643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n    \n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new DefaultSessionIdManager(server, new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n    \n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n    \n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new DefaultSessionIdManager(server, new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n    \n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new HashSessionIdManager(new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d108aa89491a609eab235fa2459dc3ab78b4c838","date":1576707883,"type":3,"author":"Matthias Krueger","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new DefaultSessionIdManager(server, new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n\n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n    \n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new DefaultSessionIdManager(server, new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n\n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new DefaultSessionIdManager(server, new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n\n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception\n  {\n    super.setUp();\n    System.setProperty(\"solr.solr.home\", SolrJettyTestBase.legacyExampleCollection1SolrHome());\n    System.setProperty(\"tests.shardhandler.randomSeed\", Long.toString(random().nextLong()));\n    System.setProperty(\"solr.tests.doContainerStreamCloseAssert\", \"false\");\n    \n    File dataDir = createTempDir().toFile();\n    dataDir.mkdirs();\n\n    System.setProperty(\"solr.data.dir\", dataDir.getCanonicalPath());\n    String path = ExternalPaths.WEBAPP_HOME;\n\n    server = new Server(port);\n    // insecure: only use for tests!!!!\n    server.setSessionIdManager(new DefaultSessionIdManager(server, new Random(random().nextLong())));\n    new WebAppContext(server, path, context );\n\n    ServerConnector connector = new ServerConnector(server, new HttpConnectionFactory());\n    connector.setIdleTimeout(1000 * 60 * 60);\n    connector.setSoLingerTime(-1);\n    connector.setPort(0);\n    server.setConnectors(new Connector[]{connector});\n    server.setStopAtShutdown( true );\n    \n    server.start();\n    port = connector.getLocalPort();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","269c5aee1e7702d512e3f45bf1f01afd15a2af5f"],"05fb2b12b2408a672ea95299757dbda27408ee84":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["1416f9d09d016a6894cd17e1caac137dad2bba59","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["d40dcf585f281c731bd0a97da2f92a720802c80e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["b94236357aaa22b76c10629851fe4e376e0cea82","d108aa89491a609eab235fa2459dc3ab78b4c838"],"1416f9d09d016a6894cd17e1caac137dad2bba59":["d0383cd09ec14aa4b39144430fd2bf7f866eb5ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["05fb2b12b2408a672ea95299757dbda27408ee84"],"d108aa89491a609eab235fa2459dc3ab78b4c838":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["d0d579490a72f2e6297eaa648940611234c57cf1"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["05fb2b12b2408a672ea95299757dbda27408ee84","26ab43e1a461b9c1d9db0739ee0eb5caed8bc521"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["d40dcf585f281c731bd0a97da2f92a720802c80e"],"e25c332f157326faecb36f76173033c1284776a5":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d40dcf585f281c731bd0a97da2f92a720802c80e":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"d0d579490a72f2e6297eaa648940611234c57cf1":["d0383cd09ec14aa4b39144430fd2bf7f866eb5ec"],"d0383cd09ec14aa4b39144430fd2bf7f866eb5ec":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["e25c332f157326faecb36f76173033c1284776a5"],"269c5aee1e7702d512e3f45bf1f01afd15a2af5f":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d108aa89491a609eab235fa2459dc3ab78b4c838"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","d108aa89491a609eab235fa2459dc3ab78b4c838"],"05fb2b12b2408a672ea95299757dbda27408ee84":["26ab43e1a461b9c1d9db0739ee0eb5caed8bc521","ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c26f00b574427b55127e869b935845554afde1fa":["71946974c05b5dc4d3201f8abf4ecd2609bba400"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"1416f9d09d016a6894cd17e1caac137dad2bba59":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"26ab43e1a461b9c1d9db0739ee0eb5caed8bc521":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"d108aa89491a609eab235fa2459dc3ab78b4c838":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["b94236357aaa22b76c10629851fe4e376e0cea82","269c5aee1e7702d512e3f45bf1f01afd15a2af5f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"e25c332f157326faecb36f76173033c1284776a5":["d5b778829b5b506ab02023b2f4ba58aef5d7f0fd"],"d40dcf585f281c731bd0a97da2f92a720802c80e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"d0d579490a72f2e6297eaa648940611234c57cf1":["bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"f4abec28b874149a7223e32cc7a01704c27790de":["e25c332f157326faecb36f76173033c1284776a5"],"d0383cd09ec14aa4b39144430fd2bf7f866eb5ec":["1416f9d09d016a6894cd17e1caac137dad2bba59","d0d579490a72f2e6297eaa648940611234c57cf1"],"d5b778829b5b506ab02023b2f4ba58aef5d7f0fd":["05fb2b12b2408a672ea95299757dbda27408ee84"],"269c5aee1e7702d512e3f45bf1f01afd15a2af5f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d0383cd09ec14aa4b39144430fd2bf7f866eb5ec"],"71946974c05b5dc4d3201f8abf4ecd2609bba400":["d40dcf585f281c731bd0a97da2f92a720802c80e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","4c66470e527299cc148ad0b3441d08dfb7cb9e03","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}