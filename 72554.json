{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector#createTermGroupFacetCollector(String,String,boolean,BytesRef,int).mjava","commits":[{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector#createTermGroupFacetCollector(String,String,boolean,BytesRef,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector#createTermGroupFacetCollector(String,String,boolean,BytesRef,int).mjava","sourceNew":"  /**\n   * Factory method for creating the right implementation based on the fact whether the facet field contains\n   * multiple tokens per documents.\n   *\n   * @param groupField The group field\n   * @param facetField The facet field\n   * @param facetFieldMultivalued Whether the facet field has multiple tokens per document\n   * @param facetPrefix The facet prefix a facet entry should start with to be included.\n   * @param initialSize The initial allocation size of the internal int set and group facet list which should roughly\n   *                    match the total number of expected unique groups. Be aware that the heap usage is\n   *                    4 bytes * initialSize.\n   * @return <code>TermGroupFacetCollector</code> implementation\n   */\n  public static TermGroupFacetCollector createTermGroupFacetCollector(String groupField,\n                                                                      String facetField,\n                                                                      boolean facetFieldMultivalued,\n                                                                      BytesRef facetPrefix,\n                                                                      int initialSize) {\n    if (facetFieldMultivalued) {\n      return new MV(groupField, facetField, facetPrefix, initialSize);\n    } else {\n      return new SV(groupField, facetField, facetPrefix, initialSize);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method for creating the right implementation based on the fact whether the facet field contains\n   * multiple tokens per documents.\n   *\n   * @param groupField The group field\n   * @param facetField The facet field\n   * @param facetFieldMultivalued Whether the facet field has multiple tokens per document\n   * @param facetPrefix The facet prefix a facet entry should start with to be included.\n   * @param initialSize The initial allocation size of the internal int set and group facet list which should roughly\n   *                    match the total number of expected unique groups. Be aware that the heap usage is\n   *                    4 bytes * initialSize.\n   * @return <code>TermGroupFacetCollector</code> implementation\n   */\n  public static TermGroupFacetCollector createTermGroupFacetCollector(String groupField,\n                                                                      String facetField,\n                                                                      boolean facetFieldMultivalued,\n                                                                      BytesRef facetPrefix,\n                                                                      int initialSize) {\n    if (facetFieldMultivalued) {\n      return new MV(groupField, facetField, facetPrefix, initialSize);\n    } else {\n      return new SV(groupField, facetField, facetPrefix, initialSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/TermGroupFacetCollector#createTermGroupFacetCollector(String,String,boolean,BytesRef,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermGroupFacetCollector#createTermGroupFacetCollector(String,String,boolean,BytesRef,int).mjava","sourceNew":"  /**\n   * Factory method for creating the right implementation based on the fact whether the facet field contains\n   * multiple tokens per documents.\n   *\n   * @param groupField The group field\n   * @param facetField The facet field\n   * @param facetFieldMultivalued Whether the facet field has multiple tokens per document\n   * @param facetPrefix The facet prefix a facet entry should start with to be included.\n   * @param initialSize The initial allocation size of the internal int set and group facet list which should roughly\n   *                    match the total number of expected unique groups. Be aware that the heap usage is\n   *                    4 bytes * initialSize.\n   * @return <code>TermGroupFacetCollector</code> implementation\n   */\n  public static TermGroupFacetCollector createTermGroupFacetCollector(String groupField,\n                                                                      String facetField,\n                                                                      boolean facetFieldMultivalued,\n                                                                      BytesRef facetPrefix,\n                                                                      int initialSize) {\n    if (facetFieldMultivalued) {\n      return new MV(groupField, facetField, facetPrefix, initialSize);\n    } else {\n      return new SV(groupField, facetField, facetPrefix, initialSize);\n    }\n  }\n\n","sourceOld":"  /**\n   * Factory method for creating the right implementation based on the fact whether the facet field contains\n   * multiple tokens per documents.\n   *\n   * @param groupField The group field\n   * @param facetField The facet field\n   * @param facetFieldMultivalued Whether the facet field has multiple tokens per document\n   * @param facetPrefix The facet prefix a facet entry should start with to be included.\n   * @param initialSize The initial allocation size of the internal int set and group facet list which should roughly\n   *                    match the total number of expected unique groups. Be aware that the heap usage is\n   *                    4 bytes * initialSize.\n   * @return <code>TermGroupFacetCollector</code> implementation\n   */\n  public static TermGroupFacetCollector createTermGroupFacetCollector(String groupField,\n                                                                      String facetField,\n                                                                      boolean facetFieldMultivalued,\n                                                                      BytesRef facetPrefix,\n                                                                      int initialSize) {\n    if (facetFieldMultivalued) {\n      return new MV(groupField, facetField, facetPrefix, initialSize);\n    } else {\n      return new SV(groupField, facetField, facetPrefix, initialSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","7ae958a739da1866696f442384393ba2f13e33e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}