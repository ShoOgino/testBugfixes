{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testSimple().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    PrecedenceQueryParser qp = new PrecedenceQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random()));\n    // make sure OR is the default:\n    assertEquals(StandardQueryConfigHandler.Operator.OR, qp.getDefaultOperator());\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(StandardQueryConfigHandler.Operator.AND, qp.getDefaultOperator());\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.OR);\n    assertEquals(StandardQueryConfigHandler.Operator.OR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    PrecedenceQueryParser qp = new PrecedenceQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random()));\n    // make sure OR is the default:\n    assertEquals(StandardQueryConfigHandler.Operator.OR, qp.getDefaultOperator());\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(StandardQueryConfigHandler.Operator.AND, qp.getDefaultOperator());\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.OR);\n    assertEquals(StandardQueryConfigHandler.Operator.OR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0cdf628dda21ad509f09608c835dc27541d1ca3","date":1444665868,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testSimple().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ (term)^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"(term)^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"(term)^2.0\");\n    assertQueryEquals(\"term^2\", null, \"(term)^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"(\\\"germ term\\\")^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"(\\\"term germ\\\")^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    PrecedenceQueryParser qp = new PrecedenceQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random()));\n    // make sure OR is the default:\n    assertEquals(StandardQueryConfigHandler.Operator.OR, qp.getDefaultOperator());\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(StandardQueryConfigHandler.Operator.AND, qp.getDefaultOperator());\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.OR);\n    assertEquals(StandardQueryConfigHandler.Operator.OR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", null, \"türm term term\");\n    assertQueryEquals(\"ümlaut\", null, \"ümlaut\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n        \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n        \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n        \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null, \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n        \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n        \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n\n    PrecedenceQueryParser qp = new PrecedenceQueryParser();\n    qp.setAnalyzer(new MockAnalyzer(random()));\n    // make sure OR is the default:\n    assertEquals(StandardQueryConfigHandler.Operator.OR, qp.getDefaultOperator());\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    assertEquals(StandardQueryConfigHandler.Operator.AND, qp.getDefaultOperator());\n    qp.setDefaultOperator(StandardQueryConfigHandler.Operator.OR);\n    assertEquals(StandardQueryConfigHandler.Operator.OR, qp.getDefaultOperator());\n\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b0cdf628dda21ad509f09608c835dc27541d1ca3"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b0cdf628dda21ad509f09608c835dc27541d1ca3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b0cdf628dda21ad509f09608c835dc27541d1ca3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}