{"path":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#mergeDoc(int).mjava","commits":[{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#mergeDoc(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void mergeDoc(int docID) throws IOException {\n      assert merge;\n      assert lastDocID < docID;\n      if (bytesRef.length == 0) {\n        return; // default\n      }\n      fill(docID);\n      datOut.writeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length);\n      docToAddress[docID] = address;\n      address += bytesRef.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#mergeDoc(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void mergeDoc(int docID) throws IOException {\n      assert merge;\n      assert lastDocID < docID;\n      if (bytesRef.length == 0) {\n        return; // default\n      }\n      fill(docID);\n      datOut.writeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length);\n      docToAddress[docID] = address;\n      address += bytesRef.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#mergeDoc(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void mergeDoc(int docID) throws IOException {\n      assert merge;\n      assert lastDocID < docID;\n      if (bytesRef.length == 0) {\n        return; // default\n      }\n      fill(docID);\n      datOut.writeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length);\n      docToAddress[docID] = address;\n      address += bytesRef.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#mergeDoc(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/VarStraightBytesImpl.Writer#mergeDoc(int).mjava","sourceNew":"    @Override\n    protected void mergeDoc(int docID, int sourceDoc) throws IOException {\n      assert merge;\n      assert lastDocID < docID;\n      currentMergeSource.getBytes(sourceDoc, bytesRef);\n      if (bytesRef.length == 0) {\n        return; // default\n      }\n      fill(docID, address);\n      datOut.writeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length);\n      docToAddress[docID] = address;\n      address += bytesRef.length;\n      lastDocID = docID;\n    }\n\n","sourceOld":"    @Override\n    protected void mergeDoc(int docID) throws IOException {\n      assert merge;\n      assert lastDocID < docID;\n      if (bytesRef.length == 0) {\n        return; // default\n      }\n      fill(docID);\n      datOut.writeBytes(bytesRef.bytes, bytesRef.offset, bytesRef.length);\n      docToAddress[docID] = address;\n      address += bytesRef.length;\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e128967bca58657bc0039d4bfe631e63e81f1977":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e128967bca58657bc0039d4bfe631e63e81f1977"]},"commit2Childs":{"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["e128967bca58657bc0039d4bfe631e63e81f1977","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"e128967bca58657bc0039d4bfe631e63e81f1977":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}