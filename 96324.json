{"path":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","pathOld":"modules/spatial-lucene/src/main/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","sourceNew":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If its neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(\"prefixTree\");\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else {\n      try {\n        Class c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","sourceOld":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If its neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(\"prefixTree\");\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else {\n      try {\n        Class c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","pathOld":"modules/spatial/src/main/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTreeFactory#makeSPT(Map[String,String],ClassLoader,SpatialContext).mjava","sourceNew":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If its neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(\"prefixTree\");\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else {\n      try {\n        Class c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","sourceOld":"  /**\n   * The factory  is looked up via \"prefixTree\" in args, expecting \"geohash\" or \"quad\".\n   * If its neither of these, then \"geohash\" is chosen for a geo context, otherwise \"quad\" is chosen.\n   */\n  public static SpatialPrefixTree makeSPT(Map<String,String> args, ClassLoader classLoader, SpatialContext ctx) {\n    SpatialPrefixTreeFactory instance;\n    String cname = args.get(\"prefixTree\");\n    if (cname == null)\n      cname = ctx.isGeo() ? \"geohash\" : \"quad\";\n    if (\"geohash\".equalsIgnoreCase(cname))\n      instance = new GeohashPrefixTree.Factory();\n    else if (\"quad\".equalsIgnoreCase(cname))\n      instance = new QuadPrefixTree.Factory();\n    else {\n      try {\n        Class c = classLoader.loadClass(cname);\n        instance = (SpatialPrefixTreeFactory) c.newInstance();\n      } catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }\n    instance.init(args,ctx);\n    return instance.newSPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}