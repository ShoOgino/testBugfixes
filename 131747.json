{"path":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","commits":[{"id":"931aa2e14bf0bd782433b017ac4423637019725a","date":1308349478,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","pathOld":"/dev/null","sourceNew":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa=a.length();\n    int bb=aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7edfc3f7caa7b49a18fe367692768b33b018e9db","date":1308374217,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","pathOld":"/dev/null","sourceNew":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa=a.length();\n    int bb=aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d20f8b3264a4581b552a84c41fd8e4a84182123","date":1308948226,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","sourceNew":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa = a.size() + random.nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa=a.length();\n    int bb=aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","sourceNew":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa = a.size() + random.nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa=a.length();\n    int bb=aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","sourceNew":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa = a.size() + random.nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa=a.length();\n    int bb=aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doPrevSetBit(BitSet,OpenBitSet).mjava","sourceNew":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa = a.size() + random.nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","sourceOld":"  void doPrevSetBit(BitSet a, OpenBitSet b) {\n    int aa = a.size() + random.nextInt(100);\n    int bb = aa;\n    do {\n      // aa = a.prevSetBit(aa-1);\n      aa--;\n      while ((aa >= 0) && (! a.get(aa))) {\n      \taa--;\n      }\n      bb = b.prevSetBit(bb-1);\n      assertEquals(aa,bb);\n    } while (aa>=0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"931aa2e14bf0bd782433b017ac4423637019725a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","931aa2e14bf0bd782433b017ac4423637019725a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8d20f8b3264a4581b552a84c41fd8e4a84182123"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d20f8b3264a4581b552a84c41fd8e4a84182123":["931aa2e14bf0bd782433b017ac4423637019725a"],"2553b00f699380c64959ccb27991289aae87be2e":["7edfc3f7caa7b49a18fe367692768b33b018e9db","8d20f8b3264a4581b552a84c41fd8e4a84182123"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["931aa2e14bf0bd782433b017ac4423637019725a","8d20f8b3264a4581b552a84c41fd8e4a84182123"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"931aa2e14bf0bd782433b017ac4423637019725a":["7edfc3f7caa7b49a18fe367692768b33b018e9db","8d20f8b3264a4581b552a84c41fd8e4a84182123","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"7edfc3f7caa7b49a18fe367692768b33b018e9db":["2553b00f699380c64959ccb27991289aae87be2e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["931aa2e14bf0bd782433b017ac4423637019725a","7edfc3f7caa7b49a18fe367692768b33b018e9db"],"8d20f8b3264a4581b552a84c41fd8e4a84182123":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}