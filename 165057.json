{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"438e995b4e32916f631722aab36254146830fefb","date":1328903827,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getCurrentSegmentFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = IndexReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d19974432be9aed28ee7dca73bdf01d139e763a9","date":1342822166,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n      dir.setPreventDoubleWrite(false);\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                         .setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                         .setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                         .setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.shutdown();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testSimulatedCrashedWriter().mjava","sourceNew":null,"sourceOld":"  // Simulate a writer that crashed while writing segments\n  // file: make sure we can still open the index (ie,\n  // gracefully fallback to the previous segments file),\n  // and that we can add to the index:\n  public void testSimulatedCrashedWriter() throws IOException {\n      Directory dir = newDirectory();\n      if (dir instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper)dir).setPreventDoubleWrite(false);\n      }\n\n      IndexWriter writer = null;\n\n      writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n\n      long gen = SegmentInfos.getLastCommitGeneration(dir);\n      assertTrue(\"segment generation should be > 0 but got \" + gen, gen > 0);\n\n      // Make the next segments file, with last byte\n      // missing, to simulate a writer that crashed while\n      // writing segments file:\n      String fileNameIn = SegmentInfos.getLastCommitSegmentsFileName(dir);\n      String fileNameOut = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                 \"\",\n                                                                 1+gen);\n      IndexInput in = dir.openInput(fileNameIn, newIOContext(random()));\n      IndexOutput out = dir.createOutput(fileNameOut, newIOContext(random()));\n      long length = in.length();\n      for(int i=0;i<length-1;i++) {\n        out.writeByte(in.readByte());\n      }\n      in.close();\n      out.close();\n\n      IndexReader reader = null;\n      try {\n        reader = DirectoryReader.open(dir);\n      } catch (Exception e) {\n        fail(\"reader failed to open on a crashed index\");\n      }\n      reader.close();\n\n      try {\n        writer  = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random()))\n                                         .setOpenMode(OpenMode.CREATE));\n      } catch (Exception e) {\n        e.printStackTrace(System.out);\n        fail(\"writer failed to open on a crashed index\");\n      }\n\n      // add 100 documents\n      for (int i = 0; i < 100; i++) {\n          addDoc(writer);\n      }\n\n      // close\n      writer.close();\n      dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","d19974432be9aed28ee7dca73bdf01d139e763a9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["438e995b4e32916f631722aab36254146830fefb"],"438e995b4e32916f631722aab36254146830fefb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["438e995b4e32916f631722aab36254146830fefb"],"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","d19974432be9aed28ee7dca73bdf01d139e763a9","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"d19974432be9aed28ee7dca73bdf01d139e763a9":["aba371508186796cc6151d8223a5b4e16d02e26e","ae14298f4eec6d5faee6a149f88ba57d14a6f21a","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"438e995b4e32916f631722aab36254146830fefb":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}