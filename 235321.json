{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","sourceNew":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos();\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","sourceOld":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos();\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6","date":1288888250,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","sourceNew":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos(codecs);\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","sourceOld":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos();\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","sourceNew":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos(codecs);\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","sourceOld":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos();\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","sourceNew":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos(codecs);\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","sourceOld":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos();\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos(codecs);\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos(codecs);\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#range(int,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a new SegmentInfos containing the SegmentInfo\n   * instances in the specified range first (inclusive) to\n   * last (exclusive), so total number of segments returned\n   * is last-first.\n   */\n  public SegmentInfos range(int first, int last) {\n    SegmentInfos infos = new SegmentInfos(codecs);\n    infos.addAll(super.subList(first, last));\n    return infos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["85a883878c0af761245ab048babc63d099f835f3","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["9454a6510e2db155fb01faa5c049b06ece95fab9","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"85a883878c0af761245ab048babc63d099f835f3":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","a3776dccca01c11e7046323cfad46a3b4a471233","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2248ea99d1f1e5ae6d67d1547acfe3e29576b8a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}