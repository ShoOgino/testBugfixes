{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFloatDoublePoints().mjava","commits":[{"id":"c52eabf9563c6ddad6c19e4af424531007b0910c","date":1533859070,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFloatDoublePoints().mjava","pathOld":"/dev/null","sourceNew":"  private void testBasicGroupingFloatDoublePoints() throws Exception {\n    try {\n\n      Random random = random();\n      int r = random.nextInt(2);\n      String[] intOrLong = {\"field_f_p\", \"field_d_p\"};\n      String[] facetOrMap = {\"facet\", \"map_reduce\"};\n      String field = intOrLong[r];\n      r = random.nextInt(2);\n      String mode = facetOrMap[r];\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"7.0\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"8.0\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"20.0\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"11.0\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"30.0\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"40.0\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"50.0\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"60.0\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", field, \"70.0\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", mode,\n          \"stmt\", \"select str_s, count(*), sum(\"+field+\"), min(\"+field+\"), max(\"+field+\"), avg(\"+field+\") from collection1 where text='XXXX' group by str_s order by sum(\"+field+\") asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); //count(*)\n      assertEquals(tuple.getDouble(\"EXPR$2\"), 19, 0.0); //sum(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$3\"), 8, 0.0); //min(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$4\"), 11, 0.0); //max(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$5\"), 9.5, 0.0); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); //count(*)\n      assertEquals(tuple.getDouble(\"EXPR$2\"), 27, 0.0); //sum(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$3\"), 7, 0.0); //min(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$4\"), 20, 0.0); //max(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$5\"), 13.5, 0.0); //avg(field_i)\n\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFloatDoublePoints().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFloatDoublePoints().mjava","sourceNew":"  private void testBasicGroupingFloatDoublePoints() throws Exception {\n\n    Random random = random();\n    int r = random.nextInt(2);\n    String[] intOrLong = {\"field_f_p\", \"field_d_p\"};\n    String[] facetOrMap = {\"facet\", \"map_reduce\"};\n    String field = intOrLong[r];\n    r = random.nextInt(2);\n    String mode = facetOrMap[r];\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"7.0\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"8.0\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"20.0\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"11.0\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"30.0\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"40.0\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"50.0\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"60.0\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", field, \"70.0\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", mode,\n        \"stmt\", \"select str_s, count(*), sum(\" + field + \"), min(\" + field + \"), max(\" + field + \"), avg(\" + field\n            + \") from collection1 where text='XXXX' group by str_s order by sum(\" + field + \") asc limit 2\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); // count(*)\n    assertEquals(tuple.getDouble(\"EXPR$2\"), 19, 0.0); // sum(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$3\"), 8, 0.0); // min(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$4\"), 11, 0.0); // max(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$5\"), 9.5, 0.0); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); // count(*)\n    assertEquals(tuple.getDouble(\"EXPR$2\"), 27, 0.0); // sum(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$3\"), 7, 0.0); // min(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$4\"), 20, 0.0); // max(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$5\"), 13.5, 0.0); // avg(field_i)\n\n  }\n\n","sourceOld":"  private void testBasicGroupingFloatDoublePoints() throws Exception {\n    try {\n\n      Random random = random();\n      int r = random.nextInt(2);\n      String[] intOrLong = {\"field_f_p\", \"field_d_p\"};\n      String[] facetOrMap = {\"facet\", \"map_reduce\"};\n      String field = intOrLong[r];\n      r = random.nextInt(2);\n      String mode = facetOrMap[r];\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"7.0\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"8.0\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"20.0\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"11.0\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"30.0\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"40.0\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"50.0\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"60.0\");\n      indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", field, \"70.0\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", mode,\n          \"stmt\", \"select str_s, count(*), sum(\"+field+\"), min(\"+field+\"), max(\"+field+\"), avg(\"+field+\") from collection1 where text='XXXX' group by str_s order by sum(\"+field+\") asc limit 2\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      //Only two results because of the limit.\n      assert(tuples.size() == 2);\n      Tuple tuple;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); //count(*)\n      assertEquals(tuple.getDouble(\"EXPR$2\"), 19, 0.0); //sum(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$3\"), 8, 0.0); //min(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$4\"), 11, 0.0); //max(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$5\"), 9.5, 0.0); //avg(field_i)\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); //count(*)\n      assertEquals(tuple.getDouble(\"EXPR$2\"), 27, 0.0); //sum(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$3\"), 7, 0.0); //min(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$4\"), 20, 0.0); //max(field_i)\n      assertEquals(tuple.getDouble(\"EXPR$5\"), 13.5, 0.0); //avg(field_i)\n\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600937be95b5a041815220371fa7882e73031d56","date":1551734162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFloatDoublePoints().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFloatDoublePoints().mjava","sourceNew":"  private void testBasicGroupingFloatDoublePoints() throws Exception {\n\n    Random random = random();\n    int r = random.nextInt(2);\n    String[] intOrLong = {\"field_f_p\", \"field_d_p\"};\n    String[] facetOrMap = {\"facet\", \"map_reduce\"};\n    String field = intOrLong[r];\n    r = random.nextInt(2);\n    String mode = facetOrMap[r];\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"7.0\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"8.0\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"20.0\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"11.0\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"30.0\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"40.0\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"50.0\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"60.0\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", field, \"70.0\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", mode,\n        \"stmt\", \"select str_s, count(*), sum(\" + field + \"), min(\" + field + \"), max(\" + field + \"), avg(\" + field\n            + \") from collection1 where text='XXXX' group by str_s order by sum(\" + field + \") asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); // count(*)\n    assertEquals(tuple.getDouble(\"EXPR$2\"), 19, 0.0); // sum(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$3\"), 8, 0.0); // min(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$4\"), 11, 0.0); // max(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$5\"), 9.5, 0.0); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); // count(*)\n    assertEquals(tuple.getDouble(\"EXPR$2\"), 27, 0.0); // sum(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$3\"), 7, 0.0); // min(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$4\"), 20, 0.0); // max(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$5\"), 13.5, 0.0); // avg(field_i)\n\n  }\n\n","sourceOld":"  private void testBasicGroupingFloatDoublePoints() throws Exception {\n\n    Random random = random();\n    int r = random.nextInt(2);\n    String[] intOrLong = {\"field_f_p\", \"field_d_p\"};\n    String[] facetOrMap = {\"facet\", \"map_reduce\"};\n    String field = intOrLong[r];\n    r = random.nextInt(2);\n    String mode = facetOrMap[r];\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"7.0\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"8.0\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"20.0\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"11.0\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"30.0\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"40.0\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"50.0\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"60.0\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", field, \"70.0\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", mode,\n        \"stmt\", \"select str_s, count(*), sum(\" + field + \"), min(\" + field + \"), max(\" + field + \"), avg(\" + field\n            + \") from collection1 where text='XXXX' group by str_s order by sum(\" + field + \") asc limit 2\");\n\n    SolrStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); // count(*)\n    assertEquals(tuple.getDouble(\"EXPR$2\"), 19, 0.0); // sum(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$3\"), 8, 0.0); // min(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$4\"), 11, 0.0); // max(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$5\"), 9.5, 0.0); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); // count(*)\n    assertEquals(tuple.getDouble(\"EXPR$2\"), 27, 0.0); // sum(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$3\"), 7, 0.0); // min(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$4\"), 20, 0.0); // max(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$5\"), 13.5, 0.0); // avg(field_i)\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testBasicGroupingFloatDoublePoints().mjava","sourceNew":null,"sourceOld":"  private void testBasicGroupingFloatDoublePoints() throws Exception {\n\n    Random random = random();\n    int r = random.nextInt(2);\n    String[] intOrLong = {\"field_f_p\", \"field_d_p\"};\n    String[] facetOrMap = {\"facet\", \"map_reduce\"};\n    String field = intOrLong[r];\n    r = random.nextInt(2);\n    String mode = facetOrMap[r];\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"7.0\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"8.0\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", field, \"20.0\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", field, \"11.0\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"30.0\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"40.0\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"50.0\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", field, \"60.0\");\n    indexr(\"id\", \"9\", \"text\", \"XXXX XXXY\", \"str_s\", \"d\", field, \"70.0\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", mode,\n        \"stmt\", \"select str_s, count(*), sum(\" + field + \"), min(\" + field + \"), max(\" + field + \"), avg(\" + field\n            + \") from collection1 where text='XXXX' group by str_s order by sum(\" + field + \") asc limit 2\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    // Only two results because of the limit.\n    assert (tuples.size() == 2);\n    Tuple tuple;\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); // count(*)\n    assertEquals(tuple.getDouble(\"EXPR$2\"), 19, 0.0); // sum(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$3\"), 8, 0.0); // min(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$4\"), 11, 0.0); // max(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$5\"), 9.5, 0.0); // avg(field_i)\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assertEquals(tuple.getDouble(\"EXPR$1\"), 2, 0.0); // count(*)\n    assertEquals(tuple.getDouble(\"EXPR$2\"), 27, 0.0); // sum(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$3\"), 7, 0.0); // min(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$4\"), 20, 0.0); // max(field_i)\n    assertEquals(tuple.getDouble(\"EXPR$5\"), 13.5, 0.0); // avg(field_i)\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["600937be95b5a041815220371fa7882e73031d56"],"c52eabf9563c6ddad6c19e4af424531007b0910c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"600937be95b5a041815220371fa7882e73031d56":["c58a62203315881cce5089ef67ffee6b8a988a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c58a62203315881cce5089ef67ffee6b8a988a75":["c52eabf9563c6ddad6c19e4af424531007b0910c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c52eabf9563c6ddad6c19e4af424531007b0910c":["c58a62203315881cce5089ef67ffee6b8a988a75"],"600937be95b5a041815220371fa7882e73031d56":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c52eabf9563c6ddad6c19e4af424531007b0910c"],"c58a62203315881cce5089ef67ffee6b8a988a75":["600937be95b5a041815220371fa7882e73031d56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}