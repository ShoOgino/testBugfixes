{"path":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#update(FrozenBufferedDeletes).mjava","commits":[{"id":"69a6d2d525aeab53c867ed26934185e5bb627d0e","date":1296516902,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#update(FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  void update(FrozenBufferedDeletes in) {\n    numTermDeletes.addAndGet(in.numTermDeletes);\n    for(Term term : in.terms) {\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      terms.put(term, MAX_INT);\n    }\n\n    for(int queryIdx=0;queryIdx<in.queries.length;queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      queries.put(query, MAX_INT);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#update(FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  void update(FrozenBufferedDeletes in) {\n    numTermDeletes.addAndGet(in.numTermDeletes);\n    for(Term term : in.terms) {\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      terms.put(term, MAX_INT);\n    }\n\n    for(int queryIdx=0;queryIdx<in.queries.length;queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      queries.put(query, MAX_INT);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#update(FrozenBufferedDeletes).mjava","pathOld":"/dev/null","sourceNew":"  void update(FrozenBufferedDeletes in) {\n    numTermDeletes.addAndGet(in.numTermDeletes);\n    for(Term term : in.terms) {\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      terms.put(term, MAX_INT);\n    }\n\n    for(int queryIdx=0;queryIdx<in.queries.length;queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      queries.put(query, MAX_INT);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","date":1311898374,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/BufferedDeletes#update(FrozenBufferedDeletes).mjava","sourceNew":null,"sourceOld":"  void update(FrozenBufferedDeletes in) {\n    numTermDeletes.addAndGet(in.numTermDeletes);\n    for(Term term : in.terms) {\n      if (!terms.containsKey(term)) {\n        // only incr bytesUsed if this term wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_TERM);\n      }\n      terms.put(term, MAX_INT);\n    }\n\n    for(int queryIdx=0;queryIdx<in.queries.length;queryIdx++) {\n      final Query query = in.queries[queryIdx];\n      if (!queries.containsKey(query)) {\n        // only incr bytesUsed if this query wasn't already buffered:\n        bytesUsed.addAndGet(BYTES_PER_DEL_QUERY);\n      }\n      queries.put(query, MAX_INT);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["69a6d2d525aeab53c867ed26934185e5bb627d0e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","69a6d2d525aeab53c867ed26934185e5bb627d0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"]},"commit2Childs":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","69a6d2d525aeab53c867ed26934185e5bb627d0e","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"69a6d2d525aeab53c867ed26934185e5bb627d0e":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}