{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,Bits).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n\n      // Pass scoreDocsInOrder true, topScorer false to our sub:\n      final Scorer parentScorer = parentWeight.scorer(readerContext, true, false, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.ToChildBlockJoinWeight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"    // NOTE: acceptDocs applies (and is checked) only in the\n    // child document space\n    @Override\n    public Scorer scorer(AtomicReaderContext readerContext, Bits acceptDocs) throws IOException {\n\n      final Scorer parentScorer = parentWeight.scorer(readerContext, null);\n\n      if (parentScorer == null) {\n        // No matches\n        return null;\n      }\n\n      // NOTE: we cannot pass acceptDocs here because this\n      // will (most likely, justifiably) cause the filter to\n      // not return a FixedBitSet but rather a\n      // BitsFilteredDocIdSet.  Instead, we filter by\n      // acceptDocs when we score:\n      final DocIdSet parents = parentsFilter.getDocIdSet(readerContext, null);\n\n      if (parents == null) {\n        // No matches\n        return null;\n      }\n      if (!(parents instanceof FixedBitSet)) {\n        throw new IllegalStateException(\"parentFilter must return FixedBitSet; got \" + parents);\n      }\n\n      return new ToChildBlockJoinScorer(this, parentScorer, (FixedBitSet) parents, doScores, acceptDocs);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}