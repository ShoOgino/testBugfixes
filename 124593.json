{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(Weight,LeafReaderContext,String,String,boolean,boolean).mjava","commits":[{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(Weight,LeafReaderContext,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(LeafReaderContext,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) throws IOException {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(weight, readerContext, this) {\n      final SortedDocValues values = readerContext.reader().getSortedDocValues(field);\n      private int lastDocID;\n      \n      @Override\n      public boolean matches(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        if (doc > values.docID()) {\n          values.advance(doc);\n        }\n        if (doc == values.docID()) {\n          int ord = values.ordValue();\n          return ord >= ll && ord <= uu;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) throws IOException {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(readerContext, this) {\n      final SortedDocValues values = readerContext.reader().getSortedDocValues(field);\n      private int lastDocID;\n      \n      @Override\n      public boolean matches(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        if (doc > values.docID()) {\n          values.advance(doc);\n        }\n        if (doc == values.docID()) {\n          int ord = values.ordValue();\n          return ord >= ll && ord <= uu;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b431ce77ca86508f48a977c5fc07a63828f3241","date":1583960267,"type":3,"author":"Michele Palmia","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(Weight,LeafReaderContext,String,String,boolean,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/docvalues/DocTermsIndexDocValues#getRangeScorer(Weight,LeafReaderContext,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) throws IOException {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(weight, readerContext, this) {\n      @Override\n      public boolean matches(int doc) throws IOException {\n        if (!exists(doc)) return false;\n        float docVal = ordVal(doc);\n        return docVal >= ll && docVal <= uu;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public ValueSourceScorer getRangeScorer(Weight weight, LeafReaderContext readerContext, String lowerVal, String upperVal, boolean includeLower, boolean includeUpper) throws IOException {\n    // TODO: are lowerVal and upperVal in indexed form or not?\n    lowerVal = lowerVal == null ? null : toTerm(lowerVal);\n    upperVal = upperVal == null ? null : toTerm(upperVal);\n\n    int lower = Integer.MIN_VALUE;\n    if (lowerVal != null) {\n      lower = termsIndex.lookupTerm(new BytesRef(lowerVal));\n      if (lower < 0) {\n        lower = -lower-1;\n      } else if (!includeLower) {\n        lower++;\n      }\n    }\n\n    int upper = Integer.MAX_VALUE;\n    if (upperVal != null) {\n      upper = termsIndex.lookupTerm(new BytesRef(upperVal));\n      if (upper < 0) {\n        upper = -upper-2;\n      } else if (!includeUpper) {\n        upper--;\n      }\n    }\n\n    final int ll = lower;\n    final int uu = upper;\n\n    return new ValueSourceScorer(weight, readerContext, this) {\n      final SortedDocValues values = readerContext.reader().getSortedDocValues(field);\n      private int lastDocID;\n      \n      @Override\n      public boolean matches(int doc) throws IOException {\n        if (doc < lastDocID) {\n          throw new IllegalArgumentException(\"docs were sent out-of-order: lastDocID=\" + lastDocID + \" vs docID=\" + doc);\n        }\n        if (doc > values.docID()) {\n          values.advance(doc);\n        }\n        if (doc == values.docID()) {\n          int ord = values.ordValue();\n          return ord >= ll && ord <= uu;\n        } else {\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b431ce77ca86508f48a977c5fc07a63828f3241":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b431ce77ca86508f48a977c5fc07a63828f3241"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"3b431ce77ca86508f48a977c5fc07a63828f3241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["3b431ce77ca86508f48a977c5fc07a63828f3241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}