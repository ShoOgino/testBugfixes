{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#SpanScorer(WeightedSpanTerm[]).mjava","commits":[{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#SpanScorer(WeightedSpanTerm[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * @param weightedTerms\r\n   */\r\n  public SpanScorer(WeightedSpanTerm[] weightedTerms) {\r\n    this.fieldWeightedSpanTerms = new HashMap(weightedTerms.length);\r\n\r\n    for (int i = 0; i < weightedTerms.length; i++) {\r\n      WeightedSpanTerm existingTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(weightedTerms[i].term);\r\n\r\n      if ((existingTerm == null) ||\r\n            (existingTerm.weight < weightedTerms[i].weight)) {\r\n        // if a term is defined more than once, always use the highest\r\n        // scoring weight\r\n        fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\r\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\r\n      }\r\n    }\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#SpanScorer(WeightedSpanTerm[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#SpanScorer(WeightedSpanTerm[]).mjava","sourceNew":"  /**\n   * @param weightedTerms\n   */\n  public SpanScorer(WeightedSpanTerm[] weightedTerms) {\n    this.fieldWeightedSpanTerms = new HashMap(weightedTerms.length);\n\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedSpanTerm existingTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(weightedTerms[i].term);\n\n      if ((existingTerm == null) ||\n            (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest\n        // scoring weight\n        fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","sourceOld":"  /**\r\n   * @param weightedTerms\r\n   */\r\n  public SpanScorer(WeightedSpanTerm[] weightedTerms) {\r\n    this.fieldWeightedSpanTerms = new HashMap(weightedTerms.length);\r\n\r\n    for (int i = 0; i < weightedTerms.length; i++) {\r\n      WeightedSpanTerm existingTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(weightedTerms[i].term);\r\n\r\n      if ((existingTerm == null) ||\r\n            (existingTerm.weight < weightedTerms[i].weight)) {\r\n        // if a term is defined more than once, always use the highest\r\n        // scoring weight\r\n        fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\r\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\r\n      }\r\n    }\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/QueryScorer#QueryScorer(WeightedSpanTerm[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/SpanScorer#SpanScorer(WeightedSpanTerm[]).mjava","sourceNew":"  /**\n   * @param weightedTerms\n   */\n  public QueryScorer(WeightedSpanTerm[] weightedTerms) {\n    this.fieldWeightedSpanTerms = new HashMap(weightedTerms.length);\n\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedSpanTerm existingTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(weightedTerms[i].term);\n\n      if ((existingTerm == null) ||\n            (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest\n        // scoring weight\n        fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n    skipInitExtractor = true;\n  }\n\n","sourceOld":"  /**\n   * @param weightedTerms\n   */\n  public SpanScorer(WeightedSpanTerm[] weightedTerms) {\n    this.fieldWeightedSpanTerms = new HashMap(weightedTerms.length);\n\n    for (int i = 0; i < weightedTerms.length; i++) {\n      WeightedSpanTerm existingTerm = (WeightedSpanTerm) fieldWeightedSpanTerms.get(weightedTerms[i].term);\n\n      if ((existingTerm == null) ||\n            (existingTerm.weight < weightedTerms[i].weight)) {\n        // if a term is defined more than once, always use the highest\n        // scoring weight\n        fieldWeightedSpanTerms.put(weightedTerms[i].term, weightedTerms[i]);\n        maxTermWeight = Math.max(maxTermWeight, weightedTerms[i].getWeight());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["296b8b38a87feb478921f77834a2302dfe77641c"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"296b8b38a87feb478921f77834a2302dfe77641c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["943c3f9cf96b8df37f4273d66a66182e2a669467"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["296b8b38a87feb478921f77834a2302dfe77641c"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"296b8b38a87feb478921f77834a2302dfe77641c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}