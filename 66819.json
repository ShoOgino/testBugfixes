{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader#TempFSTOrdTermsReader(SegmentReadState,PostingsReaderBase).mjava","commits":[{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader#TempFSTOrdTermsReader(SegmentReadState,PostingsReaderBase).mjava","pathOld":"/dev/null","sourceNew":"  public TempFSTOrdTermsReader(SegmentReadState state, PostingsReaderBase postingsReader) throws IOException {\n    final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTOrdTermsWriter.TERMS_INDEX_EXTENSION);\n    final String termsBlockFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTOrdTermsWriter.TERMS_BLOCK_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    try {\n      this.indexIn = state.directory.openInput(termsIndexFileName, state.context);\n      this.blockIn = state.directory.openInput(termsBlockFileName, state.context);\n      readHeader(indexIn);\n      readHeader(blockIn);\n      this.postingsReader.init(blockIn);\n      seekDir(indexIn);\n      seekDir(blockIn);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = blockIn.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(blockIn.readVInt());\n        boolean hasFreq = fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY;\n        long numTerms = blockIn.readVLong();\n        long sumTotalTermFreq = hasFreq ? blockIn.readVLong() : -1;\n        long sumDocFreq = blockIn.readVLong();\n        int docCount = blockIn.readVInt();\n        int longsSize = blockIn.readVInt();\n        FST<Long> index = new FST<Long>(indexIn, PositiveIntOutputs.getSingleton());\n\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize, index);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(indexIn, blockIn);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f71b8f76a3876ede75eba21fb109342525c3d9c4","date":1378263923,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader#TempFSTOrdTermsReader(SegmentReadState,PostingsReaderBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader#TempFSTOrdTermsReader(SegmentReadState,PostingsReaderBase).mjava","sourceNew":"  public TempFSTOrdTermsReader(SegmentReadState state, PostingsReaderBase postingsReader) throws IOException {\n    final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTOrdTermsWriter.TERMS_INDEX_EXTENSION);\n    final String termsBlockFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTOrdTermsWriter.TERMS_BLOCK_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    try {\n      this.indexIn = state.directory.openInput(termsIndexFileName, state.context);\n      this.blockIn = state.directory.openInput(termsBlockFileName, state.context);\n      readHeader(indexIn);\n      readHeader(blockIn);\n      this.postingsReader.init(blockIn);\n      seekDir(blockIn);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = blockIn.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(blockIn.readVInt());\n        boolean hasFreq = fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY;\n        long numTerms = blockIn.readVLong();\n        long sumTotalTermFreq = hasFreq ? blockIn.readVLong() : -1;\n        long sumDocFreq = blockIn.readVLong();\n        int docCount = blockIn.readVInt();\n        int longsSize = blockIn.readVInt();\n        FST<Long> index = new FST<Long>(indexIn, PositiveIntOutputs.getSingleton());\n\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize, index);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(indexIn, blockIn);\n    }\n  }\n\n","sourceOld":"  public TempFSTOrdTermsReader(SegmentReadState state, PostingsReaderBase postingsReader) throws IOException {\n    final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTOrdTermsWriter.TERMS_INDEX_EXTENSION);\n    final String termsBlockFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTOrdTermsWriter.TERMS_BLOCK_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    try {\n      this.indexIn = state.directory.openInput(termsIndexFileName, state.context);\n      this.blockIn = state.directory.openInput(termsBlockFileName, state.context);\n      readHeader(indexIn);\n      readHeader(blockIn);\n      this.postingsReader.init(blockIn);\n      seekDir(indexIn);\n      seekDir(blockIn);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = blockIn.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(blockIn.readVInt());\n        boolean hasFreq = fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY;\n        long numTerms = blockIn.readVLong();\n        long sumTotalTermFreq = hasFreq ? blockIn.readVLong() : -1;\n        long sumDocFreq = blockIn.readVLong();\n        int docCount = blockIn.readVInt();\n        int longsSize = blockIn.readVInt();\n        FST<Long> index = new FST<Long>(indexIn, PositiveIntOutputs.getSingleton());\n\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize, index);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(indexIn, blockIn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTOrdTermsReader#FSTOrdTermsReader(SegmentReadState,PostingsReaderBase).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempFSTOrdTermsReader#TempFSTOrdTermsReader(SegmentReadState,PostingsReaderBase).mjava","sourceNew":"  public FSTOrdTermsReader(SegmentReadState state, PostingsReaderBase postingsReader) throws IOException {\n    final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FSTOrdTermsWriter.TERMS_INDEX_EXTENSION);\n    final String termsBlockFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, FSTOrdTermsWriter.TERMS_BLOCK_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    try {\n      this.indexIn = state.directory.openInput(termsIndexFileName, state.context);\n      this.blockIn = state.directory.openInput(termsBlockFileName, state.context);\n      readHeader(indexIn);\n      readHeader(blockIn);\n      this.postingsReader.init(blockIn);\n      seekDir(blockIn);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = blockIn.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(blockIn.readVInt());\n        boolean hasFreq = fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY;\n        long numTerms = blockIn.readVLong();\n        long sumTotalTermFreq = hasFreq ? blockIn.readVLong() : -1;\n        long sumDocFreq = blockIn.readVLong();\n        int docCount = blockIn.readVInt();\n        int longsSize = blockIn.readVInt();\n        FST<Long> index = new FST<Long>(indexIn, PositiveIntOutputs.getSingleton());\n\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize, index);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(indexIn, blockIn);\n    }\n  }\n\n","sourceOld":"  public TempFSTOrdTermsReader(SegmentReadState state, PostingsReaderBase postingsReader) throws IOException {\n    final String termsIndexFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTOrdTermsWriter.TERMS_INDEX_EXTENSION);\n    final String termsBlockFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTOrdTermsWriter.TERMS_BLOCK_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    try {\n      this.indexIn = state.directory.openInput(termsIndexFileName, state.context);\n      this.blockIn = state.directory.openInput(termsBlockFileName, state.context);\n      readHeader(indexIn);\n      readHeader(blockIn);\n      this.postingsReader.init(blockIn);\n      seekDir(blockIn);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = blockIn.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(blockIn.readVInt());\n        boolean hasFreq = fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY;\n        long numTerms = blockIn.readVLong();\n        long sumTotalTermFreq = hasFreq ? blockIn.readVLong() : -1;\n        long sumDocFreq = blockIn.readVLong();\n        int docCount = blockIn.readVInt();\n        int longsSize = blockIn.readVInt();\n        FST<Long> index = new FST<Long>(indexIn, PositiveIntOutputs.getSingleton());\n\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize, index);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n    } finally {\n      IOUtils.closeWhileHandlingException(indexIn, blockIn);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["f71b8f76a3876ede75eba21fb109342525c3d9c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f71b8f76a3876ede75eba21fb109342525c3d9c4":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["f71b8f76a3876ede75eba21fb109342525c3d9c4"],"f71b8f76a3876ede75eba21fb109342525c3d9c4":["56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56df73d43b6fc340f5332322862382c7e30f4368","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}