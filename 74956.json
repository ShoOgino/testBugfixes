{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","commits":[{"id":"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94","date":1344442349,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readBlock(IndexInput,byte[],long[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSize(numBits);\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException\n   */\n  void readBlock(IndexInput in, byte[] encoded, long[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSize(numBits);\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0d2b90b9b7c96860f9c096edae6ed8fad95388","date":1344516744,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSize(numBits);\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6b41208259e8566cba0ecac7da6a331ea9732dd","date":1344551376,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#readBlock(IndexInput,byte[],int[]).mjava","sourceNew":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","sourceOld":"  /**\n   * Read the next block of data (<code>For</code> format).\n   *\n   * @param in        the input to use to read data\n   * @param encoded   a buffer that can be used to store encoded data\n   * @param decoded   where to write decoded data\n   * @throws IOException\n   */\n  void readBlock(IndexInput in, byte[] encoded, int[] decoded) throws IOException {\n    final int numBits = in.readVInt();\n    assert numBits <= 32 : numBits;\n\n    if (numBits == ALL_VALUES_EQUAL) {\n      final int value = in.readInt();\n      Arrays.fill(decoded, 0, BLOCK_SIZE, value);\n      return;\n    }\n\n    final int encodedSize = encodedSizes[numBits];\n    in.readBytes(encoded, 0, encodedSize);\n\n    final PackedInts.Decoder decoder = decoders[numBits];\n    final int iters = iterations[numBits];\n    assert iters * decoder.valueCount() >= BLOCK_SIZE;\n\n    decoder.decode(encoded, 0, decoded, 0, iters);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6b41208259e8566cba0ecac7da6a331ea9732dd":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"]},"commit2Childs":{"ee0d2b90b9b7c96860f9c096edae6ed8fad95388":["e6b41208259e8566cba0ecac7da6a331ea9732dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cfd81d9c5e64e3e7bf4be0b28563e7f15441ae94":["ee0d2b90b9b7c96860f9c096edae6ed8fad95388"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e6b41208259e8566cba0ecac7da6a331ea9732dd":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","e6b41208259e8566cba0ecac7da6a331ea9732dd"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}