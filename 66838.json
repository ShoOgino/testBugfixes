{"path":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","commits":[{"id":"d21918640a59a58307481ebd2506d4b708cd2588","date":1302630022,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n\n    String field = \"CoMpleX \\\" fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX \\\\\\\" fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(fieldAsFunc, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e7abc8471541b4298cbfaf11b567aeecb3064ec5","9274621789ce990dbfef455dabdf026bb3184821","9274621789ce990dbfef455dabdf026bb3184821","9274621789ce990dbfef455dabdf026bb3184821"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n\n    String field = \"CoMpleX \\\" fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX \\\\\\\" fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(fieldAsFunc, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"657142b0476f05635a010dd7581a5f59c9218f3d","date":1302800183,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test @Ignore(\"fails on some platforms: see https://issues.apache.org/jira/browse/SOLR-2468\")\n  public void testExternalFieldValueSourceParser() {\n\n    String field = \"CoMpleX \\\" fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX \\\\\\\" fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(fieldAsFunc, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n\n    String field = \"CoMpleX \\\" fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX \\\\\\\" fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(fieldAsFunc, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":["e7abc8471541b4298cbfaf11b567aeecb3064ec5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7abc8471541b4298cbfaf11b567aeecb3064ec5","date":1302809561,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test @Ignore(\"fails on some platforms: see https://issues.apache.org/jira/browse/SOLR-2468\")\n  public void testExternalFieldValueSourceParser() {\n\n    String field = \"CoMpleX \\\" fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX \\\\\\\" fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(fieldAsFunc, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":["d21918640a59a58307481ebd2506d4b708cd2588","657142b0476f05635a010dd7581a5f59c9218f3d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eb46686a27187e42311e77666a2c7026f461ebc","date":1302858020,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n\n    String field = \"CoMpleX \\\" fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX \\\\\\\" fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(fieldAsFunc, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testExternalFieldValueSourceParser().mjava","sourceNew":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","sourceOld":"  /**\n   * verify that both the field(\"...\") value source parser as well as \n   * ExternalFileField work with esoteric field names\n   */\n  @Test\n  public void testExternalFieldValueSourceParser() {\n    clearIndex();\n\n    String field = \"CoMpleX fieldName _extf\";\n    String fieldAsFunc = \"field(\\\"CoMpleX fieldName _extf\\\")\";\n\n    float[] ids = {100,-4,0,10,25,5,77,23,55,-78,-45,-24,63,78,94,22,34,54321,261,-627};\n\n    createIndex(null,ids);\n\n    // Unsorted field, largest first\n    makeExternalFile(field, \"54321=543210\\n0=-999\\n25=250\",\"UTF-8\");\n    // test identity (straight field value)\n    singleTest(fieldAsFunc, \"\\0\", 54321, 543210, 0,-999, 25,250, 100, 1);\n    Object orig = FileFloatSource.onlyForTesting;\n    singleTest(fieldAsFunc, \"log(\\0)\");\n    // make sure the values were cached\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig == FileFloatSource.onlyForTesting);\n\n    makeExternalFile(field, \"0=1\",\"UTF-8\");\n    assertU(adoc(\"id\", \"10000\")); // will get same reader if no index change\n    assertU(commit());   \n    singleTest(fieldAsFunc, \"sqrt(\\0)\");\n    assertTrue(orig != FileFloatSource.onlyForTesting);\n\n    purgeFieldCache(FieldCache.DEFAULT);   // avoid FC insanity    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e7abc8471541b4298cbfaf11b567aeecb3064ec5":["657142b0476f05635a010dd7581a5f59c9218f3d"],"1eb46686a27187e42311e77666a2c7026f461ebc":["962d04139994fce5193143ef35615499a9a96d78","e7abc8471541b4298cbfaf11b567aeecb3064ec5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"d21918640a59a58307481ebd2506d4b708cd2588":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["e7abc8471541b4298cbfaf11b567aeecb3064ec5","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7abc8471541b4298cbfaf11b567aeecb3064ec5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e7abc8471541b4298cbfaf11b567aeecb3064ec5"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e7abc8471541b4298cbfaf11b567aeecb3064ec5"],"962d04139994fce5193143ef35615499a9a96d78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d21918640a59a58307481ebd2506d4b708cd2588"],"657142b0476f05635a010dd7581a5f59c9218f3d":["d21918640a59a58307481ebd2506d4b708cd2588"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"e7abc8471541b4298cbfaf11b567aeecb3064ec5":["1eb46686a27187e42311e77666a2c7026f461ebc","c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"1eb46686a27187e42311e77666a2c7026f461ebc":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d21918640a59a58307481ebd2506d4b708cd2588":["962d04139994fce5193143ef35615499a9a96d78","657142b0476f05635a010dd7581a5f59c9218f3d"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d21918640a59a58307481ebd2506d4b708cd2588","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":["1eb46686a27187e42311e77666a2c7026f461ebc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"657142b0476f05635a010dd7581a5f59c9218f3d":["e7abc8471541b4298cbfaf11b567aeecb3064ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1eb46686a27187e42311e77666a2c7026f461ebc","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}