{"path":"src/java/org/apache/lucene/queryParser/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"0107b7f49bcfde8f333685f53b37608815ca889b","date":1246908774,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setConstantScoreRewrite(false);;\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setConstantScoreRewrite(false);;\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ee777f940c2d15973e2ef162012a94e09648ffa","date":1249272382,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"src/java/org/apache/lucene/queryParser/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ee777f940c2d15973e2ef162012a94e09648ffa":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0107b7f49bcfde8f333685f53b37608815ca889b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["0107b7f49bcfde8f333685f53b37608815ca889b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ee777f940c2d15973e2ef162012a94e09648ffa"]},"commit2Childs":{"0ee777f940c2d15973e2ef162012a94e09648ffa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0107b7f49bcfde8f333685f53b37608815ca889b"],"0107b7f49bcfde8f333685f53b37608815ca889b":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["0ee777f940c2d15973e2ef162012a94e09648ffa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}