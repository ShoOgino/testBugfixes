{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#assertResponse(String).mjava","commits":[{"id":"3c35962275b74caeb54617344cc56e1d66ba8b56","date":1391598206,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#assertResponse(String).mjava","pathOld":"/dev/null","sourceNew":"  private void assertResponse(String responseString) {\n    ResponseParser xmlResponseParser = new XMLResponseParser();\n    NamedList expectedResponse = xmlResponseParser.processResponse(IOUtils.toInputStream(responseString), \"UTF-8\");\n    List<SolrDocument> documentList = (List<SolrDocument>) expectedResponse.getAll(\"response\").get(0);\n    assertEquals(1, documentList.size());\n    SolrDocument solrDocument = documentList.get(0);\n    assertEquals(\"1234\", String.valueOf(solrDocument.getFieldValue(\"id\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2989efd365a9a8a1754ad25629e322ccf179bd08","date":1391600467,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#assertResponse(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#assertResponse(String).mjava","sourceNew":"  private void assertResponse(String responseString) throws IOException {\n    ResponseParser xmlResponseParser = new XMLResponseParser();\n    NamedList expectedResponse = xmlResponseParser.processResponse(IOUtils.toInputStream(responseString, \"UTF-8\"), \"UTF-8\");\n    List<SolrDocument> documentList = (List<SolrDocument>) expectedResponse.getAll(\"response\").get(0);\n    assertEquals(1, documentList.size());\n    SolrDocument solrDocument = documentList.get(0);\n    assertEquals(\"1234\", String.valueOf(solrDocument.getFieldValue(\"id\")));\n  }\n\n","sourceOld":"  private void assertResponse(String responseString) {\n    ResponseParser xmlResponseParser = new XMLResponseParser();\n    NamedList expectedResponse = xmlResponseParser.processResponse(IOUtils.toInputStream(responseString), \"UTF-8\");\n    List<SolrDocument> documentList = (List<SolrDocument>) expectedResponse.getAll(\"response\").get(0);\n    assertEquals(1, documentList.size());\n    SolrDocument solrDocument = documentList.get(0);\n    assertEquals(\"1234\", String.valueOf(solrDocument.getFieldValue(\"id\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#assertResponse(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/NoOpResponseParserTest#assertResponse(String).mjava","sourceNew":"  private void assertResponse(String responseString) throws IOException {\n    ResponseParser xmlResponseParser = new XMLResponseParser();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList expectedResponse = xmlResponseParser.processResponse(IOUtils.toInputStream(responseString, \"UTF-8\"), \"UTF-8\");\n    @SuppressWarnings({\"unchecked\"})\n    List<SolrDocument> documentList = (List<SolrDocument>) expectedResponse.getAll(\"response\").get(0);\n    assertEquals(1, documentList.size());\n    SolrDocument solrDocument = documentList.get(0);\n    assertEquals(\"1234\", String.valueOf(solrDocument.getFieldValue(\"id\")));\n  }\n\n","sourceOld":"  private void assertResponse(String responseString) throws IOException {\n    ResponseParser xmlResponseParser = new XMLResponseParser();\n    NamedList expectedResponse = xmlResponseParser.processResponse(IOUtils.toInputStream(responseString, \"UTF-8\"), \"UTF-8\");\n    List<SolrDocument> documentList = (List<SolrDocument>) expectedResponse.getAll(\"response\").get(0);\n    assertEquals(1, documentList.size());\n    SolrDocument solrDocument = documentList.get(0);\n    assertEquals(\"1234\", String.valueOf(solrDocument.getFieldValue(\"id\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["2989efd365a9a8a1754ad25629e322ccf179bd08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c35962275b74caeb54617344cc56e1d66ba8b56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2989efd365a9a8a1754ad25629e322ccf179bd08":["3c35962275b74caeb54617344cc56e1d66ba8b56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3c35962275b74caeb54617344cc56e1d66ba8b56"],"3c35962275b74caeb54617344cc56e1d66ba8b56":["2989efd365a9a8a1754ad25629e322ccf179bd08"],"2989efd365a9a8a1754ad25629e322ccf179bd08":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}