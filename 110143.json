{"path":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","commits":[{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","sourceNew":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", TextField.TYPE_UNSTORED));\n      doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n  }\n\n","sourceOld":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n      doc.add(newField(\"id\", \"\" + i, Field.Store.YES, Field.Index.ANALYZED));\n      writer.addDocument(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e","date":1323363624,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocsWithID(IndexWriter,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","sourceNew":"  // just like addDocs but with ID, starting from docStart\n  private void addDocsWithID(IndexWriter writer, int numDocs, int docStart) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", TextField.TYPE_UNSTORED));\n      doc.add(newField(\"id\", \"\" + (docStart + i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n  }\n\n","sourceOld":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", TextField.TYPE_UNSTORED));\n      doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","04f07771a2a7dd3a395700665ed839c3dae2def2","04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocsWithID(IndexWriter,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","sourceNew":"  // just like addDocs but with ID, starting from docStart\n  private void addDocsWithID(IndexWriter writer, int numDocs, int docStart) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", TextField.TYPE_UNSTORED));\n      doc.add(newField(\"id\", \"\" + (docStart + i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n  }\n\n","sourceOld":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", TextField.TYPE_UNSTORED));\n      doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":6,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#addDocs(IndexWriter,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","sourceNew":"  private void addDocs(IndexWriter writer, int numDocs, boolean withID) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (withID) {\n        doc.add(new Field(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      }\n      writer.addDocument(doc);\n    }\n    writer.commit();\n  }\n\n","sourceOld":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", TextField.TYPE_UNSTORED));\n      doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocsWithID(IndexWriter,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","sourceNew":"  // just like addDocs but with ID, starting from docStart\n  private void addDocsWithID(IndexWriter writer, int numDocs, int docStart) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", TextField.TYPE_UNSTORED));\n      doc.add(newField(\"id\", \"\" + (docStart + i), TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n  }\n\n","sourceOld":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", TextField.TYPE_UNSTORED));\n      doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSizeBoundedForceMerge#addDocs(IndexWriter,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes#addDocs3(IndexWriter,int).mjava","sourceNew":"  private void addDocs(IndexWriter writer, int numDocs, boolean withID) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      if (withID) {\n        doc.add(new Field(\"id\", \"\" + i, StringField.TYPE_UNSTORED));\n      }\n      writer.addDocument(doc);\n    }\n    writer.commit();\n  }\n\n","sourceOld":"  private void addDocs3(IndexWriter writer, int numDocs) throws IOException {\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", TextField.TYPE_UNSTORED));\n      doc.add(newField(\"id\", \"\" + i, TextField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1509f151d7692d84fae414b2b799ac06ba60fcb4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1509f151d7692d84fae414b2b799ac06ba60fcb4","ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"]},"commit2Childs":{"ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","1509f151d7692d84fae414b2b799ac06ba60fcb4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ad180bd5b1bb2037985ddf0a0e8bfb2c5d587e1e","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}