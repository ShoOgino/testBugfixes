{"path":"src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","commits":[{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * AttributeSource instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)})\n   */\n  public AttributeSource cloneAttributes() {\n    AttributeSource clone = new AttributeSource(this.factory);\n    \n    // first clone the impls\n    Iterator/*<AttributeImpl>*/ implIt = getAttributeImplsIterator();\n    while (implIt.hasNext()) {\n      AttributeImpl impl = (AttributeImpl) implIt.next();\n      clone.attributeImpls.put(impl.getClass(), impl.clone());\n    }\n    \n    // now the interfaces\n    Iterator/*<Entry<Class<Attribute>, AttributeImpl>>*/ attIt = this.attributes.entrySet().iterator(); \n    while (attIt.hasNext()) {\n      Entry/*<Class<Attribute>, AttributeImpl>*/ entry = (Entry/*<Class<Attribute>, AttributeImpl>*/) attIt.next();\n      clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n    }\n    \n    return clone;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31","date":1249940086,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","sourceNew":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * AttributeSource instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)})\n   */\n  public AttributeSource cloneAttributes() {\n    AttributeSource clone = new AttributeSource(this.factory);\n    \n    // first clone the impls\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), state.attribute.clone());\n      }\n    }\n    \n    // now the interfaces\n    Iterator/*<Entry<Class<Attribute>, AttributeImpl>>*/ attIt = this.attributes.entrySet().iterator(); \n    while (attIt.hasNext()) {\n      Entry/*<Class<Attribute>, AttributeImpl>*/ entry = (Entry/*<Class<Attribute>, AttributeImpl>*/) attIt.next();\n      clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * AttributeSource instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)})\n   */\n  public AttributeSource cloneAttributes() {\n    AttributeSource clone = new AttributeSource(this.factory);\n    \n    // first clone the impls\n    Iterator/*<AttributeImpl>*/ implIt = getAttributeImplsIterator();\n    while (implIt.hasNext()) {\n      AttributeImpl impl = (AttributeImpl) implIt.next();\n      clone.attributeImpls.put(impl.getClass(), impl.clone());\n    }\n    \n    // now the interfaces\n    Iterator/*<Entry<Class<Attribute>, AttributeImpl>>*/ attIt = this.attributes.entrySet().iterator(); \n    while (attIt.hasNext()) {\n      Entry/*<Class<Attribute>, AttributeImpl>*/ entry = (Entry/*<Class<Attribute>, AttributeImpl>*/) attIt.next();\n      clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","sourceNew":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * AttributeSource instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)})\n   */\n  public AttributeSource cloneAttributes() {\n    AttributeSource clone = new AttributeSource(this.factory);\n    \n    // first clone the impls\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), (AttributeImpl) state.attribute.clone());\n      }\n    }\n    \n    // now the interfaces\n    for (Entry<Class<? extends Attribute>, AttributeImpl> entry : this.attributes.entrySet()) {\n      clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * AttributeSource instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)})\n   */\n  public AttributeSource cloneAttributes() {\n    AttributeSource clone = new AttributeSource(this.factory);\n    \n    // first clone the impls\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), state.attribute.clone());\n      }\n    }\n    \n    // now the interfaces\n    Iterator/*<Entry<Class<Attribute>, AttributeImpl>>*/ attIt = this.attributes.entrySet().iterator(); \n    while (attIt.hasNext()) {\n      Entry/*<Class<Attribute>, AttributeImpl>*/ entry = (Entry/*<Class<Attribute>, AttributeImpl>*/) attIt.next();\n      clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43261d20e8ab524b9887c85d99a855fb4a25b4dc","date":1268557776,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","sourceNew":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * {@code AttributeSource} instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)}).\n   * You can also use it as a (non-performant) replacement for {@link #captureState}, if you need to look\n   * into / modify the captured state.\n   */\n  public AttributeSource cloneAttributes() {\n    final AttributeSource clone = new AttributeSource(this.factory);\n    \n    if (hasAttributes()) {\n      // first clone the impls\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), (AttributeImpl) state.attribute.clone());\n      }\n      \n      // now the interfaces\n      for (Entry<Class<? extends Attribute>, AttributeImpl> entry : this.attributes.entrySet()) {\n        clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * AttributeSource instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)})\n   */\n  public AttributeSource cloneAttributes() {\n    AttributeSource clone = new AttributeSource(this.factory);\n    \n    // first clone the impls\n    if (hasAttributes()) {\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), (AttributeImpl) state.attribute.clone());\n      }\n    }\n    \n    // now the interfaces\n    for (Entry<Class<? extends Attribute>, AttributeImpl> entry : this.attributes.entrySet()) {\n      clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","pathOld":"src/java/org/apache/lucene/util/AttributeSource#cloneAttributes().mjava","sourceNew":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * {@code AttributeSource} instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)}).\n   * You can also use it as a (non-performant) replacement for {@link #captureState}, if you need to look\n   * into / modify the captured state.\n   */\n  public AttributeSource cloneAttributes() {\n    final AttributeSource clone = new AttributeSource(this.factory);\n    \n    if (hasAttributes()) {\n      // first clone the impls\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), (AttributeImpl) state.attribute.clone());\n      }\n      \n      // now the interfaces\n      for (Entry<Class<? extends Attribute>, AttributeImpl> entry : this.attributes.entrySet()) {\n        clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  /**\n   * Performs a clone of all {@link AttributeImpl} instances returned in a new\n   * {@code AttributeSource} instance. This method can be used to e.g. create another TokenStream\n   * with exactly the same attributes (using {@link #AttributeSource(AttributeSource)}).\n   * You can also use it as a (non-performant) replacement for {@link #captureState}, if you need to look\n   * into / modify the captured state.\n   */\n  public AttributeSource cloneAttributes() {\n    final AttributeSource clone = new AttributeSource(this.factory);\n    \n    if (hasAttributes()) {\n      // first clone the impls\n      if (currentState == null) {\n        computeCurrentState();\n      }\n      for (State state = currentState; state != null; state = state.next) {\n        clone.attributeImpls.put(state.attribute.getClass(), (AttributeImpl) state.attribute.clone());\n      }\n      \n      // now the interfaces\n      for (Entry<Class<? extends Attribute>, AttributeImpl> entry : this.attributes.entrySet()) {\n        clone.attributes.put(entry.getKey(), clone.attributeImpls.get(entry.getValue().getClass()));\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"43261d20e8ab524b9887c85d99a855fb4a25b4dc":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8d78f014fded44fbde905f4f84cdc21907b371e8":["0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["43261d20e8ab524b9887c85d99a855fb4a25b4dc"],"0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"43261d20e8ab524b9887c85d99a855fb4a25b4dc":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["43261d20e8ab524b9887c85d99a855fb4a25b4dc"],"0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["0833fee1ce16a2b8e10f21cbccd2e93f3d8ccf31"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}