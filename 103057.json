{"path":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#estimateStoredFields(Map[String,Object]).mjava","commits":[{"id":"e4583dbd381e291c87e23144564c59ba3391b188","date":1560187306,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#estimateStoredFields(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void estimateStoredFields(Map<String, Object> result) throws IOException {\n    log.info(\"- estimating stored fields...\");\n    Map<String, Map<String, Object>> stats = new HashMap<>();\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leafReader = context.reader();\n      EstimatingVisitor visitor = new EstimatingVisitor(stats, topN, maxLength, samplingStep);\n      Bits liveDocs = leafReader.getLiveDocs();\n      if (leafReader instanceof CodecReader) {\n        CodecReader codecReader = (CodecReader)leafReader;\n        StoredFieldsReader storedFieldsReader = codecReader.getFieldsReader();\n        // this instance may be faster for a full sequential pass\n        storedFieldsReader = storedFieldsReader.getMergeInstance();\n        for (int docId = 0; docId < leafReader.maxDoc(); docId += samplingStep) {\n          if (liveDocs != null && !liveDocs.get(docId)) {\n            continue;\n          }\n          storedFieldsReader.visitDocument(docId, visitor);\n        }\n        storedFieldsReader.close();\n      } else {\n        for (int docId = 0; docId < leafReader.maxDoc(); docId += samplingStep) {\n          if (liveDocs != null && !liveDocs.get(docId)) {\n            continue;\n          }\n          leafReader.document(docId, visitor);\n        }\n      }\n    }\n    result.put(STORED_FIELDS, stats);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["075663bea52d53cdf366b77f927d2806ff3178f2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"075663bea52d53cdf366b77f927d2806ff3178f2","date":1565798233,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#estimateStoredFields(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/IndexSizeEstimator#estimateStoredFields(Map[String,Object]).mjava","sourceNew":"  private void estimateStoredFields(Map<String, Object> result) throws IOException {\n    log.info(\"- estimating stored fields...\");\n    Map<String, Map<String, Object>> stats = new HashMap<>();\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leafReader = context.reader();\n      EstimatingVisitor visitor = new EstimatingVisitor(stats, topN, maxLength, samplingStep);\n      Bits liveDocs = leafReader.getLiveDocs();\n      if (leafReader instanceof CodecReader) {\n        CodecReader codecReader = (CodecReader)leafReader;\n        StoredFieldsReader storedFieldsReader = codecReader.getFieldsReader();\n        // this instance may be faster for a full sequential pass\n        StoredFieldsReader mergeInstance = storedFieldsReader.getMergeInstance();\n        for (int docId = 0; docId < leafReader.maxDoc(); docId += samplingStep) {\n          if (liveDocs != null && !liveDocs.get(docId)) {\n            continue;\n          }\n          mergeInstance.visitDocument(docId, visitor);\n        }\n        if (mergeInstance != storedFieldsReader) {\n          mergeInstance.close();\n        }\n      } else {\n        for (int docId = 0; docId < leafReader.maxDoc(); docId += samplingStep) {\n          if (liveDocs != null && !liveDocs.get(docId)) {\n            continue;\n          }\n          leafReader.document(docId, visitor);\n        }\n      }\n    }\n    result.put(STORED_FIELDS, stats);\n  }\n\n","sourceOld":"  private void estimateStoredFields(Map<String, Object> result) throws IOException {\n    log.info(\"- estimating stored fields...\");\n    Map<String, Map<String, Object>> stats = new HashMap<>();\n    for (LeafReaderContext context : reader.leaves()) {\n      LeafReader leafReader = context.reader();\n      EstimatingVisitor visitor = new EstimatingVisitor(stats, topN, maxLength, samplingStep);\n      Bits liveDocs = leafReader.getLiveDocs();\n      if (leafReader instanceof CodecReader) {\n        CodecReader codecReader = (CodecReader)leafReader;\n        StoredFieldsReader storedFieldsReader = codecReader.getFieldsReader();\n        // this instance may be faster for a full sequential pass\n        storedFieldsReader = storedFieldsReader.getMergeInstance();\n        for (int docId = 0; docId < leafReader.maxDoc(); docId += samplingStep) {\n          if (liveDocs != null && !liveDocs.get(docId)) {\n            continue;\n          }\n          storedFieldsReader.visitDocument(docId, visitor);\n        }\n        storedFieldsReader.close();\n      } else {\n        for (int docId = 0; docId < leafReader.maxDoc(); docId += samplingStep) {\n          if (liveDocs != null && !liveDocs.get(docId)) {\n            continue;\n          }\n          leafReader.document(docId, visitor);\n        }\n      }\n    }\n    result.put(STORED_FIELDS, stats);\n  }\n\n","bugFix":["e4583dbd381e291c87e23144564c59ba3391b188"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"075663bea52d53cdf366b77f927d2806ff3178f2":["e4583dbd381e291c87e23144564c59ba3391b188"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e4583dbd381e291c87e23144564c59ba3391b188":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["075663bea52d53cdf366b77f927d2806ff3178f2"]},"commit2Childs":{"075663bea52d53cdf366b77f927d2806ff3178f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4583dbd381e291c87e23144564c59ba3391b188"],"e4583dbd381e291c87e23144564c59ba3391b188":["075663bea52d53cdf366b77f927d2806ff3178f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}