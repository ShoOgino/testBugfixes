{"path":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","commits":[{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/schema/ICUCollationField#setup(ResourceLoader,Map[String,String]).mjava","sourceNew":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","sourceOld":"  /**\n   * Setup the field according to the provided parameters\n   */\n  private void setup(ResourceLoader loader, Map<String,String> args) {\n    String custom = args.remove(\"custom\");\n    String localeID = args.remove(\"locale\");\n    String strength = args.remove(\"strength\");\n    String decomposition = args.remove(\"decomposition\");\n    \n    if (custom == null && localeID == null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Either custom or locale is required.\");\n    \n    if (custom != null && localeID != null)\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Cannot specify both locale and custom. \"\n          + \"To tailor rules for a built-in language, see the javadocs for RuleBasedCollator. \"\n          + \"Then save the entire customized ruleset to a file, and use with the custom parameter\");\n    \n    final Collator collator;\n    \n    if (localeID != null) { \n      // create from a system collator, based on Locale.\n      collator = createFromLocale(localeID);\n    } else { \n      // create from a custom ruleset\n      collator = createFromRules(custom, loader);\n    }\n    \n    // set the strength flag, otherwise it will be the default.\n    if (strength != null) {\n      if (strength.equalsIgnoreCase(\"primary\"))\n        collator.setStrength(Collator.PRIMARY);\n      else if (strength.equalsIgnoreCase(\"secondary\"))\n        collator.setStrength(Collator.SECONDARY);\n      else if (strength.equalsIgnoreCase(\"tertiary\"))\n        collator.setStrength(Collator.TERTIARY);\n      else if (strength.equalsIgnoreCase(\"quaternary\"))\n        collator.setStrength(Collator.QUATERNARY);\n      else if (strength.equalsIgnoreCase(\"identical\"))\n        collator.setStrength(Collator.IDENTICAL);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid strength: \" + strength);\n    }\n    \n    // set the decomposition flag, otherwise it will be the default.\n    if (decomposition != null) {\n      if (decomposition.equalsIgnoreCase(\"no\"))\n        collator.setDecomposition(Collator.NO_DECOMPOSITION);\n      else if (decomposition.equalsIgnoreCase(\"canonical\"))\n        collator.setDecomposition(Collator.CANONICAL_DECOMPOSITION);\n      else\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Invalid decomposition: \" + decomposition);\n    }\n    // we use 4.0 because it ensures we just encode the pure byte[] keys.\n    analyzer = new ICUCollationKeyAnalyzer(Version.LUCENE_40, collator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}