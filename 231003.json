{"path":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(Collector,int).mjava","sourceNew":"    @Override\n    public boolean score(LeafCollector collector, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1) {\n        scorer.nextDoc();\n      }\n      int doc;\n      for (doc = scorer.docID(); doc < max; doc = scorer.nextDoc()) {\n        collector.collect(doc);\n      }\n      return doc != DocsEnum.NO_MORE_DOCS;\n    }\n\n","sourceOld":"    @Override\n    public boolean score(Collector collector, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1) {\n        scorer.nextDoc();\n      }\n      int doc;\n      for (doc = scorer.docID(); doc < max; doc = scorer.nextDoc()) {\n        collector.collect(doc);\n      }\n      return doc != DocsEnum.NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(Collector,int).mjava","sourceNew":"    @Override\n    public boolean score(LeafCollector collector, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1) {\n        scorer.nextDoc();\n      }\n      int doc;\n      for (doc = scorer.docID(); doc < max; doc = scorer.nextDoc()) {\n        collector.collect(doc);\n      }\n      return doc != DocsEnum.NO_MORE_DOCS;\n    }\n\n","sourceOld":"    @Override\n    public boolean score(Collector collector, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1) {\n        scorer.nextDoc();\n      }\n      int doc;\n      for (doc = scorer.docID(); doc < max; doc = scorer.nextDoc()) {\n        collector.collect(doc);\n      }\n      return doc != DocsEnum.NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c4984ab7cd5e8519dfd5168c5e994e721395643","date":1397050738,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int).mjava","sourceNew":"    @Override\n    public boolean score(LeafCollector collector, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer);\n        return false;\n      } else {\n        int doc = scorer.docID();\n        if (doc < 0) {\n          doc = scorer.nextDoc();\n        }\n        return scoreRange(collector, scorer, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean score(LeafCollector collector, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1) {\n        scorer.nextDoc();\n      }\n      int doc;\n      for (doc = scorer.docID(); doc < max; doc = scorer.nextDoc()) {\n        collector.collect(doc);\n      }\n      return doc != DocsEnum.NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight.DefaultBulkScorer#score(LeafCollector,int).mjava","sourceNew":"    @Override\n    public int score(LeafCollector collector, int min, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1 && min == 0 && max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer);\n        return DocIdSetIterator.NO_MORE_DOCS;\n      } else {\n        int doc = scorer.docID();\n        if (doc < min) {\n          doc = scorer.advance(min);\n        }\n        return scoreRange(collector, scorer, doc, max);\n      }\n    }\n\n","sourceOld":"    @Override\n    public boolean score(LeafCollector collector, int max) throws IOException {\n      // TODO: this may be sort of weird, when we are\n      // embedded in a BooleanScorer, because we are\n      // called for every chunk of 2048 documents.  But,\n      // then, scorer is a FakeScorer in that case, so any\n      // Collector doing something \"interesting\" in\n      // setScorer will be forced to use BS2 anyways:\n      collector.setScorer(scorer);\n      if (max == DocIdSetIterator.NO_MORE_DOCS) {\n        scoreAll(collector, scorer);\n        return false;\n      } else {\n        int doc = scorer.docID();\n        if (doc < 0) {\n          doc = scorer.nextDoc();\n        }\n        return scoreRange(collector, scorer, doc, max);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["6c4984ab7cd5e8519dfd5168c5e994e721395643"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c4984ab7cd5e8519dfd5168c5e994e721395643":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"]},"commit2Childs":{"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","6c4984ab7cd5e8519dfd5168c5e994e721395643"],"6c4984ab7cd5e8519dfd5168c5e994e721395643":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}