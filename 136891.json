{"path":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleSort(String,Comparable,Comparable).mjava","commits":[{"id":"b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef","date":1441300930,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleSort(String,Comparable,Comparable).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Tests sort order of min/max realtive to other docs w/o any values.\n   * @param fieldname The field to test\n   * @param negative a \"negative\" value for this field (ie: in a function context, is less then the \"0\")\n   * @param positive a \"positive\" value for this field (ie: in a function context, is more then the \"0\")\n   */\n  protected void testSimpleSort(final String fieldname,\n                                final Comparable negative, final Comparable positive) {\n    clearIndex();\n\n    int numDocsExpected = 1;\n    for (int i = 1; i < 4; i++) { // pos docids\n      if (random().nextBoolean()) {\n        assertU(adoc(sdoc(\"id\",i))); // fieldname doesn't exist\n        numDocsExpected++;\n      }\n    }\n    \n    assertU(adoc(sdoc(\"id\", \"0\",\n                      fieldname, negative,\n                      fieldname, positive)));\n    \n    for (int i = 1; i < 4; i++) { // neg docids\n      if (random().nextBoolean()) {\n        assertU(adoc(sdoc(\"id\",-i))); // fieldname doesn't exist\n        numDocsExpected++;\n      }\n    }\n    assertU(commit());\n\n    // need to wrap with \"def\" until SOLR-8005 is resolved\n    assertDocWithValsIsFirst(numDocsExpected, \"def(field(\"+fieldname+\",min),0) asc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"def(field(\"+fieldname+\",min),0) desc\");\n    \n    assertDocWithValsIsFirst(numDocsExpected, \"def(field(\"+fieldname+\",max),0) desc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"def(field(\"+fieldname+\",max),0) asc\");\n\n    // def wrapper shouldn't be needed since it's already part of another function\n    assertDocWithValsIsFirst(numDocsExpected, \"sum(32,field(\"+fieldname+\",max)) desc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"sum(32,field(\"+fieldname+\",max)) asc\");\n    \n    assertDocWithValsIsFirst(numDocsExpected, \"sum(32,field(\"+fieldname+\",min)) asc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"sum(32,field(\"+fieldname+\",min)) desc\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleSort(String,Comparable,Comparable).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#testSimpleSort(String,Comparable,Comparable).mjava","sourceNew":"  /** \n   * Tests sort order of min/max realtive to other docs w/o any values.\n   * @param fieldname The field to test\n   * @param negative a \"negative\" value for this field (ie: in a function context, is less then the \"0\")\n   * @param positive a \"positive\" value for this field (ie: in a function context, is more then the \"0\")\n   */\n  protected void testSimpleSort(final String fieldname,\n                                @SuppressWarnings({\"rawtypes\"})final Comparable negative,\n                                @SuppressWarnings({\"rawtypes\"})final Comparable positive) {\n    clearIndex();\n\n    int numDocsExpected = 1;\n    for (int i = 1; i < 4; i++) { // pos docids\n      if (random().nextBoolean()) {\n        assertU(adoc(sdoc(\"id\",i))); // fieldname doesn't exist\n        numDocsExpected++;\n      }\n    }\n    \n    assertU(adoc(sdoc(\"id\", \"0\",\n                      fieldname, negative,\n                      fieldname, positive)));\n    \n    for (int i = 1; i < 4; i++) { // neg docids\n      if (random().nextBoolean()) {\n        assertU(adoc(sdoc(\"id\",-i))); // fieldname doesn't exist\n        numDocsExpected++;\n      }\n    }\n    assertU(commit());\n\n    // need to wrap with \"def\" until SOLR-8005 is resolved\n    assertDocWithValsIsFirst(numDocsExpected, \"def(field(\"+fieldname+\",min),0) asc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"def(field(\"+fieldname+\",min),0) desc\");\n    \n    assertDocWithValsIsFirst(numDocsExpected, \"def(field(\"+fieldname+\",max),0) desc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"def(field(\"+fieldname+\",max),0) asc\");\n\n    // def wrapper shouldn't be needed since it's already part of another function\n    assertDocWithValsIsFirst(numDocsExpected, \"sum(32,field(\"+fieldname+\",max)) desc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"sum(32,field(\"+fieldname+\",max)) asc\");\n    \n    assertDocWithValsIsFirst(numDocsExpected, \"sum(32,field(\"+fieldname+\",min)) asc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"sum(32,field(\"+fieldname+\",min)) desc\");\n  }\n\n","sourceOld":"  /** \n   * Tests sort order of min/max realtive to other docs w/o any values.\n   * @param fieldname The field to test\n   * @param negative a \"negative\" value for this field (ie: in a function context, is less then the \"0\")\n   * @param positive a \"positive\" value for this field (ie: in a function context, is more then the \"0\")\n   */\n  protected void testSimpleSort(final String fieldname,\n                                final Comparable negative, final Comparable positive) {\n    clearIndex();\n\n    int numDocsExpected = 1;\n    for (int i = 1; i < 4; i++) { // pos docids\n      if (random().nextBoolean()) {\n        assertU(adoc(sdoc(\"id\",i))); // fieldname doesn't exist\n        numDocsExpected++;\n      }\n    }\n    \n    assertU(adoc(sdoc(\"id\", \"0\",\n                      fieldname, negative,\n                      fieldname, positive)));\n    \n    for (int i = 1; i < 4; i++) { // neg docids\n      if (random().nextBoolean()) {\n        assertU(adoc(sdoc(\"id\",-i))); // fieldname doesn't exist\n        numDocsExpected++;\n      }\n    }\n    assertU(commit());\n\n    // need to wrap with \"def\" until SOLR-8005 is resolved\n    assertDocWithValsIsFirst(numDocsExpected, \"def(field(\"+fieldname+\",min),0) asc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"def(field(\"+fieldname+\",min),0) desc\");\n    \n    assertDocWithValsIsFirst(numDocsExpected, \"def(field(\"+fieldname+\",max),0) desc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"def(field(\"+fieldname+\",max),0) asc\");\n\n    // def wrapper shouldn't be needed since it's already part of another function\n    assertDocWithValsIsFirst(numDocsExpected, \"sum(32,field(\"+fieldname+\",max)) desc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"sum(32,field(\"+fieldname+\",max)) asc\");\n    \n    assertDocWithValsIsFirst(numDocsExpected, \"sum(32,field(\"+fieldname+\",min)) asc\");\n    assertDocWithValsIsLast(numDocsExpected,  \"sum(32,field(\"+fieldname+\",min)) desc\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef"]},"commit2Childs":{"b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e1f3a5a48661eea57fe5a644ae5d8a8c7145ef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}