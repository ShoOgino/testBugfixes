{"path":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"    /* (non-Javadoc)\n     * @see org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values.Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if(state.bits == null && state.reader instanceof Reader){\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if(maxDocs == 0)\n          return;\n        if(size == -1) {\n          size = reader.size;\n          initDataOut();\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n       fill(state.docBase);\n       // nocommit should we add a transfer to API to each reader?\n       datOut.copyBytes(reader.cloneData(), size * maxDocs);\n       lastDocID += maxDocs-1;\n      } else\n        super.merge(state);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","date":1291128345,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    /* (non-Javadoc)\n     * @see org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values.Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if(state.bits == null && state.reader instanceof Reader){\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if(maxDocs == 0)\n          return;\n        if(size == -1) {\n          size = reader.size;\n          initDataOut();\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n       fill(state.docBase);\n       // TODO should we add a transfer to API to each reader?\n       datOut.copyBytes(reader.cloneData(), size * maxDocs);\n       lastDocID += maxDocs-1;\n      } else\n        super.merge(state);\n    }\n\n","sourceOld":"    /* (non-Javadoc)\n     * @see org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values.Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if(state.bits == null && state.reader instanceof Reader){\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if(maxDocs == 0)\n          return;\n        if(size == -1) {\n          size = reader.size;\n          initDataOut();\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n       fill(state.docBase);\n       // nocommit should we add a transfer to API to each reader?\n       datOut.copyBytes(reader.cloneData(), size * maxDocs);\n       lastDocID += maxDocs-1;\n      } else\n        super.merge(state);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values\n     * .Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0)\n          return;\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        datOut.copyBytes(reader.cloneData(), size * maxDocs);\n        lastDocID += maxDocs - 1;\n      } else\n        super.merge(state);\n    }\n\n","sourceOld":"    /* (non-Javadoc)\n     * @see org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values.Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if(state.bits == null && state.reader instanceof Reader){\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if(maxDocs == 0)\n          return;\n        if(size == -1) {\n          size = reader.size;\n          initDataOut();\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n       fill(state.docBase);\n       // TODO should we add a transfer to API to each reader?\n       datOut.copyBytes(reader.cloneData(), size * maxDocs);\n       lastDocID += maxDocs-1;\n      } else\n        super.merge(state);\n    }\n\n","bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"763d13ecba7c2e244aa7c7690a878daae26227f6","date":1305814974,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values\n     * .Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0)\n          return;\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else\n        super.merge(state);\n    }\n\n","sourceOld":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values\n     * .Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0)\n          return;\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        datOut.copyBytes(reader.cloneData(), size * maxDocs);\n        lastDocID += maxDocs - 1;\n      } else\n        super.merge(state);\n    }\n\n","bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values\n     * .Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else\n        super.merge(state);\n    }\n\n","sourceOld":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values\n     * .Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0)\n          return;\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else\n        super.merge(state);\n    }\n\n","bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values\n     * .Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else\n        super.merge(state);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values\n     * .Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else\n        super.merge(state);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a154343e160a5590f17dfdfad7e4c384fc22836","date":1308000861,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else {\n        super.merge(state);\n      }\n    }\n\n","sourceOld":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values\n     * .Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else\n        super.merge(state);\n    }\n\n","bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else {\n        super.merge(state);\n      }\n    }\n\n","sourceOld":"    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * org.apache.lucene.index.values.Writer#merge(org.apache.lucene.index.values\n     * .Writer.MergeState)\n     */\n    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else\n        super.merge(state);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n        }\n        if (lastDocID+1 < state.docBase) {\n          fill(datOut, state.docBase);\n          lastDocID = state.docBase-1;\n        }\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          IOUtils.closeSafely(true, cloneData);  \n        }\n        \n        lastDocID += maxDocs;\n      } else {\n        super.merge(state);\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(!success, datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else {\n        super.merge(state);\n      }\n    }\n\n","bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n      if (state.liveDocs == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n        }\n        if (lastDocID+1 < state.docBase) {\n          fill(datOut, state.docBase);\n          lastDocID = state.docBase-1;\n        }\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          IOUtils.closeSafely(true, cloneData);  \n        }\n        \n        lastDocID += maxDocs;\n      } else {\n        super.merge(state);\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(!success, datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n        }\n        if (lastDocID+1 < state.docBase) {\n          fill(datOut, state.docBase);\n          lastDocID = state.docBase-1;\n        }\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          IOUtils.closeSafely(true, cloneData);  \n        }\n        \n        lastDocID += maxDocs;\n      } else {\n        super.merge(state);\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(!success, datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["733b83db0afdfe169b80c8580043ceca57967b19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n      if (state.liveDocs == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n        }\n        if (lastDocID+1 < state.docBase) {\n          fill(datOut, state.docBase);\n          lastDocID = state.docBase-1;\n        }\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          IOUtils.closeSafely(true, cloneData);  \n        }\n        \n        lastDocID += maxDocs;\n      } else {\n        super.merge(state);\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(!success, datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else {\n        super.merge(state);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n      if (state.liveDocs == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n        }\n        if (lastDocID+1 < state.docBase) {\n          fill(datOut, state.docBase);\n          lastDocID = state.docBase-1;\n        }\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          IOUtils.closeSafely(true, cloneData);  \n        }\n        \n        lastDocID += maxDocs;\n      } else {\n        super.merge(state);\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(!success, datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      if (state.bits == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n          oneRecord = new byte[size];\n        }\n        fill(state.docBase);\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          cloneData.close();  \n        }\n        \n        lastDocID += maxDocs - 1;\n      } else {\n        super.merge(state);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"733b83db0afdfe169b80c8580043ceca57967b19","date":1314458101,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n        if (state.liveDocs == null && state.reader instanceof Reader) {\n          Reader reader = (Reader) state.reader;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          }\n          if (lastDocID+1 < state.docBase) {\n            fill(datOut, state.docBase);\n            lastDocID = state.docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.closeSafely(false, cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(state);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(!success, datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n      if (state.liveDocs == null && state.reader instanceof Reader) {\n        Reader reader = (Reader) state.reader;\n        final int maxDocs = reader.maxDoc;\n        if (maxDocs == 0) {\n          return;\n        }\n        if (size == -1) {\n          size = reader.size;\n          datOut.writeInt(size);\n        }\n        if (lastDocID+1 < state.docBase) {\n          fill(datOut, state.docBase);\n          lastDocID = state.docBase-1;\n        }\n        // TODO should we add a transfer to API to each reader?\n        final IndexInput cloneData = reader.cloneData();\n        try {\n          datOut.copyBytes(cloneData, size * maxDocs);\n        } finally {\n          IOUtils.closeSafely(true, cloneData);  \n        }\n        \n        lastDocID += maxDocs;\n      } else {\n        super.merge(state);\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(!success, datOut);\n        }\n      }\n    }\n\n","bugFix":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","01f60198ece724a6e96cd0b45f289cf42ff83d4f","0150c6e116b24d66f02d63fcb0758f336e8791e2","ab5cb6a74aefb78aa0569857970b9151dfe2e787","763d13ecba7c2e244aa7c7690a878daae26227f6","8a154343e160a5590f17dfdfad7e4c384fc22836","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n        if (state.liveDocs == null && state.reader instanceof Reader) {\n          Reader reader = (Reader) state.reader;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          }\n          if (lastDocID+1 < state.docBase) {\n            fill(datOut, state.docBase);\n            lastDocID = state.docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(state);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n        if (state.liveDocs == null && state.reader instanceof Reader) {\n          Reader reader = (Reader) state.reader;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          }\n          if (lastDocID+1 < state.docBase) {\n            fill(datOut, state.docBase);\n            lastDocID = state.docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.closeSafely(false, cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(state);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(!success, datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (state.liveDocs == null && state.reader instanceof Reader ) {\n          Reader reader = (Reader) state.reader;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          } else if (size != reader.size) {\n            throw new IllegalArgumentException(\"expected bytes size=\" + size\n                + \" but got \" + reader.size);\n           }\n          if (lastDocID+1 < state.docBase) {\n            fill(datOut, state.docBase);\n            lastDocID = state.docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(state);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getDataOut();\n      boolean success = false;\n      try {\n        if (state.liveDocs == null && state.reader instanceof Reader) {\n          Reader reader = (Reader) state.reader;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          }\n          if (lastDocID+1 < state.docBase) {\n            fill(datOut, state.docBase);\n            lastDocID = state.docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(state);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e128967bca58657bc0039d4bfe631e63e81f1977","date":1317978310,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (state.liveDocs == null && state.reader instanceof FixedStraightReader ) {\n          FixedStraightReader reader = (FixedStraightReader) state.reader;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          } else if (size != reader.size) {\n            throw new IllegalArgumentException(\"expected bytes size=\" + size\n                + \" but got \" + reader.size);\n           }\n          if (lastDocID+1 < state.docBase) {\n            fill(datOut, state.docBase);\n            lastDocID = state.docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(state);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (state.liveDocs == null && state.reader instanceof Reader ) {\n          Reader reader = (Reader) state.reader;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          } else if (size != reader.size) {\n            throw new IllegalArgumentException(\"expected bytes size=\" + size\n                + \" but got \" + reader.size);\n           }\n          if (lastDocID+1 < state.docBase) {\n            fill(datOut, state.docBase);\n            lastDocID = state.docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(state);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4","date":1318260487,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(SingleSubMergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#merge(MergeState).mjava","sourceNew":"    @Override\n    protected void merge(SingleSubMergeState state) throws IOException {\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (!hasMerged && size != -1) {\n          datOut.writeInt(size);\n        }\n\n        if (state.liveDocs == null && tryBulkMerge(state.reader)) {\n          FixedStraightReader reader = (FixedStraightReader) state.reader;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          } else if (size != reader.size) {\n            throw new IllegalArgumentException(\"expected bytes size=\" + size\n                + \" but got \" + reader.size);\n           }\n          if (lastDocID+1 < state.docBase) {\n            fill(datOut, state.docBase);\n            lastDocID = state.docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(state);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n        hasMerged = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void merge(MergeState state) throws IOException {\n      merge = true;\n      datOut = getOrCreateDataOut();\n      boolean success = false;\n      try {\n        if (state.liveDocs == null && state.reader instanceof FixedStraightReader ) {\n          FixedStraightReader reader = (FixedStraightReader) state.reader;\n          final int maxDocs = reader.maxDoc;\n          if (maxDocs == 0) {\n            return;\n          }\n          if (size == -1) {\n            size = reader.size;\n            datOut.writeInt(size);\n          } else if (size != reader.size) {\n            throw new IllegalArgumentException(\"expected bytes size=\" + size\n                + \" but got \" + reader.size);\n           }\n          if (lastDocID+1 < state.docBase) {\n            fill(datOut, state.docBase);\n            lastDocID = state.docBase-1;\n          }\n          // TODO should we add a transfer to API to each reader?\n          final IndexInput cloneData = reader.cloneData();\n          try {\n            datOut.copyBytes(cloneData, size * maxDocs);\n          } finally {\n            IOUtils.close(cloneData);  \n          }\n        \n          lastDocID += maxDocs;\n        } else {\n          super.merge(state);\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(datOut);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["733b83db0afdfe169b80c8580043ceca57967b19"],"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["763d13ecba7c2e244aa7c7690a878daae26227f6"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["8a154343e160a5590f17dfdfad7e4c384fc22836"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["8a154343e160a5590f17dfdfad7e4c384fc22836","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","8a154343e160a5590f17dfdfad7e4c384fc22836"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["9ed208afa1e7aa98899ddb1dedfddedddf898253","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"763d13ecba7c2e244aa7c7690a878daae26227f6":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0150c6e116b24d66f02d63fcb0758f336e8791e2"],"733b83db0afdfe169b80c8580043ceca57967b19":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a154343e160a5590f17dfdfad7e4c384fc22836":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"e128967bca58657bc0039d4bfe631e63e81f1977":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4":["e128967bca58657bc0039d4bfe631e63e81f1977"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["85eb75e0c0203e44dcf686f35876cf6080f3a671"],"5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["9ed208afa1e7aa98899ddb1dedfddedddf898253"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","733b83db0afdfe169b80c8580043ceca57967b19"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["763d13ecba7c2e244aa7c7690a878daae26227f6"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["5a98a65bdb67cd0b27d18a5564d63bd3e944d3f4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"763d13ecba7c2e244aa7c7690a878daae26227f6":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","8a154343e160a5590f17dfdfad7e4c384fc22836"],"733b83db0afdfe169b80c8580043ceca57967b19":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f","2e8d7ba2175f47e280231533f7d3016249cea88b"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["e128967bca58657bc0039d4bfe631e63e81f1977"],"8a154343e160a5590f17dfdfad7e4c384fc22836":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5","d083e83f225b11e5fdd900e83d26ddb385b6955c","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"e128967bca58657bc0039d4bfe631e63e81f1977":["32aca6bb0a6aa0a1813e7d035ac0e039f54269f4"],"32aca6bb0a6aa0a1813e7d035ac0e039f54269f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}