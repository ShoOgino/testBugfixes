{"path":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","commits":[{"id":"cd488f50316362b01a7f67b11a96796b9652e3e5","date":1241121034,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    flushDeletes |= docWriter.deletesFull();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs)\n        segmentInfos.add(newSegment);\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      doAfterFlush();\n\n      if (flushDocs)\n        checkpoint();\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["baba8fb25a5a52ee47728c7ca2cad5ca76cccf82","4404b358bf2902b2da0b8eef5ea0a68acd37674b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    flushDeletes |= docWriter.deletesFull();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs)\n        segmentInfos.add(newSegment);\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      doAfterFlush();\n\n      if (flushDocs)\n        checkpoint();\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    flushDeletes |= docWriter.deletesFull();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs)\n        segmentInfos.add(newSegment);\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      doAfterFlush();\n\n      if (flushDocs)\n        checkpoint();\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"baba8fb25a5a52ee47728c7ca2cad5ca76cccf82","date":1245425825,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    flushDeletes |= docWriter.deletesFull();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    flushDeletes |= docWriter.deletesFull();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs)\n        segmentInfos.add(newSegment);\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      doAfterFlush();\n\n      if (flushDocs)\n        checkpoint();\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"bugIntro":["b94d84602cc6dba424ce6a1b4be0fd1eec78cb14"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4404b358bf2902b2da0b8eef5ea0a68acd37674b","date":1247143497,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    flushDeletes |= docWriter.deletesFull();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8","date":1255049357,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // When autoCommit=true we must always flush deletes\n    // when flushing a segment; otherwise deletes may become\n    // visible before their corresponding added document\n    // from an updateDocument call\n    flushDeletes |= autoCommit;\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      // With autoCommit=true we always must flush the doc\n      // stores when we flush\n      flushDocStores |= autoCommit;\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      // docStoreOffset should only be non-zero when\n      // autoCommit == false\n      assert !autoCommit || 0 == docStoreOffset;\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94d84602cc6dba424ce6a1b4be0fd1eec78cb14","date":1260987804,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        flushDeletesCount++;\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":["baba8fb25a5a52ee47728c7ca2cad5ca76cccf82"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daad6ea8319237361a2c5c4aa31ad04dc7a70ba3","date":1266940597,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"775efee7f959e0dd3df7960b93767d9e00b78751","date":1267203159,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(segment + \".\" + IndexFileNames.COMPOUND_FILE_EXTENSION);\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#doFlushInternal(boolean,boolean).mjava","sourceNew":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","sourceOld":"  // TODO: this method should not have to be entirely\n  // synchronized, ie, merges should be allowed to commit\n  // even while a flush is happening\n  private synchronized final boolean doFlushInternal(boolean flushDocStores, boolean flushDeletes) throws CorruptIndexException, IOException {\n\n    if (hitOOM) {\n      throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot flush\");\n    }\n\n    ensureOpen(false);\n\n    assert testPoint(\"startDoFlush\");\n\n    doBeforeFlush();\n    \n    flushCount++;\n\n    // If we are flushing because too many deletes\n    // accumulated, then we should apply the deletes to free\n    // RAM:\n    flushDeletes |= docWriter.doApplyDeletes();\n\n    // Make sure no threads are actively adding a document.\n    // Returns true if docWriter is currently aborting, in\n    // which case we skip flushing this segment\n    if (docWriter.pauseAllThreads()) {\n      docWriter.resumeAllThreads();\n      return false;\n    }\n\n    try {\n\n      SegmentInfo newSegment = null;\n\n      final int numDocs = docWriter.getNumDocsInRAM();\n\n      // Always flush docs if there are any\n      boolean flushDocs = numDocs > 0;\n\n      String docStoreSegment = docWriter.getDocStoreSegment();\n\n      assert docStoreSegment != null || numDocs == 0: \"dss=\" + docStoreSegment + \" numDocs=\" + numDocs;\n\n      if (docStoreSegment == null)\n        flushDocStores = false;\n\n      int docStoreOffset = docWriter.getDocStoreOffset();\n\n      boolean docStoreIsCompoundFile = false;\n\n      if (infoStream != null) {\n        message(\"  flush: segment=\" + docWriter.getSegment() +\n                \" docStoreSegment=\" + docWriter.getDocStoreSegment() +\n                \" docStoreOffset=\" + docStoreOffset +\n                \" flushDocs=\" + flushDocs +\n                \" flushDeletes=\" + flushDeletes +\n                \" flushDocStores=\" + flushDocStores +\n                \" numDocs=\" + numDocs +\n                \" numBufDelTerms=\" + docWriter.getNumBufferedDeleteTerms());\n        message(\"  index before flush \" + segString());\n      }\n\n      // Check if the doc stores must be separately flushed\n      // because other segments, besides the one we are about\n      // to flush, reference it\n      if (flushDocStores && (!flushDocs || !docWriter.getSegment().equals(docWriter.getDocStoreSegment()))) {\n        // We must separately flush the doc store\n        if (infoStream != null)\n          message(\"  flush shared docStore segment \" + docStoreSegment);\n      \n        docStoreIsCompoundFile = flushDocStores();\n        flushDocStores = false;\n      }\n\n      String segment = docWriter.getSegment();\n\n      // If we are flushing docs, segment must not be null:\n      assert segment != null || !flushDocs;\n\n      if (flushDocs) {\n\n        boolean success = false;\n        final int flushedDocCount;\n\n        try {\n          flushedDocCount = docWriter.flush(flushDocStores);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception flushing segment \" + segment);\n            deleter.refresh(segment);\n          }\n        }\n        \n        if (0 == docStoreOffset && flushDocStores) {\n          // This means we are flushing private doc stores\n          // with this segment, so it will not be shared\n          // with other segments\n          assert docStoreSegment != null;\n          assert docStoreSegment.equals(segment);\n          docStoreOffset = -1;\n          docStoreIsCompoundFile = false;\n          docStoreSegment = null;\n        }\n\n        // Create new SegmentInfo, but do not add to our\n        // segmentInfos until deletes are flushed\n        // successfully.\n        newSegment = new SegmentInfo(segment,\n                                     flushedDocCount,\n                                     directory, false, true,\n                                     docStoreOffset, docStoreSegment,\n                                     docStoreIsCompoundFile,    \n                                     docWriter.hasProx());\n        setDiagnostics(newSegment, \"flush\");\n      }\n\n      docWriter.pushDeletes();\n\n      if (flushDocs) {\n        segmentInfos.add(newSegment);\n        checkpoint();\n      }\n\n      if (flushDocs && mergePolicy.useCompoundFile(segmentInfos, newSegment)) {\n        // Now build compound file\n        boolean success = false;\n        try {\n          docWriter.createCompoundFile(segment);\n          success = true;\n        } finally {\n          if (!success) {\n            if (infoStream != null)\n              message(\"hit exception creating compound file for newly flushed segment \" + segment);\n            deleter.deleteFile(IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION));\n          }\n        }\n\n        newSegment.setUseCompoundFile(true);\n        checkpoint();\n      }\n\n      if (flushDeletes) {\n        applyDeletes();\n      }\n      \n      if (flushDocs)\n        checkpoint();\n\n      doAfterFlush();\n\n      return flushDocs;\n\n    } catch (OutOfMemoryError oom) {\n      handleOOM(oom, \"doFlush\");\n      // never hit\n      return false;\n    } finally {\n      docWriter.resumeAllThreads();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd488f50316362b01a7f67b11a96796b9652e3e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"775efee7f959e0dd3df7960b93767d9e00b78751":["daad6ea8319237361a2c5c4aa31ad04dc7a70ba3"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["87c966e9308847938a7c905c2e46a56d8df788b8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["4404b358bf2902b2da0b8eef5ea0a68acd37674b"],"baba8fb25a5a52ee47728c7ca2cad5ca76cccf82":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"4404b358bf2902b2da0b8eef5ea0a68acd37674b":["baba8fb25a5a52ee47728c7ca2cad5ca76cccf82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["775efee7f959e0dd3df7960b93767d9e00b78751"],"daad6ea8319237361a2c5c4aa31ad04dc7a70ba3":["b94d84602cc6dba424ce6a1b4be0fd1eec78cb14"],"b94d84602cc6dba424ce6a1b4be0fd1eec78cb14":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"]},"commit2Childs":{"cd488f50316362b01a7f67b11a96796b9652e3e5":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"775efee7f959e0dd3df7960b93767d9e00b78751":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd488f50316362b01a7f67b11a96796b9652e3e5"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["baba8fb25a5a52ee47728c7ca2cad5ca76cccf82"],"ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8":["b94d84602cc6dba424ce6a1b4be0fd1eec78cb14"],"87c966e9308847938a7c905c2e46a56d8df788b8":["ce99e2b80b5a9cb2b9b59c01219e5397b081dcd8"],"baba8fb25a5a52ee47728c7ca2cad5ca76cccf82":["4404b358bf2902b2da0b8eef5ea0a68acd37674b"],"4404b358bf2902b2da0b8eef5ea0a68acd37674b":["87c966e9308847938a7c905c2e46a56d8df788b8"],"daad6ea8319237361a2c5c4aa31ad04dc7a70ba3":["775efee7f959e0dd3df7960b93767d9e00b78751"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94d84602cc6dba424ce6a1b4be0fd1eec78cb14":["daad6ea8319237361a2c5c4aa31ad04dc7a70ba3"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}