{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],ReadersAndUpdates,SegmentReader).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],ReadersAndUpdates,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedDeletesStream#applyQueryDeletes(Iterable[QueryAndLimit],ReadersAndLiveDocs,SegmentReader).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, ReadersAndUpdates rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = reader.getContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, ReadersAndLiveDocs rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = reader.getContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],ReadersAndUpdates,SegmentReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],ReadersAndUpdates,SegmentReader).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, ReadersAndUpdates rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = reader.getContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, ReadersAndUpdates rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final AtomicReaderContext readerContext = reader.getContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],SegmentState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#applyQueryDeletes(Iterable[QueryAndLimit],ReadersAndUpdates,SegmentReader).mjava","sourceNew":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, SegmentState segState) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = segState.reader.getContext();\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, segState.reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while (true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!segState.any) {\n              segState.rld.initWritableLiveDocs();\n              segState.any = true;\n            }\n            if (segState.rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","sourceOld":"  // Delete by query\n  private static long applyQueryDeletes(Iterable<QueryAndLimit> queriesIter, ReadersAndUpdates rld, final SegmentReader reader) throws IOException {\n    long delCount = 0;\n    final LeafReaderContext readerContext = reader.getContext();\n    boolean any = false;\n    for (QueryAndLimit ent : queriesIter) {\n      Query query = ent.query;\n      int limit = ent.limit;\n      final DocIdSet docs = new QueryWrapperFilter(query).getDocIdSet(readerContext, reader.getLiveDocs());\n      if (docs != null) {\n        final DocIdSetIterator it = docs.iterator();\n        if (it != null) {\n          while(true)  {\n            int doc = it.nextDoc();\n            if (doc >= limit) {\n              break;\n            }\n\n            if (!any) {\n              rld.initWritableLiveDocs();\n              any = true;\n            }\n\n            if (rld.delete(doc)) {\n              delCount++;\n            }\n          }\n        }\n      }\n    }\n\n    return delCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e4c214a1f904dde76f5611b56d4081533055b3b"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}