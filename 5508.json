{"path":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#compareInputAndOutput(String,byte[]).mjava","commits":[{"id":"a0d196318cb8ce39ae32035f290cd1397833e472","date":1418140712,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#compareInputAndOutput(String,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private void compareInputAndOutput(String url, byte[] bytarr) throws IOException {\n\n    HttpClient httpClient = cloudClient.getLbServer().getHttpClient();\n\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse entity = httpClient.execute(httpGet);\n    ByteBuffer b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    try {\n      assertEquals(b.limit(), bytarr.length);\n      for (int i = 0; i < bytarr.length; i++) {\n        assertEquals(b.get(i), bytarr[i]);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#compareInputAndOutput(String,byte[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#compareInputAndOutput(String,byte[]).mjava","sourceNew":"  private void compareInputAndOutput(String url, byte[] bytarr) throws IOException {\n\n    HttpClient httpClient = cloudClient.getLbClient().getHttpClient();\n\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse entity = httpClient.execute(httpGet);\n    ByteBuffer b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    try {\n      assertEquals(b.limit(), bytarr.length);\n      for (int i = 0; i < bytarr.length; i++) {\n        assertEquals(b.get(i), bytarr[i]);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n\n  }\n\n","sourceOld":"  private void compareInputAndOutput(String url, byte[] bytarr) throws IOException {\n\n    HttpClient httpClient = cloudClient.getLbServer().getHttpClient();\n\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse entity = httpClient.execute(httpGet);\n    ByteBuffer b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    try {\n      assertEquals(b.limit(), bytarr.length);\n      for (int i = 0; i < bytarr.length; i++) {\n        assertEquals(b.get(i), bytarr[i]);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a44383d1bc1b3dfe9db7b05ecda8951270911aab","date":1486011386,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#compareInputAndOutput(String,byte[],CloudSolrClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#compareInputAndOutput(String,byte[]).mjava","sourceNew":"  static void compareInputAndOutput(String url, byte[] bytarr, CloudSolrClient cloudClient) throws IOException {\n\n    HttpClient httpClient = cloudClient.getLbClient().getHttpClient();\n\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse entity = httpClient.execute(httpGet);\n    ByteBuffer b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    try {\n      assertEquals(b.limit(), bytarr.length);\n      for (int i = 0; i < bytarr.length; i++) {\n        assertEquals(b.get(i), bytarr[i]);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n\n  }\n\n","sourceOld":"  private void compareInputAndOutput(String url, byte[] bytarr) throws IOException {\n\n    HttpClient httpClient = cloudClient.getLbClient().getHttpClient();\n\n    HttpGet httpGet = new HttpGet(url);\n    HttpResponse entity = httpClient.execute(httpGet);\n    ByteBuffer b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n    try {\n      assertEquals(b.limit(), bytarr.length);\n      for (int i = 0; i < bytarr.length; i++) {\n        assertEquals(b.get(i), bytarr[i]);\n      }\n    } finally {\n      httpGet.releaseConnection();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a44383d1bc1b3dfe9db7b05ecda8951270911aab":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0d196318cb8ce39ae32035f290cd1397833e472":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d196318cb8ce39ae32035f290cd1397833e472"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a44383d1bc1b3dfe9db7b05ecda8951270911aab"]},"commit2Childs":{"a44383d1bc1b3dfe9db7b05ecda8951270911aab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d196318cb8ce39ae32035f290cd1397833e472":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d196318cb8ce39ae32035f290cd1397833e472"],"bafca15d8e408346a67f4282ad1143b88023893b":["a44383d1bc1b3dfe9db7b05ecda8951270911aab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}