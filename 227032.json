{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#ValueReader(Type,int,Comparator[BytesRef]).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#ValueReader(Type,int,Comparator[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#ValueReader(Type,int,Comparator[BytesRef]).mjava","sourceNew":"    public ValueReader(Type type, int maxDocs, Comparator<BytesRef> comp) {\n      super();\n      this.type = type;\n      Source docValuesArray = null;\n      switch (type) {\n      case FIXED_INTS_16:\n        shorts = new short[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(shorts);\n        break;\n      case FIXED_INTS_32:\n        ints = new int[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(ints);\n        break;\n      case FIXED_INTS_64:\n        longs = new long[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(longs);\n        break;\n      case VAR_INTS:\n        longs = new long[maxDocs];\n        docValuesArray = new VarIntsArraySource(type, longs);\n        break;\n      case FIXED_INTS_8:\n        bytes = new byte[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(bytes);\n        break;\n      case FLOAT_32:\n        floats = new float[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(floats);\n        break;\n      case FLOAT_64:\n        doubles = new double[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(\n            doubles);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        assert comp != null;\n        hash = new BytesRefHash();\n        BytesSource bytesSource = new BytesSource(type, comp, maxDocs, hash);\n        ints = bytesSource.docIdToEntry;\n        source = bytesSource;\n        scratch = new BytesRef();\n        break;\n\n      }\n      if (docValuesArray != null) {\n        assert source == null;\n        this.source = docValuesArray;\n      }\n    }\n\n","sourceOld":"    public ValueReader(Type type, int maxDocs, Comparator<BytesRef> comp) {\n      super();\n      this.type = type;\n      Source docValuesArray = null;\n      switch (type) {\n      case FIXED_INTS_16:\n        shorts = new short[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(shorts);\n        break;\n      case FIXED_INTS_32:\n        ints = new int[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(ints);\n        break;\n      case FIXED_INTS_64:\n        longs = new long[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(longs);\n        break;\n      case VAR_INTS:\n        longs = new long[maxDocs];\n        docValuesArray = new VarIntsArraySource(type, longs);\n        break;\n      case FIXED_INTS_8:\n        bytes = new byte[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(bytes);\n        break;\n      case FLOAT_32:\n        floats = new float[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(floats);\n        break;\n      case FLOAT_64:\n        doubles = new double[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(\n            doubles);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        assert comp != null;\n        hash = new BytesRefHash();\n        BytesSource bytesSource = new BytesSource(type, comp, maxDocs, hash);\n        ints = bytesSource.docIdToEntry;\n        source = bytesSource;\n        scratch = new BytesRef();\n        break;\n\n      }\n      if (docValuesArray != null) {\n        assert source == null;\n        this.source = docValuesArray;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#ValueReader(Type,int,Comparator[BytesRef]).mjava","sourceNew":null,"sourceOld":"    public ValueReader(Type type, int maxDocs, Comparator<BytesRef> comp) {\n      super();\n      this.type = type;\n      Source docValuesArray = null;\n      switch (type) {\n      case FIXED_INTS_16:\n        shorts = new short[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(shorts);\n        break;\n      case FIXED_INTS_32:\n        ints = new int[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(ints);\n        break;\n      case FIXED_INTS_64:\n        longs = new long[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(longs);\n        break;\n      case VAR_INTS:\n        longs = new long[maxDocs];\n        docValuesArray = new VarIntsArraySource(type, longs);\n        break;\n      case FIXED_INTS_8:\n        bytes = new byte[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(bytes);\n        break;\n      case FLOAT_32:\n        floats = new float[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(floats);\n        break;\n      case FLOAT_64:\n        doubles = new double[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(\n            doubles);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        assert comp != null;\n        hash = new BytesRefHash();\n        BytesSource bytesSource = new BytesSource(type, comp, maxDocs, hash);\n        ints = bytesSource.docIdToEntry;\n        source = bytesSource;\n        scratch = new BytesRef();\n        break;\n\n      }\n      if (docValuesArray != null) {\n        assert source == null;\n        this.source = docValuesArray;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPerDocProducer.ValueReader#ValueReader(Type,int,Comparator[BytesRef]).mjava","sourceNew":null,"sourceOld":"    public ValueReader(Type type, int maxDocs, Comparator<BytesRef> comp) {\n      super();\n      this.type = type;\n      Source docValuesArray = null;\n      switch (type) {\n      case FIXED_INTS_16:\n        shorts = new short[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(shorts);\n        break;\n      case FIXED_INTS_32:\n        ints = new int[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(ints);\n        break;\n      case FIXED_INTS_64:\n        longs = new long[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(longs);\n        break;\n      case VAR_INTS:\n        longs = new long[maxDocs];\n        docValuesArray = new VarIntsArraySource(type, longs);\n        break;\n      case FIXED_INTS_8:\n        bytes = new byte[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(bytes);\n        break;\n      case FLOAT_32:\n        floats = new float[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type)\n            .newFromArray(floats);\n        break;\n      case FLOAT_64:\n        doubles = new double[maxDocs];\n        docValuesArray = DocValuesArraySource.forType(type).newFromArray(\n            doubles);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        assert comp != null;\n        hash = new BytesRefHash();\n        BytesSource bytesSource = new BytesSource(type, comp, maxDocs, hash);\n        ints = bytesSource.docIdToEntry;\n        source = bytesSource;\n        scratch = new BytesRef();\n        break;\n\n      }\n      if (docValuesArray != null) {\n        assert source == null;\n        this.source = docValuesArray;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","0837ab0472feecb3a54260729d845f839e1cbd72"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}