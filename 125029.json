{"path":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeFilter.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeFilter.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeQuery.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeFilter.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestConstantScoreQuery#testCSQ().mjava","sourceNew":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeQuery.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","sourceOld":"  public void testCSQ() throws Exception {\n    final Query q1 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"b\")));\n    final Query q2 = new ConstantScoreQuery(new TermQuery(new Term(\"a\", \"c\")));\n    final Query q3 = new ConstantScoreQuery(TermRangeFilter.newStringRange(\"a\", \"b\", \"c\", true, true));\n    QueryUtils.check(q1);\n    QueryUtils.check(q2);\n    QueryUtils.checkEqual(q1,q1);\n    QueryUtils.checkEqual(q2,q2);\n    QueryUtils.checkEqual(q3,q3);\n    QueryUtils.checkUnequal(q1,q2);\n    QueryUtils.checkUnequal(q2,q3);\n    QueryUtils.checkUnequal(q1,q3);\n    QueryUtils.checkUnequal(q1, new TermQuery(new Term(\"a\", \"b\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}