{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","commits":[{"id":"ace9b78896617dcee984890f3300d45c539c1b15","date":1337655022,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             0, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfosFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             0, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             0, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63caed6eb28209e181e97822c4c8fdf808884c3b","date":1337712793,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             null, diagnostics, attributes);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a917aca07a305ab70118a83e84d931503441271","date":1337826487,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, normGen, isCompoundFile,\n                                             null, diagnostics, attributes);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final int docStoreOffset = -1;\n      final String docStoreSegment = segment;\n      final boolean docStoreIsCompoundFile = false;\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, docStoreOffset,\n                                             docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                             null, diagnostics, attributes);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f0f8c602950d28e2cb62039b72f51f5d5c44c","date":1337861286,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, normGen, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, normGen, isCompoundFile,\n                                             null, diagnostics, attributes);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05f98d771022c7eaf4eeeb48d75ddbc14d582541","date":1337862333,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, normGen, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, normGen, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"764b942fd30efcae6e532c19771f32eeeb0037b2","date":1337868546,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final Map<Integer,Long> normGen = null;\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, normGen, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e5adcbe5a27941451fdb6194bcbff96c8630e14","date":1346419102,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4","9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d1f90e969803cc84174589b5e4a39b7935fecd","date":1346584861,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77f264c55cbf75404f8601ae7290d69157273a56","date":1380484282,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      final Map<String,String> attributes = input.readStringStringMap();\n      final Set<String> files = input.readStringSet();\n      \n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile,\n                                             null, diagnostics, Collections.unmodifiableMap(attributes));\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["5f6bd27530a2846413fe2d00030493c0e2d3a072","5f6bd27530a2846413fe2d00030493c0e2d3a072"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"057a1793765d068ea9302f1a29e21734ee58d41e","date":1408130117,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final String version = input.readString();\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene40SegmentInfoFormat.SI_EXTENSION);\n    final IndexInput input = dir.openInput(fileName, context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(input, Lucene40SegmentInfoFormat.CODEC_NAME,\n                                   Lucene40SegmentInfoFormat.VERSION_START,\n                                   Lucene40SegmentInfoFormat.VERSION_CURRENT);\n      final Version version = Version.parse(input.readString());\n      final int docCount = input.readInt();\n      if (docCount < 0) {\n        throw new CorruptIndexException(\"invalid docCount: \" + docCount + \" (resource=\" + input + \")\");\n      }\n      final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n      final Map<String,String> diagnostics = input.readStringStringMap();\n      input.readStringStringMap(); // read deprecated attributes\n      final Set<String> files = input.readStringSet();\n      \n      CodecUtil.checkEOF(input);\n\n      final SegmentInfo si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics);\n      si.setFiles(files);\n\n      success = true;\n\n      return si;\n\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"05f98d771022c7eaf4eeeb48d75ddbc14d582541":["f00f0f8c602950d28e2cb62039b72f51f5d5c44c"],"5eb2511ababf862ea11e10761c70ee560cd84510":["77f264c55cbf75404f8601ae7290d69157273a56","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["77f264c55cbf75404f8601ae7290d69157273a56"],"6a917aca07a305ab70118a83e84d931503441271":["63caed6eb28209e181e97822c4c8fdf808884c3b"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["05f98d771022c7eaf4eeeb48d75ddbc14d582541"],"63caed6eb28209e181e97822c4c8fdf808884c3b":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["ace9b78896617dcee984890f3300d45c539c1b15"],"057a1793765d068ea9302f1a29e21734ee58d41e":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["057a1793765d068ea9302f1a29e21734ee58d41e","4cc45c615dbb82bf79d5f9550286098367874fbf"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","764b942fd30efcae6e532c19771f32eeeb0037b2"],"f00f0f8c602950d28e2cb62039b72f51f5d5c44c":["6a917aca07a305ab70118a83e84d931503441271"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["057a1793765d068ea9302f1a29e21734ee58d41e"],"77f264c55cbf75404f8601ae7290d69157273a56":["6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"ace9b78896617dcee984890f3300d45c539c1b15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"commit2Childs":{"05f98d771022c7eaf4eeeb48d75ddbc14d582541":["764b942fd30efcae6e532c19771f32eeeb0037b2"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","057a1793765d068ea9302f1a29e21734ee58d41e"],"6a917aca07a305ab70118a83e84d931503441271":["f00f0f8c602950d28e2cb62039b72f51f5d5c44c"],"63caed6eb28209e181e97822c4c8fdf808884c3b":["6a917aca07a305ab70118a83e84d931503441271"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["63caed6eb28209e181e97822c4c8fdf808884c3b"],"057a1793765d068ea9302f1a29e21734ee58d41e":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","4cc45c615dbb82bf79d5f9550286098367874fbf"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0d1f90e969803cc84174589b5e4a39b7935fecd":[],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d0d1f90e969803cc84174589b5e4a39b7935fecd","6e5adcbe5a27941451fdb6194bcbff96c8630e14"],"6e5adcbe5a27941451fdb6194bcbff96c8630e14":["d0d1f90e969803cc84174589b5e4a39b7935fecd","77f264c55cbf75404f8601ae7290d69157273a56"],"f00f0f8c602950d28e2cb62039b72f51f5d5c44c":["05f98d771022c7eaf4eeeb48d75ddbc14d582541"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","ace9b78896617dcee984890f3300d45c539c1b15"],"77f264c55cbf75404f8601ae7290d69157273a56":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"ace9b78896617dcee984890f3300d45c539c1b15":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d0d1f90e969803cc84174589b5e4a39b7935fecd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}