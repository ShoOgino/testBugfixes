{"path":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<CacheEntry>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<CacheEntry>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<CacheEntry>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#checkValueMismatch(MapOfSets[Integer,CacheEntry],MapOfSets[ReaderField,Integer],Set[ReaderField]).mjava","sourceNew":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","sourceOld":"  /** \n   * Internal helper method used by check that iterates over \n   * valMismatchKeys and generates a Collection of Insanity \n   * instances accordingly.  The MapOfSets are used to populate \n   * the Insanity objects. \n   * @see InsanityType#VALUEMISMATCH\n   */\n  private Collection<Insanity> checkValueMismatch(MapOfSets<Integer, CacheEntry> valIdToItems,\n                                        MapOfSets<ReaderField, Integer> readerFieldToValIds,\n                                        Set<ReaderField> valMismatchKeys) {\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    if (! valMismatchKeys.isEmpty() ) { \n      // we have multiple values for some ReaderFields\n\n      final Map<ReaderField, Set<Integer>> rfMap = readerFieldToValIds.getMap();\n      final Map<Integer, Set<CacheEntry>> valMap = valIdToItems.getMap();\n      for (final ReaderField rf : valMismatchKeys) {\n        final List<CacheEntry> badEntries = new ArrayList<>(valMismatchKeys.size() * 2);\n        for(final Integer value: rfMap.get(rf)) {\n          for (final CacheEntry cacheEntry : valMap.get(value)) {\n            badEntries.add(cacheEntry);\n          }\n        }\n\n        CacheEntry[] badness = new CacheEntry[badEntries.size()];\n        badness = badEntries.toArray(badness);\n\n        insanity.add(new Insanity(InsanityType.VALUEMISMATCH,\n                                  \"Multiple distinct value objects for \" + \n                                  rf.toString(), badness));\n      }\n    }\n    return insanity;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"56572ec06f1407c066d6b7399413178b33176cd8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}