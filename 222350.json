{"path":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","commits":[{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(HttpClient,List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    boolean status = tmpconfDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n    }\n    for (Map<String, Object> file : confFilesToDownload) {\n      fileFetcher = new FileFetcher(tmpconfDir, file, (String) file.get(NAME), true, latestVersion);\n      currentFile = file;\n      fileFetcher.fetchFile();\n      confFilesDownloaded.add(new HashMap<String, Object>(file));\n    }\n    copyTmpConfFiles2Conf(tmpconfDir);\n  }\n\n","sourceOld":"  private void downloadConfFiles(HttpClient client, List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    boolean status = tmpconfDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n    }\n    for (Map<String, Object> file : confFilesToDownload) {\n      fileFetcher = new FileFetcher(tmpconfDir, file, (String) file.get(NAME), client, true, latestVersion);\n      currentFile = file;\n      fileFetcher.fetchFile();\n      confFilesDownloaded.add(new HashMap<String, Object>(file));\n    }\n    copyTmpConfFiles2Conf(tmpconfDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    boolean status = tmpconfDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n    }\n    for (Map<String, Object> file : confFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n      currentFile = file;\n      fileFetcher.fetchFile();\n      confFilesDownloaded.add(new HashMap<String, Object>(file));\n    }\n    copyTmpConfFiles2Conf(tmpconfDir);\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    boolean status = tmpconfDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n    }\n    for (Map<String, Object> file : confFilesToDownload) {\n      fileFetcher = new FileFetcher(tmpconfDir, file, (String) file.get(NAME), true, latestVersion);\n      currentFile = file;\n      fileFetcher.fetchFile();\n      confFilesDownloaded.add(new HashMap<String, Object>(file));\n    }\n    copyTmpConfFiles2Conf(tmpconfDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aab56102a66ad6123bbc7a10ec65d998b5e6117a","date":1238749717,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    boolean status = tmpconfDir.mkdirs();\n    if (!status) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n    }\n    for (Map<String, Object> file : confFilesToDownload) {\n      String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n      fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n      currentFile = file;\n      fileFetcher.fetchFile();\n      confFilesDownloaded.add(new HashMap<String, Object>(file));\n    }\n    copyTmpConfFiles2Conf(tmpconfDir);\n  }\n\n","bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#downloadConfFiles(List[Map[String,Object]],long).mjava","sourceNew":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","sourceOld":"  private void downloadConfFiles(List<Map<String, Object>> confFilesToDownload, long latestVersion) throws Exception {\n    LOG.info(\"Starting download of configuration files from master: \" + confFilesToDownload);\n    confFilesDownloaded = Collections.synchronizedList(new ArrayList<Map<String, Object>>());\n    File tmpconfDir = new File(solrCore.getResourceLoader().getConfigDir(), \"conf.\" + getDateAsStr(new Date()));\n    try {\n      boolean status = tmpconfDir.mkdirs();\n      if (!status) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                \"Failed to create temporary config folder: \" + tmpconfDir.getName());\n      }\n      for (Map<String, Object> file : confFilesToDownload) {\n        String saveAs = (String) (file.get(ALIAS) == null ? file.get(NAME) : file.get(ALIAS));\n        fileFetcher = new FileFetcher(tmpconfDir, file, saveAs, true, latestVersion);\n        currentFile = file;\n        fileFetcher.fetchFile();\n        confFilesDownloaded.add(new HashMap<String, Object>(file));\n      }\n      // this is called before copying the files to the original conf dir\n      // so that if there is an exception avoid corrupting the original files.\n      terminateAndWaitFsyncService();\n      copyTmpConfFiles2Conf(tmpconfDir);\n    } finally {\n      delTree(tmpconfDir);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9be231d18ef58129524215a1d30331523320b744":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"aab56102a66ad6123bbc7a10ec65d998b5e6117a":["9be231d18ef58129524215a1d30331523320b744"],"ad94625fb8d088209f46650c8097196fec67f00c":["aab56102a66ad6123bbc7a10ec65d998b5e6117a"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9be231d18ef58129524215a1d30331523320b744":["aab56102a66ad6123bbc7a10ec65d998b5e6117a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"aab56102a66ad6123bbc7a10ec65d998b5e6117a":["ad94625fb8d088209f46650c8097196fec67f00c"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["9be231d18ef58129524215a1d30331523320b744"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}