{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","commits":[{"id":"d96ad5ec0c23d196a0c31b948fc260195a06133a","date":1461951175,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape = fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape = fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f32db9456b1759bf570a512581f5cea321f69f73","date":1463520039,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape = Geo3DUtil.fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape = fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9819d04ff44d2877a5a19257cd662751284a5f","date":1463541580,"type":3,"author":"David Smiley","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape = Geo3DUtil.fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape = fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92055e521d116ed29034d95584c3269d4528afa9","date":1463576632,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape = Geo3DUtil.fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape = fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    if (polygons.length < 1) {\n      throw new IllegalArgumentException(\"need at least one polygon\");\n    }\n    final GeoShape shape = fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,PlanetModel,Polygon...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/Geo3DPoint#newLargePolygonQuery(String,Polygon...).mjava","sourceNew":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, PlanetModel planetModel, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromLargePolygon(planetModel, polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","sourceOld":"  /** \n   * Create a query for matching a large polygon.  This differs from the related newPolygonQuery in that it\n   * does little or no legality checking and is optimized for very large numbers of polygon edges.\n   * <p>\n   * The supplied {@code polygons} must be clockwise on the outside level, counterclockwise on the next level in, etc.\n   * @param field field name. must not be null.\n   * @param polygons is the list of polygons to use to construct the query; must be at least one.\n   * @return query matching points within this polygon\n   */\n  public static Query newLargePolygonQuery(final String field, final Polygon... polygons) {\n    final GeoShape shape = Geo3DUtil.fromLargePolygon(polygons);\n    return newShapeQuery(field, shape);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c9819d04ff44d2877a5a19257cd662751284a5f":["d96ad5ec0c23d196a0c31b948fc260195a06133a","f32db9456b1759bf570a512581f5cea321f69f73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92055e521d116ed29034d95584c3269d4528afa9":["f32db9456b1759bf570a512581f5cea321f69f73"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"f32db9456b1759bf570a512581f5cea321f69f73":["d96ad5ec0c23d196a0c31b948fc260195a06133a"],"d96ad5ec0c23d196a0c31b948fc260195a06133a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["d96ad5ec0c23d196a0c31b948fc260195a06133a","92055e521d116ed29034d95584c3269d4528afa9"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d96ad5ec0c23d196a0c31b948fc260195a06133a"]},"commit2Childs":{"9c9819d04ff44d2877a5a19257cd662751284a5f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d96ad5ec0c23d196a0c31b948fc260195a06133a","55b50463286869f584cf849d1587a0fcd54d1dfa"],"92055e521d116ed29034d95584c3269d4528afa9":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"f32db9456b1759bf570a512581f5cea321f69f73":["9c9819d04ff44d2877a5a19257cd662751284a5f","92055e521d116ed29034d95584c3269d4528afa9"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d96ad5ec0c23d196a0c31b948fc260195a06133a":["9c9819d04ff44d2877a5a19257cd662751284a5f","f32db9456b1759bf570a512581f5cea321f69f73","d470c8182e92b264680e34081b75e70a9f2b3c89","55b50463286869f584cf849d1587a0fcd54d1dfa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c9819d04ff44d2877a5a19257cd662751284a5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}