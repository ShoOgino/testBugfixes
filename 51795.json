{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertNodeStateProvider(SolrCloudManager,SolrCloudManager,String...).mjava","commits":[{"id":"c8c3ddfa4f113c432082f4675e60b22af8b988a7","date":1568841738,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertNodeStateProvider(SolrCloudManager,SolrCloudManager,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertNodeStateProvider(SolrCloudManager,SolrCloudManager).mjava","sourceNew":"  private static void assertNodeStateProvider(SolrCloudManager oneMgr, SolrCloudManager twoMgr, String... ignorableNodeValues) throws Exception {\n    NodeStateProvider one = oneMgr.getNodeStateProvider();\n    NodeStateProvider two = twoMgr.getNodeStateProvider();\n    for (String node : oneMgr.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> oneVals = one.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      Map<String, Object> twoVals = two.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      oneVals = new TreeMap<>(Utils.getDeepCopy(oneVals, 10, false, true));\n      twoVals = new TreeMap<>(Utils.getDeepCopy(twoVals, 10, false, true));\n      if (ignorableNodeValues != null) {\n        for (String key : ignorableNodeValues) {\n          oneVals.remove(key);\n          twoVals.remove(key);\n        }\n      }\n      assertEquals(Utils.toJSONString(oneVals), Utils.toJSONString(twoVals));\n      Map<String, Map<String, List<ReplicaInfo>>> oneInfos = one.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      Map<String, Map<String, List<ReplicaInfo>>> twoInfos = two.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      assertEquals(\"collections on node\" + node, oneInfos.keySet(), twoInfos.keySet());\n      oneInfos.forEach((coll, oneShards) -> {\n        Map<String, List<ReplicaInfo>> twoShards = twoInfos.get(coll);\n        assertEquals(\"shards on node \" + node, oneShards.keySet(), twoShards.keySet());\n        oneShards.forEach((shard, oneReplicas) -> {\n          List<ReplicaInfo> twoReplicas = twoShards.get(shard);\n          assertEquals(\"num replicas on node \" + node, oneReplicas.size(), twoReplicas.size());\n          Map<String, ReplicaInfo> oneMap = oneReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          Map<String, ReplicaInfo> twoMap = twoReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          assertEquals(\"replica coreNodeNames on node \" + node, oneMap.keySet(), twoMap.keySet());\n          oneMap.forEach((coreNode, oneReplica) -> {\n            ReplicaInfo twoReplica = twoMap.get(coreNode);\n            SimSolrCloudTestCase.assertReplicaInfoEquals(oneReplica, twoReplica);\n          });\n        });\n      });\n    }\n  }\n\n","sourceOld":"  private static void assertNodeStateProvider(SolrCloudManager oneMgr, SolrCloudManager twoMgr) throws Exception {\n    NodeStateProvider one = oneMgr.getNodeStateProvider();\n    NodeStateProvider two = twoMgr.getNodeStateProvider();\n    for (String node : oneMgr.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> oneVals = one.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      Map<String, Object> twoVals = two.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      oneVals = Utils.getDeepCopy(oneVals, 10, false, true);\n      twoVals = Utils.getDeepCopy(twoVals, 10, false, true);\n      assertEquals(Utils.toJSONString(oneVals), Utils.toJSONString(twoVals));\n      Map<String, Map<String, List<ReplicaInfo>>> oneInfos = one.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      Map<String, Map<String, List<ReplicaInfo>>> twoInfos = two.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      assertEquals(\"collections on node\" + node, oneInfos.keySet(), twoInfos.keySet());\n      oneInfos.forEach((coll, oneShards) -> {\n        Map<String, List<ReplicaInfo>> twoShards = twoInfos.get(coll);\n        assertEquals(\"shards on node \" + node, oneShards.keySet(), twoShards.keySet());\n        oneShards.forEach((shard, oneReplicas) -> {\n          List<ReplicaInfo> twoReplicas = twoShards.get(shard);\n          assertEquals(\"num replicas on node \" + node, oneReplicas.size(), twoReplicas.size());\n          Map<String, ReplicaInfo> oneMap = oneReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          Map<String, ReplicaInfo> twoMap = twoReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          assertEquals(\"replica coreNodeNames on node \" + node, oneMap.keySet(), twoMap.keySet());\n          oneMap.forEach((coreNode, oneReplica) -> {\n            ReplicaInfo twoReplica = twoMap.get(coreNode);\n            SimSolrCloudTestCase.assertReplicaInfoEquals(oneReplica, twoReplica);\n          });\n        });\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertNodeStateProvider(SolrCloudManager,SolrCloudManager,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertNodeStateProvider(SolrCloudManager,SolrCloudManager,String...).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private static void assertNodeStateProvider(SolrCloudManager oneMgr, SolrCloudManager twoMgr, String... ignorableNodeValues) throws Exception {\n    NodeStateProvider one = oneMgr.getNodeStateProvider();\n    NodeStateProvider two = twoMgr.getNodeStateProvider();\n    for (String node : oneMgr.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> oneVals = one.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      Map<String, Object> twoVals = two.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      oneVals = new TreeMap<>(Utils.getDeepCopy(oneVals, 10, false, true));\n      twoVals = new TreeMap<>(Utils.getDeepCopy(twoVals, 10, false, true));\n      if (ignorableNodeValues != null) {\n        for (String key : ignorableNodeValues) {\n          oneVals.remove(key);\n          twoVals.remove(key);\n        }\n      }\n      assertEquals(Utils.toJSONString(oneVals), Utils.toJSONString(twoVals));\n      Map<String, Map<String, List<ReplicaInfo>>> oneInfos = one.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      Map<String, Map<String, List<ReplicaInfo>>> twoInfos = two.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      assertEquals(\"collections on node\" + node, oneInfos.keySet(), twoInfos.keySet());\n      oneInfos.forEach((coll, oneShards) -> {\n        Map<String, List<ReplicaInfo>> twoShards = twoInfos.get(coll);\n        assertEquals(\"shards on node \" + node, oneShards.keySet(), twoShards.keySet());\n        oneShards.forEach((shard, oneReplicas) -> {\n          List<ReplicaInfo> twoReplicas = twoShards.get(shard);\n          assertEquals(\"num replicas on node \" + node, oneReplicas.size(), twoReplicas.size());\n          Map<String, ReplicaInfo> oneMap = oneReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          Map<String, ReplicaInfo> twoMap = twoReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          assertEquals(\"replica coreNodeNames on node \" + node, oneMap.keySet(), twoMap.keySet());\n          oneMap.forEach((coreNode, oneReplica) -> {\n            ReplicaInfo twoReplica = twoMap.get(coreNode);\n            SimSolrCloudTestCase.assertReplicaInfoEquals(oneReplica, twoReplica);\n          });\n        });\n      });\n    }\n  }\n\n","sourceOld":"  private static void assertNodeStateProvider(SolrCloudManager oneMgr, SolrCloudManager twoMgr, String... ignorableNodeValues) throws Exception {\n    NodeStateProvider one = oneMgr.getNodeStateProvider();\n    NodeStateProvider two = twoMgr.getNodeStateProvider();\n    for (String node : oneMgr.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> oneVals = one.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      Map<String, Object> twoVals = two.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      oneVals = new TreeMap<>(Utils.getDeepCopy(oneVals, 10, false, true));\n      twoVals = new TreeMap<>(Utils.getDeepCopy(twoVals, 10, false, true));\n      if (ignorableNodeValues != null) {\n        for (String key : ignorableNodeValues) {\n          oneVals.remove(key);\n          twoVals.remove(key);\n        }\n      }\n      assertEquals(Utils.toJSONString(oneVals), Utils.toJSONString(twoVals));\n      Map<String, Map<String, List<ReplicaInfo>>> oneInfos = one.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      Map<String, Map<String, List<ReplicaInfo>>> twoInfos = two.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      assertEquals(\"collections on node\" + node, oneInfos.keySet(), twoInfos.keySet());\n      oneInfos.forEach((coll, oneShards) -> {\n        Map<String, List<ReplicaInfo>> twoShards = twoInfos.get(coll);\n        assertEquals(\"shards on node \" + node, oneShards.keySet(), twoShards.keySet());\n        oneShards.forEach((shard, oneReplicas) -> {\n          List<ReplicaInfo> twoReplicas = twoShards.get(shard);\n          assertEquals(\"num replicas on node \" + node, oneReplicas.size(), twoReplicas.size());\n          Map<String, ReplicaInfo> oneMap = oneReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          Map<String, ReplicaInfo> twoMap = twoReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          assertEquals(\"replica coreNodeNames on node \" + node, oneMap.keySet(), twoMap.keySet());\n          oneMap.forEach((coreNode, oneReplica) -> {\n            ReplicaInfo twoReplica = twoMap.get(coreNode);\n            SimSolrCloudTestCase.assertReplicaInfoEquals(oneReplica, twoReplica);\n          });\n        });\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertNodeStateProvider(SolrCloudManager,SolrCloudManager,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertNodeStateProvider(SolrCloudManager,SolrCloudManager,String...).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private static void assertNodeStateProvider(SolrCloudManager oneMgr, SolrCloudManager twoMgr, String... ignorableNodeValues) throws Exception {\n    NodeStateProvider one = oneMgr.getNodeStateProvider();\n    NodeStateProvider two = twoMgr.getNodeStateProvider();\n    for (String node : oneMgr.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> oneVals = one.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      Map<String, Object> twoVals = two.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      oneVals = new TreeMap<>(Utils.getDeepCopy(oneVals, 10, false, true));\n      twoVals = new TreeMap<>(Utils.getDeepCopy(twoVals, 10, false, true));\n      if (ignorableNodeValues != null) {\n        for (String key : ignorableNodeValues) {\n          oneVals.remove(key);\n          twoVals.remove(key);\n        }\n      }\n      assertEquals(Utils.toJSONString(oneVals), Utils.toJSONString(twoVals));\n      Map<String, Map<String, List<Replica>>> oneInfos = one.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      Map<String, Map<String, List<Replica>>> twoInfos = two.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      assertEquals(\"collections on node\" + node, oneInfos.keySet(), twoInfos.keySet());\n      oneInfos.forEach((coll, oneShards) -> {\n        Map<String, List<Replica>> twoShards = twoInfos.get(coll);\n        assertEquals(\"shards on node \" + node, oneShards.keySet(), twoShards.keySet());\n        oneShards.forEach((shard, oneReplicas) -> {\n          List<Replica> twoReplicas = twoShards.get(shard);\n          assertEquals(\"num replicas on node \" + node, oneReplicas.size(), twoReplicas.size());\n          Map<String, Replica> oneMap = oneReplicas.stream()\n              .collect(Collectors.toMap(Replica::getName, Function.identity()));\n          Map<String, Replica> twoMap = twoReplicas.stream()\n              .collect(Collectors.toMap(Replica::getName, Function.identity()));\n          assertEquals(\"replica coreNodeNames on node \" + node, oneMap.keySet(), twoMap.keySet());\n          oneMap.forEach((coreNode, oneReplica) -> {\n            Replica twoReplica = twoMap.get(coreNode);\n            SimSolrCloudTestCase.assertReplicaInfoEquals(oneReplica, twoReplica);\n          });\n        });\n      });\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private static void assertNodeStateProvider(SolrCloudManager oneMgr, SolrCloudManager twoMgr, String... ignorableNodeValues) throws Exception {\n    NodeStateProvider one = oneMgr.getNodeStateProvider();\n    NodeStateProvider two = twoMgr.getNodeStateProvider();\n    for (String node : oneMgr.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> oneVals = one.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      Map<String, Object> twoVals = two.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      oneVals = new TreeMap<>(Utils.getDeepCopy(oneVals, 10, false, true));\n      twoVals = new TreeMap<>(Utils.getDeepCopy(twoVals, 10, false, true));\n      if (ignorableNodeValues != null) {\n        for (String key : ignorableNodeValues) {\n          oneVals.remove(key);\n          twoVals.remove(key);\n        }\n      }\n      assertEquals(Utils.toJSONString(oneVals), Utils.toJSONString(twoVals));\n      Map<String, Map<String, List<ReplicaInfo>>> oneInfos = one.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      Map<String, Map<String, List<ReplicaInfo>>> twoInfos = two.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      assertEquals(\"collections on node\" + node, oneInfos.keySet(), twoInfos.keySet());\n      oneInfos.forEach((coll, oneShards) -> {\n        Map<String, List<ReplicaInfo>> twoShards = twoInfos.get(coll);\n        assertEquals(\"shards on node \" + node, oneShards.keySet(), twoShards.keySet());\n        oneShards.forEach((shard, oneReplicas) -> {\n          List<ReplicaInfo> twoReplicas = twoShards.get(shard);\n          assertEquals(\"num replicas on node \" + node, oneReplicas.size(), twoReplicas.size());\n          Map<String, ReplicaInfo> oneMap = oneReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          Map<String, ReplicaInfo> twoMap = twoReplicas.stream()\n              .collect(Collectors.toMap(ReplicaInfo::getName, Function.identity()));\n          assertEquals(\"replica coreNodeNames on node \" + node, oneMap.keySet(), twoMap.keySet());\n          oneMap.forEach((coreNode, oneReplica) -> {\n            ReplicaInfo twoReplica = twoMap.get(coreNode);\n            SimSolrCloudTestCase.assertReplicaInfoEquals(oneReplica, twoReplica);\n          });\n        });\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSnapshotCloudManager#assertNodeStateProvider(SolrCloudManager,SolrCloudManager,String...).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private static void assertNodeStateProvider(SolrCloudManager oneMgr, SolrCloudManager twoMgr, String... ignorableNodeValues) throws Exception {\n    NodeStateProvider one = oneMgr.getNodeStateProvider();\n    NodeStateProvider two = twoMgr.getNodeStateProvider();\n    for (String node : oneMgr.getClusterStateProvider().getLiveNodes()) {\n      Map<String, Object> oneVals = one.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      Map<String, Object> twoVals = two.getNodeValues(node, SimUtils.COMMON_NODE_TAGS);\n      oneVals = new TreeMap<>(Utils.getDeepCopy(oneVals, 10, false, true));\n      twoVals = new TreeMap<>(Utils.getDeepCopy(twoVals, 10, false, true));\n      if (ignorableNodeValues != null) {\n        for (String key : ignorableNodeValues) {\n          oneVals.remove(key);\n          twoVals.remove(key);\n        }\n      }\n      assertEquals(Utils.toJSONString(oneVals), Utils.toJSONString(twoVals));\n      Map<String, Map<String, List<Replica>>> oneInfos = one.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      Map<String, Map<String, List<Replica>>> twoInfos = two.getReplicaInfo(node, SimUtils.COMMON_REPLICA_TAGS);\n      assertEquals(\"collections on node\" + node, oneInfos.keySet(), twoInfos.keySet());\n      oneInfos.forEach((coll, oneShards) -> {\n        Map<String, List<Replica>> twoShards = twoInfos.get(coll);\n        assertEquals(\"shards on node \" + node, oneShards.keySet(), twoShards.keySet());\n        oneShards.forEach((shard, oneReplicas) -> {\n          List<Replica> twoReplicas = twoShards.get(shard);\n          assertEquals(\"num replicas on node \" + node, oneReplicas.size(), twoReplicas.size());\n          Map<String, Replica> oneMap = oneReplicas.stream()\n              .collect(Collectors.toMap(Replica::getName, Function.identity()));\n          Map<String, Replica> twoMap = twoReplicas.stream()\n              .collect(Collectors.toMap(Replica::getName, Function.identity()));\n          assertEquals(\"replica coreNodeNames on node \" + node, oneMap.keySet(), twoMap.keySet());\n          oneMap.forEach((coreNode, oneReplica) -> {\n            Replica twoReplica = twoMap.get(coreNode);\n            SimSolrCloudTestCase.assertReplicaInfoEquals(oneReplica, twoReplica);\n          });\n        });\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["c8c3ddfa4f113c432082f4675e60b22af8b988a7"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8c3ddfa4f113c432082f4675e60b22af8b988a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8c3ddfa4f113c432082f4675e60b22af8b988a7"],"c8c3ddfa4f113c432082f4675e60b22af8b988a7":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}