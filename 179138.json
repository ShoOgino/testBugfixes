{"path":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testPopulateScores().mjava","commits":[{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTopFieldCollector#testPopulateScores().mjava","pathOld":"/dev/null","sourceNew":"  public void testPopulateScores() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    TextField field = new TextField(\"f\", \"foo bar\", Store.NO);\n    doc.add(field);\n    NumericDocValuesField sortField = new NumericDocValuesField(\"sort\", 0);\n    doc.add(sortField);\n    w.addDocument(doc);\n\n    field.setStringValue(\"\");\n    sortField.setLongValue(3);\n    w.addDocument(doc);\n\n    field.setStringValue(\"foo foo bar\");\n    sortField.setLongValue(2);\n    w.addDocument(doc);\n\n    w.flush();\n\n    field.setStringValue(\"foo\");\n    sortField.setLongValue(2);\n    w.addDocument(doc);\n\n    field.setStringValue(\"bar bar bar\");\n    sortField.setLongValue(0);\n    w.addDocument(doc);\n\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (String queryText : new String[] { \"foo\", \"bar\" }) {\n      Query query = new TermQuery(new Term(\"f\", queryText));\n      for (boolean reverse : new boolean[] {false, true}) {\n        ScoreDoc[] sortedByDoc = searcher.search(query, 10).scoreDocs;\n        Arrays.sort(sortedByDoc, Comparator.comparingInt(sd -> sd.doc));\n\n        Sort sort = new Sort(new SortField(\"sort\", SortField.Type.LONG, reverse));\n        ScoreDoc[] sortedByField = searcher.search(query, 10, sort).scoreDocs;\n        ScoreDoc[] sortedByFieldClone = sortedByField.clone();\n        TopFieldCollector.populateScores(sortedByFieldClone, searcher, query);\n        for (int i = 0; i < sortedByFieldClone.length; ++i) {\n          assertEquals(sortedByFieldClone[i].doc, sortedByField[i].doc);\n          assertSame(((FieldDoc) sortedByFieldClone[i]).fields, ((FieldDoc) sortedByField[i]).fields);\n          assertEquals(sortedByFieldClone[i].score,\n              sortedByDoc[Arrays.binarySearch(sortedByDoc, sortedByFieldClone[i], Comparator.comparingInt(sd -> sd.doc))].score, 0f);\n        }\n      }\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}