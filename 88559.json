{"path":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleErrorsAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleErrorsAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleErrorsAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    NamedList hosts = new NamedList();\n\n    for (CdcrReplicatorState state : replicatorManager.getReplicatorStates()) {\n      NamedList errors = new NamedList();\n\n      errors.add(CdcrParams.CONSECUTIVE_ERRORS, state.getConsecutiveErrors());\n      errors.add(CdcrReplicatorState.ErrorType.BAD_REQUEST.toLower(), state.getErrorCount(CdcrReplicatorState.ErrorType.BAD_REQUEST));\n      errors.add(CdcrReplicatorState.ErrorType.INTERNAL.toLower(), state.getErrorCount(CdcrReplicatorState.ErrorType.INTERNAL));\n\n      NamedList lastErrors = new NamedList();\n      for (String[] lastError : state.getLastErrors()) {\n        lastErrors.add(lastError[0], lastError[1]);\n      }\n      errors.add(CdcrParams.LAST, lastErrors);\n\n      if (hosts.get(state.getZkHost()) == null) {\n        hosts.add(state.getZkHost(), new NamedList());\n      }\n      ((NamedList) hosts.get(state.getZkHost())).add(state.getTargetCollection(), errors);\n    }\n\n    rsp.add(CdcrParams.ERRORS, hosts);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleErrorsAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleErrorsAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void handleErrorsAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    NamedList hosts = new NamedList();\n\n    for (CdcrReplicatorState state : replicatorManager.getReplicatorStates()) {\n      NamedList errors = new NamedList();\n\n      errors.add(CdcrParams.CONSECUTIVE_ERRORS, state.getConsecutiveErrors());\n      errors.add(CdcrReplicatorState.ErrorType.BAD_REQUEST.toLower(), state.getErrorCount(CdcrReplicatorState.ErrorType.BAD_REQUEST));\n      errors.add(CdcrReplicatorState.ErrorType.INTERNAL.toLower(), state.getErrorCount(CdcrReplicatorState.ErrorType.INTERNAL));\n\n      NamedList lastErrors = new NamedList();\n      for (String[] lastError : state.getLastErrors()) {\n        lastErrors.add(lastError[0], lastError[1]);\n      }\n      errors.add(CdcrParams.LAST, lastErrors);\n\n      if (hosts.get(state.getZkHost()) == null) {\n        hosts.add(state.getZkHost(), new NamedList());\n      }\n      ((NamedList) hosts.get(state.getZkHost())).add(state.getTargetCollection(), errors);\n    }\n\n    rsp.add(CdcrParams.ERRORS, hosts);\n  }\n\n","sourceOld":"  private void handleErrorsAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    NamedList hosts = new NamedList();\n\n    for (CdcrReplicatorState state : replicatorManager.getReplicatorStates()) {\n      NamedList errors = new NamedList();\n\n      errors.add(CdcrParams.CONSECUTIVE_ERRORS, state.getConsecutiveErrors());\n      errors.add(CdcrReplicatorState.ErrorType.BAD_REQUEST.toLower(), state.getErrorCount(CdcrReplicatorState.ErrorType.BAD_REQUEST));\n      errors.add(CdcrReplicatorState.ErrorType.INTERNAL.toLower(), state.getErrorCount(CdcrReplicatorState.ErrorType.INTERNAL));\n\n      NamedList lastErrors = new NamedList();\n      for (String[] lastError : state.getLastErrors()) {\n        lastErrors.add(lastError[0], lastError[1]);\n      }\n      errors.add(CdcrParams.LAST, lastErrors);\n\n      if (hosts.get(state.getZkHost()) == null) {\n        hosts.add(state.getZkHost(), new NamedList());\n      }\n      ((NamedList) hosts.get(state.getZkHost())).add(state.getTargetCollection(), errors);\n    }\n\n    rsp.add(CdcrParams.ERRORS, hosts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleErrorsAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private void handleErrorsAction(SolrQueryRequest req, SolrQueryResponse rsp) {\n    NamedList hosts = new NamedList();\n\n    for (CdcrReplicatorState state : replicatorManager.getReplicatorStates()) {\n      NamedList errors = new NamedList();\n\n      errors.add(CdcrParams.CONSECUTIVE_ERRORS, state.getConsecutiveErrors());\n      errors.add(CdcrReplicatorState.ErrorType.BAD_REQUEST.toLower(), state.getErrorCount(CdcrReplicatorState.ErrorType.BAD_REQUEST));\n      errors.add(CdcrReplicatorState.ErrorType.INTERNAL.toLower(), state.getErrorCount(CdcrReplicatorState.ErrorType.INTERNAL));\n\n      NamedList lastErrors = new NamedList();\n      for (String[] lastError : state.getLastErrors()) {\n        lastErrors.add(lastError[0], lastError[1]);\n      }\n      errors.add(CdcrParams.LAST, lastErrors);\n\n      if (hosts.get(state.getZkHost()) == null) {\n        hosts.add(state.getZkHost(), new NamedList());\n      }\n      ((NamedList) hosts.get(state.getZkHost())).add(state.getTargetCollection(), errors);\n    }\n\n    rsp.add(CdcrParams.ERRORS, hosts);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}