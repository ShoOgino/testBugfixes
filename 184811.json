{"path":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","commits":[{"id":"dce99db8590cdd065839ae4e6b228b66eeee8f38","date":1367579599,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","pathOld":"/dev/null","sourceNew":"  public void testExceptionDuringSave() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (PersistentSnapshotDeletionPolicy.class.getName().equals(trace[i].getClassName()) && \"persist\".equals(trace[i].getMethodName())) {\n            throw new IOException(\"now fail on purpose\");\n          }\n        }\n      }\n      });\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), new PersistentSnapshotDeletionPolicy(\n                                         new KeepOnlyLastCommitDeletionPolicy(), dir, OpenMode.CREATE_OR_APPEND)));\n    writer.addDocument(new Document());\n    writer.commit();\n\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    try {\n      psdp.snapshot();\n    } catch (IOException ioe) {\n      if (ioe.getMessage().equals(\"now fail on purpose\")) {\n        // ok\n      } else {\n        throw ioe;\n      }\n    }\n    assertEquals(0, psdp.getSnapshotCount());\n    writer.close();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","sourceNew":"  public void testExceptionDuringSave() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (PersistentSnapshotDeletionPolicy.class.getName().equals(trace[i].getClassName()) && \"persist\".equals(trace[i].getMethodName())) {\n            throw new IOException(\"now fail on purpose\");\n          }\n        }\n      }\n      });\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), new PersistentSnapshotDeletionPolicy(\n                                         new KeepOnlyLastCommitDeletionPolicy(), dir, OpenMode.CREATE_OR_APPEND)));\n    writer.addDocument(new Document());\n    writer.commit();\n\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    try {\n      psdp.snapshot();\n    } catch (IOException ioe) {\n      if (ioe.getMessage().equals(\"now fail on purpose\")) {\n        // ok\n      } else {\n        throw ioe;\n      }\n    }\n    assertEquals(0, psdp.getSnapshotCount());\n    writer.shutdown();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  public void testExceptionDuringSave() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (PersistentSnapshotDeletionPolicy.class.getName().equals(trace[i].getClassName()) && \"persist\".equals(trace[i].getMethodName())) {\n            throw new IOException(\"now fail on purpose\");\n          }\n        }\n      }\n      });\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), new PersistentSnapshotDeletionPolicy(\n                                         new KeepOnlyLastCommitDeletionPolicy(), dir, OpenMode.CREATE_OR_APPEND)));\n    writer.addDocument(new Document());\n    writer.commit();\n\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    try {\n      psdp.snapshot();\n    } catch (IOException ioe) {\n      if (ioe.getMessage().equals(\"now fail on purpose\")) {\n        // ok\n      } else {\n        throw ioe;\n      }\n    }\n    assertEquals(0, psdp.getSnapshotCount());\n    writer.close();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","sourceNew":"  public void testExceptionDuringSave() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (PersistentSnapshotDeletionPolicy.class.getName().equals(trace[i].getClassName()) && \"persist\".equals(trace[i].getMethodName())) {\n            throw new IOException(\"now fail on purpose\");\n          }\n        }\n      }\n      });\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), new PersistentSnapshotDeletionPolicy(\n                                         new KeepOnlyLastCommitDeletionPolicy(), dir, OpenMode.CREATE_OR_APPEND)));\n    writer.addDocument(new Document());\n    writer.commit();\n\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    try {\n      psdp.snapshot();\n    } catch (IOException ioe) {\n      if (ioe.getMessage().equals(\"now fail on purpose\")) {\n        // ok\n      } else {\n        throw ioe;\n      }\n    }\n    assertEquals(0, psdp.getSnapshotCount());\n    writer.close();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  public void testExceptionDuringSave() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (PersistentSnapshotDeletionPolicy.class.getName().equals(trace[i].getClassName()) && \"persist\".equals(trace[i].getMethodName())) {\n            throw new IOException(\"now fail on purpose\");\n          }\n        }\n      }\n      });\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), new PersistentSnapshotDeletionPolicy(\n                                         new KeepOnlyLastCommitDeletionPolicy(), dir, OpenMode.CREATE_OR_APPEND)));\n    writer.addDocument(new Document());\n    writer.commit();\n\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    try {\n      psdp.snapshot();\n    } catch (IOException ioe) {\n      if (ioe.getMessage().equals(\"now fail on purpose\")) {\n        // ok\n      } else {\n        throw ioe;\n      }\n    }\n    assertEquals(0, psdp.getSnapshotCount());\n    writer.shutdown();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2916966cc9815e973c01452a0d76c98c5e0d0926","date":1577444040,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","sourceNew":"  public void testExceptionDuringSave() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (callStackContains(PersistentSnapshotDeletionPolicy.class, \"persist\")) {\n          throw new IOException(\"now fail on purpose\");\n        }\n      }\n      });\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), new PersistentSnapshotDeletionPolicy(\n                                         new KeepOnlyLastCommitDeletionPolicy(), dir, OpenMode.CREATE_OR_APPEND)));\n    writer.addDocument(new Document());\n    writer.commit();\n\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    try {\n      psdp.snapshot();\n    } catch (IOException ioe) {\n      if (ioe.getMessage().equals(\"now fail on purpose\")) {\n        // ok\n      } else {\n        throw ioe;\n      }\n    }\n    assertEquals(0, psdp.getSnapshotCount());\n    writer.close();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  public void testExceptionDuringSave() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (PersistentSnapshotDeletionPolicy.class.getName().equals(trace[i].getClassName()) && \"persist\".equals(trace[i].getMethodName())) {\n            throw new IOException(\"now fail on purpose\");\n          }\n        }\n      }\n      });\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), new PersistentSnapshotDeletionPolicy(\n                                         new KeepOnlyLastCommitDeletionPolicy(), dir, OpenMode.CREATE_OR_APPEND)));\n    writer.addDocument(new Document());\n    writer.commit();\n\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    try {\n      psdp.snapshot();\n    } catch (IOException ioe) {\n      if (ioe.getMessage().equals(\"now fail on purpose\")) {\n        // ok\n      } else {\n        throw ioe;\n      }\n    }\n    assertEquals(0, psdp.getSnapshotCount());\n    writer.close();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ec73c5617c177b1d81ddfe04bbff1d08fccecc","date":1577456244,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPersistentSnapshotDeletionPolicy#testExceptionDuringSave().mjava","sourceNew":"  public void testExceptionDuringSave() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        if (callStackContains(PersistentSnapshotDeletionPolicy.class, \"persist\")) {\n          throw new IOException(\"now fail on purpose\");\n        }\n      }\n      });\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), new PersistentSnapshotDeletionPolicy(\n                                         new KeepOnlyLastCommitDeletionPolicy(), dir, OpenMode.CREATE_OR_APPEND)));\n    writer.addDocument(new Document());\n    writer.commit();\n\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    try {\n      psdp.snapshot();\n    } catch (IOException ioe) {\n      if (ioe.getMessage().equals(\"now fail on purpose\")) {\n        // ok\n      } else {\n        throw ioe;\n      }\n    }\n    assertEquals(0, psdp.getSnapshotCount());\n    writer.close();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","sourceOld":"  public void testExceptionDuringSave() throws Exception {\n    MockDirectoryWrapper dir = newMockDirectory();\n    dir.failOn(new MockDirectoryWrapper.Failure() {\n      @Override\n      public void eval(MockDirectoryWrapper dir) throws IOException {\n        StackTraceElement[] trace = Thread.currentThread().getStackTrace();\n        for (int i = 0; i < trace.length; i++) {\n          if (PersistentSnapshotDeletionPolicy.class.getName().equals(trace[i].getClassName()) && \"persist\".equals(trace[i].getMethodName())) {\n            throw new IOException(\"now fail on purpose\");\n          }\n        }\n      }\n      });\n    IndexWriter writer = new IndexWriter(dir, getConfig(random(), new PersistentSnapshotDeletionPolicy(\n                                         new KeepOnlyLastCommitDeletionPolicy(), dir, OpenMode.CREATE_OR_APPEND)));\n    writer.addDocument(new Document());\n    writer.commit();\n\n    PersistentSnapshotDeletionPolicy psdp = (PersistentSnapshotDeletionPolicy) writer.getConfig().getIndexDeletionPolicy();\n    try {\n      psdp.snapshot();\n    } catch (IOException ioe) {\n      if (ioe.getMessage().equals(\"now fail on purpose\")) {\n        // ok\n      } else {\n        throw ioe;\n      }\n    }\n    assertEquals(0, psdp.getSnapshotCount());\n    writer.close();\n    assertEquals(1, DirectoryReader.listCommits(dir).size());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dce99db8590cdd065839ae4e6b228b66eeee8f38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":["d0ef034a4f10871667ae75181537775ddcf8ade4","2916966cc9815e973c01452a0d76c98c5e0d0926"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2916966cc9815e973c01452a0d76c98c5e0d0926"]},"commit2Childs":{"dce99db8590cdd065839ae4e6b228b66eeee8f38":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dce99db8590cdd065839ae4e6b228b66eeee8f38"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2916966cc9815e973c01452a0d76c98c5e0d0926","94ec73c5617c177b1d81ddfe04bbff1d08fccecc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"2916966cc9815e973c01452a0d76c98c5e0d0926":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"94ec73c5617c177b1d81ddfe04bbff1d08fccecc":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["94ec73c5617c177b1d81ddfe04bbff1d08fccecc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}