{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","commits":[{"id":"c42a37c6ad0772ece32e03ba62d852fe7d83e4b9","date":1427401094,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica();\n    request.setShardName(\"shard\");\n    request.setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica();\n    request.setRouteKey(\"route\");\n    request.setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica();\n    request.setShardName(\"shard\");\n    request.setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica();\n    request.setRouteKey(\"route\");\n    request.setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","sourceNew":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setRouteKey(\"route\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n  }\n\n","sourceOld":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica();\n    request.setShardName(\"shard\");\n    request.setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica();\n    request.setRouteKey(\"route\");\n    request.setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","sourceNew":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setRouteKey(\"route\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n    \n    // with type parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\")\n            .setType(Replica.Type.NRT);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n  }\n\n","sourceOld":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setRouteKey(\"route\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac97ea104d893f16aab430d9904473bc1f233f3c","date":1496249396,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","sourceNew":"  public void testAddReplica() {\n    // with shard parameter and \"client side\" implicit type param\n    CollectionAdminRequest.AddReplica request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n    \n    // with only shard parameter and \"server side\" implicit type, so no param\n    request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\", null);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = CollectionAdminRequest.addReplicaByRouteKey(\"collection\",\"route\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n    \n    // with explicit type parameter\n    request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\", Replica.Type.NRT);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n  }\n\n","sourceOld":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setRouteKey(\"route\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n    \n    // with type parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\")\n            .setType(Replica.Type.NRT);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3217321f3e1d7922898c6c633d17acfa840d6875","date":1496257480,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","sourceNew":"  public void testAddReplica() {\n    // with shard parameter and \"client side\" implicit type param\n    CollectionAdminRequest.AddReplica request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n    \n    // with only shard parameter and \"server side\" implicit type, so no param\n    request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\", null);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = CollectionAdminRequest.addReplicaByRouteKey(\"collection\",\"route\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n    \n    // with explicit type parameter\n    request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\", Replica.Type.NRT);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n  }\n\n","sourceOld":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setRouteKey(\"route\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n    \n    // with type parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\")\n            .setType(Replica.Type.NRT);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","sourceNew":"  public void testAddReplica() {\n    // with shard parameter and \"client side\" implicit type param\n    CollectionAdminRequest.AddReplica request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n    \n    // with only shard parameter and \"server side\" implicit type, so no param\n    request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\", null);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = CollectionAdminRequest.addReplicaByRouteKey(\"collection\",\"route\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n    \n    // with explicit type parameter\n    request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\", Replica.Type.NRT);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n  }\n\n","sourceOld":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setRouteKey(\"route\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n    \n    // with type parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\")\n            .setType(Replica.Type.NRT);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/CollectionAdminRequestRequiredParamsTest#testAddReplica().mjava","sourceNew":"  public void testAddReplica() {\n    // with shard parameter and \"client side\" implicit type param\n    CollectionAdminRequest.AddReplica request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n    \n    // with only shard parameter and \"server side\" implicit type, so no param\n    request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\", null);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = CollectionAdminRequest.addReplicaByRouteKey(\"collection\",\"route\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n    \n    // with explicit type parameter\n    request = CollectionAdminRequest.addReplicaToShard(\"collection\", \"shard\", Replica.Type.NRT);\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD, ZkStateReader.REPLICA_TYPE);\n  }\n\n","sourceOld":"  public void testAddReplica() {\n    // with shard parameter\n    CollectionAdminRequest.AddReplica request = new CollectionAdminRequest.AddReplica()\n            .setShardName(\"shard\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, SHARD);\n    \n    // with route parameter\n    request = new CollectionAdminRequest.AddReplica()\n            .setRouteKey(\"route\")\n            .setCollectionName(\"collection\");\n    assertContainsParams(request.getParams(), ACTION, COLLECTION, ShardParams._ROUTE_);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c42a37c6ad0772ece32e03ba62d852fe7d83e4b9"],"61c45e99cf6676da48f19d7511c73712ad39402b":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"c42a37c6ad0772ece32e03ba62d852fe7d83e4b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3217321f3e1d7922898c6c633d17acfa840d6875":["61c45e99cf6676da48f19d7511c73712ad39402b","ac97ea104d893f16aab430d9904473bc1f233f3c"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["c42a37c6ad0772ece32e03ba62d852fe7d83e4b9"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["61c45e99cf6676da48f19d7511c73712ad39402b","3217321f3e1d7922898c6c633d17acfa840d6875"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3217321f3e1d7922898c6c633d17acfa840d6875"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["ac97ea104d893f16aab430d9904473bc1f233f3c","3217321f3e1d7922898c6c633d17acfa840d6875","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"c42a37c6ad0772ece32e03ba62d852fe7d83e4b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"ac97ea104d893f16aab430d9904473bc1f233f3c":["3217321f3e1d7922898c6c633d17acfa840d6875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c42a37c6ad0772ece32e03ba62d852fe7d83e4b9"],"3217321f3e1d7922898c6c633d17acfa840d6875":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}