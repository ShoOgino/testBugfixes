{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#loadNextFloorBlock().mjava","commits":[{"id":"0a570bec4aec8585a4eea44849bfb2bc264208c4","date":1371308653,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#loadNextFloorBlock().mjava","pathOld":"/dev/null","sourceNew":"        void loadNextFloorBlock() throws IOException {\n          assert numFollowFloorBlocks > 0;\n          //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n          do {\n            fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n            numFollowFloorBlocks--;\n            // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n            if (numFollowFloorBlocks != 0) {\n              nextFloorLabel = floorDataReader.readByte() & 0xff;\n            } else {\n              nextFloorLabel = 256;\n            }\n            // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n          } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transitions[transitionIndex].getMin());\n\n          load(null);\n        }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d01ed6d1df51191983f4dd157aedf5f4650e2b3","date":1376572546,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTreeTermsReader.FieldReader.IntersectEnum.Frame#loadNextFloorBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempBlockTermsReader.FieldReader.IntersectEnum.Frame#loadNextFloorBlock().mjava","sourceNew":"        void loadNextFloorBlock() throws IOException {\n          assert numFollowFloorBlocks > 0;\n          //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n          do {\n            fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n            numFollowFloorBlocks--;\n            // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n            if (numFollowFloorBlocks != 0) {\n              nextFloorLabel = floorDataReader.readByte() & 0xff;\n            } else {\n              nextFloorLabel = 256;\n            }\n            // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n          } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transitions[transitionIndex].getMin());\n\n          load(null);\n        }\n\n","sourceOld":"        void loadNextFloorBlock() throws IOException {\n          assert numFollowFloorBlocks > 0;\n          //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n          do {\n            fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n            numFollowFloorBlocks--;\n            // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n            if (numFollowFloorBlocks != 0) {\n              nextFloorLabel = floorDataReader.readByte() & 0xff;\n            } else {\n              nextFloorLabel = 256;\n            }\n            // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n          } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transitions[transitionIndex].getMin());\n\n          load(null);\n        }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":["0a570bec4aec8585a4eea44849bfb2bc264208c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0a570bec4aec8585a4eea44849bfb2bc264208c4":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a570bec4aec8585a4eea44849bfb2bc264208c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d01ed6d1df51191983f4dd157aedf5f4650e2b3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6d01ed6d1df51191983f4dd157aedf5f4650e2b3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}