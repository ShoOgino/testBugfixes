{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","commits":[{"id":"97ee2282ff806e9bc9d705f389cf40451ab81c3e","date":1561721333,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          return scoreFunction.explain(intervalsSource.toString(), boost, freq);\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          return scoreFunction.explain(intervalsSource.toString(), boost, freq);\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"947ff3caceb0d23c3c3f0c86bf22d6bee38553fb","date":1575303125,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          return scoreFunction.explain(IntervalQuery.this.toString(), boost, freq);\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          return scoreFunction.explain(intervalsSource.toString(), boost, freq);\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/IntervalQuery.IntervalWeight#explain(LeafReaderContext,int).mjava","sourceNew":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          return scoreFunction.explain(IntervalQuery.this.toString(), boost, freq);\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","sourceOld":"    @Override\n    public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n      IntervalScorer scorer = (IntervalScorer) scorer(context);\n      if (scorer != null) {\n        int newDoc = scorer.iterator().advance(doc);\n        if (newDoc == doc) {\n          float freq = scorer.freq();\n          return scoreFunction.explain(intervalsSource.toString(), boost, freq);\n        }\n      }\n      return Explanation.noMatch(\"no matching intervals\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["97ee2282ff806e9bc9d705f389cf40451ab81c3e","947ff3caceb0d23c3c3f0c86bf22d6bee38553fb"],"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"947ff3caceb0d23c3c3f0c86bf22d6bee38553fb":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["947ff3caceb0d23c3c3f0c86bf22d6bee38553fb"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"97ee2282ff806e9bc9d705f389cf40451ab81c3e":["d3aa683bba99315838c968fefedf3d74f44aa993","947ff3caceb0d23c3c3f0c86bf22d6bee38553fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97ee2282ff806e9bc9d705f389cf40451ab81c3e"],"947ff3caceb0d23c3c3f0c86bf22d6bee38553fb":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}