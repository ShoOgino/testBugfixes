{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeImpacts(CompetitiveFreqNormAccumulator,IndexOutput).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeImpacts(CompetitiveFreqNormAccumulator,IndexOutput).mjava","pathOld":"/dev/null","sourceNew":"  static void writeImpacts(CompetitiveFreqNormAccumulator acc, IndexOutput out) throws IOException {\n    SortedSet<FreqAndNorm> freqAndNorms = acc.getCompetitiveFreqNormPairs();\n    FreqAndNorm previous = new FreqAndNorm(0, 0);\n    for (FreqAndNorm freqAndNorm : freqAndNorms) {\n      assert freqAndNorm.freq > previous.freq;\n      assert Long.compareUnsigned(freqAndNorm.norm, previous.norm) > 0;\n      int freqDelta = freqAndNorm.freq - previous.freq - 1;\n      long normDelta = freqAndNorm.norm - previous.norm - 1;\n      if (normDelta == 0) {\n        // most of time, norm only increases by 1, so we can fold everything in a single byte\n        out.writeVInt(freqDelta << 1);\n      } else {\n        out.writeVInt((freqDelta << 1) | 1);\n        out.writeZLong(normDelta);\n      }\n      previous = freqAndNorm;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeImpacts(CompetitiveImpactAccumulator,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SkipWriter#writeImpacts(CompetitiveFreqNormAccumulator,IndexOutput).mjava","sourceNew":"  static void writeImpacts(CompetitiveImpactAccumulator acc, IndexOutput out) throws IOException {\n    SortedSet<Impact> impacts = acc.getCompetitiveFreqNormPairs();\n    Impact previous = new Impact(0, 0);\n    for (Impact impact : impacts) {\n      assert impact.freq > previous.freq;\n      assert Long.compareUnsigned(impact.norm, previous.norm) > 0;\n      int freqDelta = impact.freq - previous.freq - 1;\n      long normDelta = impact.norm - previous.norm - 1;\n      if (normDelta == 0) {\n        // most of time, norm only increases by 1, so we can fold everything in a single byte\n        out.writeVInt(freqDelta << 1);\n      } else {\n        out.writeVInt((freqDelta << 1) | 1);\n        out.writeZLong(normDelta);\n      }\n      previous = impact;\n    }\n  }\n\n","sourceOld":"  static void writeImpacts(CompetitiveFreqNormAccumulator acc, IndexOutput out) throws IOException {\n    SortedSet<FreqAndNorm> freqAndNorms = acc.getCompetitiveFreqNormPairs();\n    FreqAndNorm previous = new FreqAndNorm(0, 0);\n    for (FreqAndNorm freqAndNorm : freqAndNorms) {\n      assert freqAndNorm.freq > previous.freq;\n      assert Long.compareUnsigned(freqAndNorm.norm, previous.norm) > 0;\n      int freqDelta = freqAndNorm.freq - previous.freq - 1;\n      long normDelta = freqAndNorm.norm - previous.norm - 1;\n      if (normDelta == 0) {\n        // most of time, norm only increases by 1, so we can fold everything in a single byte\n        out.writeVInt(freqDelta << 1);\n      } else {\n        out.writeVInt((freqDelta << 1) | 1);\n        out.writeZLong(normDelta);\n      }\n      previous = freqAndNorm;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["622a708571e534680618b3c5e0c28ac539a47776"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"]},"commit2Childs":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}