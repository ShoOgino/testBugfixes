{"path":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n    open = false;\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockDirectoryWrapper#close().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","sourceNew":"  @Override\n  public synchronized void close() throws IOException {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n    open = false;\n    delegate.close();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n    open = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#close().mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized void close() {\n    if (openFiles == null) {\n      openFiles = new HashMap<String,Integer>();\n    }\n    if (noDeleteOpenFile && openFiles.size() > 0) {\n      // RuntimeException instead of IOException because\n      // super() does not throw IOException currently:\n      throw new RuntimeException(\"MockRAMDirectory: cannot close: there are still open files: \" + openFiles);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","a05409176bd65129d67a785ee70e881e238a9aef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a05409176bd65129d67a785ee70e881e238a9aef"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}