{"path":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits skipDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields == null) {\n      return null;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms != null) {\n      return terms.docs(skipDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields == null) {\n      return null;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms != null) {\n      return terms.docs(liveDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits skipDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields == null) {\n      return null;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms != null) {\n      return terms.docs(skipDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields == null) {\n      return null;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms != null) {\n      return terms.docs(liveDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits skipDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields == null) {\n      return null;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms != null) {\n      return terms.docs(skipDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields == null) {\n      return null;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms != null) {\n      return terms.docs(liveDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits skipDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields == null) {\n      return null;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms != null) {\n      return terms.docs(skipDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields == null) {\n      return null;\n    }\n    final Terms terms = fields.terms(field);\n    if (terms != null) {\n      return terms.docs(liveDocs, term, null);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#termDocsEnum(Bits,String,BytesRef).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term, boolean needsFreqs) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null, needsFreqs);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified field &\n   *  term.  This may return null, if either the field or\n   *  term does not exist. */\n  public DocsEnum termDocsEnum(Bits liveDocs, String field, BytesRef term) throws IOException {\n    assert field != null;\n    assert term != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(field);\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term, true)) {\n          return termsEnum.docs(liveDocs, null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["e2297162a22c55456e200caef2cbcb00fe381120","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2297162a22c55456e200caef2cbcb00fe381120":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e2297162a22c55456e200caef2cbcb00fe381120"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["872cff1d3a554e0cd64014cd97f88d3002b0f491"]},"commit2Childs":{"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["e2297162a22c55456e200caef2cbcb00fe381120","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"e2297162a22c55456e200caef2cbcb00fe381120":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}