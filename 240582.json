{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","commits":[{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    TriggerIntegrationTest.actionInitCalled = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    \n    cluster.waitForAllNodes(30);\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    \n    cluster.waitForAllNodes(30);\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    \n    cluster.waitForAllNodes(30);\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n\n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final JettySolrRunner newNode = cluster.startJettySolrRunner();\n    final String nodeName = newNode.getNodeName();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second)\n    (new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n    \n    // since we know the nodeAdded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cloudManager.getTimeSource().getTimeNs();\n    \n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // the trigger actions should now (eventually) record that the node was added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    assertEquals(\"Wrong number of events recorded: \" + events.toString(),\n                 1, events.size());\n    \n    final TriggerEvent event = events.iterator().next();\n    assertNotNull(\"null event???\", event);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n    assertNotNull(\"event is missing NODE_NAMES: \" + event, event.getProperty(TriggerEvent.NODE_NAMES));\n    assertEquals(\"event has incorrect NODE_NAMES: \" + event,\n                 Collections.singletonList(nodeName),\n                 event.getProperty(TriggerEvent.NODE_NAMES));\n    \n    assertTrue(\"event TS is too late, should be before (max) expected TS @ \"\n               + maxEventTimeNs + \": \" + event,\n               event.getEventTime() < maxEventTimeNs);\n    \n    assertNotNull(\"event is missing EVENT_TIMES: \" + event, event.getProperty(TriggerEvent.EVENT_TIMES));\n    assertEquals(\"event has unexpeted number of EVENT_TIMES: \" + event,\n                 1, ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).size());\n    assertEquals(\"event's TS doesn't match EVENT_TIMES: \" + event,\n                 event.getEventTime(),\n                 ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).iterator().next());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    // for this test we want to update the trigger so we must assert that the actions were created twice\n    actionInitCalled = new CountDownLatch(2);\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    waitForSeconds = 5;\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '5s',\" + // should be enough for us to update the trigger\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    TimeOut timeOut = new TimeOut(2, TimeUnit.SECONDS, cloudManager.getTimeSource());\n    while (actionInitCalled.getCount() == 0 && !timeOut.hasTimedOut()) {\n      Thread.sleep(200);\n    }\n    assertTrue(\"The action specified in node_added_restore_trigger was not instantiated even after 2 seconds\", actionInitCalled.getCount() > 0);\n\n    // start a new node\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    \n    cluster.waitForAllNodes(30);\n\n    // ensure that the old trigger sees the new node, todo find a better way to do this\n    Thread.sleep(500 + TimeUnit.SECONDS.toMillis(DEFAULT_SCHEDULED_TRIGGER_DELAY_SECONDS));\n\n    waitForSeconds = 0;\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_restore_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '0s',\" + // update a property so that it replaces the old trigger, also we want it to fire immediately\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // wait until the second instance of action is created\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"Two TriggerAction instances should have been created by now\");\n    }\n\n    boolean await = triggerFiredLatch.await(5, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n\n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final JettySolrRunner newNode = cluster.startJettySolrRunner();\n    final String nodeName = newNode.getNodeName();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second)\n    (new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n    \n    // since we know the nodeAdded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cloudManager.getTimeSource().getTimeNs();\n    \n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // the trigger actions should now (eventually) record that the node was added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    assertEquals(\"Wrong number of events recorded: \" + events.toString(),\n                 1, events.size());\n    \n    final TriggerEvent event = events.iterator().next();\n    assertNotNull(\"null event???\", event);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n    assertNotNull(\"event is missing NODE_NAMES: \" + event, event.getProperty(TriggerEvent.NODE_NAMES));\n    assertEquals(\"event has incorrect NODE_NAMES: \" + event,\n                 Collections.singletonList(nodeName),\n                 event.getProperty(TriggerEvent.NODE_NAMES));\n    \n    assertTrue(\"event TS is too late, should be before (max) expected TS @ \"\n               + maxEventTimeNs + \": \" + event,\n               event.getEventTime() < maxEventTimeNs);\n    \n    assertNotNull(\"event is missing EVENT_TIMES: \" + event, event.getProperty(TriggerEvent.EVENT_TIMES));\n    assertEquals(\"event has unexpeted number of EVENT_TIMES: \" + event,\n                 1, ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).size());\n    assertEquals(\"event's TS doesn't match EVENT_TIMES: \" + event,\n                 event.getEventTime(),\n                 ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).iterator().next());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n\n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final JettySolrRunner newNode = cluster.startJettySolrRunner();\n    final String nodeName = newNode.getNodeName();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second)\n    (new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n    \n    // since we know the nodeAdded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cloudManager.getTimeSource().getTimeNs();\n    \n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // the trigger actions should now (eventually) record that the node was added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    assertEquals(\"Wrong number of events recorded: \" + events.toString(),\n                 1, events.size());\n    \n    final TriggerEvent event = events.iterator().next();\n    assertNotNull(\"null event???\", event);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n    assertNotNull(\"event is missing NODE_NAMES: \" + event, event.getProperty(TriggerEvent.NODE_NAMES));\n    assertEquals(\"event has incorrect NODE_NAMES: \" + event,\n                 Collections.singletonList(nodeName),\n                 event.getProperty(TriggerEvent.NODE_NAMES));\n    \n    assertTrue(\"event TS is too late, should be before (max) expected TS @ \"\n               + maxEventTimeNs + \": \" + event,\n               event.getEventTime() < maxEventTimeNs);\n    \n    assertNotNull(\"event is missing EVENT_TIMES: \" + event, event.getProperty(TriggerEvent.EVENT_TIMES));\n    assertEquals(\"event has unexpeted number of EVENT_TIMES: \" + event,\n                 1, ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).size());\n    assertEquals(\"event's TS doesn't match EVENT_TIMES: \" + event,\n                 event.getEventTime(),\n                 ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).iterator().next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTriggerRestoreState().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings({\"unchecked\"})\n  public void testNodeAddedTriggerRestoreState() throws Exception {\n    \n    final String triggerName = \"node_added_restore_trigger\";\n\n    // should be enough to ensure trigger doesn't fire any actions until we replace the trigger\n    waitForSeconds = 500000;\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // start a new node\n    final JettySolrRunner newNode = cluster.startJettySolrRunner();\n    final String nodeName = newNode.getNodeName();\n\n    // poll the internal state of the trigger until it run()s at least once and updates\n    // it's internal state to know the node we added is live\n    //\n    // (this should run roughly once a second)\n    (new TimeOut(30, TimeUnit.SECONDS, cloudManager.getTimeSource()))\n    .waitFor(\"initial trigger never ran to detect new live node\", () ->\n             (((Collection<String>) getTriggerState(triggerName).get(\"lastLiveNodes\"))\n              .contains(nodeName)));\n    \n    // since we know the nodeAdded event has been detected, we can recored the current timestamp\n    // (relative to the cluster's time source) and later assert that (restored state) correctly\n    // tracked that the event happened prior to \"now\"\n    final long maxEventTimeNs = cloudManager.getTimeSource().getTimeNs();\n    \n    //\n    // now replace the trigger with a new instance to test that the state gets copied over correctly\n    //\n    \n    // reset the actionInitCalled counter so we can confirm the second instances is inited\n    actionInitCalled = new CountDownLatch(1);\n    // use a low waitTime to ensure it processes the event quickly.\n    // (this updated property also ensures the set-trigger won't be treated as a No-Op)\n    waitForSeconds = 0 + random().nextInt(3);\n    CloudTestUtils.assertAutoScalingRequest\n      (cloudManager,\n       \"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : '\"+triggerName+\"',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '\"+waitForSeconds+\"s',\" + \n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n    \n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    // the trigger actions should now (eventually) record that the node was added\n    assertTrue(\"Second instance of our trigger never fired the action to process the event\",\n               triggerFiredLatch.await(30, TimeUnit.SECONDS));\n    \n    assertEquals(\"Wrong number of events recorded: \" + events.toString(),\n                 1, events.size());\n    \n    final TriggerEvent event = events.iterator().next();\n    assertNotNull(\"null event???\", event);\n    assertTrue(\"Event should have been a nodeAdded event: \" + event.getClass(),\n               event instanceof NodeAddedTrigger.NodeAddedEvent);\n\n    assertNotNull(\"event is missing NODE_NAMES: \" + event, event.getProperty(TriggerEvent.NODE_NAMES));\n    assertEquals(\"event has incorrect NODE_NAMES: \" + event,\n                 Collections.singletonList(nodeName),\n                 event.getProperty(TriggerEvent.NODE_NAMES));\n    \n    assertTrue(\"event TS is too late, should be before (max) expected TS @ \"\n               + maxEventTimeNs + \": \" + event,\n               event.getEventTime() < maxEventTimeNs);\n    \n    assertNotNull(\"event is missing EVENT_TIMES: \" + event, event.getProperty(TriggerEvent.EVENT_TIMES));\n    assertEquals(\"event has unexpeted number of EVENT_TIMES: \" + event,\n                 1, ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).size());\n    assertEquals(\"event's TS doesn't match EVENT_TIMES: \" + event,\n                 event.getEventTime(),\n                 ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).iterator().next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["914270355efc1f9583010cb165bb031a1e698f84"],"914270355efc1f9583010cb165bb031a1e698f84":["89948af0461fead48f44ba8fb7866f107ce83f22"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"914270355efc1f9583010cb165bb031a1e698f84":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"89948af0461fead48f44ba8fb7866f107ce83f22":["914270355efc1f9583010cb165bb031a1e698f84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}