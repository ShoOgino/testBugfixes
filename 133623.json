{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillSidewaysScorer#score(Collector).mjava","commits":[{"id":"28ac5cee8abf30398e12bc016a5ce9d441831a63","date":1384691298,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillSidewaysScorer#score(Collector).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void score(Collector collector) throws IOException {\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    collector.setScorer(this);\n    if (drillDownCollector != null) {\n      drillDownCollector.setScorer(this);\n      drillDownCollector.setNextReader(context);\n    }\n    for(DocsEnumsAndFreq dim : dims) {\n      dim.sidewaysCollector.setScorer(this);\n      dim.sidewaysCollector.setNextReader(context);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    for(DocsEnumsAndFreq dim : dims) {\n      for (DocsEnum docsEnum : dim.docsEnums) {\n        if (docsEnum != null) {\n          docsEnum.nextDoc();\n        }\n      }\n    }\n\n    final int numDims = dims.length;\n\n    DocsEnum[][] docsEnums = new DocsEnum[numDims][];\n    Collector[] sidewaysCollectors = new Collector[numDims];\n    long drillDownCost = 0;\n    for(int dim=0;dim<numDims;dim++) {\n      docsEnums[dim] = dims[dim].docsEnums;\n      sidewaysCollectors[dim] = dims[dim].sidewaysCollector;\n      for (DocsEnum de : dims[dim].docsEnums) {\n        if (de != null) {\n          drillDownCost += de.cost();\n        }\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"baseAdvance\");\n      doBaseAdvanceScoring(collector, docsEnums, sidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].maxCost < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, docsEnums, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, docsEnums, sidewaysCollectors);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DrillSidewaysScorer#score(Collector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SimpleDrillSidewaysScorer#score(Collector).mjava","sourceNew":"  @Override\n  public void score(Collector collector) throws IOException {\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    collector.setScorer(this);\n    if (drillDownCollector != null) {\n      drillDownCollector.setScorer(this);\n      drillDownCollector.setNextReader(context);\n    }\n    for(DocsEnumsAndFreq dim : dims) {\n      dim.sidewaysCollector.setScorer(this);\n      dim.sidewaysCollector.setNextReader(context);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    for(DocsEnumsAndFreq dim : dims) {\n      for (DocsEnum docsEnum : dim.docsEnums) {\n        if (docsEnum != null) {\n          docsEnum.nextDoc();\n        }\n      }\n    }\n\n    final int numDims = dims.length;\n\n    DocsEnum[][] docsEnums = new DocsEnum[numDims][];\n    Collector[] sidewaysCollectors = new Collector[numDims];\n    long drillDownCost = 0;\n    for(int dim=0;dim<numDims;dim++) {\n      docsEnums[dim] = dims[dim].docsEnums;\n      sidewaysCollectors[dim] = dims[dim].sidewaysCollector;\n      for (DocsEnum de : dims[dim].docsEnums) {\n        if (de != null) {\n          drillDownCost += de.cost();\n        }\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"baseAdvance\");\n      doBaseAdvanceScoring(collector, docsEnums, sidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].maxCost < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, docsEnums, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, docsEnums, sidewaysCollectors);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void score(Collector collector) throws IOException {\n    //if (DEBUG) {\n    //  System.out.println(\"\\nscore: reader=\" + context.reader());\n    //}\n    //System.out.println(\"score r=\" + context.reader());\n    collector.setScorer(this);\n    if (drillDownCollector != null) {\n      drillDownCollector.setScorer(this);\n      drillDownCollector.setNextReader(context);\n    }\n    for(DocsEnumsAndFreq dim : dims) {\n      dim.sidewaysCollector.setScorer(this);\n      dim.sidewaysCollector.setNextReader(context);\n    }\n\n    // TODO: if we ever allow null baseScorer ... it will\n    // mean we DO score docs out of order ... hmm, or if we\n    // change up the order of the conjuntions below\n    assert baseScorer != null;\n\n    // Position all scorers to their first matching doc:\n    baseScorer.nextDoc();\n    for(DocsEnumsAndFreq dim : dims) {\n      for (DocsEnum docsEnum : dim.docsEnums) {\n        if (docsEnum != null) {\n          docsEnum.nextDoc();\n        }\n      }\n    }\n\n    final int numDims = dims.length;\n\n    DocsEnum[][] docsEnums = new DocsEnum[numDims][];\n    Collector[] sidewaysCollectors = new Collector[numDims];\n    long drillDownCost = 0;\n    for(int dim=0;dim<numDims;dim++) {\n      docsEnums[dim] = dims[dim].docsEnums;\n      sidewaysCollectors[dim] = dims[dim].sidewaysCollector;\n      for (DocsEnum de : dims[dim].docsEnums) {\n        if (de != null) {\n          drillDownCost += de.cost();\n        }\n      }\n    }\n\n    long baseQueryCost = baseScorer.cost();\n\n    /*\n    System.out.println(\"\\nbaseDocID=\" + baseScorer.docID() + \" est=\" + estBaseHitCount);\n    System.out.println(\"  maxDoc=\" + context.reader().maxDoc());\n    System.out.println(\"  maxCost=\" + maxCost);\n    System.out.println(\"  dims[0].freq=\" + dims[0].freq);\n    if (numDims > 1) {\n      System.out.println(\"  dims[1].freq=\" + dims[1].freq);\n    }\n    */\n\n    if (baseQueryCost < drillDownCost/10) {\n      //System.out.println(\"baseAdvance\");\n      doBaseAdvanceScoring(collector, docsEnums, sidewaysCollectors);\n    } else if (numDims > 1 && (dims[1].maxCost < baseQueryCost/10)) {\n      //System.out.println(\"drillDownAdvance\");\n      doDrillDownAdvanceScoring(collector, docsEnums, sidewaysCollectors);\n    } else {\n      //System.out.println(\"union\");\n      doUnionScoring(collector, docsEnums, sidewaysCollectors);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"28ac5cee8abf30398e12bc016a5ce9d441831a63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["28ac5cee8abf30398e12bc016a5ce9d441831a63"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"28ac5cee8abf30398e12bc016a5ce9d441831a63":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28ac5cee8abf30398e12bc016a5ce9d441831a63","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}