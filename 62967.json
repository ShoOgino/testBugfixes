{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","commits":[{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(SchemaField,boolean).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified {@link StatsField}\n   *\n   * @param statsField {@link StatsField} whose statistics will be created by the resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n\n    final SchemaField sf = statsField.getSchemaField();\n\n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    } \n\n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from a field of the given FieldType\n   *\n   * @param sf SchemaField for the field whose statistics will be created by the resulting StatsValues\n   * @return Instance of StatsValues that will create statistics from values from a field of the given type\n   */\n  public static StatsValues createStatsValues(SchemaField sf, boolean calcDistinct) {\n    // TODO: allow for custom field types\n    FieldType fieldType = sf.getType();\n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(sf, calcDistinct);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(sf, calcDistinct);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(sf, calcDistinct);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(sf, calcDistinct);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1002283cfd29923d517db7c33e07bb54aac7acd4","date":1427211199,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified {@link StatsField}\n   *\n   * @param statsField {@link StatsField} whose statistics will be created by the resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n\n    final SchemaField sf = statsField.getSchemaField();\n\n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    } \n\n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified {@link StatsField}\n   *\n   * @param statsField {@link StatsField} whose statistics will be created by the resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n\n    final SchemaField sf = statsField.getSchemaField();\n\n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    } \n\n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      return new NumericStatsValues(statsField);\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType) || DatePointField.class.isInstance(fieldType)) {\n      DateStatsValues statsValues = new DateStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedDateStatsValues(statsValues, statsField);\n      }\n      return statsValues;\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType)) {\n      return new DateStatsValues(statsField);\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ad8c9e9210e008dc7b8ad5a037ff20879150ea","date":1501889566,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType) || DatePointField.class.isInstance(fieldType)) {\n      DateStatsValues statsValues = new DateStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedDateStatsValues(statsValues, statsField);\n      }\n      return statsValues;\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (AbstractEnumField.class.isInstance(fieldType)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType) || DatePointField.class.isInstance(fieldType)) {\n      DateStatsValues statsValues = new DateStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedDateStatsValues(statsValues, statsField);\n      }\n      return statsValues;\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsValuesFactory#createStatsValues(StatsField).mjava","sourceNew":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType) || DatePointField.class.isInstance(fieldType)) {\n      DateStatsValues statsValues = new DateStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedDateStatsValues(statsValues, statsField);\n      }\n      return statsValues;\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (AbstractEnumField.class.isInstance(fieldType)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates an instance of StatsValues which supports values from the specified \n   * {@link StatsField}\n   *\n   * @param statsField\n   *          {@link StatsField} whose statistics will be created by the\n   *          resulting {@link StatsValues}\n   * @return Instance of {@link StatsValues} that will create statistics from\n   *         values from the specified {@link StatsField}\n   */\n  public static StatsValues createStatsValues(StatsField statsField) {\n    \n    final SchemaField sf = statsField.getSchemaField();\n    \n    if (null == sf) {\n      // function stats\n      return new NumericStatsValues(statsField);\n    }\n    \n    final FieldType fieldType = sf.getType(); // TODO: allow FieldType to provide impl.\n    \n    if (TrieDateField.class.isInstance(fieldType) || DatePointField.class.isInstance(fieldType)) {\n      DateStatsValues statsValues = new DateStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedDateStatsValues(statsValues, statsField);\n      }\n      return statsValues;\n    } else if (TrieField.class.isInstance(fieldType) || PointField.class.isInstance(fieldType)) {\n      \n      NumericStatsValues statsValue = new NumericStatsValues(statsField);\n      if (sf.multiValued()) {\n        return new SortedNumericStatsValues(statsValue, statsField);\n      }\n      return statsValue;\n    } else if (StrField.class.isInstance(fieldType)) {\n      return new StringStatsValues(statsField);\n    } else if (sf.getType().getClass().equals(EnumField.class)) {\n      return new EnumStatsValues(statsField);\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Field type \" + fieldType + \" is not currently supported\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"46dc9ac8b3e748407baaef82453138ff3974480c":["1002283cfd29923d517db7c33e07bb54aac7acd4"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["1002283cfd29923d517db7c33e07bb54aac7acd4","46dc9ac8b3e748407baaef82453138ff3974480c"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"283ff02f401ec3e7a2fad73643970f052383fb0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["283ff02f401ec3e7a2fad73643970f052383fb0c","1002283cfd29923d517db7c33e07bb54aac7acd4"],"022a4de90e0479b604264ca9c2e134c996454ab3":["46dc9ac8b3e748407baaef82453138ff3974480c","744b111b17d15d490a648eb021bfa240e7f11556"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["46dc9ac8b3e748407baaef82453138ff3974480c"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54ad8c9e9210e008dc7b8ad5a037ff20879150ea"]},"commit2Childs":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"1002283cfd29923d517db7c33e07bb54aac7acd4":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"283ff02f401ec3e7a2fad73643970f052383fb0c":["1002283cfd29923d517db7c33e07bb54aac7acd4","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","54ad8c9e9210e008dc7b8ad5a037ff20879150ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"54ad8c9e9210e008dc7b8ad5a037ff20879150ea":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}