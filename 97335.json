{"path":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createBigSet(List[LeafReaderContext],PostingsEnum[],int,int).mjava","commits":[{"id":"6727dd701b30630840235b6788bb5c728d20bbfd","date":1439421226,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createBigSet(List[LeafReaderContext],PostingsEnum[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private static DocSet createBigSet(List<LeafReaderContext> leaves, PostingsEnum[] postList, int maxDoc, int firstReader) throws IOException {\n    long[] bits = new long[FixedBitSet.bits2words(maxDoc)];\n    int sz = 0;\n    for (int i = firstReader; i < postList.length; i++) {\n      PostingsEnum postings = postList[i];\n      if (postings == null) continue;\n      LeafReaderContext ctx = leaves.get(i);\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      int base = ctx.docBase;\n      for (; ; ) {\n        int subId = postings.nextDoc();\n        if (subId == DocIdSetIterator.NO_MORE_DOCS) break;\n        if (liveDocs != null && !liveDocs.get(subId)) continue;\n        int globalId = subId + base;\n        bits[globalId >> 6] |= (1L << globalId);\n        sz++;\n      }\n    }\n\n    BitDocSet docSet = new BitDocSet( new FixedBitSet(bits, maxDoc), sz );\n\n    int smallSetSize = (maxDoc >> 6) + 5;\n    if (sz < smallSetSize) {\n      // make this optional?\n      DocSet smallSet = toSmallSet( docSet );\n      // assert equals(docSet, smallSet);\n      return smallSet;\n    }\n\n    return docSet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0","date":1442027674,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createBigSet(List[LeafReaderContext],PostingsEnum[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSetUtil#createBigSet(List[LeafReaderContext],PostingsEnum[],int,int).mjava","sourceNew":"  private static DocSet createBigSet(List<LeafReaderContext> leaves, PostingsEnum[] postList, int maxDoc, int firstReader) throws IOException {\n    long[] bits = new long[FixedBitSet.bits2words(maxDoc)];\n    int sz = 0;\n    for (int i = firstReader; i < postList.length; i++) {\n      PostingsEnum postings = postList[i];\n      if (postings == null) continue;\n      LeafReaderContext ctx = leaves.get(i);\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      int base = ctx.docBase;\n      for (; ; ) {\n        int subId = postings.nextDoc();\n        if (subId == DocIdSetIterator.NO_MORE_DOCS) break;\n        if (liveDocs != null && !liveDocs.get(subId)) continue;\n        int globalId = subId + base;\n        bits[globalId >> 6] |= (1L << globalId);\n        sz++;\n      }\n    }\n\n    BitDocSet docSet = new BitDocSet( new FixedBitSet(bits, maxDoc), sz );\n\n    int smallSetSize = smallSetSize(maxDoc);\n    if (sz < smallSetSize) {\n      // make this optional?\n      DocSet smallSet = toSmallSet( docSet );\n      // assert equals(docSet, smallSet);\n      return smallSet;\n    }\n\n    return docSet;\n  }\n\n","sourceOld":"  private static DocSet createBigSet(List<LeafReaderContext> leaves, PostingsEnum[] postList, int maxDoc, int firstReader) throws IOException {\n    long[] bits = new long[FixedBitSet.bits2words(maxDoc)];\n    int sz = 0;\n    for (int i = firstReader; i < postList.length; i++) {\n      PostingsEnum postings = postList[i];\n      if (postings == null) continue;\n      LeafReaderContext ctx = leaves.get(i);\n      Bits liveDocs = ctx.reader().getLiveDocs();\n      int base = ctx.docBase;\n      for (; ; ) {\n        int subId = postings.nextDoc();\n        if (subId == DocIdSetIterator.NO_MORE_DOCS) break;\n        if (liveDocs != null && !liveDocs.get(subId)) continue;\n        int globalId = subId + base;\n        bits[globalId >> 6] |= (1L << globalId);\n        sz++;\n      }\n    }\n\n    BitDocSet docSet = new BitDocSet( new FixedBitSet(bits, maxDoc), sz );\n\n    int smallSetSize = (maxDoc >> 6) + 5;\n    if (sz < smallSetSize) {\n      // make this optional?\n      DocSet smallSet = toSmallSet( docSet );\n      // assert equals(docSet, smallSet);\n      return smallSet;\n    }\n\n    return docSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0":["6727dd701b30630840235b6788bb5c728d20bbfd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ca0cc2f173b07ff75ca951e017f5dd1f319fdad0"],"6727dd701b30630840235b6788bb5c728d20bbfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6727dd701b30630840235b6788bb5c728d20bbfd"],"ca0cc2f173b07ff75ca951e017f5dd1f319fdad0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6727dd701b30630840235b6788bb5c728d20bbfd":["ca0cc2f173b07ff75ca951e017f5dd1f319fdad0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}