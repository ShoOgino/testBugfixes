{"path":"lucene/core/src/test/org/apache/lucene/analysis/TrivialLookaheadFilter#peekSentence().mjava","commits":[{"id":"ac6677ee7ef24b19d2ec432727d6957ba6110b14","date":1378744135,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TrivialLookaheadFilter#peekSentence().mjava","pathOld":"/dev/null","sourceNew":"  private void peekSentence() throws IOException {\n    List<String> facts = new ArrayList<String>();\n    boolean haveSentence = false;\n    do {\n      if (peekToken()) {\n\n        String term = new String(termAtt.buffer(), 0, termAtt.length());\n        facts.add(term + \"-huh?\");\n        if (\".\".equals(term)) {\n          haveSentence = true;\n        }\n\n      } else {\n        haveSentence = true;\n      }\n\n    } while (!haveSentence);\n\n    // attach the (now disambiguated) analyzed tokens to the positions.\n    for (int x = 0; x < facts.size(); x++) {\n      // sentenceTokens is just relative to sentence, positions is absolute.\n      positions.get(outputPos + x).setFact(facts.get(x));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TrivialLookaheadFilter#peekSentence().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TrivialLookaheadFilter#peekSentence().mjava","sourceNew":"  private void peekSentence() throws IOException {\n    List<String> facts = new ArrayList<>();\n    boolean haveSentence = false;\n    do {\n      if (peekToken()) {\n\n        String term = new String(termAtt.buffer(), 0, termAtt.length());\n        facts.add(term + \"-huh?\");\n        if (\".\".equals(term)) {\n          haveSentence = true;\n        }\n\n      } else {\n        haveSentence = true;\n      }\n\n    } while (!haveSentence);\n\n    // attach the (now disambiguated) analyzed tokens to the positions.\n    for (int x = 0; x < facts.size(); x++) {\n      // sentenceTokens is just relative to sentence, positions is absolute.\n      positions.get(outputPos + x).setFact(facts.get(x));\n    }\n  }\n\n","sourceOld":"  private void peekSentence() throws IOException {\n    List<String> facts = new ArrayList<String>();\n    boolean haveSentence = false;\n    do {\n      if (peekToken()) {\n\n        String term = new String(termAtt.buffer(), 0, termAtt.length());\n        facts.add(term + \"-huh?\");\n        if (\".\".equals(term)) {\n          haveSentence = true;\n        }\n\n      } else {\n        haveSentence = true;\n      }\n\n    } while (!haveSentence);\n\n    // attach the (now disambiguated) analyzed tokens to the positions.\n    for (int x = 0; x < facts.size(); x++) {\n      // sentenceTokens is just relative to sentence, positions is absolute.\n      positions.get(outputPos + x).setFact(facts.get(x));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TrivialLookaheadFilter#peekSentence().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TrivialLookaheadFilter#peekSentence().mjava","sourceNew":"  private void peekSentence() throws IOException {\n    List<String> facts = new ArrayList<>();\n    boolean haveSentence = false;\n    do {\n      if (peekToken()) {\n\n        String term = new String(termAtt.buffer(), 0, termAtt.length());\n        facts.add(term + \"-huh?\");\n        if (\".\".equals(term)) {\n          haveSentence = true;\n        }\n\n      } else {\n        haveSentence = true;\n      }\n\n    } while (!haveSentence);\n\n    // attach the (now disambiguated) analyzed tokens to the positions.\n    for (int x = 0; x < facts.size(); x++) {\n      // sentenceTokens is just relative to sentence, positions is absolute.\n      positions.get(outputPos + x).setFact(facts.get(x));\n    }\n  }\n\n","sourceOld":"  private void peekSentence() throws IOException {\n    List<String> facts = new ArrayList<>();\n    boolean haveSentence = false;\n    do {\n      if (peekToken()) {\n\n        String term = new String(termAtt.buffer(), 0, termAtt.length());\n        facts.add(term + \"-huh?\");\n        if (\".\".equals(term)) {\n          haveSentence = true;\n        }\n\n      } else {\n        haveSentence = true;\n      }\n\n    } while (!haveSentence);\n\n    // attach the (now disambiguated) analyzed tokens to the positions.\n    for (int x = 0; x < facts.size(); x++) {\n      // sentenceTokens is just relative to sentence, positions is absolute.\n      positions.get(outputPos + x).setFact(facts.get(x));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ac6677ee7ef24b19d2ec432727d6957ba6110b14"],"ac6677ee7ef24b19d2ec432727d6957ba6110b14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"ac6677ee7ef24b19d2ec432727d6957ba6110b14":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac6677ee7ef24b19d2ec432727d6957ba6110b14"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}