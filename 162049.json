{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","commits":[{"id":"5f8965baea012c1e38682d0220c6c4a98b9207b8","date":1363627518,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f400d1b6b61e87efe596bd64726f080f9a29f0","date":1366027276,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","date":1378462032,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f37df79147ed4dd608300c2336c2979db98be","date":1436271524,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789","date":1439672757,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        Document childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      Document childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      StoredDocument parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        StoredDocument childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    StoredDocument parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      StoredDocument childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a8a6e8618a812308bce0a978e52ca5c453a112","date":1457444484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        Document childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      Document childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        Document childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      Document childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":4,"author":"Martijn van Groningen","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":null,"sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        Document childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      Document childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testGetTopGroups().mjava","sourceNew":null,"sourceOld":"  public void testGetTopGroups() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeJob(\"java\", 2010));\n    docs.add(makeJob(\"java\", 2012));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    w.addDocuments(docs);\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = new IndexSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(s.getIndexReader(), parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    ToParentBlockJoinCollector c = new ToParentBlockJoinCollector(Sort.RELEVANCE, 2, true, true);\n    s.search(childJoinQuery, c);\n\n    //Get all child documents within groups\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    TopGroups<Integer>[] getTopGroupsResults = new TopGroups[2];\n    getTopGroupsResults[0] = c.getTopGroups(childJoinQuery, null, 0, 10, 0, true);\n    getTopGroupsResults[1] = c.getTopGroupsWithAllChildDocs(childJoinQuery, null, 0, 0, true);\n\n    for (TopGroups<Integer> results : getTopGroupsResults) {\n      assertFalse(Float.isNaN(results.maxScore));\n      assertEquals(2, results.totalGroupedHitCount);\n      assertEquals(1, results.groups.length);\n\n      final GroupDocs<Integer> group = results.groups[0];\n      assertEquals(2, group.totalHits);\n      assertFalse(Float.isNaN(group.score));\n      assertNotNull(group.groupValue);\n      Document parentDoc = s.doc(group.groupValue);\n      assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n      assertEquals(2, group.scoreDocs.length); //all matched child documents collected\n\n      for (ScoreDoc scoreDoc : group.scoreDocs) {\n        Document childDoc = s.doc(scoreDoc.doc);\n        assertEquals(\"java\", childDoc.get(\"skill\"));\n        int year = Integer.parseInt(childDoc.get(\"year\"));\n        assertTrue(year >= 2006 && year <= 2011);\n      }\n    }\n\n    //Get part of child documents\n    TopGroups<Integer> boundedResults = c.getTopGroups(childJoinQuery, null, 0, 1, 0, true);\n    assertFalse(Float.isNaN(boundedResults.maxScore));\n    assertEquals(2, boundedResults.totalGroupedHitCount);\n    assertEquals(1, boundedResults.groups.length);\n\n    final GroupDocs<Integer> group = boundedResults.groups[0];\n    assertEquals(2, group.totalHits);\n    assertFalse(Float.isNaN(group.score));\n    assertNotNull(group.groupValue);\n    Document parentDoc = s.doc(group.groupValue);\n    assertEquals(\"Frank\", parentDoc.get(\"name\"));\n\n    assertEquals(1, group.scoreDocs.length); //not all matched child documents collected\n\n    for (ScoreDoc scoreDoc : group.scoreDocs) {\n      Document childDoc = s.doc(scoreDoc.doc);\n      assertEquals(\"java\", childDoc.get(\"skill\"));\n      int year = Integer.parseInt(childDoc.get(\"year\"));\n      assertTrue(year >= 2006 && year <= 2011);\n    }\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"5f8965baea012c1e38682d0220c6c4a98b9207b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a67f37df79147ed4dd608300c2336c2979db98be":["4b3915945926c0bf7def01b0c504977709d3aed3"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["37a8a6e8618a812308bce0a978e52ca5c453a112","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"37a8a6e8618a812308bce0a978e52ca5c453a112":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["5f8965baea012c1e38682d0220c6c4a98b9207b8"],"770342641f7b505eaa8dccdc666158bff2419109":["4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789"],"4b3915945926c0bf7def01b0c504977709d3aed3":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789":["a67f37df79147ed4dd608300c2336c2979db98be"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"5f8965baea012c1e38682d0220c6c4a98b9207b8":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a67f37df79147ed4dd608300c2336c2979db98be":["4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"37a8a6e8618a812308bce0a978e52ca5c453a112":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"4b3915945926c0bf7def01b0c504977709d3aed3":["a67f37df79147ed4dd608300c2336c2979db98be"],"770342641f7b505eaa8dccdc666158bff2419109":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["4b3915945926c0bf7def01b0c504977709d3aed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f8965baea012c1e38682d0220c6c4a98b9207b8"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"4db7976c38cb8d2fbd54bae4fa5ec4b0f0d5c789":["770342641f7b505eaa8dccdc666158bff2419109"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}