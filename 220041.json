{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle,BBoxFieldInfo).mjava","commits":[{"id":"ebd6f706eb59fe367493c820daeccd76587ec6bf","date":1340868972,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle,BBoxFieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(fieldInfo.minY, finfo.precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(fieldInfo.maxY, finfo.precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.MUST);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.MUST);\n      Query qNonXDL = this.makeXDL(false, qMinMax, fieldInfo);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.SHOULD);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight, fieldInfo);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.MUST);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight, fieldInfo);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.MUST);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeContains(Rectangle,BBoxFieldInfo).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(field_minY, precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(field_maxY, precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.MUST);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.MUST);\n      Query qNonXDL = this.makeXDL(false, qMinMax);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.SHOULD);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(field_minX, precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(field_maxX, precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.MUST);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.MUST);\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that fully contain the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeContains(Rectangle bbox, BBoxFieldInfo fieldInfo) {\n\n    // general case\n    // docMinX <= queryExtent.getMinX() AND docMinY <= queryExtent.getMinY() AND docMaxX >= queryExtent.getMaxX() AND docMaxY >= queryExtent.getMaxY()\n\n    // Y conditions\n    // docMinY <= queryExtent.getMinY() AND docMaxY >= queryExtent.getMaxY()\n    Query qMinY = NumericRangeQuery.newDoubleRange(fieldInfo.minY, finfo.precisionStep, null, bbox.getMinY(), false, true);\n    Query qMaxY = NumericRangeQuery.newDoubleRange(fieldInfo.maxY, finfo.precisionStep, bbox.getMaxY(), null, true, false);\n    Query yConditions = this.makeQuery(new Query[]{qMinY, qMaxY}, BooleanClause.Occur.MUST);\n\n    // X conditions\n    Query xConditions = null;\n\n    // queries that do not cross the date line\n    if (!bbox.getCrossesDateLine()) {\n\n      // X Conditions for documents that do not cross the date line,\n      // documents that contain the min X and max X of the query envelope,\n      // docMinX <= queryExtent.getMinX() AND docMaxX >= queryExtent.getMaxX()\n      Query qMinX = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, null, bbox.getMinX(), false, true);\n      Query qMaxX = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), null, true, false);\n      Query qMinMax = this.makeQuery(new Query[]{qMinX, qMaxX}, BooleanClause.Occur.MUST);\n      Query qNonXDL = this.makeXDL(false, qMinMax, fieldInfo);\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // OR the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() OR docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.SHOULD);\n      Query qXDL = this.makeXDL(true, qXDLLeftRight, fieldInfo);\n\n      // apply the non-XDL and XDL conditions\n      xConditions = this.makeQuery(new Query[]{qNonXDL, qXDL}, BooleanClause.Occur.SHOULD);\n\n      // queries that cross the date line\n    } else {\n\n      // No need to search for documents that do not cross the date line\n\n      // X Conditions for documents that cross the date line,\n      // the left portion of the document contains the min X of the query\n      // AND the right portion of the document contains the max X of the query,\n      // docMinXLeft <= queryExtent.getMinX() AND docMaxXRight >= queryExtent.getMaxX()\n      Query qXDLLeft = NumericRangeQuery.newDoubleRange(fieldInfo.minX, finfo.precisionStep, null, bbox.getMinX(), false, true);\n      Query qXDLRight = NumericRangeQuery.newDoubleRange(fieldInfo.maxX, finfo.precisionStep, bbox.getMaxX(), null, true, false);\n      Query qXDLLeftRight = this.makeQuery(new Query[]{qXDLLeft, qXDLRight}, BooleanClause.Occur.MUST);\n\n      xConditions = this.makeXDL(true, qXDLLeftRight, fieldInfo);\n    }\n\n    // both X and Y conditions must occur\n    return this.makeQuery(new Query[]{xConditions, yConditions}, BooleanClause.Occur.MUST);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["ebd6f706eb59fe367493c820daeccd76587ec6bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0415a016b37e58a017fed0a91234f733ab359971"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebd6f706eb59fe367493c820daeccd76587ec6bf"],"ebd6f706eb59fe367493c820daeccd76587ec6bf":["0415a016b37e58a017fed0a91234f733ab359971"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}