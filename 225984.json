{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(XmlConfigFile).mjava","commits":[{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(Config).mjava","sourceNew":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws java.io.IOException      If an I/O error occurs while analyzing the triggering queries.\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected ElevationProvider loadElevationProvider(XmlConfigFile config) throws IOException {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, parseMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(queryAnalyzer, elevationBuilderMap);\n  }\n\n","sourceOld":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws java.io.IOException      If an I/O error occurs while analyzing the triggering queries.\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected ElevationProvider loadElevationProvider(Config config) throws IOException {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, parseMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(queryAnalyzer, elevationBuilderMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(XmlConfigFile).mjava","sourceNew":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  protected ElevationProvider loadElevationProvider(XmlConfigFile config) {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, isSubsetMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(elevationBuilderMap);\n  }\n\n","sourceOld":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws java.io.IOException      If an I/O error occurs while analyzing the triggering queries.\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected ElevationProvider loadElevationProvider(XmlConfigFile config) throws IOException {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, parseMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(queryAnalyzer, elevationBuilderMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent#loadElevationProvider(XmlConfigFile).mjava","sourceNew":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  protected ElevationProvider loadElevationProvider(XmlConfigFile config) {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, isSubsetMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(elevationBuilderMap);\n  }\n\n","sourceOld":"  /**\n   * Loads the {@link ElevationProvider}.\n   *\n   * @throws java.io.IOException      If an I/O error occurs while analyzing the triggering queries.\n   * @throws RuntimeException If the config does not provide an XML content of the expected format\n   *                          (either {@link RuntimeException} or {@link org.apache.solr.common.SolrException}).\n   */\n  @SuppressWarnings(\"WeakerAccess\")\n  protected ElevationProvider loadElevationProvider(XmlConfigFile config) throws IOException {\n    Map<ElevatingQuery, ElevationBuilder> elevationBuilderMap = new LinkedHashMap<>();\n    XPath xpath = XPathFactory.newInstance().newXPath();\n    NodeList nodes = (NodeList) config.evaluate(\"elevate/query\", XPathConstants.NODESET);\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String queryString = DOMUtil.getAttr(node, \"text\", \"missing query 'text'\");\n      String matchString = DOMUtil.getAttr(node, \"match\");\n      ElevatingQuery elevatingQuery = new ElevatingQuery(queryString, parseMatchPolicy(matchString));\n\n      NodeList children;\n      try {\n        children = (NodeList) xpath.evaluate(\"doc\", node, XPathConstants.NODESET);\n      } catch (XPathExpressionException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"query requires '<doc .../>' child\");\n      }\n\n      if (children.getLength() == 0) { // weird\n        continue;\n      }\n      ElevationBuilder elevationBuilder = new ElevationBuilder();\n      for (int j = 0; j < children.getLength(); j++) {\n        Node child = children.item(j);\n        String id = DOMUtil.getAttr(child, \"id\", \"missing 'id'\");\n        String e = DOMUtil.getAttr(child, EXCLUDE, null);\n        if (e != null) {\n          if (Boolean.valueOf(e)) {\n            elevationBuilder.addExcludedIds(Collections.singleton(id));\n            continue;\n          }\n        }\n        elevationBuilder.addElevatedIds(Collections.singletonList(id));\n      }\n\n      // It is allowed to define multiple times different elevations for the same query. In this case the elevations\n      // are merged in the ElevationBuilder (they will be triggered at the same time).\n      ElevationBuilder previousElevationBuilder = elevationBuilderMap.get(elevatingQuery);\n      if (previousElevationBuilder == null) {\n        elevationBuilderMap.put(elevatingQuery, elevationBuilder);\n      } else {\n        previousElevationBuilder.merge(elevationBuilder);\n      }\n    }\n    return createElevationProvider(queryAnalyzer, elevationBuilderMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6046c615b67e878b7c0ab9257d01dd759493f06":["ee622110ba6021d0390037e77574743c1e55348c"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["ee622110ba6021d0390037e77574743c1e55348c","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee622110ba6021d0390037e77574743c1e55348c"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}