{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","commits":[{"id":"937923083e4d137932336fc80f3d78758ff698a6","date":1454691519,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Compute whether the rectangle (defined by min/max Lon/Lat) crosses a potentially oblate circle\n   *\n   * TODO benchmark for replacing existing rectCrossesCircle.\n   */\n  public static boolean rectCrossesOblateCircle(double centerLon, double centerLat, double radiusMeters, double rMinLon, double rMinLat, double  rMaxLon, double rMaxLat) {\n    double w = Math.abs(rMaxLon - rMinLon);\n    final int segs = (int)Math.ceil(w / 45.0);\n    w /= segs;\n    short i = 1;\n    double p1 = rMinLon;\n    double maxLon, midLon;\n    double[] pt = new double[2];\n\n    do {\n      maxLon = (i == segs) ? rMaxLon : p1 + w;\n\n      final double d1, d2;\n      // short-circuit if we find a corner outside the circle\n      if ( (d1 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, p1)) > radiusMeters\n          || (d2 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, maxLon)) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, p1) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, maxLon) > radiusMeters) {\n        return true;\n      }\n\n      // else we treat as an oblate circle by slicing the longitude space and checking the azimuthal range\n      // OPTIMIZATION: this is only executed for latitude values \"closeTo\" the poles (e.g., 88.0 > lat < -88.0)\n      if ( (rMaxLat > 88.0 || rMinLat < -88.0)\n          && (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(p1, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(p1, rMinLat, p1, rMaxLat), radiusMeters - d1, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, maxLon, rMaxLat), radiusMeters - d2, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, (midLon = p1 + 0.5*(maxLon - p1)), rMaxLat),\n          radiusMeters - GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, midLon), pt))[1] < rMinLat\n          || pt[1] < rMaxLat == false ) {\n        return true;\n      }\n      p1 += w;\n    } while (++i <= segs);\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Compute whether the rectangle (defined by min/max Lon/Lat) crosses a potentially oblate circle\n   *\n   * TODO benchmark for replacing existing rectCrossesCircle.\n   */\n  public static boolean rectCrossesOblateCircle(double centerLon, double centerLat, double radiusMeters, double rMinLon, double rMinLat, double  rMaxLon, double rMaxLat) {\n    double w = Math.abs(rMaxLon - rMinLon);\n    final int segs = (int)Math.ceil(w / 45.0);\n    w /= segs;\n    short i = 1;\n    double p1 = rMinLon;\n    double maxLon, midLon;\n    double[] pt = new double[2];\n\n    do {\n      maxLon = (i == segs) ? rMaxLon : p1 + w;\n\n      final double d1, d2;\n      // short-circuit if we find a corner outside the circle\n      if ( (d1 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, p1)) > radiusMeters\n          || (d2 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, maxLon)) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, p1) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, maxLon) > radiusMeters) {\n        return true;\n      }\n\n      // else we treat as an oblate circle by slicing the longitude space and checking the azimuthal range\n      // OPTIMIZATION: this is only executed for latitude values \"closeTo\" the poles (e.g., 88.0 > lat < -88.0)\n      if ( (rMaxLat > 88.0 || rMinLat < -88.0)\n          && (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(p1, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(p1, rMinLat, p1, rMaxLat), radiusMeters - d1, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, maxLon, rMaxLat), radiusMeters - d2, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, (midLon = p1 + 0.5*(maxLon - p1)), rMaxLat),\n          radiusMeters - GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, midLon), pt))[1] < rMinLat\n          || pt[1] < rMaxLat == false ) {\n        return true;\n      }\n      p1 += w;\n    } while (++i <= segs);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Compute whether the rectangle (defined by min/max Lon/Lat) crosses a potentially oblate circle\n   *\n   * TODO benchmark for replacing existing rectCrossesCircle.\n   */\n  public static boolean rectCrossesOblateCircle(double centerLon, double centerLat, double radiusMeters, double rMinLon, double rMinLat, double  rMaxLon, double rMaxLat) {\n    double w = Math.abs(rMaxLon - rMinLon);\n    final int segs = (int)Math.ceil(w / 45.0);\n    w /= segs;\n    short i = 1;\n    double p1 = rMinLon;\n    double maxLon, midLon;\n    double[] pt = new double[2];\n\n    do {\n      maxLon = (i == segs) ? rMaxLon : p1 + w;\n\n      final double d1, d2;\n      // short-circuit if we find a corner outside the circle\n      if ( (d1 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, p1)) > radiusMeters\n          || (d2 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, maxLon)) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, p1) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, maxLon) > radiusMeters) {\n        return true;\n      }\n\n      // else we treat as an oblate circle by slicing the longitude space and checking the azimuthal range\n      // OPTIMIZATION: this is only executed for latitude values \"closeTo\" the poles (e.g., 88.0 > lat < -88.0)\n      if ( (rMaxLat > 88.0 || rMinLat < -88.0)\n          && (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(p1, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(p1, rMinLat, p1, rMaxLat), radiusMeters - d1, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, maxLon, rMaxLat), radiusMeters - d2, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, (midLon = p1 + 0.5*(maxLon - p1)), rMaxLat),\n          radiusMeters - GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, midLon), pt))[1] < rMinLat\n          || pt[1] < rMaxLat == false ) {\n        return true;\n      }\n      p1 += w;\n    } while (++i <= segs);\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Compute whether the rectangle (defined by min/max Lon/Lat) crosses a potentially oblate circle\n   *\n   * TODO benchmark for replacing existing rectCrossesCircle.\n   */\n  public static boolean rectCrossesOblateCircle(double centerLon, double centerLat, double radiusMeters, double rMinLon, double rMinLat, double  rMaxLon, double rMaxLat) {\n    double w = Math.abs(rMaxLon - rMinLon);\n    final int segs = (int)Math.ceil(w / 45.0);\n    w /= segs;\n    short i = 1;\n    double p1 = rMinLon;\n    double maxLon, midLon;\n    double[] pt = new double[2];\n\n    do {\n      maxLon = (i == segs) ? rMaxLon : p1 + w;\n\n      final double d1, d2;\n      // short-circuit if we find a corner outside the circle\n      if ( (d1 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, p1)) > radiusMeters\n          || (d2 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, maxLon)) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, p1) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, maxLon) > radiusMeters) {\n        return true;\n      }\n\n      // else we treat as an oblate circle by slicing the longitude space and checking the azimuthal range\n      // OPTIMIZATION: this is only executed for latitude values \"closeTo\" the poles (e.g., 88.0 > lat < -88.0)\n      if ( (rMaxLat > 88.0 || rMinLat < -88.0)\n          && (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(p1, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(p1, rMinLat, p1, rMaxLat), radiusMeters - d1, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, maxLon, rMaxLat), radiusMeters - d2, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, (midLon = p1 + 0.5*(maxLon - p1)), rMaxLat),\n          radiusMeters - GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, midLon), pt))[1] < rMinLat\n          || pt[1] < rMaxLat == false ) {\n        return true;\n      }\n      p1 += w;\n    } while (++i <= segs);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Compute whether the rectangle (defined by min/max Lon/Lat) crosses a potentially oblate circle\n   *\n   * TODO benchmark for replacing existing rectCrossesCircle.\n   */\n  public static boolean rectCrossesOblateCircle(double centerLon, double centerLat, double radiusMeters, double rMinLon, double rMinLat, double  rMaxLon, double rMaxLat) {\n    double w = Math.abs(rMaxLon - rMinLon);\n    final int segs = (int)Math.ceil(w / 45.0);\n    w /= segs;\n    short i = 1;\n    double p1 = rMinLon;\n    double maxLon, midLon;\n    double[] pt = new double[2];\n\n    do {\n      maxLon = (i == segs) ? rMaxLon : p1 + w;\n\n      final double d1, d2;\n      // short-circuit if we find a corner outside the circle\n      if ( (d1 = SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, p1)) > radiusMeters\n          || (d2 = SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, maxLon)) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, p1) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, maxLon) > radiusMeters) {\n        return true;\n      }\n\n      // else we treat as an oblate circle by slicing the longitude space and checking the azimuthal range\n      // OPTIMIZATION: this is only executed for latitude values \"closeTo\" the poles (e.g., 88.0 > lat < -88.0)\n      if ( (rMaxLat > 88.0 || rMinLat < -88.0)\n          && (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(p1, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(p1, rMinLat, p1, rMaxLat), radiusMeters - d1, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, maxLon, rMaxLat), radiusMeters - d2, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, (midLon = p1 + 0.5*(maxLon - p1)), rMaxLat),\n          radiusMeters - SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, midLon), pt))[1] < rMinLat\n          || pt[1] < rMaxLat == false ) {\n        return true;\n      }\n      p1 += w;\n    } while (++i <= segs);\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Compute whether the rectangle (defined by min/max Lon/Lat) crosses a potentially oblate circle\n   *\n   * TODO benchmark for replacing existing rectCrossesCircle.\n   */\n  public static boolean rectCrossesOblateCircle(double centerLon, double centerLat, double radiusMeters, double rMinLon, double rMinLat, double  rMaxLon, double rMaxLat) {\n    double w = Math.abs(rMaxLon - rMinLon);\n    final int segs = (int)Math.ceil(w / 45.0);\n    w /= segs;\n    short i = 1;\n    double p1 = rMinLon;\n    double maxLon, midLon;\n    double[] pt = new double[2];\n\n    do {\n      maxLon = (i == segs) ? rMaxLon : p1 + w;\n\n      final double d1, d2;\n      // short-circuit if we find a corner outside the circle\n      if ( (d1 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, p1)) > radiusMeters\n          || (d2 = GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, maxLon)) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, p1) > radiusMeters\n          || GeoDistanceUtils.haversin(centerLat, centerLon, rMaxLat, maxLon) > radiusMeters) {\n        return true;\n      }\n\n      // else we treat as an oblate circle by slicing the longitude space and checking the azimuthal range\n      // OPTIMIZATION: this is only executed for latitude values \"closeTo\" the poles (e.g., 88.0 > lat < -88.0)\n      if ( (rMaxLat > 88.0 || rMinLat < -88.0)\n          && (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(p1, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(p1, rMinLat, p1, rMaxLat), radiusMeters - d1, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, maxLon, rMaxLat), radiusMeters - d2, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, (midLon = p1 + 0.5*(maxLon - p1)), rMaxLat),\n          radiusMeters - GeoDistanceUtils.haversin(centerLat, centerLon, rMinLat, midLon), pt))[1] < rMinLat\n          || pt[1] < rMaxLat == false ) {\n        return true;\n      }\n      p1 += w;\n    } while (++i <= segs);\n    return false;\n  }\n\n","bugFix":["70f899f76073d8bd93f9f635fe5be681bf516d98"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Compute whether the rectangle (defined by min/max Lat/Lon) crosses a potentially oblate circle\n   *\n   * TODO benchmark for replacing existing rectCrossesCircle.\n   */\n  private static boolean rectCrossesOblateCircle(double centerLat, double centerLon,\n                                                 double radiusMeters,\n                                                 double rMinLat, double rMaxLat,\n                                                 double rMinLon, double rMaxLon) {\n    double w = Math.abs(rMaxLon - rMinLon);\n    final int segs = (int)Math.ceil(w / 45.0);\n    w /= segs;\n    short i = 1;\n    double p1 = rMinLon;\n    double maxLon, midLon;\n    double[] pt = new double[2];\n\n    do {\n      maxLon = (i == segs) ? rMaxLon : p1 + w;\n\n      final double d1, d2;\n      // short-circuit if we find a corner outside the circle\n      if ( (d1 = SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, p1)) > radiusMeters\n          || (d2 = SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, maxLon)) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, p1) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, maxLon) > radiusMeters) {\n        return true;\n      }\n\n      // else we treat as an oblate circle by slicing the longitude space and checking the azimuthal range\n      // OPTIMIZATION: this is only executed for latitude values \"closeTo\" the poles (e.g., 88.0 > lat < -88.0)\n      if ( (rMaxLat > 88.0 || rMinLat < -88.0)\n           && (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(rMinLat, p1,\n                                                                          GeoProjectionUtils.bearingGreatCircle(rMinLat, p1, rMaxLat, p1), radiusMeters - d1, pt))[1] < rMinLat || pt[1] < rMaxLat\n           || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(rMinLat, maxLon,\n                                                                          GeoProjectionUtils.bearingGreatCircle(rMinLat, maxLon, rMaxLat, maxLon), radiusMeters - d2, pt))[1] < rMinLat || pt[1] < rMaxLat\n           || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(rMinLat, maxLon,\n                                                                          GeoProjectionUtils.bearingGreatCircle(rMinLat, maxLon, rMaxLat, (midLon = p1 + 0.5*(maxLon - p1))),\n                                                                          radiusMeters - SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, midLon), pt))[1] < rMinLat\n           || pt[1] < rMaxLat == false ) {\n        return true;\n      }\n      p1 += w;\n    } while (++i <= segs);\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Compute whether the rectangle (defined by min/max Lon/Lat) crosses a potentially oblate circle\n   *\n   * TODO benchmark for replacing existing rectCrossesCircle.\n   */\n  public static boolean rectCrossesOblateCircle(double centerLon, double centerLat, double radiusMeters, double rMinLon, double rMinLat, double  rMaxLon, double rMaxLat) {\n    double w = Math.abs(rMaxLon - rMinLon);\n    final int segs = (int)Math.ceil(w / 45.0);\n    w /= segs;\n    short i = 1;\n    double p1 = rMinLon;\n    double maxLon, midLon;\n    double[] pt = new double[2];\n\n    do {\n      maxLon = (i == segs) ? rMaxLon : p1 + w;\n\n      final double d1, d2;\n      // short-circuit if we find a corner outside the circle\n      if ( (d1 = SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, p1)) > radiusMeters\n          || (d2 = SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, maxLon)) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, p1) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, maxLon) > radiusMeters) {\n        return true;\n      }\n\n      // else we treat as an oblate circle by slicing the longitude space and checking the azimuthal range\n      // OPTIMIZATION: this is only executed for latitude values \"closeTo\" the poles (e.g., 88.0 > lat < -88.0)\n      if ( (rMaxLat > 88.0 || rMinLat < -88.0)\n          && (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(p1, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(p1, rMinLat, p1, rMaxLat), radiusMeters - d1, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, maxLon, rMaxLat), radiusMeters - d2, pt))[1] < rMinLat || pt[1] < rMaxLat\n          || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(maxLon, rMinLat,\n          GeoProjectionUtils.bearingGreatCircle(maxLon, rMinLat, (midLon = p1 + 0.5*(maxLon - p1)), rMaxLat),\n          radiusMeters - SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, midLon), pt))[1] < rMinLat\n          || pt[1] < rMaxLat == false ) {\n        return true;\n      }\n      p1 += w;\n    } while (++i <= segs);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils#rectCrossesOblateCircle(double,double,double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute whether the rectangle (defined by min/max Lat/Lon) crosses a potentially oblate circle\n   *\n   * TODO benchmark for replacing existing rectCrossesCircle.\n   */\n  private static boolean rectCrossesOblateCircle(double centerLat, double centerLon,\n                                                 double radiusMeters,\n                                                 double rMinLat, double rMaxLat,\n                                                 double rMinLon, double rMaxLon) {\n    double w = Math.abs(rMaxLon - rMinLon);\n    final int segs = (int)Math.ceil(w / 45.0);\n    w /= segs;\n    short i = 1;\n    double p1 = rMinLon;\n    double maxLon, midLon;\n    double[] pt = new double[2];\n\n    do {\n      maxLon = (i == segs) ? rMaxLon : p1 + w;\n\n      final double d1, d2;\n      // short-circuit if we find a corner outside the circle\n      if ( (d1 = SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, p1)) > radiusMeters\n          || (d2 = SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, maxLon)) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, p1) > radiusMeters\n          || SloppyMath.haversinMeters(centerLat, centerLon, rMaxLat, maxLon) > radiusMeters) {\n        return true;\n      }\n\n      // else we treat as an oblate circle by slicing the longitude space and checking the azimuthal range\n      // OPTIMIZATION: this is only executed for latitude values \"closeTo\" the poles (e.g., 88.0 > lat < -88.0)\n      if ( (rMaxLat > 88.0 || rMinLat < -88.0)\n           && (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(rMinLat, p1,\n                                                                          GeoProjectionUtils.bearingGreatCircle(rMinLat, p1, rMaxLat, p1), radiusMeters - d1, pt))[1] < rMinLat || pt[1] < rMaxLat\n           || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(rMinLat, maxLon,\n                                                                          GeoProjectionUtils.bearingGreatCircle(rMinLat, maxLon, rMaxLat, maxLon), radiusMeters - d2, pt))[1] < rMinLat || pt[1] < rMaxLat\n           || (pt = GeoProjectionUtils.pointFromLonLatBearingGreatCircle(rMinLat, maxLon,\n                                                                          GeoProjectionUtils.bearingGreatCircle(rMinLat, maxLon, rMaxLat, (midLon = p1 + 0.5*(maxLon - p1))),\n                                                                          radiusMeters - SloppyMath.haversinMeters(centerLat, centerLon, rMinLat, midLon), pt))[1] < rMinLat\n           || pt[1] < rMaxLat == false ) {\n        return true;\n      }\n      p1 += w;\n    } while (++i <= segs);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["937923083e4d137932336fc80f3d78758ff698a6"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","937923083e4d137932336fc80f3d78758ff698a6"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"937923083e4d137932336fc80f3d78758ff698a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","937923083e4d137932336fc80f3d78758ff698a6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"937923083e4d137932336fc80f3d78758ff698a6":["ec60431d008a694828dacb4bc3cda775b6c44a9f","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}