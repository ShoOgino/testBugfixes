{"path":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","commits":[{"id":"835e9a6d1c5a6cc5684c905d972d68df554cfad5","date":1424111245,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertSameScores(Query q1, Query q2, Filter filter) throws Exception {\n    if (filter != null && random().nextBoolean()) {\n      q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n      q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4c51cefc12f21daadde42d03d8316dcef3b226","date":1424526999,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","sourceNew":"  protected void assertSameScores(Query q1, Query q2, Filter filter) throws Exception {\n    if (filter != null) {\n      int res = random().nextInt(3);\n      if (res == 0) {\n        // use FilteredQuery explicitly\n        q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n        q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n        filter = null;\n      } else if (res == 1) {\n        // use BooleanQuery FILTER clause\n        BooleanQuery bq1 = new BooleanQuery();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(filter, Occur.FILTER);\n        q1 = bq1;\n        \n        BooleanQuery bq2 = new BooleanQuery();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(filter, Occur.FILTER);\n        q2 = bq2;\n        filter = null;\n      } else {\n        // do nothing, we use search(q, filter, int) in this case.\n      }\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","sourceOld":"  protected void assertSameScores(Query q1, Query q2, Filter filter) throws Exception {\n    if (filter != null && random().nextBoolean()) {\n      q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n      q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n      filter = null;\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e8701e5b46d362735e000a65f451ad8cab75fd4","date":1424530754,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","sourceNew":"  protected void assertSameScores(Query q1, Query q2, Filter filter) throws Exception {\n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","sourceOld":"  protected void assertSameScores(Query q1, Query q2, Filter filter) throws Exception {\n    if (filter != null) {\n      int res = random().nextInt(3);\n      if (res == 0) {\n        // use FilteredQuery explicitly\n        q1 = new FilteredQuery(q1, filter, TestUtil.randomFilterStrategy(random()));\n        q2 = new FilteredQuery(q2, filter,  TestUtil.randomFilterStrategy(random()));\n        filter = null;\n      } else if (res == 1) {\n        // use BooleanQuery FILTER clause\n        BooleanQuery bq1 = new BooleanQuery();\n        bq1.add(q1, Occur.MUST);\n        bq1.add(filter, Occur.FILTER);\n        q1 = bq1;\n        \n        BooleanQuery bq2 = new BooleanQuery();\n        bq2.add(q2, Occur.MUST);\n        bq2.add(filter, Occur.FILTER);\n        q2 = bq2;\n        filter = null;\n      } else {\n        // do nothing, we use search(q, filter, int) in this case.\n      }\n    }\n    \n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","sourceNew":"  protected void assertSameScores(Query q1, Query q2, Filter filter) throws Exception {\n    // not efficient, but simple!\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    TopDocs td1 = s1.search(q1, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","sourceOld":"  protected void assertSameScores(Query q1, Query q2, Filter filter) throws Exception {\n    // not efficient, but simple!\n    TopDocs td1 = s1.search(q1, filter, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, filter, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Query).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/SearchEquivalenceTestBase#assertSameScores(Query,Query,Filter).mjava","sourceNew":"  protected void assertSameScores(Query q1, Query q2, Query filter) throws Exception {\n    // not efficient, but simple!\n    if (filter != null) {\n      q1 = new BooleanQuery.Builder()\n          .add(q1, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n      q2 = new BooleanQuery.Builder()\n          .add(q2, Occur.MUST)\n          .add(filter, Occur.FILTER)\n          .build();\n    }\n    TopDocs td1 = s1.search(q1, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","sourceOld":"  protected void assertSameScores(Query q1, Query q2, Filter filter) throws Exception {\n    // not efficient, but simple!\n    if (filter != null) {\n      q1 = new FilteredQuery(q1, filter);\n      q2 = new FilteredQuery(q2, filter);\n    }\n    TopDocs td1 = s1.search(q1, reader.maxDoc());\n    TopDocs td2 = s2.search(q2, reader.maxDoc());\n    assertEquals(td1.totalHits, td2.totalHits);\n    for (int i = 0; i < td1.scoreDocs.length; ++i) {\n      assertEquals(td1.scoreDocs[i].doc, td2.scoreDocs[i].doc);\n      assertEquals(td1.scoreDocs[i].score, td2.scoreDocs[i].score, 10e-5);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6e8701e5b46d362735e000a65f451ad8cab75fd4"],"6e8701e5b46d362735e000a65f451ad8cab75fd4":["ec4c51cefc12f21daadde42d03d8316dcef3b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ec4c51cefc12f21daadde42d03d8316dcef3b226":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"835e9a6d1c5a6cc5684c905d972d68df554cfad5":["ec4c51cefc12f21daadde42d03d8316dcef3b226"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["1db68e96dd908fcd79ef809095822736aa601d08"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["835e9a6d1c5a6cc5684c905d972d68df554cfad5"],"6e8701e5b46d362735e000a65f451ad8cab75fd4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ec4c51cefc12f21daadde42d03d8316dcef3b226":["6e8701e5b46d362735e000a65f451ad8cab75fd4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}