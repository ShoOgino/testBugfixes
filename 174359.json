{"path":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : doc.getFields()) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : doc.getFields()) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : doc.getFields()) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : doc.getFields()) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : doc.getFields()) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : doc.getFields()) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (IndexableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          BytesRef bytesRef = f.binaryValue();\n          if (bytesRef != null) {\n            if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {\n              val = bytesRef.bytes;\n            } else {\n              final byte[] bytes = new byte[bytesRef.length];\n              val = bytes;\n              System.arraycopy(bytesRef.bytes, bytesRef.offset, bytes, 0, bytesRef.length);\n            }\n          } else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (Fieldable f : doc.getFields()) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          if (f.isBinary()) val = f.getBinaryValue();\n          else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","date":1318552491,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (IndexableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (IndexableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        FieldType ft = null;\n        if(sf != null) ft =sf.getType();\n        Object val;\n        if (ft == null) {  // handle fields not in the schema\n          BytesRef bytesRef = f.binaryValue();\n          if (bytesRef != null) {\n            if (bytesRef.offset == 0 && bytesRef.length == bytesRef.bytes.length) {\n              val = bytesRef.bytes;\n            } else {\n              final byte[] bytes = new byte[bytesRef.length];\n              val = bytes;\n              System.arraycopy(bytesRef.bytes, bytesRef.offset, bytes, 0, bytesRef.length);\n            }\n          } else val = f.stringValue();\n        } else {\n          try {\n            if (useFieldObjects && KNOWN_TYPES.contains(ft.getClass())) {\n              val = ft.toObject(f);\n            } else {\n              val = ft.toExternal(f);\n            }\n          } catch (Exception e) {\n            // There is a chance of the underlying field not really matching the\n            // actual field type . So ,it can throw exception\n            LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n            //if it happens log it and continue\n            continue;\n          }\n        }\n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":["754182f2def7aee06292f7daf04ebaceb970e931","da0acfe5ceed804451d76c8f887855b3d060e132","03cb693488e836f3e46f447cbe746d114b1f6965","85ca87358a22f3cf2fb4beb5247112bdf0ccac79","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":["204c8bd48c409f38fbe240108b1155caede6962c","204c8bd48c409f38fbe240108b1155caede6962c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (IndexableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(StoredDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#getDoc(Document).mjava","sourceNew":"    public SolrDocument getDoc(StoredDocument doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (StorableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","sourceOld":"    public SolrDocument getDoc(Document doc) {\n      SolrDocument solrDoc = new SolrDocument();\n      for (IndexableField f : doc) {\n        String fieldName = f.name();\n        if( !returnFields.wantsField(fieldName) ) \n          continue;\n        \n        SchemaField sf = schema.getFieldOrNull(fieldName);\n        Object val = null;\n        try {\n          val = getValue(sf,f);\n        } catch (Exception e) {\n          // There is a chance of the underlying field not really matching the\n          // actual field type . So ,it can throw exception\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\n          //if it happens log it and continue\n          continue;\n        }\n          \n        if(sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)){\n          ArrayList l = new ArrayList();\n          l.add(val);\n          solrDoc.addField(fieldName, l);\n        } else {\n          solrDoc.addField(fieldName, val);\n        }\n      }\n      return solrDoc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1d028314cced5858683a1bb4741423d0f934257b":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"14fd29e977ffb76db89d8ecd4fd70fbd9a51d390":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"1d028314cced5858683a1bb4741423d0f934257b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"14fd29e977ffb76db89d8ecd4fd70fbd9a51d390":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["1d028314cced5858683a1bb4741423d0f934257b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}