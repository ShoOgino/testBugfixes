{"path":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","commits":[{"id":"568cba246a11f491637ba492f881589c2142667c","date":1323623267,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(IndexReader.open(dir));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(IndexReader.open(dir));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(IndexReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fad1351342e15571fed2a68feaed0a8a3a18e5da","date":1327959908,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the IndexReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(IndexReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"568cba246a11f491637ba492f881589c2142667c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","568cba246a11f491637ba492f881589c2142667c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["568cba246a11f491637ba492f881589c2142667c"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["893d07555f01912f57b453a320e4d46363a31b50"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["568cba246a11f491637ba492f881589c2142667c","fad1351342e15571fed2a68feaed0a8a3a18e5da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"568cba246a11f491637ba492f881589c2142667c":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","893d07555f01912f57b453a320e4d46363a31b50","5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["568cba246a11f491637ba492f881589c2142667c","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"893d07555f01912f57b453a320e4d46363a31b50":["fad1351342e15571fed2a68feaed0a8a3a18e5da"],"fad1351342e15571fed2a68feaed0a8a3a18e5da":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}