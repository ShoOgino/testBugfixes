{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","commits":[{"id":"db447c88c3c3367999a54f10d9a207f3e63db201","date":1435740861,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortedSelector() {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n    final SortedDocValues values = new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return ords[docID];\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getValueCount() {\n        return 11;\n      }\n\n    };\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(values), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(-1, mins.getOrd(0));\n    assertEquals(3, mins.getOrd(5));\n    assertEquals(-1, mins.getOrd(6));\n    assertEquals(-1, mins.getOrd(10));\n    assertEquals(10, mins.getOrd(15));\n    assertEquals(-1, mins.getOrd(19));\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(values), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(-1, maxs.getOrd(0));\n    assertEquals(7, maxs.getOrd(5));\n    assertEquals(-1, maxs.getOrd(6));\n    assertEquals(-1, maxs.getOrd(10));\n    assertEquals(10, maxs.getOrd(15));\n    assertEquals(-1, maxs.getOrd(19));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","sourceNew":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, mins.nextDoc());\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(19, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(NO_MORE_DOCS, mins.nextDoc());\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, maxs.nextDoc());\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(19, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(NO_MORE_DOCS, maxs.nextDoc());\n  }\n\n","sourceOld":"  public void testSortedSelector() {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n    final SortedDocValues values = new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return ords[docID];\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getValueCount() {\n        return 11;\n      }\n\n    };\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(values), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(-1, mins.getOrd(0));\n    assertEquals(3, mins.getOrd(5));\n    assertEquals(-1, mins.getOrd(6));\n    assertEquals(-1, mins.getOrd(10));\n    assertEquals(10, mins.getOrd(15));\n    assertEquals(-1, mins.getOrd(19));\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(values), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(-1, maxs.getOrd(0));\n    assertEquals(7, maxs.getOrd(5));\n    assertEquals(-1, maxs.getOrd(6));\n    assertEquals(-1, maxs.getOrd(10));\n    assertEquals(10, maxs.getOrd(15));\n    assertEquals(-1, maxs.getOrd(19));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","sourceNew":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, mins.nextDoc());\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(19, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(NO_MORE_DOCS, mins.nextDoc());\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, maxs.nextDoc());\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(19, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(NO_MORE_DOCS, maxs.nextDoc());\n  }\n\n","sourceOld":"  public void testSortedSelector() {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n    final SortedDocValues values = new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return ords[docID];\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getValueCount() {\n        return 11;\n      }\n\n    };\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(values), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(-1, mins.getOrd(0));\n    assertEquals(3, mins.getOrd(5));\n    assertEquals(-1, mins.getOrd(6));\n    assertEquals(-1, mins.getOrd(10));\n    assertEquals(10, mins.getOrd(15));\n    assertEquals(-1, mins.getOrd(19));\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(values), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(-1, maxs.getOrd(0));\n    assertEquals(7, maxs.getOrd(5));\n    assertEquals(-1, maxs.getOrd(6));\n    assertEquals(-1, maxs.getOrd(10));\n    assertEquals(10, maxs.getOrd(15));\n    assertEquals(-1, maxs.getOrd(19));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","sourceNew":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, mins.nextDoc());\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(19, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(NO_MORE_DOCS, mins.nextDoc());\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, maxs.nextDoc());\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(19, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(NO_MORE_DOCS, maxs.nextDoc());\n  }\n\n","sourceOld":"  public void testSortedSelector() {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n    final SortedDocValues values = new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return ords[docID];\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getValueCount() {\n        return 11;\n      }\n\n    };\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(values), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(-1, mins.getOrd(0));\n    assertEquals(3, mins.getOrd(5));\n    assertEquals(-1, mins.getOrd(6));\n    assertEquals(-1, mins.getOrd(10));\n    assertEquals(10, mins.getOrd(15));\n    assertEquals(-1, mins.getOrd(19));\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(values), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(-1, maxs.getOrd(0));\n    assertEquals(7, maxs.getOrd(5));\n    assertEquals(-1, maxs.getOrd(6));\n    assertEquals(-1, maxs.getOrd(10));\n    assertEquals(10, maxs.getOrd(15));\n    assertEquals(-1, maxs.getOrd(19));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"181db58a040d7aebaeb7a74578bd9b9aa603af6c","date":1497965469,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","sourceNew":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, nextDoc(mins,5));\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, nextDoc(mins,15));\n    assertEquals(10, mins.ordValue());\n    assertNoMoreDoc(mins, 20);\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, nextDoc(maxs,5));\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, nextDoc(maxs,15));\n    assertEquals(10, maxs.ordValue());\n    assertNoMoreDoc( maxs,20);\n  }\n\n","sourceOld":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, mins.nextDoc());\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(19, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(NO_MORE_DOCS, mins.nextDoc());\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, maxs.nextDoc());\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(19, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(NO_MORE_DOCS, maxs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","sourceNew":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, nextDoc(mins,5));\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, nextDoc(mins,15));\n    assertEquals(10, mins.ordValue());\n    assertNoMoreDoc(mins, 20);\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, nextDoc(maxs,5));\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, nextDoc(maxs,15));\n    assertEquals(10, maxs.ordValue());\n    assertNoMoreDoc( maxs,20);\n  }\n\n","sourceOld":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, mins.nextDoc());\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(19, mins.nextDoc());\n    assertEquals(10, mins.ordValue());\n    assertEquals(NO_MORE_DOCS, mins.nextDoc());\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, maxs.nextDoc());\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(19, maxs.nextDoc());\n    assertEquals(10, maxs.ordValue());\n    assertEquals(NO_MORE_DOCS, maxs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, nextDoc(mins,5));\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, nextDoc(mins,15));\n    assertEquals(10, mins.ordValue());\n    assertNoMoreDoc(mins, 20);\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, nextDoc(maxs,5));\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, nextDoc(maxs,15));\n    assertEquals(10, maxs.ordValue());\n    assertNoMoreDoc( maxs,20);\n  }\n\n","sourceOld":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, nextDoc(mins,5));\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, nextDoc(mins,15));\n    assertEquals(10, mins.ordValue());\n    assertNoMoreDoc(mins, 20);\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, nextDoc(maxs,5));\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, nextDoc(maxs,15));\n    assertEquals(10, maxs.ordValue());\n    assertNoMoreDoc( maxs,20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","sourceNew":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, nextDoc(mins,5));\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, nextDoc(mins,15));\n    assertEquals(10, mins.ordValue());\n    assertNoMoreDoc(mins, 20);\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, nextDoc(maxs,5));\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, nextDoc(maxs,15));\n    assertEquals(10, maxs.ordValue());\n    assertNoMoreDoc( maxs,20);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"deprecation\")\n  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, nextDoc(mins,5));\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, nextDoc(mins,15));\n    assertEquals(10, mins.ordValue());\n    assertNoMoreDoc(mins, 20);\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, nextDoc(maxs,5));\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, nextDoc(maxs,15));\n    assertEquals(10, maxs.ordValue());\n    assertNoMoreDoc( maxs,20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoinSelector#testSortedSelector().mjava","sourceNew":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, toIter(children));\n    assertEquals(5, nextDoc(mins,5));\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, nextDoc(mins,15));\n    assertEquals(10, mins.ordValue());\n    assertNoMoreDoc(mins, 20);\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, toIter(children));\n    assertEquals(5, nextDoc(maxs,5));\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, nextDoc(maxs,15));\n    assertEquals(10, maxs.ordValue());\n    assertNoMoreDoc( maxs,20);\n  }\n\n","sourceOld":"  public void testSortedSelector() throws IOException {\n    final BitSet parents = new FixedBitSet(20);\n    parents.set(0);\n    parents.set(5);\n    parents.set(6);\n    parents.set(10);\n    parents.set(15);\n    parents.set(19);\n\n    final BitSet children = new FixedBitSet(20);\n    children.set(2);\n    children.set(3);\n    children.set(4);\n    children.set(12);\n    children.set(17);\n\n    final int[] ords = new int[20];\n    Arrays.fill(ords, -1);\n    ords[2] = 5;\n    ords[3] = 7;\n    ords[4] = 3;\n    ords[12] = 10;\n    ords[18] = 10;\n\n    final SortedDocValues mins = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MIN, parents, children);\n    assertEquals(5, nextDoc(mins,5));\n    assertEquals(3, mins.ordValue());\n    assertEquals(15, nextDoc(mins,15));\n    assertEquals(10, mins.ordValue());\n    assertNoMoreDoc(mins, 20);\n\n    final SortedDocValues maxs = BlockJoinSelector.wrap(DocValues.singleton(new CannedSortedDocValues(ords)), BlockJoinSelector.Type.MAX, parents, children);\n    assertEquals(5, nextDoc(maxs,5));\n    assertEquals(7, maxs.ordValue());\n    assertEquals(15, nextDoc(maxs,15));\n    assertEquals(10, maxs.ordValue());\n    assertNoMoreDoc( maxs,20);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db447c88c3c3367999a54f10d9a207f3e63db201":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["db447c88c3c3367999a54f10d9a207f3e63db201","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["db447c88c3c3367999a54f10d9a207f3e63db201"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"30c8e5574b55d57947e989443dfde611646530ee":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","181db58a040d7aebaeb7a74578bd9b9aa603af6c"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["db447c88c3c3367999a54f10d9a207f3e63db201","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"db447c88c3c3367999a54f10d9a207f3e63db201":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["db447c88c3c3367999a54f10d9a207f3e63db201"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["30c8e5574b55d57947e989443dfde611646530ee","181db58a040d7aebaeb7a74578bd9b9aa603af6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"30c8e5574b55d57947e989443dfde611646530ee":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"181db58a040d7aebaeb7a74578bd9b9aa603af6c":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","30c8e5574b55d57947e989443dfde611646530ee"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}