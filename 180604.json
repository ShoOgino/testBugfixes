{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#lookupSuffix(char[],int,int).mjava","commits":[{"id":"c214bc712d04c78c4d434119d560d0a4dd2fce4f","date":1393216863,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#lookupSuffix(char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Looks up HunspellAffix suffixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix suffixes with an append that matches the String, or {@code null} if none are found\n   */\n  List<Affix> lookupSuffix(char word[], int offset, int length) {\n    return suffixes.get(word, offset, length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["23ccc3a9bdacbdab4dbedf7c926b76298d8bd1db"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c","date":1393521555,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#lookupSuffix(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#lookupSuffix(char[],int,int).mjava","sourceNew":"  /**\n   * Looks up HunspellAffix suffixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix suffixes with an append that matches the String, or {@code null} if none are found\n   */\n  List<Character> lookupSuffix(char word[], int offset, int length) {\n    return suffixes.get(word, offset, length);\n  }\n\n","sourceOld":"  /**\n   * Looks up HunspellAffix suffixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix suffixes with an append that matches the String, or {@code null} if none are found\n   */\n  List<Affix> lookupSuffix(char word[], int offset, int length) {\n    return suffixes.get(word, offset, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"26c5ee01d8657497f54f46447208768acc949d51","date":1393523610,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#lookupSuffix(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#lookupSuffix(char[],int,int).mjava","sourceNew":"  /**\n   * Looks up HunspellAffix suffixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix suffixes with an append that matches the String, or {@code null} if none are found\n   */\n  IntsRef lookupSuffix(char word[], int offset, int length) {\n    return lookupAffix(suffixes, word, offset, length);\n  }\n\n","sourceOld":"  /**\n   * Looks up HunspellAffix suffixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix suffixes with an append that matches the String, or {@code null} if none are found\n   */\n  List<Character> lookupSuffix(char word[], int offset, int length) {\n    return suffixes.get(word, offset, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#lookupSuffix(char[],int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell2/Dictionary#lookupSuffix(char[],int,int).mjava","sourceNew":"  /**\n   * Looks up HunspellAffix suffixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix suffixes with an append that matches the String, or {@code null} if none are found\n   */\n  IntsRef lookupSuffix(char word[], int offset, int length) {\n    return lookupAffix(suffixes, word, offset, length);\n  }\n\n","sourceOld":"  /**\n   * Looks up HunspellAffix suffixes that have an append that matches the String created from the given char array, offset and length\n   *\n   * @param word Char array to generate the String from\n   * @param offset Offset in the char array that the String starts at\n   * @param length Length from the offset that the String is\n   * @return List of HunspellAffix suffixes with an append that matches the String, or {@code null} if none are found\n   */\n  IntsRef lookupSuffix(char word[], int offset, int length) {\n    return lookupAffix(suffixes, word, offset, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"26c5ee01d8657497f54f46447208768acc949d51":["e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c":["c214bc712d04c78c4d434119d560d0a4dd2fce4f"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"26c5ee01d8657497f54f46447208768acc949d51":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":[],"e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c":["26c5ee01d8657497f54f46447208768acc949d51"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c214bc712d04c78c4d434119d560d0a4dd2fce4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c214bc712d04c78c4d434119d560d0a4dd2fce4f":["e2c9254ffcc358b8a9b1a89c7d5e74fe8a98531c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}