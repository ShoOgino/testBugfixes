{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","commits":[{"id":"bc669044b7422515d5ac03531ad22b2cec9e371b","date":1337720320,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, -1,\n                                         segmentName, false, null, isCompoundFile,\n                                         null, diagnostics, attributes);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfosFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, -1,\n                                         segmentName, false, null, isCompoundFile,\n                                         null, diagnostics, attributes);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a917aca07a305ab70118a83e84d931503441271","date":1337826487,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         null, isCompoundFile, null, diagnostics, attributes);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, -1,\n                                         segmentName, false, null, isCompoundFile,\n                                         null, diagnostics, attributes);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f00f0f8c602950d28e2cb62039b72f51f5d5c44c","date":1337861286,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         null, isCompoundFile, null, diagnostics, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         null, isCompoundFile, null, diagnostics, attributes);\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"764b942fd30efcae6e532c19771f32eeeb0037b2","date":1337868546,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         null, isCompoundFile, null, diagnostics, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSegmentInfoReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory directory, String segmentName, IOContext context) throws IOException {\n    BytesRef scratch = new BytesRef();\n    String segFileName = IndexFileNames.segmentFileName(segmentName, \"\", SimpleTextSegmentInfoFormat.SI_EXTENSION);\n    IndexInput input = directory.openInput(segFileName, context);\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_VERSION);\n      final String version = readString(SI_VERSION.length, scratch);\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_DOCCOUNT);\n      final int docCount = Integer.parseInt(readString(SI_DOCCOUNT.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_USECOMPOUND);\n      final boolean isCompoundFile = Boolean.parseBoolean(readString(SI_USECOMPOUND.length, scratch));\n    \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_DIAG);\n      int numDiag = Integer.parseInt(readString(SI_NUM_DIAG.length, scratch));\n      Map<String,String> diagnostics = new HashMap<String,String>();\n\n      for (int i = 0; i < numDiag; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_KEY);\n        String key = readString(SI_DIAG_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_DIAG_VALUE);\n        String value = readString(SI_DIAG_VALUE.length, scratch);\n        diagnostics.put(key, value);\n      }\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_ATTS);\n      int numAtts = Integer.parseInt(readString(SI_NUM_ATTS.length, scratch));\n      Map<String,String> attributes = new HashMap<String,String>();\n\n      for (int i = 0; i < numAtts; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_KEY);\n        String key = readString(SI_ATT_KEY.length, scratch);\n      \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_ATT_VALUE);\n        String value = readString(SI_ATT_VALUE.length, scratch);\n        attributes.put(key, value);\n      }\n\n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch, SI_NUM_FILES);\n      int numFiles = Integer.parseInt(readString(SI_NUM_FILES.length, scratch));\n      Set<String> files = new HashSet<String>();\n\n      for (int i = 0; i < numFiles; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch, SI_FILE);\n        String fileName = readString(SI_FILE.length, scratch);\n        files.add(fileName);\n      }\n\n      SegmentInfo info = new SegmentInfo(directory, version, segmentName, docCount, \n                                         isCompoundFile, null, diagnostics, Collections.unmodifiableMap(attributes));\n      info.setFiles(files);\n      success = true;\n      return info;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(input);\n      } else {\n        input.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","764b942fd30efcae6e532c19771f32eeeb0037b2"],"f00f0f8c602950d28e2cb62039b72f51f5d5c44c":["6a917aca07a305ab70118a83e84d931503441271"],"6a917aca07a305ab70118a83e84d931503441271":["bc669044b7422515d5ac03531ad22b2cec9e371b"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["f00f0f8c602950d28e2cb62039b72f51f5d5c44c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bc669044b7422515d5ac03531ad22b2cec9e371b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"f00f0f8c602950d28e2cb62039b72f51f5d5c44c":["764b942fd30efcae6e532c19771f32eeeb0037b2"],"6a917aca07a305ab70118a83e84d931503441271":["f00f0f8c602950d28e2cb62039b72f51f5d5c44c"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","bc669044b7422515d5ac03531ad22b2cec9e371b"],"bc669044b7422515d5ac03531ad22b2cec9e371b":["6a917aca07a305ab70118a83e84d931503441271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}