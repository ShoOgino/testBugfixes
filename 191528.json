{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","commits":[{"id":"307cff5af2b00f126fdf9d3435b75d5ed4d0f402","date":1305370109,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"/dev/null","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"/dev/null","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"/dev/null","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ce36a160d1241ae9c70e109dc3fdfdfb009674a","date":1307033216,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62f5453a200cec2cbb60148de159dbf55591e9d","date":1307049300,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b861c0fdfa4d005c70848c9121655e9dc704f96","date":1307129511,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03daa6ddcb4768a702115ec63799cab5fff3d92","date":1307140842,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b7b579125f96af579b1c85930f519dee4f32c3","date":1309436076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      @Override\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      @Override\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      @Override\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      // @Override -- Not until Java 1.6\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#getComparator(Sort).mjava","sourceNew":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      @Override\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","sourceOld":"  private Comparator<GroupDoc> getComparator(Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    return new Comparator<GroupDoc>() {\n      @Override\n      public int compare(GroupDoc d1, GroupDoc d2) {\n        for(SortField sf : sortFields) {\n          final int cmp;\n          if (sf.getType() == SortField.Type.SCORE) {\n            if (d1.score > d2.score) {\n              cmp = -1;\n            } else if (d1.score < d2.score) {\n              cmp = 1;\n            } else {\n              cmp = 0;\n            }\n          } else if (sf.getField().equals(\"sort1\")) {\n            cmp = d1.sort1.compareTo(d2.sort1);\n          } else if (sf.getField().equals(\"sort2\")) {\n            cmp = d1.sort2.compareTo(d2.sort2);\n          } else {\n            assertEquals(sf.getField(), \"id\");\n            cmp = d1.id - d2.id;\n          }\n          if (cmp != 0) {\n            return sf.getReverse() ? -cmp : cmp;\n          }\n        }\n        // Our sort always fully tie breaks:\n        fail();\n        return 0;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b861c0fdfa4d005c70848c9121655e9dc704f96":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"d9b7b579125f96af579b1c85930f519dee4f32c3":["090a0320e4de4a3674376aef96b9701f47564f86"],"3ce36a160d1241ae9c70e109dc3fdfdfb009674a":["307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"c715a0f99152be7566591f323c6c5a25725a1bcb":["c3a8a449466c1ff7ce2274fe73dab487256964b4","3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a3776dccca01c11e7046323cfad46a3b4a471233","3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"2553b00f699380c64959ccb27991289aae87be2e":["1e7c99bd45fa88a3d93a03fdd773053bef72268e","090a0320e4de4a3674376aef96b9701f47564f86"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["6b861c0fdfa4d005c70848c9121655e9dc704f96","d9b7b579125f96af579b1c85930f519dee4f32c3"],"090a0320e4de4a3674376aef96b9701f47564f86":["6b861c0fdfa4d005c70848c9121655e9dc704f96"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["d62f5453a200cec2cbb60148de159dbf55591e9d","6b861c0fdfa4d005c70848c9121655e9dc704f96"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","d9b7b579125f96af579b1c85930f519dee4f32c3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d9b7b579125f96af579b1c85930f519dee4f32c3"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","307cff5af2b00f126fdf9d3435b75d5ed4d0f402"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c03daa6ddcb4768a702115ec63799cab5fff3d92":["c715a0f99152be7566591f323c6c5a25725a1bcb","6b861c0fdfa4d005c70848c9121655e9dc704f96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"6b861c0fdfa4d005c70848c9121655e9dc704f96":["d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","1e7c99bd45fa88a3d93a03fdd773053bef72268e","c03daa6ddcb4768a702115ec63799cab5fff3d92"],"3ce36a160d1241ae9c70e109dc3fdfdfb009674a":["6b861c0fdfa4d005c70848c9121655e9dc704f96","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d"],"d9b7b579125f96af579b1c85930f519dee4f32c3":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c715a0f99152be7566591f323c6c5a25725a1bcb":["c03daa6ddcb4768a702115ec63799cab5fff3d92"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["d9b7b579125f96af579b1c85930f519dee4f32c3","2553b00f699380c64959ccb27991289aae87be2e"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["2553b00f699380c64959ccb27991289aae87be2e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"307cff5af2b00f126fdf9d3435b75d5ed4d0f402":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["d62f5453a200cec2cbb60148de159dbf55591e9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c3a8a449466c1ff7ce2274fe73dab487256964b4","307cff5af2b00f126fdf9d3435b75d5ed4d0f402","a3776dccca01c11e7046323cfad46a3b4a471233"],"c03daa6ddcb4768a702115ec63799cab5fff3d92":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","c03daa6ddcb4768a702115ec63799cab5fff3d92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}