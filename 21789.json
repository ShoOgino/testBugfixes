{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","pathOld":"lucene/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl31(input) : new StandardTokenizerImplOrig(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","sourceOld":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl31(input) : new StandardTokenizerImplOrig(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683d3f90dda2bbb999c3ce855706d74563a53680","date":1285654576,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl(input) : new ClassicTokenizerImpl(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","sourceOld":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl31(input) : new StandardTokenizerImplOrig(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","bugFix":null,"bugIntro":["78fd27c86b8de3726e8046ae86e009307de9a284"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl(input) : new ClassicTokenizerImpl(input);\n    this.input = input;\n  }\n\n","sourceOld":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl(input) : new ClassicTokenizerImpl(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl(input) : new ClassicTokenizerImpl(input);\n    this.input = input;\n  }\n\n","sourceOld":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl(input) : new ClassicTokenizerImpl(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl(input) : new ClassicTokenizerImpl(input);\n    this.input = input;\n  }\n\n","sourceOld":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl31(input) : new StandardTokenizerImplOrig(input);\n    if (matchVersion.onOrAfter(Version.LUCENE_24)) {\n      replaceInvalidAcronym = true;\n    } else {\n      replaceInvalidAcronym = false;\n    }\n    this.input = input;    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78fd27c86b8de3726e8046ae86e009307de9a284","date":1312490987,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private final void init(Reader input, Version matchVersion) {\n    if (matchVersion.onOrAfter(Version.LUCENE_34)) {\n      this.scanner = new StandardTokenizerImpl(input);\n    } else if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      this.scanner = new StandardTokenizerImpl31(input);\n    } else {\n      this.scanner = new ClassicTokenizerImpl(input);\n    }\n    this.input = input;\n  }\n\n","sourceOld":"  private final void init(Reader input, Version matchVersion) {\n    this.scanner = matchVersion.onOrAfter(Version.LUCENE_31) ?\n      new StandardTokenizerImpl(input) : new ClassicTokenizerImpl(input);\n    this.input = input;\n  }\n\n","bugFix":["77814958b841b2c57a45005379f41e9a5775da81","683d3f90dda2bbb999c3ce855706d74563a53680"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7","date":1328901155,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Version).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#init(Reader,Version).mjava","sourceNew":"  private final void init(Version matchVersion) {\n    if (matchVersion.onOrAfter(Version.LUCENE_34)) {\n      this.scanner = new StandardTokenizerImpl(input);\n    } else if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      this.scanner = new StandardTokenizerImpl31(input);\n    } else {\n      this.scanner = new ClassicTokenizerImpl(input);\n    }\n  }\n\n","sourceOld":"  private final void init(Reader input, Version matchVersion) {\n    if (matchVersion.onOrAfter(Version.LUCENE_34)) {\n      this.scanner = new StandardTokenizerImpl(input);\n    } else if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      this.scanner = new StandardTokenizerImpl31(input);\n    } else {\n      this.scanner = new ClassicTokenizerImpl(input);\n    }\n    this.input = input;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683d3f90dda2bbb999c3ce855706d74563a53680":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"78fd27c86b8de3726e8046ae86e009307de9a284":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["78fd27c86b8de3726e8046ae86e009307de9a284"],"3bb13258feba31ab676502787ab2e1779f129b7a":["683d3f90dda2bbb999c3ce855706d74563a53680","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["683d3f90dda2bbb999c3ce855706d74563a53680"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"683d3f90dda2bbb999c3ce855706d74563a53680":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"78fd27c86b8de3726e8046ae86e009307de9a284":["6c2782fe88d18fedf3ef67402c9cb5a41978a8c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"6c2782fe88d18fedf3ef67402c9cb5a41978a8c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["683d3f90dda2bbb999c3ce855706d74563a53680","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["78fd27c86b8de3726e8046ae86e009307de9a284","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}