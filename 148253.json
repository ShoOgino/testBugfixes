{"path":"backwards/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","pathOld":"/dev/null","sourceNew":"  public CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Class<?> cacheType: caches.keySet()) {\n      Cache cache = caches.get(cacheType);\n      for (final Object readerKey : cache.readerCache.keySet()) {\n        // we've now materialized a hard ref\n        \n        // innerKeys was backed by WeakHashMap, sanity check\n        // that it wasn't GCed before we made hard ref\n        if (null != readerKey && cache.readerCache.containsKey(readerKey)) {\n          Map<Entry, Object> innerCache = cache.readerCache.get(readerKey);\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntryImpl(readerKey, entry.field,\n                                          cacheType, entry.custom,\n                                          mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/FieldCacheImpl#getCacheEntries().mjava","sourceNew":"  public CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Class<?> cacheType: caches.keySet()) {\n      Cache cache = caches.get(cacheType);\n      for (final Object readerKey : cache.readerCache.keySet()) {\n        // we've now materialized a hard ref\n        \n        // innerKeys was backed by WeakHashMap, sanity check\n        // that it wasn't GCed before we made hard ref\n        if (null != readerKey && cache.readerCache.containsKey(readerKey)) {\n          Map<Entry, Object> innerCache = cache.readerCache.get(readerKey);\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntryImpl(readerKey, entry.field,\n                                          cacheType, entry.custom,\n                                          mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","sourceOld":"  public CacheEntry[] getCacheEntries() {\n    List<CacheEntry> result = new ArrayList<CacheEntry>(17);\n    for(final Class<?> cacheType: caches.keySet()) {\n      Cache cache = caches.get(cacheType);\n      for (final Object readerKey : cache.readerCache.keySet()) {\n        // we've now materialized a hard ref\n        \n        // innerKeys was backed by WeakHashMap, sanity check\n        // that it wasn't GCed before we made hard ref\n        if (null != readerKey && cache.readerCache.containsKey(readerKey)) {\n          Map<Entry, Object> innerCache = cache.readerCache.get(readerKey);\n          for (final Map.Entry<Entry, Object> mapEntry : innerCache.entrySet()) {\n            Entry entry = mapEntry.getKey();\n            result.add(new CacheEntryImpl(readerKey, entry.field,\n                                          cacheType, entry.custom,\n                                          mapEntry.getValue()));\n          }\n        }\n      }\n    }\n    return result.toArray(new CacheEntry[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}