{"path":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#setBufferSize(int).mjava","sourceNew":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","sourceOld":"  /** Change the buffer size used by this IndexInput */\n  public void setBufferSize(int newSize) {\n    assert buffer == null || bufferSize == buffer.length: \"buffer=\" + buffer + \" bufferSize=\" + bufferSize + \" buffer.length=\" + (buffer != null ? buffer.length : 0);\n    if (newSize != bufferSize) {\n      checkBufferSize(newSize);\n      bufferSize = newSize;\n      if (buffer != null) {\n        // Resize the existing buffer and carefully save as\n        // many bytes as possible starting from the current\n        // bufferPosition\n        byte[] newBuffer = new byte[newSize];\n        final int leftInBuffer = bufferLength-bufferPosition;\n        final int numToCopy;\n        if (leftInBuffer > newSize)\n          numToCopy = newSize;\n        else\n          numToCopy = leftInBuffer;\n        System.arraycopy(buffer, bufferPosition, newBuffer, 0, numToCopy);\n        bufferStart += bufferPosition;\n        bufferPosition = 0;\n        bufferLength = numToCopy;\n        newBuffer(newBuffer);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}