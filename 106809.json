{"path":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testBitFlippedOnInput2().mjava","commits":[{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testBitFlippedOnInput2().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure corruption on the incoming (unsorted) file is caught, if the corruption did confuse OfflineSorter! */\n  public void testBitFlippedOnInput2() throws Exception {\n\n    try (Directory dir0 = newMockDirectory()) {\n      if (dir0 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) dir0).setPreventDoubleWrite(false);\n      }\n\n      Directory dir = new FilterDirectory(dir0) {\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (prefix.equals(\"unsorted\")) {\n            return new CorruptingIndexOutput(dir0, 22, out) {\n              @Override\n              protected void corruptFile() throws IOException {\n                String newTempName;\n                try(IndexOutput tmpOut = dir0.createTempOutput(\"tmp\", \"tmp\", IOContext.DEFAULT);\n                    IndexInput in = dir0.openInput(out.getName(), IOContext.DEFAULT)) {\n                  newTempName = tmpOut.getName();\n                  // Replace length at the end with a too-long value:\n                  short v = in.readShort();\n                  assertEquals(256, v);\n                  tmpOut.writeShort(Short.MAX_VALUE);\n                  tmpOut.copyBytes(in, in.length()-Short.BYTES);\n                }\n\n                // Delete original and copy corrupt version back:\n                dir0.deleteFile(out.getName());\n                dir0.copyFrom(dir0, newTempName, out.getName(), IOContext.DEFAULT);\n                dir0.deleteFile(newTempName);\n              }\n            };\n          } else {\n            return out;\n          }\n        }\n      };\n\n      IndexOutput unsorted = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n      writeAll(unsorted, generateFixed(5*1024));\n\n      // This corruption made OfflineSorter fail with its own exception, but we verify it also went and added (as suppressed) that the\n      // checksum was wrong:\n      EOFException e = expectThrows(EOFException.class, () -> {\n          new OfflineSorter(dir, \"foo\").sort(unsorted.getName());\n        });\n      assertEquals(1, e.getSuppressed().length);\n      assertTrue(e.getSuppressed()[0] instanceof CorruptIndexException);\n      assertTrue(e.getSuppressed()[0].getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["eb39083d248dc00a9ce4656e519cea3fbf159c91","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11c6df42fb3eba174c3ca0d9a5194eaecd893b77","date":1465931757,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testBitFlippedOnInput2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testBitFlippedOnInput2().mjava","sourceNew":"  /** Make sure corruption on the incoming (unsorted) file is caught, if the corruption did confuse OfflineSorter! */\n  public void testBitFlippedOnInput2() throws Exception {\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (prefix.equals(\"unsorted\")) {\n            return new CorruptingIndexOutput(dir0, 22, out) {\n              @Override\n              protected void corruptFile() throws IOException {\n                String newTempName;\n                try(IndexOutput tmpOut = dir0.createTempOutput(\"tmp\", \"tmp\", IOContext.DEFAULT);\n                    IndexInput in = dir0.openInput(out.getName(), IOContext.DEFAULT)) {\n                  newTempName = tmpOut.getName();\n                  // Replace length at the end with a too-long value:\n                  short v = in.readShort();\n                  assertEquals(256, v);\n                  tmpOut.writeShort(Short.MAX_VALUE);\n                  tmpOut.copyBytes(in, in.length()-Short.BYTES);\n                }\n\n                // Delete original and copy corrupt version back:\n                dir0.deleteFile(out.getName());\n                dir0.copyFrom(dir0, newTempName, out.getName(), IOContext.DEFAULT);\n                dir0.deleteFile(newTempName);\n              }\n            };\n          } else {\n            return out;\n          }\n        }\n      };\n\n      IndexOutput unsorted = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n      writeAll(unsorted, generateFixed(5*1024));\n\n      // This corruption made OfflineSorter fail with its own exception, but we verify it also went and added (as suppressed) that the\n      // checksum was wrong:\n      EOFException e = expectThrows(EOFException.class, () -> {\n          new OfflineSorter(dir, \"foo\").sort(unsorted.getName());\n        });\n      assertEquals(1, e.getSuppressed().length);\n      assertTrue(e.getSuppressed()[0] instanceof CorruptIndexException);\n      assertTrue(e.getSuppressed()[0].getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","sourceOld":"  /** Make sure corruption on the incoming (unsorted) file is caught, if the corruption did confuse OfflineSorter! */\n  public void testBitFlippedOnInput2() throws Exception {\n\n    try (Directory dir0 = newMockDirectory()) {\n      if (dir0 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) dir0).setPreventDoubleWrite(false);\n      }\n\n      Directory dir = new FilterDirectory(dir0) {\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (prefix.equals(\"unsorted\")) {\n            return new CorruptingIndexOutput(dir0, 22, out) {\n              @Override\n              protected void corruptFile() throws IOException {\n                String newTempName;\n                try(IndexOutput tmpOut = dir0.createTempOutput(\"tmp\", \"tmp\", IOContext.DEFAULT);\n                    IndexInput in = dir0.openInput(out.getName(), IOContext.DEFAULT)) {\n                  newTempName = tmpOut.getName();\n                  // Replace length at the end with a too-long value:\n                  short v = in.readShort();\n                  assertEquals(256, v);\n                  tmpOut.writeShort(Short.MAX_VALUE);\n                  tmpOut.copyBytes(in, in.length()-Short.BYTES);\n                }\n\n                // Delete original and copy corrupt version back:\n                dir0.deleteFile(out.getName());\n                dir0.copyFrom(dir0, newTempName, out.getName(), IOContext.DEFAULT);\n                dir0.deleteFile(newTempName);\n              }\n            };\n          } else {\n            return out;\n          }\n        }\n      };\n\n      IndexOutput unsorted = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n      writeAll(unsorted, generateFixed(5*1024));\n\n      // This corruption made OfflineSorter fail with its own exception, but we verify it also went and added (as suppressed) that the\n      // checksum was wrong:\n      EOFException e = expectThrows(EOFException.class, () -> {\n          new OfflineSorter(dir, \"foo\").sort(unsorted.getName());\n        });\n      assertEquals(1, e.getSuppressed().length);\n      assertTrue(e.getSuppressed()[0] instanceof CorruptIndexException);\n      assertTrue(e.getSuppressed()[0].getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","bugFix":["950b7a6881d14da782b60444c11295e3ec50d41a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testBitFlippedOnInput2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testBitFlippedOnInput2().mjava","sourceNew":"  /** Make sure corruption on the incoming (unsorted) file is caught, if the corruption did confuse OfflineSorter! */\n  public void testBitFlippedOnInput2() throws Exception {\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (prefix.equals(\"unsorted\")) {\n            return new CorruptingIndexOutput(dir0, 22, out) {\n              @Override\n              protected void corruptFile() throws IOException {\n                String newTempName;\n                try(IndexOutput tmpOut = dir0.createTempOutput(\"tmp\", \"tmp\", IOContext.DEFAULT);\n                    IndexInput in = dir0.openInput(out.getName(), IOContext.DEFAULT)) {\n                  newTempName = tmpOut.getName();\n                  // Replace length at the end with a too-long value:\n                  short v = in.readShort();\n                  assertEquals(256, v);\n                  tmpOut.writeShort(Short.MAX_VALUE);\n                  tmpOut.copyBytes(in, in.length()-Short.BYTES);\n                }\n\n                // Delete original and copy corrupt version back:\n                dir0.deleteFile(out.getName());\n                dir0.copyFrom(dir0, newTempName, out.getName(), IOContext.DEFAULT);\n                dir0.deleteFile(newTempName);\n              }\n            };\n          } else {\n            return out;\n          }\n        }\n      };\n\n      IndexOutput unsorted = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n      writeAll(unsorted, generateFixed(5*1024));\n\n      // This corruption made OfflineSorter fail with its own exception, but we verify it also went and added (as suppressed) that the\n      // checksum was wrong:\n      EOFException e = expectThrows(EOFException.class, () -> {\n          new OfflineSorter(dir, \"foo\").sort(unsorted.getName());\n        });\n      assertEquals(1, e.getSuppressed().length);\n      assertTrue(e.getSuppressed()[0] instanceof CorruptIndexException);\n      assertTrue(e.getSuppressed()[0].getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","sourceOld":"  /** Make sure corruption on the incoming (unsorted) file is caught, if the corruption did confuse OfflineSorter! */\n  public void testBitFlippedOnInput2() throws Exception {\n\n    try (Directory dir0 = newMockDirectory()) {\n      if (dir0 instanceof MockDirectoryWrapper) {\n        ((MockDirectoryWrapper) dir0).setPreventDoubleWrite(false);\n      }\n\n      Directory dir = new FilterDirectory(dir0) {\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (prefix.equals(\"unsorted\")) {\n            return new CorruptingIndexOutput(dir0, 22, out) {\n              @Override\n              protected void corruptFile() throws IOException {\n                String newTempName;\n                try(IndexOutput tmpOut = dir0.createTempOutput(\"tmp\", \"tmp\", IOContext.DEFAULT);\n                    IndexInput in = dir0.openInput(out.getName(), IOContext.DEFAULT)) {\n                  newTempName = tmpOut.getName();\n                  // Replace length at the end with a too-long value:\n                  short v = in.readShort();\n                  assertEquals(256, v);\n                  tmpOut.writeShort(Short.MAX_VALUE);\n                  tmpOut.copyBytes(in, in.length()-Short.BYTES);\n                }\n\n                // Delete original and copy corrupt version back:\n                dir0.deleteFile(out.getName());\n                dir0.copyFrom(dir0, newTempName, out.getName(), IOContext.DEFAULT);\n                dir0.deleteFile(newTempName);\n              }\n            };\n          } else {\n            return out;\n          }\n        }\n      };\n\n      IndexOutput unsorted = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n      writeAll(unsorted, generateFixed(5*1024));\n\n      // This corruption made OfflineSorter fail with its own exception, but we verify it also went and added (as suppressed) that the\n      // checksum was wrong:\n      EOFException e = expectThrows(EOFException.class, () -> {\n          new OfflineSorter(dir, \"foo\").sort(unsorted.getName());\n        });\n      assertEquals(1, e.getSuppressed().length);\n      assertTrue(e.getSuppressed()[0] instanceof CorruptIndexException);\n      assertTrue(e.getSuppressed()[0].getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb39083d248dc00a9ce4656e519cea3fbf159c91","date":1588849460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testBitFlippedOnInput2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testBitFlippedOnInput2().mjava","sourceNew":"  /** Make sure corruption on the incoming (unsorted) file is caught, if the corruption did confuse OfflineSorter! */\n  public void testBitFlippedOnInput2() throws Exception {\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (prefix.equals(\"unsorted\")) {\n            return new CorruptingIndexOutput(dir0, 22, out) {\n              @Override\n              protected void corruptFile() throws IOException {\n                String newTempName;\n                try(IndexOutput tmpOut = dir0.createTempOutput(\"tmp\", \"tmp\", IOContext.DEFAULT);\n                    IndexInput in = dir0.openInput(out.getName(), IOContext.DEFAULT)) {\n                  newTempName = tmpOut.getName();\n                  // Replace length at the end with a too-long value:\n                  short v = in.readShort();\n                  assertEquals(256, v);\n                  tmpOut.writeShort(Short.MAX_VALUE);\n                  tmpOut.copyBytes(in, in.length()-Short.BYTES);\n                }\n\n                // Delete original and copy corrupt version back:\n                dir0.deleteFile(out.getName());\n                dir0.copyFrom(dir0, newTempName, out.getName(), IOContext.DEFAULT);\n                dir0.deleteFile(newTempName);\n              }\n            };\n          } else {\n            return out;\n          }\n        }\n      };\n\n      IndexOutput unsorted = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n      writeAll(unsorted, generateFixed(5*1024));\n\n      // This corruption made OfflineSorter fail with its own exception, but we verify and throw a CorruptIndexException\n      // instead when checksums don't match.\n      CorruptIndexException e = expectThrows(CorruptIndexException.class, () -> {\n          new OfflineSorter(dir, \"foo\").sort(unsorted.getName());\n        });\n      assertTrue(e.getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","sourceOld":"  /** Make sure corruption on the incoming (unsorted) file is caught, if the corruption did confuse OfflineSorter! */\n  public void testBitFlippedOnInput2() throws Exception {\n\n    try (Directory dir0 = newMockDirectory()) {\n\n      Directory dir = new FilterDirectory(dir0) {\n        @Override\n        public IndexOutput createTempOutput(String prefix, String suffix, IOContext context) throws IOException {\n          IndexOutput out = in.createTempOutput(prefix, suffix, context);\n          if (prefix.equals(\"unsorted\")) {\n            return new CorruptingIndexOutput(dir0, 22, out) {\n              @Override\n              protected void corruptFile() throws IOException {\n                String newTempName;\n                try(IndexOutput tmpOut = dir0.createTempOutput(\"tmp\", \"tmp\", IOContext.DEFAULT);\n                    IndexInput in = dir0.openInput(out.getName(), IOContext.DEFAULT)) {\n                  newTempName = tmpOut.getName();\n                  // Replace length at the end with a too-long value:\n                  short v = in.readShort();\n                  assertEquals(256, v);\n                  tmpOut.writeShort(Short.MAX_VALUE);\n                  tmpOut.copyBytes(in, in.length()-Short.BYTES);\n                }\n\n                // Delete original and copy corrupt version back:\n                dir0.deleteFile(out.getName());\n                dir0.copyFrom(dir0, newTempName, out.getName(), IOContext.DEFAULT);\n                dir0.deleteFile(newTempName);\n              }\n            };\n          } else {\n            return out;\n          }\n        }\n      };\n\n      IndexOutput unsorted = dir.createTempOutput(\"unsorted\", \"tmp\", IOContext.DEFAULT);\n      writeAll(unsorted, generateFixed(5*1024));\n\n      // This corruption made OfflineSorter fail with its own exception, but we verify it also went and added (as suppressed) that the\n      // checksum was wrong:\n      EOFException e = expectThrows(EOFException.class, () -> {\n          new OfflineSorter(dir, \"foo\").sort(unsorted.getName());\n        });\n      assertEquals(1, e.getSuppressed().length);\n      assertTrue(e.getSuppressed()[0] instanceof CorruptIndexException);\n      assertTrue(e.getSuppressed()[0].getMessage().contains(\"checksum failed (hardware problem?)\"));\n    }\n  }\n\n","bugFix":["950b7a6881d14da782b60444c11295e3ec50d41a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eb39083d248dc00a9ce4656e519cea3fbf159c91":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["950b7a6881d14da782b60444c11295e3ec50d41a"],"950b7a6881d14da782b60444c11295e3ec50d41a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["950b7a6881d14da782b60444c11295e3ec50d41a","11c6df42fb3eba174c3ca0d9a5194eaecd893b77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb39083d248dc00a9ce4656e519cea3fbf159c91"]},"commit2Childs":{"eb39083d248dc00a9ce4656e519cea3fbf159c91":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["950b7a6881d14da782b60444c11295e3ec50d41a"],"11c6df42fb3eba174c3ca0d9a5194eaecd893b77":["eb39083d248dc00a9ce4656e519cea3fbf159c91","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"950b7a6881d14da782b60444c11295e3ec50d41a":["11c6df42fb3eba174c3ca0d9a5194eaecd893b77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}