{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/CopyOfWordDictionary#getWordItemTableIndex(char).mjava","commits":[{"id":"05ff0cc6e864c7d71a48579f2acfca4f58943568","date":1242295762,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/CopyOfWordDictionary#getWordItemTableIndex(char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param c\n   * @return\n   */\n  private short getWordItemTableIndex(char c) {\n    int hash1 = (int) (hash1(c) % PRIME_INDEX_LENGTH);\n    int hash2 = hash2(c) % PRIME_INDEX_LENGTH;\n    if (hash1 < 0)\n      hash1 = PRIME_INDEX_LENGTH + hash1;\n    if (hash2 < 0)\n      hash2 = PRIME_INDEX_LENGTH + hash2;\n    int index = hash1;\n    int i = 1;\n    while (charIndexTable[index] != 0 && charIndexTable[index] != c\n        && i < PRIME_INDEX_LENGTH) {\n      index = (hash1 + i * hash2) % PRIME_INDEX_LENGTH;\n      i++;\n    }\n\n    if (i < PRIME_INDEX_LENGTH && charIndexTable[index] == c) {\n      return (short) index;\n    } else\n      return -1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c8e2ccb489ce315fed9d631928894312a59bd7b","date":1242482918,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/CopyOfWordDictionary#getWordItemTableIndex(char).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param c\n   * @return\n   */\n  private short getWordItemTableIndex(char c) {\n    int hash1 = (int) (hash1(c) % PRIME_INDEX_LENGTH);\n    int hash2 = hash2(c) % PRIME_INDEX_LENGTH;\n    if (hash1 < 0)\n      hash1 = PRIME_INDEX_LENGTH + hash1;\n    if (hash2 < 0)\n      hash2 = PRIME_INDEX_LENGTH + hash2;\n    int index = hash1;\n    int i = 1;\n    while (charIndexTable[index] != 0 && charIndexTable[index] != c\n        && i < PRIME_INDEX_LENGTH) {\n      index = (hash1 + i * hash2) % PRIME_INDEX_LENGTH;\n      i++;\n    }\n\n    if (i < PRIME_INDEX_LENGTH && charIndexTable[index] == c) {\n      return (short) index;\n    } else\n      return -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5c8e2ccb489ce315fed9d631928894312a59bd7b":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c8e2ccb489ce315fed9d631928894312a59bd7b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05ff0cc6e864c7d71a48579f2acfca4f58943568"],"5c8e2ccb489ce315fed9d631928894312a59bd7b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05ff0cc6e864c7d71a48579f2acfca4f58943568":["5c8e2ccb489ce315fed9d631928894312a59bd7b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}