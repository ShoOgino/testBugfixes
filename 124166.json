{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#compare(String,Object).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#compare(String,Object).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#compare(String,Object).mjava","sourceNew":"  private void compare(String expected, Object groupValue) {\n    if (BytesRef.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(expected, ((BytesRef) groupValue).utf8ToString());\n    } else if (Double.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(Double.parseDouble(expected), groupValue);\n    } else if (Long.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(Long.parseLong(expected), groupValue);\n    } else if (MutableValue.class.isAssignableFrom(groupValue.getClass())) {\n      MutableValueStr mutableValue = new MutableValueStr();\n      mutableValue.value = new BytesRef(expected);\n      assertEquals(mutableValue, groupValue);\n    } else {\n      fail();\n    }\n  }\n\n","sourceOld":"  private void compare(String expected, Object groupValue) {\n    if (BytesRef.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(expected, ((BytesRef) groupValue).utf8ToString());\n    } else if (Double.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(Double.parseDouble(expected), groupValue);\n    } else if (Long.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(Long.parseLong(expected), groupValue);\n    } else if (MutableValue.class.isAssignableFrom(groupValue.getClass())) {\n      MutableValueStr mutableValue = new MutableValueStr();\n      mutableValue.value = new BytesRef(expected);\n      assertEquals(mutableValue, groupValue);\n    } else {\n      fail();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#compare(String,Object).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/DistinctValuesCollectorTest#compare(String,Object).mjava","sourceNew":"  private void compare(String expected, Object groupValue) {\n    if (BytesRef.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(expected, ((BytesRef) groupValue).utf8ToString());\n    } else if (Double.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(Double.parseDouble(expected), groupValue);\n    } else if (Long.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(Long.parseLong(expected), groupValue);\n    } else if (MutableValue.class.isAssignableFrom(groupValue.getClass())) {\n      MutableValueStr mutableValue = new MutableValueStr();\n      mutableValue.value.copyChars(expected);\n      assertEquals(mutableValue, groupValue);\n    } else {\n      fail();\n    }\n  }\n\n","sourceOld":"  private void compare(String expected, Object groupValue) {\n    if (BytesRef.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(expected, ((BytesRef) groupValue).utf8ToString());\n    } else if (Double.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(Double.parseDouble(expected), groupValue);\n    } else if (Long.class.isAssignableFrom(groupValue.getClass())) {\n      assertEquals(Long.parseLong(expected), groupValue);\n    } else if (MutableValue.class.isAssignableFrom(groupValue.getClass())) {\n      MutableValueStr mutableValue = new MutableValueStr();\n      mutableValue.value = new BytesRef(expected);\n      assertEquals(mutableValue, groupValue);\n    } else {\n      fail();\n    }\n  }\n\n","bugFix":["166661dd25a09458b128e5c0b86e3b762a6ded68"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}