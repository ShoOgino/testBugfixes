{"path":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","date":1293213108,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    XMLWriter xmlWriter = null;\n    try {\n      xmlWriter = new XMLWriter(writer, req, rsp);\n      xmlWriter.writeResponse();\n    } finally {\n      xmlWriter.close();\n    }\n  }\n\n","sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    XMLWriter xmlWriter = null;\n    try {\n      xmlWriter = new XMLWriter(writer, req, rsp);\n      xmlWriter.writeResponse();\n    } finally {\n      xmlWriter.close();\n    }\n  }\n\n","sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    XMLWriter xmlWriter = null;\n    try {\n      xmlWriter = new XMLWriter(writer, req, rsp);\n      xmlWriter.writeResponse();\n    } finally {\n      xmlWriter.close();\n    }\n  }\n\n","sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    XMLWriter xmlWriter = null;\n    try {\n      xmlWriter = new XMLWriter(writer, req, rsp);\n      xmlWriter.writeResponse();\n    } finally {\n      xmlWriter.close();\n    }\n  }\n\n","sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    XMLWriter xmlWriter = null;\n    try {\n      xmlWriter = new XMLWriter(writer, req, rsp);\n      xmlWriter.writeResponse();\n    } finally {\n      xmlWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    XMLWriter xmlWriter = null;\n    try {\n      xmlWriter = new XMLWriter(writer, req, rsp);\n      xmlWriter.writeResponse();\n    } finally {\n      xmlWriter.close();\n    }\n  }\n\n","sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    XMLWriter xmlWriter = null;\n    try {\n      xmlWriter = new XMLWriter(writer, req, rsp);\n      xmlWriter.writeResponse();\n    } finally {\n      xmlWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    XMLWriter xmlWriter = null;\n    try {\n      xmlWriter = new XMLWriter(writer, req, rsp);\n      xmlWriter.writeResponse();\n    } finally {\n      xmlWriter.close();\n    }\n  }\n\n","sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n    XMLWriter xmlWriter = null;\n    try {\n      xmlWriter = new XMLWriter(writer, req, rsp);\n      xmlWriter.writeResponse();\n    } finally {\n      xmlWriter.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["7fa50ec3461abff12249dbe19296a1a1f8fc2eb2"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"7fa50ec3461abff12249dbe19296a1a1f8fc2eb2":["70ad682703b8585f5d0a637efec044d57ec05efb","c26f00b574427b55127e869b935845554afde1fa","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","7fa50ec3461abff12249dbe19296a1a1f8fc2eb2","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}