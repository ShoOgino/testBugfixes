{"path":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","commits":[{"id":"6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e","date":1360007824,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"/dev/null","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(_TestUtil.randomUnicodeString(random()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check ord value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"/dev/null","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(_TestUtil.randomUnicodeString(random()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check ord value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"259738a0b6cee3365b95a8a72134e52e6d32756d","date":1377180576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(_TestUtil.randomUnicodeString(random()));\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(_TestUtil.randomUnicodeString(random()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check ord value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(_TestUtil.randomUnicodeString(random()));\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(_TestUtil.randomUnicodeString(random()));\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check ord value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bffe2c1d4c037d2434b18cfdeb86b555220b5afd","date":1378563559,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(_TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(_TestUtil.randomUnicodeString(random()));\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(_TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    BytesRef actual = new BytesRef();\n    BytesRef expected = new BytesRef();\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      single.get(i, expected);\n      multi.get(i, actual);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), TEST_VERSION_CURRENT, null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.shutdown();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    BytesRef ref = new BytesRef();\n    Field field = new SortedDocValuesField(\"bytes\", ref);\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      ref.copyChars(TestUtil.randomUnicodeString(random()));\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":["6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e","6613659748fe4411a7dcf85266e55db1f95f7315"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad2a673349939e48652bf304cccf673c3412198f","date":1409585169,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (defaultCodecSupportsDocsWithField() && random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":["bffe2c1d4c037d2434b18cfdeb86b555220b5afd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    AtomicReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046","date":1417033646,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = atLeast(500);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlySegmentReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    while (true) {\n      assertEquals(single.nextDoc(), multi.nextDoc());\n      if (single.docID() == NO_MORE_DOCS) {\n        break;\n      }\n\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.binaryValue());\n      final BytesRef actual = multi.binaryValue();\n      assertEquals(expected, actual);\n\n      // check ord\n      assertEquals(single.ordValue(), multi.ordValue());\n    }\n    testRandomAdvance(merged.getSortedDocValues(\"bytes\"), MultiDocValues.getSortedValues(ir, \"bytes\"));\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    while (true) {\n      assertEquals(single.nextDoc(), multi.nextDoc());\n      if (single.docID() == NO_MORE_DOCS) {\n        break;\n      }\n\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.binaryValue());\n      final BytesRef actual = multi.binaryValue();\n      assertEquals(expected, actual);\n\n      // check ord\n      assertEquals(single.ordValue(), multi.ordValue());\n    }\n    testRandomAdvance(merged.getSortedDocValues(\"bytes\"), MultiDocValues.getSortedValues(ir, \"bytes\"));\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    while (true) {\n      assertEquals(single.nextDoc(), multi.nextDoc());\n      if (single.docID() == NO_MORE_DOCS) {\n        break;\n      }\n\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.binaryValue());\n      final BytesRef actual = multi.binaryValue();\n      assertEquals(expected, actual);\n\n      // check ord\n      assertEquals(single.ordValue(), multi.ordValue());\n    }\n    testRandomAdvance(merged.getSortedDocValues(\"bytes\"), MultiDocValues.getSortedValues(ir, \"bytes\"));\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    \n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    for (int i = 0; i < numDocs; i++) {\n      // check ord\n      assertEquals(single.getOrd(i), multi.getOrd(i));\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.get(i));\n      final BytesRef actual = multi.get(i);\n      assertEquals(expected, actual);\n    }\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14b133bc4d7193efff507eb88f86fcc07c4e8b50","date":1477907694,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    while (true) {\n      assertEquals(single.nextDoc(), multi.nextDoc());\n      if (single.docID() == NO_MORE_DOCS) {\n        break;\n      }\n\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.binaryValue());\n      final BytesRef actual = multi.binaryValue();\n      assertEquals(expected, actual);\n\n      // check ord\n      assertEquals(single.ordValue(), multi.ordValue());\n    }\n    testRandomAdvance(merged.getSortedDocValues(\"bytes\"), MultiDocValues.getSortedValues(ir, \"bytes\"));\n    testRandomAdvanceExact(merged.getSortedDocValues(\"bytes\"), MultiDocValues.getSortedValues(ir, \"bytes\"), merged.maxDoc());\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    while (true) {\n      assertEquals(single.nextDoc(), multi.nextDoc());\n      if (single.docID() == NO_MORE_DOCS) {\n        break;\n      }\n\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.binaryValue());\n      final BytesRef actual = multi.binaryValue();\n      assertEquals(expected, actual);\n\n      // check ord\n      assertEquals(single.ordValue(), multi.ordValue());\n    }\n    testRandomAdvance(merged.getSortedDocValues(\"bytes\"), MultiDocValues.getSortedValues(ir, \"bytes\"));\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestMultiDocValues#testSorted().mjava","sourceNew":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    while (true) {\n      assertEquals(single.nextDoc(), multi.nextDoc());\n      if (single.docID() == NO_MORE_DOCS) {\n        break;\n      }\n\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.binaryValue());\n      final BytesRef actual = multi.binaryValue();\n      assertEquals(expected, actual);\n\n      // check ord\n      assertEquals(single.ordValue(), multi.ordValue());\n    }\n    testRandomAdvance(merged.getSortedDocValues(\"bytes\"), MultiDocValues.getSortedValues(ir, \"bytes\"));\n    testRandomAdvanceExact(merged.getSortedDocValues(\"bytes\"), MultiDocValues.getSortedValues(ir, \"bytes\"), merged.maxDoc());\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSorted() throws Exception {\n    Directory dir = newDirectory();\n    Document doc = new Document();\n    Field field = new SortedDocValuesField(\"bytes\", new BytesRef());\n    doc.add(field);\n    \n    IndexWriterConfig iwc = newIndexWriterConfig(random(), null);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwc);\n\n    int numDocs = TEST_NIGHTLY ? atLeast(500) : atLeast(50);\n    for (int i = 0; i < numDocs; i++) {\n      BytesRef ref = new BytesRef(TestUtil.randomUnicodeString(random()));\n      field.setBytesValue(ref);\n      if (random().nextInt(7) == 0) {\n        iw.addDocument(new Document());\n      }\n      iw.addDocument(doc);\n      if (random().nextInt(17) == 0) {\n        iw.commit();\n      }\n    }\n    DirectoryReader ir = iw.getReader();\n    iw.forceMerge(1);\n    DirectoryReader ir2 = iw.getReader();\n    LeafReader merged = getOnlyLeafReader(ir2);\n    iw.close();\n    SortedDocValues multi = MultiDocValues.getSortedValues(ir, \"bytes\");\n    SortedDocValues single = merged.getSortedDocValues(\"bytes\");\n    assertEquals(single.getValueCount(), multi.getValueCount());\n    while (true) {\n      assertEquals(single.nextDoc(), multi.nextDoc());\n      if (single.docID() == NO_MORE_DOCS) {\n        break;\n      }\n\n      // check value\n      final BytesRef expected = BytesRef.deepCopyOf(single.binaryValue());\n      final BytesRef actual = multi.binaryValue();\n      assertEquals(expected, actual);\n\n      // check ord\n      assertEquals(single.ordValue(), multi.ordValue());\n    }\n    testRandomAdvance(merged.getSortedDocValues(\"bytes\"), MultiDocValues.getSortedValues(ir, \"bytes\"));\n    ir.close();\n    ir2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["bffe2c1d4c037d2434b18cfdeb86b555220b5afd"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","259738a0b6cee3365b95a8a72134e52e6d32756d"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","ad2a673349939e48652bf304cccf673c3412198f"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046"],"6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"14b133bc4d7193efff507eb88f86fcc07c4e8b50":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["6613659748fe4411a7dcf85266e55db1f95f7315"],"259738a0b6cee3365b95a8a72134e52e6d32756d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ad2a673349939e48652bf304cccf673c3412198f":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"bffe2c1d4c037d2434b18cfdeb86b555220b5afd":["259738a0b6cee3365b95a8a72134e52e6d32756d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14b133bc4d7193efff507eb88f86fcc07c4e8b50"]},"commit2Childs":{"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","ad2a673349939e48652bf304cccf673c3412198f"],"320888923ec13b91f53082558f01f4c9960dd226":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","259738a0b6cee3365b95a8a72134e52e6d32756d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6509c8bbcf8f92ba1ecfaccea085eac1d5c4754e","d4d69c535930b5cce125cff868d40f6373dc27d4"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"6e4b7ec2c9e255a912a3c37dbd8300f77ba2f046":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"259738a0b6cee3365b95a8a72134e52e6d32756d":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","bffe2c1d4c037d2434b18cfdeb86b555220b5afd"],"14b133bc4d7193efff507eb88f86fcc07c4e8b50":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad2a673349939e48652bf304cccf673c3412198f":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"bffe2c1d4c037d2434b18cfdeb86b555220b5afd":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}