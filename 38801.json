{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","commits":[{"id":"0bba396c158346d92cdd5ff662e97ac6166a2147","date":1443059349,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","pathOld":"/dev/null","sourceNew":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null && !column.equals(\"*\")) {\n          stats = new ArrayList();\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(String field : m.keySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = m.get(field);\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(field);\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","sourceNew":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap<>();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null) {\n          stats = new ArrayList<>();\n        }\n\n        if(!column.equals(\"*\")) {\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(String field : m.keySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = m.get(field);\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(field);\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","sourceOld":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null && !column.equals(\"*\")) {\n          stats = new ArrayList();\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(String field : m.keySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = m.get(field);\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(field);\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","sourceNew":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap<>();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null) {\n          stats = new ArrayList<>();\n        }\n\n        if(!column.equals(\"*\")) {\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(String field : m.keySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = m.get(field);\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(field);\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","sourceOld":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null && !column.equals(\"*\")) {\n          stats = new ArrayList();\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(String field : m.keySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = m.get(field);\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(field);\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","date":1571070979,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","sourceNew":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap<>();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null) {\n          stats = new ArrayList<>();\n        }\n\n        if(!column.equals(\"*\")) {\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(Entry<String, List<String>> entry : m.entrySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = entry.getValue();\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(entry.getKey());\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","sourceOld":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap<>();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null) {\n          stats = new ArrayList<>();\n        }\n\n        if(!column.equals(\"*\")) {\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(String field : m.keySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = m.get(field);\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(field);\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","sourceNew":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap<>();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null) {\n          stats = new ArrayList<>();\n        }\n\n        if(!column.equals(\"*\")) {\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(Entry<String, List<String>> entry : m.entrySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = entry.getValue();\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(entry.getKey());\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","sourceOld":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap<>();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null) {\n          stats = new ArrayList<>();\n        }\n\n        if(!column.equals(\"*\")) {\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(String field : m.keySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = m.get(field);\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(field);\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"570664407cd3123a8039f1b4f2f6c6693bdaee31","date":1589893823,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/StatsStream#addStats(ModifiableSolrParams,Metric[]).mjava","sourceNew":null,"sourceOld":"  private void addStats(ModifiableSolrParams params, Metric[] _metrics) {\n    Map<String, List<String>> m = new HashMap<>();\n    for(Metric metric : _metrics) {\n      String metricId = metric.getIdentifier();\n      if(metricId.contains(\"(\")) {\n        metricId = metricId.substring(0, metricId.length()-1);\n        String[] parts = metricId.split(\"\\\\(\");\n        String function = parts[0];\n        String column = parts[1];\n        List<String> stats = m.get(column);\n\n        if(stats == null) {\n          stats = new ArrayList<>();\n        }\n\n        if(!column.equals(\"*\")) {\n          m.put(column, stats);\n        }\n\n        if(function.equals(\"min\")) {\n          stats.add(\"min\");\n        } else if(function.equals(\"max\")) {\n          stats.add(\"max\");\n        } else if(function.equals(\"sum\")) {\n          stats.add(\"sum\");\n        } else if(function.equals(\"avg\")) {\n          stats.add(\"mean\");\n        } else if(function.equals(\"count\")) {\n          this.doCount = true;\n        }\n      }\n    }\n\n    for(Entry<String, List<String>> entry : m.entrySet()) {\n      StringBuilder buf = new StringBuilder();\n      List<String> stats = entry.getValue();\n      buf.append(\"{!\");\n\n      for(String stat : stats) {\n        buf.append(stat).append(\"=\").append(\"true \");\n      }\n\n      buf.append(\"}\").append(entry.getKey());\n      params.add(\"stats.field\", buf.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"612da0a0a2d5f4409da55729b9833e799f905ac5":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["0bba396c158346d92cdd5ff662e97ac6166a2147","612da0a0a2d5f4409da55729b9833e799f905ac5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["570664407cd3123a8039f1b4f2f6c6693bdaee31"],"b0b597c65628ca9e73913a07e81691f8229bae35":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0"]},"commit2Childs":{"612da0a0a2d5f4409da55729b9833e799f905ac5":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0":["570664407cd3123a8039f1b4f2f6c6693bdaee31","b0b597c65628ca9e73913a07e81691f8229bae35"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["7b22e06bed98cf8dceb4f71c4d5265e798e7fbd0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bba396c158346d92cdd5ff662e97ac6166a2147"],"570664407cd3123a8039f1b4f2f6c6693bdaee31":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0bba396c158346d92cdd5ff662e97ac6166a2147":["612da0a0a2d5f4409da55729b9833e799f905ac5","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}