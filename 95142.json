{"path":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","commits":[{"id":"0f45f65b8ca4312a6880cc80396c35205dc21543","date":1317846119,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Chooses a language based on the list of candidates detected \n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      if(langWhitelist.isEmpty() || langWhitelist.contains(lang.getLangCode())) {\n        log.debug(\"Language detected {} with certainty {}\", lang.getLangCode(), lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = lang.getLangCode();\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n    \n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n  \n    return langStr;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f","date":1351009382,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","sourceNew":"  /**\n   * Chooses a language based on the list of candidates detected\n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      if(langWhitelist.isEmpty() || langWhitelist.contains(lang.getLangCode())) {\n        log.debug(\"Language detected {} with certainty {}\", lang.getLangCode(), lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = lang.getLangCode();\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n\n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n\n    return langStr;\n  }\n\n","sourceOld":"  /**\n   * Chooses a language based on the list of candidates detected \n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      if(langWhitelist.isEmpty() || langWhitelist.contains(lang.getLangCode())) {\n        log.debug(\"Language detected {} with certainty {}\", lang.getLangCode(), lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = lang.getLangCode();\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n    \n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n  \n    return langStr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","sourceNew":"  /**\n   * Chooses a language based on the list of candidates detected\n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      if(langWhitelist.isEmpty() || langWhitelist.contains(lang.getLangCode())) {\n        log.debug(\"Language detected {} with certainty {}\", lang.getLangCode(), lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = lang.getLangCode();\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n\n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n\n    return langStr;\n  }\n\n","sourceOld":"  /**\n   * Chooses a language based on the list of candidates detected \n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      if(langWhitelist.isEmpty() || langWhitelist.contains(lang.getLangCode())) {\n        log.debug(\"Language detected {} with certainty {}\", lang.getLangCode(), lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = lang.getLangCode();\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n    \n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n  \n    return langStr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee","date":1372775927,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","sourceNew":"  /**\n   * Chooses a language based on the list of candidates detected\n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      String normalizedLang = normalizeLangCode(lang.getLangCode());\n      if(langWhitelist.isEmpty() || langWhitelist.contains(normalizedLang)) {\n        log.debug(\"Language detected {} with certainty {}\", normalizedLang, lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = normalizedLang;\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n\n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n\n    return langStr;\n  }\n\n","sourceOld":"  /**\n   * Chooses a language based on the list of candidates detected\n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      if(langWhitelist.isEmpty() || langWhitelist.contains(lang.getLangCode())) {\n        log.debug(\"Language detected {} with certainty {}\", lang.getLangCode(), lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = lang.getLangCode();\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n\n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n\n    return langStr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","sourceNew":"  /**\n   * Chooses a language based on the list of candidates detected\n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      String normalizedLang = normalizeLangCode(lang.getLangCode());\n      if(langWhitelist.isEmpty() || langWhitelist.contains(normalizedLang)) {\n        log.debug(\"Language detected {} with certainty {}\", normalizedLang, lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = normalizedLang;\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n\n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n\n    return langStr;\n  }\n\n","sourceOld":"  /**\n   * Chooses a language based on the list of candidates detected\n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      if(langWhitelist.isEmpty() || langWhitelist.contains(lang.getLangCode())) {\n        log.debug(\"Language detected {} with certainty {}\", lang.getLangCode(), lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = lang.getLangCode();\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n\n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n\n    return langStr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LanguageIdentifierUpdateProcessor#resolveLanguage(List[DetectedLanguage],String).mjava","sourceNew":"  /**\n   * Chooses a language based on the list of candidates detected\n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      String normalizedLang = normalizeLangCode(lang.getLangCode());\n      if(langWhitelist.isEmpty() || langWhitelist.contains(normalizedLang)) {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Language detected {} with certainty {}\", normalizedLang, lang.getCertainty());\n        }\n        if(lang.getCertainty() >= threshold) {\n          langStr = normalizedLang;\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        if (log.isDebugEnabled()) {\n          log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        }\n        langStr = fallbackLang;\n      }\n    }\n\n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n\n    return langStr;\n  }\n\n","sourceOld":"  /**\n   * Chooses a language based on the list of candidates detected\n   * @param languages a List of DetectedLanguages with certainty score\n   * @param fallbackLang the language code to use as a fallback\n   * @return a string of the chosen language\n   */\n  protected String resolveLanguage(List<DetectedLanguage> languages, String fallbackLang) {\n    String langStr;\n    if(languages.size() == 0) {\n      log.debug(\"No language detected, using fallback {}\", fallbackLang);\n      langStr = fallbackLang;\n    } else {\n      DetectedLanguage lang = languages.get(0);\n      String normalizedLang = normalizeLangCode(lang.getLangCode());\n      if(langWhitelist.isEmpty() || langWhitelist.contains(normalizedLang)) {\n        log.debug(\"Language detected {} with certainty {}\", normalizedLang, lang.getCertainty());\n        if(lang.getCertainty() >= threshold) {\n          langStr = normalizedLang;\n        } else {\n          log.debug(\"Detected language below threshold {}, using fallback {}\", threshold, fallbackLang);\n          langStr = fallbackLang;\n        }\n      } else {\n        log.debug(\"Detected a language not in whitelist ({}), using fallback {}\", lang.getLangCode(), fallbackLang);\n        langStr = fallbackLang;\n      }\n    }\n\n    if(langStr == null || langStr.length() == 0) {\n      log.warn(\"Language resolved to null or empty string. Fallback not configured?\");\n      langStr = \"\";\n    }\n\n    return langStr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee":["46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f"],"46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"0f45f65b8ca4312a6880cc80396c35205dc21543":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f","8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee"],"62e52115b56781006682fd92c6938efaf174304d":["0f45f65b8ca4312a6880cc80396c35205dc21543","46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a966532d92cf9ba2856f15a8140151bb6b518e4b"],"46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f":["8d3ef1a6efd1b3a7ca06843b1165d8690dee94ee","37a0f60745e53927c4c876cfe5b5a58170f0646c","62e52115b56781006682fd92c6938efaf174304d"],"0f45f65b8ca4312a6880cc80396c35205dc21543":["46ae57a9ea3e7c9a47a3fc2548e1b32c060e3f8f","62e52115b56781006682fd92c6938efaf174304d"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"62e52115b56781006682fd92c6938efaf174304d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f45f65b8ca4312a6880cc80396c35205dc21543"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}