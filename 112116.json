{"path":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    Random rnd = newRandom();\n\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      for (int i=0; i<50*_TestUtil.getRandomMultiplier(); i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = rnd.nextInt(3);\n        q1 = randBoolQuery(new Random(rnd.nextLong()), rnd.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = (TEST_NIGHTLY ? 50 : 10) * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = (TEST_NIGHTLY ? 50 : 10) * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = (TEST_NIGHTLY ? 50 : 10) * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = 50 * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = (TEST_NIGHTLY ? 50 : 10) * RANDOM_MULTIPLIER;\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#testRandomQueries().mjava","sourceNew":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","sourceOld":"  @Test\n  public void testRandomQueries() throws Exception {\n    String[] vals = {\"w1\",\"w2\",\"w3\",\"w4\",\"w5\",\"xx\",\"yy\",\"zzz\"};\n\n    int tot=0;\n\n    BooleanQuery q1 = null;\n    try {\n\n      // increase number of iterations for more complete testing\n      int num = atLeast(10);\n      for (int i=0; i<num; i++) {\n        int level = random.nextInt(3);\n        q1 = randBoolQuery(new Random(random.nextLong()), random.nextBoolean(), level, field, vals, null);\n        \n        // Can't sort by relevance since floating point numbers may not quite\n        // match up.\n        Sort sort = Sort.INDEXORDER;\n\n        QueryUtils.check(random, q1,searcher);\n\n        TopFieldCollector collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, true);\n\n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits1 = collector.topDocs().scoreDocs;\n\n        collector = TopFieldCollector.create(sort, 1000,\n            false, true, true, false);\n        \n        searcher.search(q1, null, collector);\n        ScoreDoc[] hits2 = collector.topDocs().scoreDocs;\n        tot+=hits2.length;\n        CheckHits.checkEqual(q1, hits1, hits2);\n\n        BooleanQuery q3 = new BooleanQuery();\n        q3.add(q1, BooleanClause.Occur.SHOULD);\n        q3.add(new PrefixQuery(new Term(\"field2\", \"b\")), BooleanClause.Occur.SHOULD);\n        TopDocs hits4 = bigSearcher.search(q3, 1);\n        assertEquals(mulFactor*collector.totalHits + NUM_EXTRA_DOCS/2, hits4.totalHits);\n      }\n\n    } catch (Exception e) {\n      // For easier debugging\n      System.out.println(\"failed query: \" + q1);\n      throw e;\n    }\n\n    // System.out.println(\"Total hits:\"+tot);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["c084e47df29de3330311d69dabf515ceaa989512"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["53a31399f2471493d67b19a95c028a74e0113b6a"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["150488c1317972164a9a824be05b1ba2ba0fc68c","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"2aafd88401639311b0404e67c94e829e123a0e45":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["2aafd88401639311b0404e67c94e829e123a0e45","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","53a31399f2471493d67b19a95c028a74e0113b6a"],"c084e47df29de3330311d69dabf515ceaa989512":["2aafd88401639311b0404e67c94e829e123a0e45"],"53a31399f2471493d67b19a95c028a74e0113b6a":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"79c2cb24929f2649a8875fb629086171f914d5ce":["53a31399f2471493d67b19a95c028a74e0113b6a","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f83af14a2a8131b14d7aee6274c740334e0363d3"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","1f653cfcf159baeaafe5d01682a911e95bba4012"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"2aafd88401639311b0404e67c94e829e123a0e45":["5f4e87790277826a2aea119328600dfb07761f32","c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"c084e47df29de3330311d69dabf515ceaa989512":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","5f4e87790277826a2aea119328600dfb07761f32"],"53a31399f2471493d67b19a95c028a74e0113b6a":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","79c2cb24929f2649a8875fb629086171f914d5ce"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"150488c1317972164a9a824be05b1ba2ba0fc68c":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2aafd88401639311b0404e67c94e829e123a0e45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}