{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testSkipCachingForTermQuery().mjava","commits":[{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":0,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testSkipCachingForTermQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testSkipCachingForTermQuery() throws IOException {\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc1 = new Document();\n    doc1.add(new StringField(\"name\", \"tom\", Store.YES));\n    doc1.add(new StringField(\"hobby\", \"movie\", Store.YES));\n    Document doc2 = new Document();\n    doc2.add(new StringField(\"name\", \"alice\", Store.YES));\n    doc2.add(new StringField(\"hobby\", \"book\", Store.YES));\n    Document doc3 = new Document();\n    doc3.add(new StringField(\"name\", \"alice\", Store.YES));\n    doc3.add(new StringField(\"hobby\", \"movie\", Store.YES));\n    w.addDocuments(Arrays.asList(doc1, doc2, doc3));\n    final IndexReader reader = w.getReader();\n    final IndexSearcher searcher = newSearcher(reader);\n    final UsageTrackingQueryCachingPolicy policy = new UsageTrackingQueryCachingPolicy();\n    searcher.setQueryCachingPolicy(policy);\n    w.close();\n\n    // lead cost is 2, cost of subQuery1 is 3, cost of subQuery2 is 2\n    BooleanQuery.Builder inner = new BooleanQuery.Builder();\n    TermQuery innerSubQuery1 = new TermQuery(new Term(\"hobby\", \"book\"));\n    TermQuery innerSubQuery2 = new TermQuery(new Term(\"hobby\", \"movie\"));\n    BooleanQuery subQuery1 = inner.add(innerSubQuery1, Occur.SHOULD).add(innerSubQuery2, Occur.SHOULD).build();\n\n    BooleanQuery.Builder bq = new BooleanQuery.Builder();\n    TermQuery subQuery2 = new TermQuery(new Term(\"name\", \"alice\"));\n    BooleanQuery query = bq.add(new ConstantScoreQuery(subQuery1), Occur.FILTER).add(subQuery2, Occur.FILTER).build();\n    Set<Query> cacheSet = new HashSet<>();\n\n    // both queries are not cached\n    final LRUQueryCache partCache = new LRUQueryCache(1000000, 10000000, context -> true, 1);\n    searcher.setQueryCache(partCache);\n    searcher.search(query, 1);\n    assertEquals(cacheSet, new HashSet<>(partCache.cachedQueries()));\n\n    // only subQuery1 is cached\n    final LRUQueryCache allCache = new LRUQueryCache(1000000, 10000000, context -> true, Float.POSITIVE_INFINITY);\n    searcher.setQueryCache(allCache);\n    searcher.search(query, 1);\n    cacheSet.add(subQuery1);\n    assertEquals(cacheSet, new HashSet<>(allCache.cachedQueries()));\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}