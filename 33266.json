{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWramer().mjava","commits":[{"id":"415fc059c6f2340aed1714220b9578c3f66ed09c","date":1366942705,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWramer().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimpleMergedSegmentWramer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    InfoStream infoStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"SMSW\".equals(component)) {\n          didWarm.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setInfoStream(infoStream).\n            setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(infoStream)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWramer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWramer().mjava","sourceNew":"  public void testSimpleMergedSegmentWramer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    InfoStream infoStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"SMSW\".equals(component)) {\n          didWarm.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setInfoStream(infoStream).\n            setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(infoStream)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.shutdown();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSimpleMergedSegmentWramer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    InfoStream infoStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"SMSW\".equals(component)) {\n          didWarm.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setInfoStream(infoStream).\n            setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(infoStream)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWramer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWramer().mjava","sourceNew":"  public void testSimpleMergedSegmentWramer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    InfoStream infoStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"SMSW\".equals(component)) {\n          didWarm.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setInfoStream(infoStream)\n           .setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(infoStream))\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.shutdown();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSimpleMergedSegmentWramer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    InfoStream infoStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"SMSW\".equals(component)) {\n          didWarm.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setReaderPooling(true).\n            setInfoStream(infoStream).\n            setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(infoStream)).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.shutdown();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWramer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWramer().mjava","sourceNew":"  public void testSimpleMergedSegmentWramer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    InfoStream infoStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"SMSW\".equals(component)) {\n          didWarm.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setInfoStream(infoStream)\n           .setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(infoStream))\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSimpleMergedSegmentWramer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    InfoStream infoStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"SMSW\".equals(component)) {\n          didWarm.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setInfoStream(infoStream)\n           .setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(infoStream))\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.shutdown();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd","date":1417101195,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWarmer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader#testSimpleMergedSegmentWramer().mjava","sourceNew":"  public void testSimpleMergedSegmentWarmer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    InfoStream infoStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"SMSW\".equals(component)) {\n          didWarm.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setInfoStream(infoStream)\n           .setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(infoStream))\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","sourceOld":"  public void testSimpleMergedSegmentWramer() throws Exception {\n    Directory dir = newDirectory();\n    final AtomicBoolean didWarm = new AtomicBoolean();\n    InfoStream infoStream = new InfoStream() {\n      @Override\n      public void close() throws IOException {}\n\n      @Override\n      public void message(String component, String message) {\n        if (\"SMSW\".equals(component)) {\n          didWarm.set(true);\n        }\n      }\n\n      @Override\n      public boolean isEnabled(String component) {\n        return true;\n      }\n    };\n    IndexWriter w = new IndexWriter(\n        dir,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n           .setMaxBufferedDocs(2)\n           .setReaderPooling(true)\n           .setInfoStream(infoStream)\n           .setMergedSegmentWarmer(new SimpleMergedSegmentWarmer(infoStream))\n           .setMergePolicy(newLogMergePolicy(10))\n    );\n\n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    for(int i=0;i<20;i++) {\n      w.addDocument(doc);\n    }\n    w.waitForMerges();\n    w.close();\n    dir.close();\n    assertTrue(didWarm.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["415fc059c6f2340aed1714220b9578c3f66ed09c"],"415fc059c6f2340aed1714220b9578c3f66ed09c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415fc059c6f2340aed1714220b9578c3f66ed09c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["aee6e14aa025a22ed06b7e38e12bcc15ec251fbd"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"aee6e14aa025a22ed06b7e38e12bcc15ec251fbd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"415fc059c6f2340aed1714220b9578c3f66ed09c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}