{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#isBeyondCommonPrefix(BytesRef).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#isBeyondCommonPrefix(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines if the provided {@link BytesRef} is beyond the automaton common prefix.\n   * This method must be called after a call to {@link #runAutomatonForState} because\n   * it uses {@link #numBytesAccepted} value.\n   */\n  protected boolean isBeyondCommonPrefix(BytesRef bytesRef) {\n    // If the automaton rejects early the bytes, before the common prefix length,\n    // and if the rejected byte is lexicographically after the same byte in the common prefix,\n    // then it means the bytes are beyond the common prefix.\n    return numBytesAccepted < commonPrefixRef.length\n        && numBytesAccepted < bytesRef.length\n        && (bytesRef.bytes[numBytesAccepted + bytesRef.offset] & 0xFF) > (commonPrefixRef.bytes[numBytesAccepted + commonPrefixRef.offset] & 0xFF);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23fcccd57316410c404dd37307a496ab850efa9c","date":1582897939,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#isBeyondCommonPrefix(BytesRef).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines if the provided {@link BytesRef} is beyond the automaton common prefix.\n   * This method must be called after a call to {@link #runAutomatonForState} because\n   * it uses {@link #numBytesAccepted} value.\n   */\n  protected boolean isBeyondCommonPrefix(BytesRef bytesRef) {\n    // If the automaton rejects early the bytes, before the common prefix length,\n    // and if the rejected byte is lexicographically after the same byte in the common prefix,\n    // then it means the bytes are beyond the common prefix.\n    return numBytesAccepted < commonPrefixRef.length\n        && numBytesAccepted < bytesRef.length\n        && (bytesRef.bytes[numBytesAccepted + bytesRef.offset] & 0xFF) > (commonPrefixRef.bytes[numBytesAccepted + commonPrefixRef.offset] & 0xFF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23fcccd57316410c404dd37307a496ab850efa9c":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23fcccd57316410c404dd37307a496ab850efa9c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["23fcccd57316410c404dd37307a496ab850efa9c"],"23fcccd57316410c404dd37307a496ab850efa9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}