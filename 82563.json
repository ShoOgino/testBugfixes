{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRef).mjava","commits":[{"id":"5a48377c9931ddb38c784846217ff68d7dcd0b44","date":1363202036,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRef).mjava","pathOld":"/dev/null","sourceNew":"  private LookupResult getLookupResult(Long output1, BytesRef output2, CharsRef spare) {\n    LookupResult result;\n    if (hasPayloads) {\n      int sepIndex = -1;\n      for(int i=0;i<output2.length;i++) {\n        if (output2.bytes[output2.offset+i] == PAYLOAD_SEP) {\n          sepIndex = i;\n          break;\n        }\n      }\n      assert sepIndex != -1;\n      spare.grow(sepIndex);\n      int payloadLen = output2.length - sepIndex - 1;\n      output2.length = sepIndex;\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      BytesRef payload = new BytesRef(payloadLen);\n      System.arraycopy(output2.bytes, sepIndex+1, payload.bytes, 0, payloadLen);\n      payload.length = payloadLen;\n      result = new LookupResult(spare.toString(), decodeWeight(output1), payload);\n    } else {\n      spare.grow(output2.length);\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      result = new LookupResult(spare.toString(), decodeWeight(output1));\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["65db3583737c7db5eff906d29bb04c5339c74990"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"65db3583737c7db5eff906d29bb04c5339c74990","date":1374186332,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRef).mjava","sourceNew":"  private LookupResult getLookupResult(Long output1, BytesRef output2, CharsRef spare) {\n    LookupResult result;\n    if (hasPayloads) {\n      int sepIndex = -1;\n      for(int i=0;i<output2.length;i++) {\n        if (output2.bytes[output2.offset+i] == PAYLOAD_SEP) {\n          sepIndex = i;\n          break;\n        }\n      }\n      assert sepIndex != -1;\n      spare.grow(sepIndex);\n      final int payloadLen = output2.length - sepIndex - 1;\n      UnicodeUtil.UTF8toUTF16(output2.bytes, output2.offset, sepIndex, spare);\n      BytesRef payload = new BytesRef(payloadLen);\n      System.arraycopy(output2.bytes, sepIndex+1, payload.bytes, 0, payloadLen);\n      payload.length = payloadLen;\n      result = new LookupResult(spare.toString(), decodeWeight(output1), payload);\n    } else {\n      spare.grow(output2.length);\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      result = new LookupResult(spare.toString(), decodeWeight(output1));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private LookupResult getLookupResult(Long output1, BytesRef output2, CharsRef spare) {\n    LookupResult result;\n    if (hasPayloads) {\n      int sepIndex = -1;\n      for(int i=0;i<output2.length;i++) {\n        if (output2.bytes[output2.offset+i] == PAYLOAD_SEP) {\n          sepIndex = i;\n          break;\n        }\n      }\n      assert sepIndex != -1;\n      spare.grow(sepIndex);\n      int payloadLen = output2.length - sepIndex - 1;\n      output2.length = sepIndex;\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      BytesRef payload = new BytesRef(payloadLen);\n      System.arraycopy(output2.bytes, sepIndex+1, payload.bytes, 0, payloadLen);\n      payload.length = payloadLen;\n      result = new LookupResult(spare.toString(), decodeWeight(output1), payload);\n    } else {\n      spare.grow(output2.length);\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      result = new LookupResult(spare.toString(), decodeWeight(output1));\n    }\n\n    return result;\n  }\n\n","bugFix":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRef).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRef).mjava","sourceNew":"  private LookupResult getLookupResult(Long output1, BytesRef output2, CharsRef spare) {\n    LookupResult result;\n    if (hasPayloads) {\n      int sepIndex = -1;\n      for(int i=0;i<output2.length;i++) {\n        if (output2.bytes[output2.offset+i] == PAYLOAD_SEP) {\n          sepIndex = i;\n          break;\n        }\n      }\n      assert sepIndex != -1;\n      spare.grow(sepIndex);\n      final int payloadLen = output2.length - sepIndex - 1;\n      UnicodeUtil.UTF8toUTF16(output2.bytes, output2.offset, sepIndex, spare);\n      BytesRef payload = new BytesRef(payloadLen);\n      System.arraycopy(output2.bytes, sepIndex+1, payload.bytes, 0, payloadLen);\n      payload.length = payloadLen;\n      result = new LookupResult(spare.toString(), decodeWeight(output1), payload);\n    } else {\n      spare.grow(output2.length);\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      result = new LookupResult(spare.toString(), decodeWeight(output1));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private LookupResult getLookupResult(Long output1, BytesRef output2, CharsRef spare) {\n    LookupResult result;\n    if (hasPayloads) {\n      int sepIndex = -1;\n      for(int i=0;i<output2.length;i++) {\n        if (output2.bytes[output2.offset+i] == PAYLOAD_SEP) {\n          sepIndex = i;\n          break;\n        }\n      }\n      assert sepIndex != -1;\n      spare.grow(sepIndex);\n      int payloadLen = output2.length - sepIndex - 1;\n      output2.length = sepIndex;\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      BytesRef payload = new BytesRef(payloadLen);\n      System.arraycopy(output2.bytes, sepIndex+1, payload.bytes, 0, payloadLen);\n      payload.length = payloadLen;\n      result = new LookupResult(spare.toString(), decodeWeight(output1), payload);\n    } else {\n      spare.grow(output2.length);\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      result = new LookupResult(spare.toString(), decodeWeight(output1));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRefBuilder).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingSuggester#getLookupResult(Long,BytesRef,CharsRef).mjava","sourceNew":"  private LookupResult getLookupResult(Long output1, BytesRef output2, CharsRefBuilder spare) {\n    LookupResult result;\n    if (hasPayloads) {\n      int sepIndex = -1;\n      for(int i=0;i<output2.length;i++) {\n        if (output2.bytes[output2.offset+i] == PAYLOAD_SEP) {\n          sepIndex = i;\n          break;\n        }\n      }\n      assert sepIndex != -1;\n      spare.grow(sepIndex);\n      final int payloadLen = output2.length - sepIndex - 1;\n      spare.copyUTF8Bytes(output2.bytes, output2.offset, sepIndex);\n      BytesRef payload = new BytesRef(payloadLen);\n      System.arraycopy(output2.bytes, sepIndex+1, payload.bytes, 0, payloadLen);\n      payload.length = payloadLen;\n      result = new LookupResult(spare.toString(), decodeWeight(output1), payload);\n    } else {\n      spare.grow(output2.length);\n      spare.copyUTF8Bytes(output2);\n      result = new LookupResult(spare.toString(), decodeWeight(output1));\n    }\n\n    return result;\n  }\n\n","sourceOld":"  private LookupResult getLookupResult(Long output1, BytesRef output2, CharsRef spare) {\n    LookupResult result;\n    if (hasPayloads) {\n      int sepIndex = -1;\n      for(int i=0;i<output2.length;i++) {\n        if (output2.bytes[output2.offset+i] == PAYLOAD_SEP) {\n          sepIndex = i;\n          break;\n        }\n      }\n      assert sepIndex != -1;\n      spare.grow(sepIndex);\n      final int payloadLen = output2.length - sepIndex - 1;\n      UnicodeUtil.UTF8toUTF16(output2.bytes, output2.offset, sepIndex, spare);\n      BytesRef payload = new BytesRef(payloadLen);\n      System.arraycopy(output2.bytes, sepIndex+1, payload.bytes, 0, payloadLen);\n      payload.length = payloadLen;\n      result = new LookupResult(spare.toString(), decodeWeight(output1), payload);\n    } else {\n      spare.grow(output2.length);\n      UnicodeUtil.UTF8toUTF16(output2, spare);\n      result = new LookupResult(spare.toString(), decodeWeight(output1));\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65db3583737c7db5eff906d29bb04c5339c74990":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"5a48377c9931ddb38c784846217ff68d7dcd0b44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["65db3583737c7db5eff906d29bb04c5339c74990"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"]},"commit2Childs":{"65db3583737c7db5eff906d29bb04c5339c74990":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a48377c9931ddb38c784846217ff68d7dcd0b44"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"5a48377c9931ddb38c784846217ff68d7dcd0b44":["65db3583737c7db5eff906d29bb04c5339c74990","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}