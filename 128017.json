{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean startInclusive, boolean endInclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, startInclusive, endInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected Query newRangeQuery(String field, String part1, String part2,\n      boolean inclusive) {\n    if (isPass2ResolvingPhrases) {\n      // Must use old-style RangeQuery in order to produce a BooleanQuery\n      // that can be turned into SpanOr clause\n      TermRangeQuery rangeQuery = new TermRangeQuery(field, part1, part2, inclusive, inclusive,\n          getRangeCollator());\n      rangeQuery.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n      return rangeQuery;\n    }\n    return super.newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e9bbb27241bcf9645bb2f724c137537aa69918a"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["4e9bbb27241bcf9645bb2f724c137537aa69918a","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}