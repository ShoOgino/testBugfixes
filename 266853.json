{"path":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","commits":[{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","pathOld":"/dev/null","sourceNew":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return puller.pull(r, field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eae7c5ddae4b9692a6691d2d252ab6a4229457b","date":1325870827,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","sourceNew":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return puller.pull(r, field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return puller.pull(r, field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcbb93404cd0f5f6bd4f1371feeae6d27e9bd958","date":1326365633,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","sourceNew":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return puller.pull(r, field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        boolean stop = false;\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          if (stop) {\n            return;\n          }\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          } else if (puller.stopLoadingOnNull(r, field)){\n            promotedType[0] = TypePromoter.getIdentityPromoter(); // set to identity to return null\n            stop = true;\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return puller.pull(r, field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","sourceNew":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    if (r instanceof AtomicIndexReader) {\n      // already an atomic reader\n      return puller.pull((AtomicIndexReader) r, field);\n    }\n    assert r instanceof CompositeIndexReader;\n    final IndexReader[] subs = ((CompositeIndexReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        boolean stop = false;\n        @Override\n        protected void add(int base, AtomicIndexReader r) throws IOException {\n          if (stop) {\n            return;\n          }\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          } else if (puller.stopLoadingOnNull(r, field)){\n            promotedType[0] = TypePromoter.getIdentityPromoter(); // set to identity to return null\n            stop = true;\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return puller.pull(r, field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        boolean stop = false;\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          if (stop) {\n            return;\n          }\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          } else if (puller.stopLoadingOnNull(r, field)){\n            promotedType[0] = TypePromoter.getIdentityPromoter(); // set to identity to return null\n            stop = true;\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","sourceNew":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    if (r instanceof AtomicReader) {\n      // already an atomic reader\n      return puller.pull((AtomicReader) r, field);\n    }\n    assert r instanceof CompositeReader;\n    final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        boolean stop = false;\n        @Override\n        protected void add(int base, AtomicReader r) throws IOException {\n          if (stop) {\n            return;\n          }\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          } else if (puller.stopLoadingOnNull(r, field)){\n            promotedType[0] = TypePromoter.getIdentityPromoter(); // set to identity to return null\n            stop = true;\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    if (r instanceof AtomicIndexReader) {\n      // already an atomic reader\n      return puller.pull((AtomicIndexReader) r, field);\n    }\n    assert r instanceof CompositeIndexReader;\n    final IndexReader[] subs = ((CompositeIndexReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        boolean stop = false;\n        @Override\n        protected void add(int base, AtomicIndexReader r) throws IOException {\n          if (stop) {\n            return;\n          }\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          } else if (puller.stopLoadingOnNull(r, field)){\n            promotedType[0] = TypePromoter.getIdentityPromoter(); // set to identity to return null\n            stop = true;\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","sourceNew":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    if (r instanceof AtomicReader) {\n      // already an atomic reader\n      return puller.pull((AtomicReader) r, field);\n    }\n    assert r instanceof CompositeReader;\n    final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        boolean stop = false;\n        @Override\n        protected void add(int base, AtomicReader r) throws IOException {\n          if (stop) {\n            return;\n          }\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          } else if (puller.stopLoadingOnNull(r, field)){\n            promotedType[0] = TypePromoter.getIdentityPromoter(); // set to identity to return null\n            stop = true;\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    final IndexReader[] subs = r.getSequentialSubReaders();\n    if (subs == null) {\n      // already an atomic reader\n      return puller.pull(r, field);\n    } else if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        boolean stop = false;\n        @Override\n        protected void add(int base, IndexReader r) throws IOException {\n          if (stop) {\n            return;\n          }\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          } else if (puller.stopLoadingOnNull(r, field)){\n            promotedType[0] = TypePromoter.getIdentityPromoter(); // set to identity to return null\n            stop = true;\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiDocValues#getDocValues(IndexReader,String,DocValuesPuller).mjava","sourceNew":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    if (r instanceof AtomicReader) {\n      // already an atomic reader\n      return puller.pull((AtomicReader) r, field);\n    }\n    assert r instanceof CompositeReader;\n    final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        boolean stop = false;\n        @Override\n        protected void add(int base, AtomicReader r) throws IOException {\n          if (stop) {\n            return;\n          }\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          } else if (puller.stopLoadingOnNull(r, field)){\n            promotedType[0] = TypePromoter.getIdentityPromoter(); // set to identity to return null\n            stop = true;\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","sourceOld":"  private static DocValues getDocValues(IndexReader r, final String field, final DocValuesPuller puller) throws IOException {\n    if (r instanceof AtomicReader) {\n      // already an atomic reader\n      return puller.pull((AtomicReader) r, field);\n    }\n    assert r instanceof CompositeReader;\n    final IndexReader[] subs = ((CompositeReader) r).getSequentialSubReaders();\n    if (subs.length == 0) {\n      // no fields\n      return null;\n    } else if (subs.length == 1) {\n      return getDocValues(subs[0], field, puller);\n    } else {      \n      final List<DocValuesSlice> slices = new ArrayList<DocValuesSlice>();\n      \n      final TypePromoter promotedType[] = new TypePromoter[1];\n      promotedType[0] = TypePromoter.getIdentityPromoter();\n      \n      // gather all docvalues fields, accumulating a promoted type across \n      // potentially incompatible types\n      \n      new ReaderUtil.Gather(r) {\n        boolean stop = false;\n        @Override\n        protected void add(int base, AtomicReader r) throws IOException {\n          if (stop) {\n            return;\n          }\n          final DocValues d = puller.pull(r, field);\n          if (d != null) {\n            TypePromoter incoming = TypePromoter.create(d.type(), d.getValueSize());\n            promotedType[0] = promotedType[0].promote(incoming);\n          } else if (puller.stopLoadingOnNull(r, field)){\n            promotedType[0] = TypePromoter.getIdentityPromoter(); // set to identity to return null\n            stop = true;\n          }\n          slices.add(new DocValuesSlice(d, base, r.maxDoc()));\n        }\n      }.run();\n      \n      // return null if no docvalues encountered anywhere\n      if (promotedType[0] == TypePromoter.getIdentityPromoter()) {\n        return null;\n      }\n           \n      // populate starts and fill gaps with empty docvalues \n      int starts[] = new int[slices.size()];\n      for (int i = 0; i < slices.size(); i++) {\n        DocValuesSlice slice = slices.get(i);\n        starts[i] = slice.start;\n        if (slice.docValues == null) {\n          Type promoted = promotedType[0].type();\n          switch(promoted) {\n            case BYTES_FIXED_DEREF:\n            case BYTES_FIXED_STRAIGHT:\n            case BYTES_FIXED_SORTED:\n              assert promotedType[0].getValueSize() >= 0;\n              slice.docValues = new EmptyFixedDocValues(slice.length, promoted, promotedType[0].getValueSize());\n              break;\n            default:\n              slice.docValues = new EmptyDocValues(slice.length, promoted);\n          }\n        }\n      }\n      \n      return new MultiDocValues(slices.toArray(new DocValuesSlice[slices.size()]), starts, promotedType[0]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dcbb93404cd0f5f6bd4f1371feeae6d27e9bd958":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["dcbb93404cd0f5f6bd4f1371feeae6d27e9bd958","da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["dcbb93404cd0f5f6bd4f1371feeae6d27e9bd958"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"dcbb93404cd0f5f6bd4f1371feeae6d27e9bd958":["5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["dcbb93404cd0f5f6bd4f1371feeae6d27e9bd958"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}