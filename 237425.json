{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","commits":[{"id":"c6ff97491f7791aa98e90d71c4c7fee58688c37b","date":1434817448,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", \"failureInt\");\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    SchemaResponse.UpdateResponse addFieldTypeSecondResponse = addFieldTypeRequest.process(getSolrClient());\n    assertEquals(0, addFieldTypeSecondResponse.getStatus());\n    assertNotNull(addFieldTypeSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf91b76bbc05503ac96589cc801c8e65dff0e564","date":1498517395,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","sourceNew":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", \"failureInt\");\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    SchemaResponse.UpdateResponse addFieldTypeSecondResponse = addFieldTypeRequest.process(getSolrClient());\n    assertEquals(0, addFieldTypeSecondResponse.getStatus());\n    assertNotNull(addFieldTypeSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","sourceOld":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", \"failureInt\");\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    SchemaResponse.UpdateResponse addFieldTypeSecondResponse = addFieldTypeRequest.process(getSolrClient());\n    assertEquals(0, addFieldTypeSecondResponse.getStatus());\n    assertNotNull(addFieldTypeSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","sourceNew":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", \"failureInt\");\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    SchemaResponse.UpdateResponse addFieldTypeSecondResponse = addFieldTypeRequest.process(getSolrClient());\n    assertEquals(0, addFieldTypeSecondResponse.getStatus());\n    assertNotNull(addFieldTypeSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","sourceOld":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", \"failureInt\");\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    SchemaResponse.UpdateResponse addFieldTypeSecondResponse = addFieldTypeRequest.process(getSolrClient());\n    assertEquals(0, addFieldTypeSecondResponse.getStatus());\n    assertNotNull(addFieldTypeSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","sourceNew":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", \"failureInt\");\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    SchemaResponse.UpdateResponse addFieldTypeSecondResponse = addFieldTypeRequest.process(getSolrClient());\n    assertEquals(0, addFieldTypeSecondResponse.getStatus());\n    assertNotNull(addFieldTypeSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","sourceOld":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", \"failureInt\");\n    fieldTypeAttributes.put(\"class\", \"solr.TrieIntField\");\n    fieldTypeAttributes.put(\"precisionStep\", 0);\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    SchemaResponse.UpdateResponse addFieldTypeSecondResponse = addFieldTypeRequest.process(getSolrClient());\n    assertEquals(0, addFieldTypeSecondResponse.getStatus());\n    assertNotNull(addFieldTypeSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc375e2ab3b7cc0344f8cd85189e42b87fce01a3","date":1515516930,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","sourceNew":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldName = \"failureInt\";\n    fieldTypeAttributes.put(\"name\", fieldName);\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    assertFailedSchemaResponse(() -> addFieldTypeRequest.process(getSolrClient()),\n        \"Field type '\" + fieldName + \"' already exists.\");\n  }\n\n","sourceOld":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", \"failureInt\");\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    SchemaResponse.UpdateResponse addFieldTypeSecondResponse = addFieldTypeRequest.process(getSolrClient());\n    assertEquals(0, addFieldTypeSecondResponse.getStatus());\n    assertNotNull(addFieldTypeSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#addFieldTypeShouldntBeCalledTwiceWithTheSameName().mjava","sourceNew":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    String fieldName = \"failureInt\";\n    fieldTypeAttributes.put(\"name\", fieldName);\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    assertFailedSchemaResponse(() -> addFieldTypeRequest.process(getSolrClient()),\n        \"Field type '\" + fieldName + \"' already exists.\");\n  }\n\n","sourceOld":"  @Test\n  public void addFieldTypeShouldntBeCalledTwiceWithTheSameName() throws Exception {\n    Map<String, Object> fieldTypeAttributes = new LinkedHashMap<>();\n    fieldTypeAttributes.put(\"name\", \"failureInt\");\n    fieldTypeAttributes.put(\"class\",  RANDOMIZED_NUMERIC_FIELDTYPES.get(Integer.class));\n    fieldTypeAttributes.put(\"omitNorms\", true);\n    fieldTypeAttributes.put(\"positionIncrementGap\", 0);\n    FieldTypeDefinition fieldTypeDefinition = new FieldTypeDefinition();\n    fieldTypeDefinition.setAttributes(fieldTypeAttributes);\n    SchemaRequest.AddFieldType addFieldTypeRequest =\n        new SchemaRequest.AddFieldType(fieldTypeDefinition);\n    SchemaResponse.UpdateResponse addFieldTypeFirstResponse = addFieldTypeRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldTypeFirstResponse);\n\n    SchemaResponse.UpdateResponse addFieldTypeSecondResponse = addFieldTypeRequest.process(getSolrClient());\n    assertEquals(0, addFieldTypeSecondResponse.getStatus());\n    assertNotNull(addFieldTypeSecondResponse.getResponse().get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","dc375e2ab3b7cc0344f8cd85189e42b87fce01a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf91b76bbc05503ac96589cc801c8e65dff0e564":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","cf91b76bbc05503ac96589cc801c8e65dff0e564"],"dc375e2ab3b7cc0344f8cd85189e42b87fce01a3":["28288370235ed02234a64753cdbf0c6ec096304a"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","cf91b76bbc05503ac96589cc801c8e65dff0e564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"cf91b76bbc05503ac96589cc801c8e65dff0e564":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"dc375e2ab3b7cc0344f8cd85189e42b87fce01a3":["b94236357aaa22b76c10629851fe4e376e0cea82"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["cf91b76bbc05503ac96589cc801c8e65dff0e564","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","dc375e2ab3b7cc0344f8cd85189e42b87fce01a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}