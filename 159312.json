{"path":"src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","commits":[{"id":"4404b358bf2902b2da0b8eef5ea0a68acd37674b","date":1247143497,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","pathOld":"/dev/null","sourceNew":"  synchronized boolean doApplyDeletes() {\n    // Very similar to deletesFull(), except we don't count\n    // numBytesAlloc, because we are checking whether\n    // deletes (alone) are consuming too many resources now\n    // and thus should be applied.  We apply deletes if RAM\n    // usage is > 1/2 of our allowed RAM buffer, to prevent\n    // too-frequent flushing of a long tail of tiny segments\n    // when merges (which always apply deletes) are\n    // infrequent.\n    return (ramBufferSize != IndexWriter.DISABLE_AUTO_FLUSH &&\n            (deletesInRAM.bytesUsed + deletesFlushed.bytesUsed) >= ramBufferSize/2) ||\n      (maxBufferedDeleteTerms != IndexWriter.DISABLE_AUTO_FLUSH &&\n       ((deletesInRAM.size() + deletesFlushed.size()) >= maxBufferedDeleteTerms));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","sourceNew":"  synchronized boolean doApplyDeletes() {\n    // Very similar to deletesFull(), except we don't count\n    // numBytesAlloc, because we are checking whether\n    // deletes (alone) are consuming too many resources now\n    // and thus should be applied.  We apply deletes if RAM\n    // usage is > 1/2 of our allowed RAM buffer, to prevent\n    // too-frequent flushing of a long tail of tiny segments\n    // when merges (which always apply deletes) are\n    // infrequent.\n    return (ramBufferSize != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n            (deletesInRAM.bytesUsed + deletesFlushed.bytesUsed) >= ramBufferSize/2) ||\n      (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n       ((deletesInRAM.size() + deletesFlushed.size()) >= maxBufferedDeleteTerms));\n  }\n\n","sourceOld":"  synchronized boolean doApplyDeletes() {\n    // Very similar to deletesFull(), except we don't count\n    // numBytesAlloc, because we are checking whether\n    // deletes (alone) are consuming too many resources now\n    // and thus should be applied.  We apply deletes if RAM\n    // usage is > 1/2 of our allowed RAM buffer, to prevent\n    // too-frequent flushing of a long tail of tiny segments\n    // when merges (which always apply deletes) are\n    // infrequent.\n    return (ramBufferSize != IndexWriter.DISABLE_AUTO_FLUSH &&\n            (deletesInRAM.bytesUsed + deletesFlushed.bytesUsed) >= ramBufferSize/2) ||\n      (maxBufferedDeleteTerms != IndexWriter.DISABLE_AUTO_FLUSH &&\n       ((deletesInRAM.size() + deletesFlushed.size()) >= maxBufferedDeleteTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","sourceNew":"  synchronized boolean doApplyDeletes() {\n    // Very similar to deletesFull(), except we don't count\n    // numBytesAlloc, because we are checking whether\n    // deletes (alone) are consuming too many resources now\n    // and thus should be applied.  We apply deletes if RAM\n    // usage is > 1/2 of our allowed RAM buffer, to prevent\n    // too-frequent flushing of a long tail of tiny segments\n    // when merges (which always apply deletes) are\n    // infrequent.\n    return (ramBufferSize != IndexWriter.DISABLE_AUTO_FLUSH &&\n            (deletesInRAM.bytesUsed + deletesFlushed.bytesUsed) >= ramBufferSize/2) ||\n      (maxBufferedDeleteTerms != IndexWriter.DISABLE_AUTO_FLUSH &&\n       ((deletesInRAM.size() + deletesFlushed.size()) >= maxBufferedDeleteTerms));\n  }\n\n","sourceOld":"  synchronized boolean doApplyDeletes() {\n    // Very similar to deletesFull(), except we don't count\n    // numBytesAlloc, because we are checking whether\n    // deletes (alone) are consuming too many resources now\n    // and thus should be applied.  We apply deletes if RAM\n    // usage is > 1/2 of our allowed RAM buffer, to prevent\n    // too-frequent flushing of a long tail of tiny segments\n    // when merges (which always apply deletes) are\n    // infrequent.\n    return (ramBufferSize != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n            (deletesInRAM.bytesUsed + deletesFlushed.bytesUsed) >= ramBufferSize/2) ||\n      (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n       ((deletesInRAM.size() + deletesFlushed.size()) >= maxBufferedDeleteTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","sourceNew":"  synchronized boolean doApplyDeletes() {\n    // Very similar to deletesFull(), except we don't count\n    // numBytesAlloc, because we are checking whether\n    // deletes (alone) are consuming too many resources now\n    // and thus should be applied.  We apply deletes if RAM\n    // usage is > 1/2 of our allowed RAM buffer, to prevent\n    // too-frequent flushing of a long tail of tiny segments\n    // when merges (which always apply deletes) are\n    // infrequent.\n    return (ramBufferSize != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n            (deletesInRAM.bytesUsed + deletesFlushed.bytesUsed) >= ramBufferSize/2) ||\n      (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n       ((deletesInRAM.size() + deletesFlushed.size()) >= maxBufferedDeleteTerms));\n  }\n\n","sourceOld":"  synchronized boolean doApplyDeletes() {\n    // Very similar to deletesFull(), except we don't count\n    // numBytesAlloc, because we are checking whether\n    // deletes (alone) are consuming too many resources now\n    // and thus should be applied.  We apply deletes if RAM\n    // usage is > 1/2 of our allowed RAM buffer, to prevent\n    // too-frequent flushing of a long tail of tiny segments\n    // when merges (which always apply deletes) are\n    // infrequent.\n    return (ramBufferSize != IndexWriter.DISABLE_AUTO_FLUSH &&\n            (deletesInRAM.bytesUsed + deletesFlushed.bytesUsed) >= ramBufferSize/2) ||\n      (maxBufferedDeleteTerms != IndexWriter.DISABLE_AUTO_FLUSH &&\n       ((deletesInRAM.size() + deletesFlushed.size()) >= maxBufferedDeleteTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#doApplyDeletes().mjava","sourceNew":"  synchronized boolean doApplyDeletes() {\n    // Very similar to deletesFull(), except we don't count\n    // numBytesAlloc, because we are checking whether\n    // deletes (alone) are consuming too many resources now\n    // and thus should be applied.  We apply deletes if RAM\n    // usage is > 1/2 of our allowed RAM buffer, to prevent\n    // too-frequent flushing of a long tail of tiny segments\n    // when merges (which always apply deletes) are\n    // infrequent.\n    return (ramBufferSize != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n            (deletesInRAM.bytesUsed + deletesFlushed.bytesUsed) >= ramBufferSize/2) ||\n      (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n       ((deletesInRAM.size() + deletesFlushed.size()) >= maxBufferedDeleteTerms));\n  }\n\n","sourceOld":"  synchronized boolean doApplyDeletes() {\n    // Very similar to deletesFull(), except we don't count\n    // numBytesAlloc, because we are checking whether\n    // deletes (alone) are consuming too many resources now\n    // and thus should be applied.  We apply deletes if RAM\n    // usage is > 1/2 of our allowed RAM buffer, to prevent\n    // too-frequent flushing of a long tail of tiny segments\n    // when merges (which always apply deletes) are\n    // infrequent.\n    return (ramBufferSize != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n            (deletesInRAM.bytesUsed + deletesFlushed.bytesUsed) >= ramBufferSize/2) ||\n      (maxBufferedDeleteTerms != IndexWriterConfig.DISABLE_AUTO_FLUSH &&\n       ((deletesInRAM.size() + deletesFlushed.size()) >= maxBufferedDeleteTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["4404b358bf2902b2da0b8eef5ea0a68acd37674b"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4404b358bf2902b2da0b8eef5ea0a68acd37674b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4404b358bf2902b2da0b8eef5ea0a68acd37674b"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4404b358bf2902b2da0b8eef5ea0a68acd37674b":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}