{"path":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","sourceOld":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","sourceOld":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","sourceOld":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) throws IOException {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && term.compareTo(currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && term.compareTo(currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","sourceOld":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && termComp.compare(term, currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && termComp.compare(term, currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LegacyNumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery.NumericRangeTermsEnum#nextSeekTerm(BytesRef).mjava","sourceNew":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && term.compareTo(currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && term.compareTo(currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","sourceOld":"    @Override\n    protected final BytesRef nextSeekTerm(BytesRef term) {\n      while (rangeBounds.size() >= 2) {\n        nextRange();\n        \n        // if the new upper bound is before the term parameter, the sub-range is never a hit\n        if (term != null && term.compareTo(currentUpperBound) > 0)\n          continue;\n        // never seek backwards, so use current term if lower bound is smaller\n        return (term != null && term.compareTo(currentLowerBound) > 0) ?\n          term : currentLowerBound;\n      }\n      \n      // no more sub-range enums available\n      assert rangeBounds.isEmpty();\n      currentLowerBound = currentUpperBound = null;\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"770342641f7b505eaa8dccdc666158bff2419109":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["770342641f7b505eaa8dccdc666158bff2419109"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}