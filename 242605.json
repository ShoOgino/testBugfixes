{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(TermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      TermAttribute termAtt = buffer.getAttribute(TermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.term();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(TermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      TermAttribute termAtt = buffer.getAttribute(TermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.term();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ee056ec8e953928ee49a691090634eed1fa4d6b","date":1274852580,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(TermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      TermAttribute termAtt = buffer.getAttribute(TermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.term();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(TermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      TermAttribute termAtt = buffer.getAttribute(TermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.term();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33e4a95ed08968b85d84e9fba82424f1fd945fbb","date":1274878310,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(TermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      TermAttribute termAtt = buffer.getAttribute(TermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.term();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(TermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      TermAttribute termAtt = buffer.getAttribute(TermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.term();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7347509fad0711ac30cb15a746e9a3830a38ebd","date":1275388513,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(TermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      TermAttribute termAtt = buffer.getAttribute(TermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.term();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.term();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.term();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f0d8e9a3f2e45eeea14a4803eaac02a0865097","date":1279565910,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":["e5dc366a7d1607715cc8f08fda777417daef8569"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","date":1305207152,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      try {\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      try {\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00746ad002a54281629e3b6f3eb39833a33f093e","date":1305306799,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      try {\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      try {\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source = this.analyzer.tokenStream(field, new StringReader(\n          text));\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["00746ad002a54281629e3b6f3eb39833a33f093e"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["a7347509fad0711ac30cb15a746e9a3830a38ebd","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","00746ad002a54281629e3b6f3eb39833a33f093e"],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"a3776dccca01c11e7046323cfad46a3b4a471233":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097","00746ad002a54281629e3b6f3eb39833a33f093e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["55f0d8e9a3f2e45eeea14a4803eaac02a0865097","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"00746ad002a54281629e3b6f3eb39833a33f093e":["e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"33e4a95ed08968b85d84e9fba82424f1fd945fbb":["a7347509fad0711ac30cb15a746e9a3830a38ebd"],"2ee056ec8e953928ee49a691090634eed1fa4d6b":["33e4a95ed08968b85d84e9fba82424f1fd945fbb"],"5f4e87790277826a2aea119328600dfb07761f32":[],"55f0d8e9a3f2e45eeea14a4803eaac02a0865097":["5f4e87790277826a2aea119328600dfb07761f32","e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"e2efdd13c0f37dbe4a292a6f98ddcf8e8f872ac4":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","00746ad002a54281629e3b6f3eb39833a33f093e"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"00746ad002a54281629e3b6f3eb39833a33f093e":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"a7347509fad0711ac30cb15a746e9a3830a38ebd":["5f4e87790277826a2aea119328600dfb07761f32","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["2ee056ec8e953928ee49a691090634eed1fa4d6b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}