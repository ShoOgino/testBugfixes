{"path":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","sourceNew":"  // we read in all the norms up front into a hashmap\n  private void readNorms(IndexInput in, int maxDoc) throws IOException {\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, FIELD);\n        String fieldName = readString(FIELD.length, scratch);\n        byte bytes[] = new byte[maxDoc];\n        for (int i = 0; i < bytes.length; i++) {\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, DOC);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, NORM);\n          bytes[i] = scratch.bytes[scratch.offset + NORM.length];\n        }\n        norms.put(fieldName, bytes);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, FIELD) || scratch.equals(END);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  // we read in all the norms up front into a hashmap\n  private void readNorms(IndexInput in, int maxDoc) throws IOException {\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, FIELD);\n        String fieldName = readString(FIELD.length, scratch);\n        byte bytes[] = new byte[maxDoc];\n        for (int i = 0; i < bytes.length; i++) {\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, DOC);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, NORM);\n          bytes[i] = scratch.bytes[scratch.offset + NORM.length];\n        }\n        norms.put(fieldName, bytes);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, FIELD) || scratch.equals(END);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsProducer#readNorms(IndexInput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextNormsReader#readNorms(IndexInput,int).mjava","sourceNew":"  // we read in all the norms up front into a hashmap\n  private void readNorms(IndexInput in, int maxDoc) throws IOException {\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, FIELD);\n        final String fieldName = readString(FIELD.length, scratch);\n        byte bytes[] = new byte[maxDoc];\n        for (int i = 0; i < bytes.length; i++) {\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, DOC);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, NORM);\n          bytes[i] = scratch.bytes[scratch.offset + NORM.length];\n        }\n        norms.put(fieldName, new NormsDocValues(new Norm(bytes)));\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, FIELD) || scratch.equals(END);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  // we read in all the norms up front into a hashmap\n  private void readNorms(IndexInput in, int maxDoc) throws IOException {\n    BytesRef scratch = new BytesRef();\n    boolean success = false;\n    try {\n      SimpleTextUtil.readLine(in, scratch);\n      while (!scratch.equals(END)) {\n        assert StringHelper.startsWith(scratch, FIELD);\n        String fieldName = readString(FIELD.length, scratch);\n        byte bytes[] = new byte[maxDoc];\n        for (int i = 0; i < bytes.length; i++) {\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, DOC);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch, NORM);\n          bytes[i] = scratch.bytes[scratch.offset + NORM.length];\n        }\n        norms.put(fieldName, bytes);\n        SimpleTextUtil.readLine(in, scratch);\n        assert StringHelper.startsWith(scratch, FIELD) || scratch.equals(END);\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}