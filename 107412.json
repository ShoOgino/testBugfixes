{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#_allPropsWriter().mjava","commits":[{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#_allPropsWriter().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","sourceNew":"  private MapWriter _allPropsWriter() {\n    BiPredicate<CharSequence, Object> p = dedupeKeyPredicate(new HashSet<>())\n        .and(NON_NULL_VAL);\n    return writer -> {\n      // XXX this is why this class should be immutable - it's a mess !!!\n\n      // propMap takes precedence because it's mutable and we can't control its\n      // contents, so a third party may override some declared fields\n      for (Map.Entry<String, Object> e : propMap.entrySet()) {\n        writer.put(e.getKey(), e.getValue(), p);\n      }\n      writer.put(ZkStateReader.CORE_NAME_PROP, core, p)\n          .put(ZkStateReader.SHARD_ID_PROP, shard, p)\n          .put(ZkStateReader.COLLECTION_PROP, collection, p)\n          .put(ZkStateReader.NODE_NAME_PROP, node, p)\n          .put(ZkStateReader.REPLICA_TYPE, type.toString(), p)\n          .put(ZkStateReader.STATE_PROP, state.toString(), p);\n    };\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    BiPredicate<CharSequence, Object> p = dedupeKeyPredicate(new HashSet<>())\n        .and(NON_NULL_VAL);\n    ew.put(name, (MapWriter) ew1 -> {\n      ew1.put(ZkStateReader.CORE_NAME_PROP, core, p)\n          .put(ZkStateReader.SHARD_ID_PROP, shard, p)\n          .put(ZkStateReader.COLLECTION_PROP, collection, p)\n          .put(ZkStateReader.NODE_NAME_PROP, node, p)\n          .put(ZkStateReader.REPLICA_TYPE, type.toString(), p);\n      for (Map.Entry<String, Object> e : variables.entrySet()) ew1.put(e.getKey(), e.getValue(), p);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"]},"commit2Childs":{"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}