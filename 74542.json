{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String,boolean,boolean).mjava","commits":[{"id":"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2","date":1490847220,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","sourceNew":"  // If the dest ends with a separator, it's a directory or non-leaf znode, so return the\n  // last element of the src to appended to the dstName.\n  private static String normalizeDest(String srcName, String dstName, boolean srcIsZk, boolean dstIsZk) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n\n    String dstSeparator = (dstIsZk) ? \"/\" : File.separator;\n    String srcSeparator = (srcIsZk) ? \"/\" : File.separator;\n\n    if (dstName.endsWith(dstSeparator)) { // Dest is a directory or non-leaf znode, append last element of the src path.\n      int pos = srcName.lastIndexOf(srcSeparator);\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n\n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","sourceOld":"  private static String normalizeDest(String srcName, String dstName) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    // Pull the last element of the src path and add it to the dst if the src does NOT end in a slash \n\n    // If the source ends in a slash, do not append the last segment to the dest\n    \n    if (dstName.endsWith(\"/\")) { // Dest is a directory.\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n    \n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f49693fcc05c1186d9b347493efa73a614f5bba7","date":1490873947,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#normalizeDest(String,String).mjava","sourceNew":"  // If the dest ends with a separator, it's a directory or non-leaf znode, so return the\n  // last element of the src to appended to the dstName.\n  private static String normalizeDest(String srcName, String dstName, boolean srcIsZk, boolean dstIsZk) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n\n    String dstSeparator = (dstIsZk) ? \"/\" : File.separator;\n    String srcSeparator = (srcIsZk) ? \"/\" : File.separator;\n\n    if (dstName.endsWith(dstSeparator)) { // Dest is a directory or non-leaf znode, append last element of the src path.\n      int pos = srcName.lastIndexOf(srcSeparator);\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n\n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","sourceOld":"  private static String normalizeDest(String srcName, String dstName) {\n    // Special handling for \".\"\n    if (dstName.equals(\".\")) {\n      return Paths.get(\".\").normalize().toAbsolutePath().toString();\n    }\n    // Pull the last element of the src path and add it to the dst if the src does NOT end in a slash \n\n    // If the source ends in a slash, do not append the last segment to the dest\n    \n    if (dstName.endsWith(\"/\")) { // Dest is a directory.\n      int pos = srcName.lastIndexOf(\"/\");\n      if (pos < 0) {\n        dstName += srcName;\n      } else {\n        dstName += srcName.substring(pos + 1);\n      }\n    }\n    \n    log.info(\"copying from '{}' to '{}'\", srcName, dstName);\n    return dstName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f49693fcc05c1186d9b347493efa73a614f5bba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"]},"commit2Childs":{"f49693fcc05c1186d9b347493efa73a614f5bba7":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f49693fcc05c1186d9b347493efa73a614f5bba7","3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2"],"3565ba5fc0dc3dd0214d263b28e5bf7e06fdbfc2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f49693fcc05c1186d9b347493efa73a614f5bba7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}