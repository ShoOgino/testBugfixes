{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateState(CloudState,String,CoreState).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateState(CloudState,String,CoreState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to assign core to the cluster\n   * @throws KeeperException \n   * @throws InterruptedException \n   */\n  private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n    String collection = coreState.getCollectionName();\n    String zkCoreNodeName = coreState.getCoreNodeName();\n    \n      String shardId;\n      if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n        shardId = AssignShard.assignShard(collection, state);\n      } else {\n        shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n      }\n      \n      Map<String,String> props = new HashMap<String,String>();\n      for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n        props.put(entry.getKey(), entry.getValue());\n      }\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      Slice slice = state.getSlice(collection, shardId);\n      Map<String,ZkNodeProps> shardProps;\n      if (slice == null) {\n        shardProps = new HashMap<String,ZkNodeProps>();\n      } else {\n        shardProps = state.getSlice(collection, shardId).getShardsCopy();\n      }\n      shardProps.put(zkCoreNodeName, zkProps);\n\n      slice = new Slice(shardId, shardProps);\n      CloudState newCloudState = updateSlice(state, collection, slice);\n      return newCloudState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateState(CloudState,String,CoreState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to assign core to the cluster\n   * @throws KeeperException \n   * @throws InterruptedException \n   */\n  private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n    String collection = coreState.getCollectionName();\n    String zkCoreNodeName = coreState.getCoreNodeName();\n    \n      String shardId;\n      if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n        shardId = AssignShard.assignShard(collection, state);\n      } else {\n        shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n      }\n      \n      Map<String,String> props = new HashMap<String,String>();\n      for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n        props.put(entry.getKey(), entry.getValue());\n      }\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      Slice slice = state.getSlice(collection, shardId);\n      Map<String,ZkNodeProps> shardProps;\n      if (slice == null) {\n        shardProps = new HashMap<String,ZkNodeProps>();\n      } else {\n        shardProps = state.getSlice(collection, shardId).getShardsCopy();\n      }\n      shardProps.put(zkCoreNodeName, zkProps);\n\n      slice = new Slice(shardId, shardProps);\n      CloudState newCloudState = updateSlice(state, collection, slice);\n      return newCloudState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateState(CloudState,String,CoreState).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try to assign core to the cluster\n   * @throws KeeperException \n   * @throws InterruptedException \n   */\n  private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n    String collection = coreState.getCollectionName();\n    String zkCoreNodeName = coreState.getCoreNodeName();\n    \n      String shardId;\n      if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n        shardId = AssignShard.assignShard(collection, state);\n      } else {\n        shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n      }\n      \n      Map<String,String> props = new HashMap<String,String>();\n      for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n        props.put(entry.getKey(), entry.getValue());\n      }\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      Slice slice = state.getSlice(collection, shardId);\n      Map<String,ZkNodeProps> shardProps;\n      if (slice == null) {\n        shardProps = new HashMap<String,ZkNodeProps>();\n      } else {\n        shardProps = state.getSlice(collection, shardId).getShardsCopy();\n      }\n      shardProps.put(zkCoreNodeName, zkProps);\n\n      slice = new Slice(shardId, shardProps);\n      CloudState newCloudState = updateSlice(state, collection, slice);\n      return newCloudState;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0492616b11aace806d95ec9df44f57a60160bf7","date":1327803775,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateState(CloudState,String,CoreState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Try to assign core to the cluster\n   * @throws KeeperException \n   * @throws InterruptedException \n   */\n  private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n    String collection = coreState.getCollectionName();\n    String zkCoreNodeName = coreState.getCoreNodeName();\n    \n      String shardId;\n      if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n        shardId = AssignShard.assignShard(collection, state);\n      } else {\n        shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n      }\n      \n      Map<String,String> props = new HashMap<String,String>();\n      for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n        props.put(entry.getKey(), entry.getValue());\n      }\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      Slice slice = state.getSlice(collection, shardId);\n      Map<String,ZkNodeProps> shardProps;\n      if (slice == null) {\n        shardProps = new HashMap<String,ZkNodeProps>();\n      } else {\n        shardProps = state.getSlice(collection, shardId).getShardsCopy();\n      }\n      shardProps.put(zkCoreNodeName, zkProps);\n\n      slice = new Slice(shardId, shardProps);\n      CloudState newCloudState = updateSlice(state, collection, slice);\n      return newCloudState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f4a0c306589f8607dc4b33f7abaf753db19f76e","date":1327836084,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateState(CloudState,String,CoreState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Try to assign core to the cluster\n   * @throws KeeperException \n   * @throws InterruptedException \n   */\n  private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n    String collection = coreState.getCollectionName();\n    String zkCoreNodeName = coreState.getCoreNodeName();\n    \n      String shardId;\n      if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n        shardId = AssignShard.assignShard(collection, state);\n      } else {\n        shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n      }\n      \n      Map<String,String> props = new HashMap<String,String>();\n      for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n        props.put(entry.getKey(), entry.getValue());\n      }\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      Slice slice = state.getSlice(collection, shardId);\n      Map<String,ZkNodeProps> shardProps;\n      if (slice == null) {\n        shardProps = new HashMap<String,ZkNodeProps>();\n      } else {\n        shardProps = state.getSlice(collection, shardId).getShardsCopy();\n      }\n      shardProps.put(zkCoreNodeName, zkProps);\n\n      slice = new Slice(shardId, shardProps);\n      CloudState newCloudState = updateSlice(state, collection, slice);\n      return newCloudState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer#updateState(CloudState,String,CoreState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Try to assign core to the cluster\n   * @throws KeeperException \n   * @throws InterruptedException \n   */\n  private CloudState updateState(CloudState state, String nodeName, CoreState coreState) throws KeeperException, InterruptedException {\n    String collection = coreState.getCollectionName();\n    String zkCoreNodeName = coreState.getCoreNodeName();\n    \n      String shardId;\n      if (coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP) == null) {\n        shardId = AssignShard.assignShard(collection, state);\n      } else {\n        shardId = coreState.getProperties().get(ZkStateReader.SHARD_ID_PROP);\n      }\n      \n      Map<String,String> props = new HashMap<String,String>();\n      for (Entry<String,String> entry : coreState.getProperties().entrySet()) {\n        props.put(entry.getKey(), entry.getValue());\n      }\n      ZkNodeProps zkProps = new ZkNodeProps(props);\n      Slice slice = state.getSlice(collection, shardId);\n      Map<String,ZkNodeProps> shardProps;\n      if (slice == null) {\n        shardProps = new HashMap<String,ZkNodeProps>();\n      } else {\n        shardProps = state.getSlice(collection, shardId).getShardsCopy();\n      }\n      shardProps.put(zkCoreNodeName, zkProps);\n\n      slice = new Slice(shardId, shardProps);\n      CloudState newCloudState = updateSlice(state, collection, slice);\n      return newCloudState;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","d0492616b11aace806d95ec9df44f57a60160bf7"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0492616b11aace806d95ec9df44f57a60160bf7":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0492616b11aace806d95ec9df44f57a60160bf7"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["8f4a0c306589f8607dc4b33f7abaf753db19f76e"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","d0492616b11aace806d95ec9df44f57a60160bf7"],"d0492616b11aace806d95ec9df44f57a60160bf7":["fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8f4a0c306589f8607dc4b33f7abaf753db19f76e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","8f4a0c306589f8607dc4b33f7abaf753db19f76e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}