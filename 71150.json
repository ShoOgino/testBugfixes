{"path":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    reader = IndexReader.open(directory, true);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    reader = IndexReader.open(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    reader = IndexReader.open(directory, true);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    reader = IndexReader.open(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be20f9fed1d3edcb1c84abcc39df87a90fab22df","date":1275590285,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(500));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      writer.addDocument(doc);\n    }\n    writer.close();\n    reader = IndexReader.open(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(500));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    IndexWriter writer= new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(500));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    NUM_DOCS = 1000 * _TestUtil.getRandomMultiplier();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    MockRAMDirectory directory = new MockRAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = newDirectory(random);\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    MockRAMDirectory directory = new MockRAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    directory = newDirectory(random);\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random r = newRandom();\n    RAMDirectory directory = new RAMDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(r, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(new Field(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (r.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && r.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[r.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(r, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(r, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(new Field(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory);\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5cdad9e745f40d1e174b382bb7d664ca53d9138","date":1310498637,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9c530f0c3eb63ee033b10be793c129a67dc918","date":1313516656,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        String s = null;\n        if (i > 0 && random.nextInt(3) == 1) {\n          // reuse past string -- try to find one that's not null\n          for(int iter=0;iter<10 && s==null;iter++) {\n            s = unicodeStrings[random.nextInt(i)];\n          }\n          if (s == null) {\n            s = _TestUtil.randomUnicodeString(random, 250);\n          }\n        } else {\n          s = _TestUtil.randomUnicodeString(random, 250);\n        }\n        unicodeStrings[i] = s;\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8c1f822828761e5a9b2cea6da3181221bb7d31d","date":1313547136,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    System.out.println(\"WARNING: NUM_ORDS is wired to 2, test fails otherwise!!!!!!!!!!!!!!!!!!!!!\");\n    NUM_ORDS = 2; //atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938800c4bb3199c67e61d8d0a9fb3699ab09a7d2","date":1313569916,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    System.out.println(\"WARNING: NUM_ORDS is wired to 2, test fails otherwise!!!!!!!!!!!!!!!!!!!!!\");\n    NUM_ORDS = 2; //atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), Field.Store.NO, Field.Index.NOT_ANALYZED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    writer.w.setInfoStream(VERBOSE ? System.out : null);\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\").setIntValue(i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2","fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCache#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFieldCache#setUp().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    NUM_DOCS = atLeast(500);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\").setIntValue(i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    NUM_DOCS = atLeast(1000);\n    NUM_ORDS = atLeast(2);\n    directory = newDirectory();\n    RandomIndexWriter writer= new RandomIndexWriter(random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    long theLong = Long.MAX_VALUE;\n    double theDouble = Double.MAX_VALUE;\n    byte theByte = Byte.MAX_VALUE;\n    short theShort = Short.MAX_VALUE;\n    int theInt = Integer.MAX_VALUE;\n    float theFloat = Float.MAX_VALUE;\n    unicodeStrings = new String[NUM_DOCS];\n    multiValued = new BytesRef[NUM_DOCS][NUM_ORDS];\n    if (VERBOSE) {\n      System.out.println(\"TEST: setUp\");\n    }\n    for (int i = 0; i < NUM_DOCS; i++){\n      Document doc = new Document();\n      doc.add(newField(\"theLong\", String.valueOf(theLong--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theDouble\", String.valueOf(theDouble--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theByte\", String.valueOf(theByte--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theShort\", String.valueOf(theShort--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theInt\", String.valueOf(theInt--), StringField.TYPE_UNSTORED));\n      doc.add(newField(\"theFloat\", String.valueOf(theFloat--), StringField.TYPE_UNSTORED));\n      if (i%2 == 0) {\n        doc.add(newField(\"sparse\", String.valueOf(i), StringField.TYPE_UNSTORED));\n      }\n\n      if (i%2 == 0) {\n        doc.add(new NumericField(\"numInt\").setIntValue(i));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(40) != 17) {\n        unicodeStrings[i] = generateString(i);\n        doc.add(newField(\"theRandomUnicodeString\", unicodeStrings[i], StringField.TYPE_STORED));\n      }\n\n      // sometimes skip the field:\n      if (random.nextInt(10) != 8) {\n        for (int j = 0; j < NUM_ORDS; j++) {\n          String newValue = generateString(i);\n          multiValued[i][j] = new BytesRef(newValue);\n          doc.add(newField(\"theRandomUnicodeMultiValuedField\", newValue, StringField.TYPE_STORED));\n        }\n        Arrays.sort(multiValued[i]);\n      }\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["43b04c27924fe393e38e9f0986e32c634f261859"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"382fe3a6ca9745891afebda9b9a57cc158305545":["06584e6e98d592b34e1329b384182f368d2025e8"],"c19f985e36a65cc969e8e564fe337a0d41512075":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"43b04c27924fe393e38e9f0986e32c634f261859":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"c084e47df29de3330311d69dabf515ceaa989512":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"938800c4bb3199c67e61d8d0a9fb3699ab09a7d2":["a8c1f822828761e5a9b2cea6da3181221bb7d31d"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["43b04c27924fe393e38e9f0986e32c634f261859","c19f985e36a65cc969e8e564fe337a0d41512075"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["938800c4bb3199c67e61d8d0a9fb3699ab09a7d2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["e79a6d080bdd5b2a8f56342cf571b5476de04180","c19f985e36a65cc969e8e564fe337a0d41512075"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b9c530f0c3eb63ee033b10be793c129a67dc918":["a5cdad9e745f40d1e174b382bb7d664ca53d9138"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"a5cdad9e745f40d1e174b382bb7d664ca53d9138":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"06584e6e98d592b34e1329b384182f368d2025e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["382fe3a6ca9745891afebda9b9a57cc158305545"],"5f4e87790277826a2aea119328600dfb07761f32":["be20f9fed1d3edcb1c84abcc39df87a90fab22df","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a8c1f822828761e5a9b2cea6da3181221bb7d31d":["4b9c530f0c3eb63ee033b10be793c129a67dc918"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be580b58bcc650d428f3f22de81cadcf51d650a"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["43b04c27924fe393e38e9f0986e32c634f261859"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["c19f985e36a65cc969e8e564fe337a0d41512075","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"382fe3a6ca9745891afebda9b9a57cc158305545":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"43b04c27924fe393e38e9f0986e32c634f261859":["b1add9ddc0005b07550d4350720aac22dc9886b3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"938800c4bb3199c67e61d8d0a9fb3699ab09a7d2":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a5cdad9e745f40d1e174b382bb7d664ca53d9138","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["06584e6e98d592b34e1329b384182f368d2025e8"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"be20f9fed1d3edcb1c84abcc39df87a90fab22df":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"4b9c530f0c3eb63ee033b10be793c129a67dc918":["a8c1f822828761e5a9b2cea6da3181221bb7d31d"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"a5cdad9e745f40d1e174b382bb7d664ca53d9138":["4b9c530f0c3eb63ee033b10be793c129a67dc918"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"06584e6e98d592b34e1329b384182f368d2025e8":["382fe3a6ca9745891afebda9b9a57cc158305545"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"962d04139994fce5193143ef35615499a9a96d78":[],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a8c1f822828761e5a9b2cea6da3181221bb7d31d":["938800c4bb3199c67e61d8d0a9fb3699ab09a7d2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}