{"path":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#testPerformance().mjava","commits":[{"id":"0da80a9f42f3ff24d68eedd705a763a1bcdd179d","date":1198163279,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#testPerformance().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void testPerformance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuffer buffer = new StringBuffer();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      ModuloSinkTokenizer sink = new ModuloSinkTokenizer(tokCount[k], 100);\n      Token next = new Token();\n      TokenStream result = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n      while ((next = result.next(next)) != null) {\n      }\n      result = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), 100);\n      next = new Token();\n      List tmp = new ArrayList();\n      while ((next = result.next(next)) != null) {\n        tmp.add(next.clone());\n      }\n      List sinkList = sink.getTokens();\n      assertTrue(\"tmp Size: \" + tmp.size() + \" is not: \" + sinkList.size(), tmp.size() == sinkList.size());\n      for (int i = 0; i < tmp.size(); i++) {\n        Token tfTok = (Token) tmp.get(i);\n        Token sinkTok = (Token) sinkList.get(i);\n        assertTrue(tfTok.termText() + \" is not equal to \" + sinkTok.termText() + \" at token: \" + i, tfTok.termText().equals(sinkTok.termText()) == true);\n      }\n      //simulate two fields, each being analyzed once, for 20 documents\n\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          next = new Token();\n          result = new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString())));\n          while ((next = result.next(next)) != null) {\n            tfPos += next.getPositionIncrement();\n          }\n          next = new Token();\n          result = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), modCounts[j]);\n          while ((next = result.next(next)) != null) {\n            tfPos += next.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          sink = new ModuloSinkTokenizer(tokCount[k], modCounts[j]);\n          next = new Token();\n          result = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n          while ((next = result.next(next)) != null) {\n            sinkPos += next.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          result = sink;\n          while ((next = result.next(next)) != null) {\n            sinkPos += next.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#testPerformance().mjava","pathOld":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#testPerformance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void testPerformance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuffer buffer = new StringBuffer();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      ModuloSinkTokenizer sink = new ModuloSinkTokenizer(tokCount[k], 100);\n      final Token reusableToken = new Token();\n      TokenStream stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n      while (stream.next(reusableToken) != null) {\n      }\n      stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), 100);\n      List tmp = new ArrayList();\n      for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n        tmp.add(nextToken.clone());\n      }\n      List sinkList = sink.getTokens();\n      assertTrue(\"tmp Size: \" + tmp.size() + \" is not: \" + sinkList.size(), tmp.size() == sinkList.size());\n      for (int i = 0; i < tmp.size(); i++) {\n        Token tfTok = (Token) tmp.get(i);\n        Token sinkTok = (Token) sinkList.get(i);\n        assertTrue(tfTok.term() + \" is not equal to \" + sinkTok.term() + \" at token: \" + i, tfTok.term().equals(sinkTok.term()) == true);\n      }\n      //simulate two fields, each being analyzed once, for 20 documents\n\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString())));\n          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n            tfPos += nextToken.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), modCounts[j]);\n          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n            tfPos += nextToken.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          sink = new ModuloSinkTokenizer(tokCount[k], modCounts[j]);\n          stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n            sinkPos += nextToken.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          stream = sink;\n          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n            sinkPos += nextToken.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void testPerformance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuffer buffer = new StringBuffer();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      ModuloSinkTokenizer sink = new ModuloSinkTokenizer(tokCount[k], 100);\n      Token next = new Token();\n      TokenStream result = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n      while ((next = result.next(next)) != null) {\n      }\n      result = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), 100);\n      next = new Token();\n      List tmp = new ArrayList();\n      while ((next = result.next(next)) != null) {\n        tmp.add(next.clone());\n      }\n      List sinkList = sink.getTokens();\n      assertTrue(\"tmp Size: \" + tmp.size() + \" is not: \" + sinkList.size(), tmp.size() == sinkList.size());\n      for (int i = 0; i < tmp.size(); i++) {\n        Token tfTok = (Token) tmp.get(i);\n        Token sinkTok = (Token) sinkList.get(i);\n        assertTrue(tfTok.termText() + \" is not equal to \" + sinkTok.termText() + \" at token: \" + i, tfTok.termText().equals(sinkTok.termText()) == true);\n      }\n      //simulate two fields, each being analyzed once, for 20 documents\n\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          next = new Token();\n          result = new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString())));\n          while ((next = result.next(next)) != null) {\n            tfPos += next.getPositionIncrement();\n          }\n          next = new Token();\n          result = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), modCounts[j]);\n          while ((next = result.next(next)) != null) {\n            tfPos += next.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          sink = new ModuloSinkTokenizer(tokCount[k], modCounts[j]);\n          next = new Token();\n          result = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n          while ((next = result.next(next)) != null) {\n            sinkPos += next.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          result = sink;\n          while ((next = result.next(next)) != null) {\n            sinkPos += next.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#testPerformance().mjava","pathOld":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#testPerformance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void testPerformance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuffer buffer = new StringBuffer();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      ModuloSinkTokenizer sink = new ModuloSinkTokenizer(tokCount[k], 100);\n      TokenStream stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n      while (stream.incrementToken()) {\n      }\n      stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), 100);\n      List tmp = new ArrayList();\n      while (stream.incrementToken()) {\n        tmp.add(stream.captureState());\n      }\n      List sinkList = sink.getTokens();\n      assertTrue(\"tmp Size: \" + tmp.size() + \" is not: \" + sinkList.size(), tmp.size() == sinkList.size());\n      for (int i = 0; i < tmp.size(); i++) {\n        AttributeSource tfTok = (AttributeSource) tmp.get(i);\n        AttributeSource sinkTok = (AttributeSource) sinkList.get(i);\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      //simulate two fields, each being analyzed once, for 20 documents\n\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          sink = new ModuloSinkTokenizer(tokCount[k], modCounts[j]);\n          stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          stream = sink;\n          posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void testPerformance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuffer buffer = new StringBuffer();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      ModuloSinkTokenizer sink = new ModuloSinkTokenizer(tokCount[k], 100);\n      final Token reusableToken = new Token();\n      TokenStream stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n      while (stream.next(reusableToken) != null) {\n      }\n      stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), 100);\n      List tmp = new ArrayList();\n      for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n        tmp.add(nextToken.clone());\n      }\n      List sinkList = sink.getTokens();\n      assertTrue(\"tmp Size: \" + tmp.size() + \" is not: \" + sinkList.size(), tmp.size() == sinkList.size());\n      for (int i = 0; i < tmp.size(); i++) {\n        Token tfTok = (Token) tmp.get(i);\n        Token sinkTok = (Token) sinkList.get(i);\n        assertTrue(tfTok.term() + \" is not equal to \" + sinkTok.term() + \" at token: \" + i, tfTok.term().equals(sinkTok.term()) == true);\n      }\n      //simulate two fields, each being analyzed once, for 20 documents\n\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString())));\n          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n            tfPos += nextToken.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), modCounts[j]);\n          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n            tfPos += nextToken.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          sink = new ModuloSinkTokenizer(tokCount[k], modCounts[j]);\n          stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n            sinkPos += nextToken.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          stream = sink;\n          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n            sinkPos += nextToken.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc","date":1243692318,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestTeeTokenFilter#doTestPerformance().mjava","pathOld":"src/test/org/apache/lucene/analysis/TeeSinkTokenTest#testPerformance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void doTestPerformance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuffer buffer = new StringBuffer();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      ModuloSinkTokenizer sink = new ModuloSinkTokenizer(tokCount[k], 100);\n      TokenStream stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n      while (stream.incrementToken()) {\n      }\n      stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), 100);\n      List tmp = new ArrayList();\n      while (stream.incrementToken()) {\n        tmp.add(stream.captureState());\n      }\n      List sinkList = sink.getTokens();\n      assertTrue(\"tmp Size: \" + tmp.size() + \" is not: \" + sinkList.size(), tmp.size() == sinkList.size());\n      for (int i = 0; i < tmp.size(); i++) {\n        AttributeSource tfTok = (AttributeSource) tmp.get(i);\n        AttributeSource sinkTok = (AttributeSource) sinkList.get(i);\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      //simulate two fields, each being analyzed once, for 20 documents\n\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          sink = new ModuloSinkTokenizer(tokCount[k], modCounts[j]);\n          stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          stream = sink;\n          posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void testPerformance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuffer buffer = new StringBuffer();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      ModuloSinkTokenizer sink = new ModuloSinkTokenizer(tokCount[k], 100);\n      TokenStream stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n      while (stream.incrementToken()) {\n      }\n      stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), 100);\n      List tmp = new ArrayList();\n      while (stream.incrementToken()) {\n        tmp.add(stream.captureState());\n      }\n      List sinkList = sink.getTokens();\n      assertTrue(\"tmp Size: \" + tmp.size() + \" is not: \" + sinkList.size(), tmp.size() == sinkList.size());\n      for (int i = 0; i < tmp.size(); i++) {\n        AttributeSource tfTok = (AttributeSource) tmp.get(i);\n        AttributeSource sinkTok = (AttributeSource) sinkList.get(i);\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      //simulate two fields, each being analyzed once, for 20 documents\n\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          sink = new ModuloSinkTokenizer(tokCount[k], modCounts[j]);\n          stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);\n          PositionIncrementAttribute posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          stream = sink;\n          posIncrAtt = (PositionIncrementAttribute) stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["0da80a9f42f3ff24d68eedd705a763a1bcdd179d"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0da80a9f42f3ff24d68eedd705a763a1bcdd179d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0da80a9f42f3ff24d68eedd705a763a1bcdd179d"],"0da80a9f42f3ff24d68eedd705a763a1bcdd179d":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"1f7d76c5e8bcee481159c0dbc4aa05f88642c0cc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}