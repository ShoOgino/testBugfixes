{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getRangeQuery(String,String,String,boolean).mjava","commits":[{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getRangeQuery(String,String,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getRangeQuery(String field,\r\n                                String part1,\r\n                                String part2,\r\n                                boolean inclusive) throws ParseException\r\n  {\r\n    if (lowercaseExpandedTerms) {\r\n      part1 = part1.toLowerCase();\r\n      part2 = part2.toLowerCase();\r\n    }\r\n    try {\r\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\r\n      df.setLenient(true);\r\n      Date d1 = df.parse(part1);\r\n      Date d2 = df.parse(part2);\r\n      if (inclusive) {\r\n        // The user can only specify the date, not the time, so make sure\r\n        // the time is set to the latest possible time of that date to really\r\n        // include all documents:\r\n        Calendar cal = Calendar.getInstance(locale);\r\n        cal.setTime(d2);\r\n        cal.set(Calendar.HOUR_OF_DAY, 23);\r\n        cal.set(Calendar.MINUTE, 59);\r\n        cal.set(Calendar.SECOND, 59);\r\n        cal.set(Calendar.MILLISECOND, 999);\r\n        d2 = cal.getTime();\r\n      }\r\n      DateTools.Resolution resolution = getDateResolution(field);\r\n      if (resolution == null) {\r\n        // no default or field specific date resolution has been set,\r\n        // use deprecated DateField to maintain compatibility with\r\n        // pre-1.9 Lucene versions.\r\n        part1 = DateField.dateToString(d1);\r\n        part2 = DateField.dateToString(d2);\r\n      } else {\r\n        part1 = DateTools.dateToString(d1, resolution);\r\n        part2 = DateTools.dateToString(d2, resolution);\r\n      }\r\n    }\r\n    catch (Exception e) { }\r\n\r\n    return newRangeQuery(field, part1, part2, inclusive);\r\n  }\r\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRangeQuery(String field,\n                                String part1,\n                                String part2,\n                                boolean inclusive) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      part1 = part1.toLowerCase();\n      part2 = part2.toLowerCase();\n    }\n    try {\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n      df.setLenient(true);\n      Date d1 = df.parse(part1);\n      Date d2 = df.parse(part2);\n      if (inclusive) {\n        // The user can only specify the date, not the time, so make sure\n        // the time is set to the latest possible time of that date to really\n        // include all documents:\n        Calendar cal = Calendar.getInstance(locale);\n        cal.setTime(d2);\n        cal.set(Calendar.HOUR_OF_DAY, 23);\n        cal.set(Calendar.MINUTE, 59);\n        cal.set(Calendar.SECOND, 59);\n        cal.set(Calendar.MILLISECOND, 999);\n        d2 = cal.getTime();\n      }\n      DateTools.Resolution resolution = getDateResolution(field);\n      if (resolution == null) {\n        // no default or field specific date resolution has been set,\n        // use deprecated DateField to maintain compatibility with\n        // pre-1.9 Lucene versions.\n        part1 = DateField.dateToString(d1);\n        part2 = DateField.dateToString(d2);\n      } else {\n        part1 = DateTools.dateToString(d1, resolution);\n        part2 = DateTools.dateToString(d2, resolution);\n      }\n    }\n    catch (Exception e) { }\n\n    return newRangeQuery(field, part1, part2, inclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getRangeQuery(String,String,String,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getRangeQuery(String,String,String,boolean).mjava","sourceNew":"  @Deprecated\r\n  protected final Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws MethodRemovedUseAnother {return null;}\r\n\n","sourceOld":"  /**\r\n   * @exception org.apache.lucene.queryParser.ParseException throw in overridden method to disallow\r\n   */\r\n  protected Query getRangeQuery(String field,\r\n                                String part1,\r\n                                String part2,\r\n                                boolean inclusive) throws ParseException\r\n  {\r\n    if (lowercaseExpandedTerms) {\r\n      part1 = part1.toLowerCase();\r\n      part2 = part2.toLowerCase();\r\n    }\r\n    try {\r\n      DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\r\n      df.setLenient(true);\r\n      Date d1 = df.parse(part1);\r\n      Date d2 = df.parse(part2);\r\n      if (inclusive) {\r\n        // The user can only specify the date, not the time, so make sure\r\n        // the time is set to the latest possible time of that date to really\r\n        // include all documents:\r\n        Calendar cal = Calendar.getInstance(locale);\r\n        cal.setTime(d2);\r\n        cal.set(Calendar.HOUR_OF_DAY, 23);\r\n        cal.set(Calendar.MINUTE, 59);\r\n        cal.set(Calendar.SECOND, 59);\r\n        cal.set(Calendar.MILLISECOND, 999);\r\n        d2 = cal.getTime();\r\n      }\r\n      DateTools.Resolution resolution = getDateResolution(field);\r\n      if (resolution == null) {\r\n        // no default or field specific date resolution has been set,\r\n        // use deprecated DateField to maintain compatibility with\r\n        // pre-1.9 Lucene versions.\r\n        part1 = DateField.dateToString(d1);\r\n        part2 = DateField.dateToString(d2);\r\n      } else {\r\n        part1 = DateTools.dateToString(d1, resolution);\r\n        part2 = DateTools.dateToString(d2, resolution);\r\n      }\r\n    }\r\n    catch (Exception e) { }\r\n\r\n    return newRangeQuery(field, part1, part2, inclusive);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getRangeQuery(String,String,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Deprecated\r\n  protected final Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws MethodRemovedUseAnother {return null;}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  @Deprecated\r\n  protected final Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws MethodRemovedUseAnother {return null;}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#getRangeQuery(String,String,String,boolean).mjava","sourceNew":null,"sourceOld":"  @Deprecated\r\n  protected final Query getRangeQuery(String field, String part1, String part2, boolean inclusive) throws MethodRemovedUseAnother {return null;}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e9bbb27241bcf9645bb2f724c137537aa69918a":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"3bb13258feba31ab676502787ab2e1779f129b7a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["4e9bbb27241bcf9645bb2f724c137537aa69918a"]},"commit2Childs":{"4e9bbb27241bcf9645bb2f724c137537aa69918a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["4e9bbb27241bcf9645bb2f724c137537aa69918a"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}