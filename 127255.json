{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testStatsStream().mjava","commits":[{"id":"0ac446a120a3c5f1ac22f9a866256ad428c1821b","date":1447203034,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testStatsStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9fe3175bbaa122d67f736a75c2984617c502cc0","date":1490722938,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b741b54c163686a5fd077895a797daa9b0b95f","date":1490873946,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testStatsStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionToExpessionTest#testStatsStream().mjava","sourceNew":"  @Test\n  public void testStatsStream() throws Exception {\n    String expressionString;\n    \n    // Basic test\n    try (StatsStream stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory)) {\n      expressionString = stream.toExpression(factory).toString();\n      assertTrue(expressionString.contains(\"stats(collection1,\"));\n      assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n      assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n      assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n      assertTrue(expressionString.contains(\"min(a_i)\"));\n      assertTrue(expressionString.contains(\"max(a_i)\"));\n      assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n      assertTrue(expressionString.contains(\"count(*)\"));\n      assertTrue(expressionString.contains(\"sum(a_i)\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testStatsStream() throws Exception {\n\n    StatsStream stream;\n    String expressionString;\n    \n    // Basic test\n    stream = new StatsStream(StreamExpressionParser.parse(\"stats(collection1, q=*:*, fl=\\\"id,a_s,a_i,a_f\\\", sort=\\\"a_f asc, a_i asc\\\", sum(a_i), avg(a_i), count(*), min(a_i), max(a_i))\"), factory);\n    expressionString = stream.toExpression(factory).toString();\n    assertTrue(expressionString.contains(\"stats(collection1,\"));\n    assertTrue(expressionString.contains(\"q=\\\"*:*\\\"\"));\n    assertTrue(expressionString.contains(\"fl=\\\"id,a_s,a_i,a_f\\\"\"));\n    assertTrue(expressionString.contains(\"sort=\\\"a_f asc, a_i asc\\\"\"));\n    assertTrue(expressionString.contains(\"min(a_i)\"));\n    assertTrue(expressionString.contains(\"max(a_i)\"));\n    assertTrue(expressionString.contains(\"avg(a_i,false)\"));\n    assertTrue(expressionString.contains(\"count(*)\"));\n    assertTrue(expressionString.contains(\"sum(a_i)\"));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a9b741b54c163686a5fd077895a797daa9b0b95f":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["d9fe3175bbaa122d67f736a75c2984617c502cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"a9b741b54c163686a5fd077895a797daa9b0b95f":[],"0ac446a120a3c5f1ac22f9a866256ad428c1821b":["a9b741b54c163686a5fd077895a797daa9b0b95f","d9fe3175bbaa122d67f736a75c2984617c502cc0"],"d9fe3175bbaa122d67f736a75c2984617c502cc0":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ac446a120a3c5f1ac22f9a866256ad428c1821b"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a9b741b54c163686a5fd077895a797daa9b0b95f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}