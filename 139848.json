{"path":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79b2216602a1604394825740d48165c759761665","date":1319718709,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DocumentAnalysisRequestHandler#extractSingleContentStream(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    String exceptionMsg = \"DocumentAnalysisRequestHandler expects a single content stream with documents to analyze\";\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMsg);\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMsg);\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, exceptionMsg);\n    }\n    return stream;\n  }\n\n","sourceOld":"  /**\n   * Extracts the only content stream from the request. {@link org.apache.solr.common.SolrException.ErrorCode#BAD_REQUEST}\n   * error is thrown if the request doesn't hold any content stream or holds more than one.\n   *\n   * @param req The solr request.\n   *\n   * @return The single content stream which holds the documents to be analyzed.\n   */\n  private ContentStream extractSingleContentStream(SolrQueryRequest req) {\n    Iterable<ContentStream> streams = req.getContentStreams();\n    if (streams == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    Iterator<ContentStream> iter = streams.iterator();\n    if (!iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    ContentStream stream = iter.next();\n    if (iter.hasNext()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"DocumentAnlysisRequestHandler expects a single content stream with documents to analyze\");\n    }\n    return stream;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"79b2216602a1604394825740d48165c759761665":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["79b2216602a1604394825740d48165c759761665"]},"commit2Childs":{"79b2216602a1604394825740d48165c759761665":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["79b2216602a1604394825740d48165c759761665"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}