{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[java.lang.reflect.Field,Object],Collection[Object]).mjava","commits":[{"id":"b07132423639577d6f68cebbec9c83599d5d5a3a","date":1419020622,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[java.lang.reflect.Field,Object],Collection[Object]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[Field,Object],Collection[Object]).mjava","sourceNew":"    public long accumulateObject(Object o, long shallowSize, Map<java.lang.reflect.Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","sourceOld":"    public long accumulateObject(Object o, long shallowSize, Map<Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee12c58672cd82c0cbf140bb1932e3a2aa382a3d","date":1439207295,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[java.lang.reflect.Field,Object],Collection[Object]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[java.lang.reflect.Field,Object],Collection[Object]).mjava","sourceNew":"    public long accumulateObject(Object o, long shallowSize, Map<java.lang.reflect.Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      long v;\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        v = (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        v = 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else {\n        v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","sourceOld":"    public long accumulateObject(Object o, long shallowSize, Map<java.lang.reflect.Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        return (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        return 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      }\n      long v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","bugFix":["d943163030bbd7a9caf93cb5fea92257390a2a99","4554a06321a11fbd3a1dfb8943f7620f19e8a1dd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[java.lang.reflect.Field,Object],Collection[Object]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseIndexFileFormatTestCase.Accumulator#accumulateObject(Object,long,Map[java.lang.reflect.Field,Object],Collection[Object]).mjava","sourceNew":"    public long accumulateObject(Object o, long shallowSize, Map<java.lang.reflect.Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      long v;\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        v = (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        v = 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else {\n        List<Object> references = new ArrayList<>();\n        v = super.accumulateObject(o, shallowSize, fieldValues, references);\n        for (Object r : references) {\n          // AssertingCodec adds Thread references to make sure objects are consumed in the right thread\n          if (r instanceof Thread == false) {\n            queue.add(r);\n          }\n        }\n      }\n      return v;\n    }\n\n","sourceOld":"    public long accumulateObject(Object o, long shallowSize, Map<java.lang.reflect.Field, Object> fieldValues, Collection<Object> queue) {\n      for (Class<?> clazz = o.getClass(); clazz != null; clazz = clazz.getSuperclass()) {\n        if (EXCLUDED_CLASSES.contains(clazz) && o != root) {\n          return 0;\n        }\n      }\n      // we have no way to estimate the size of these things in codecs although\n      // something like a Collections.newSetFromMap(new HashMap<>()) uses quite\n      // some memory... So for now the test ignores the overhead of such\n      // collections but can we do better?\n      long v;\n      if (o instanceof Collection) {\n        Collection<?> coll = (Collection<?>) o;\n        queue.addAll((Collection<?>) o);\n        v = (long) coll.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else if (o instanceof Map) {\n        final Map<?, ?> map = (Map<?,?>) o;\n        queue.addAll(map.keySet());\n        queue.addAll(map.values());\n        v = 2L * map.size() * RamUsageEstimator.NUM_BYTES_OBJECT_REF;\n      } else {\n        v = super.accumulateObject(o, shallowSize, fieldValues, queue);\n      }\n      // System.out.println(o.getClass() + \"=\" + v);\n      return v;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee12c58672cd82c0cbf140bb1932e3a2aa382a3d":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["ee12c58672cd82c0cbf140bb1932e3a2aa382a3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"]},"commit2Childs":{"b07132423639577d6f68cebbec9c83599d5d5a3a":["ee12c58672cd82c0cbf140bb1932e3a2aa382a3d"],"ee12c58672cd82c0cbf140bb1932e3a2aa382a3d":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b07132423639577d6f68cebbec9c83599d5d5a3a"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}