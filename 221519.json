{"path":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","commits":[{"id":"c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f","date":1343307395,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","pathOld":"/dev/null","sourceNew":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), \"UTF-8\");\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<String>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","pathOld":"/dev/null","sourceNew":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), \"UTF-8\");\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<String>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","pathOld":"/dev/null","sourceNew":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), \"UTF-8\");\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<String>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","pathOld":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","sourceNew":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), \"UTF-8\");\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","sourceOld":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), \"UTF-8\");\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<String>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","pathOld":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","sourceNew":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), StandardCharsets.UTF_8);\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","sourceOld":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), \"UTF-8\");\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","pathOld":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","sourceNew":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), StandardCharsets.UTF_8);\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","sourceOld":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), \"UTF-8\");\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd86a6f83b714a27b74b3c352c35754a2da1eb92","date":1578867177,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","pathOld":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","sourceNew":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_GIT_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), StandardCharsets.UTF_8);\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","sourceOld":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), StandardCharsets.UTF_8);\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","date":1578901035,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","pathOld":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateUTR30DataFiles#getNFKCDataFilesFromIcuProject().mjava","sourceNew":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_GIT_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), StandardCharsets.UTF_8);\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","sourceOld":"  private static void getNFKCDataFilesFromIcuProject() throws IOException {\n    URL icuTagsURL = new URL(ICU_SVN_TAG_URL + \"/\");\n    URL icuReleaseTagURL = new URL(icuTagsURL, ICU_RELEASE_TAG + \"/\");\n    URL norm2url = new URL(icuReleaseTagURL, ICU_DATA_NORM2_PATH + \"/\");\n\n    System.err.print(\"Downloading \" + NFKC_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_TXT), NFKC_TXT);\n    System.err.println(\"done.\");\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" ... \");\n    download(new URL(norm2url, NFKC_CF_TXT), NFKC_CF_TXT);\n    System.err.println(\"done.\");\n\n    System.err.print(\"Downloading \" + NFKC_CF_TXT + \" and making diacritic rules one-way ... \");\n    URLConnection connection = openConnection(new URL(norm2url, NFC_TXT));\n    BufferedReader reader = new BufferedReader\n        (new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8));\n    Writer writer = new OutputStreamWriter(new FileOutputStream(NFC_TXT), StandardCharsets.UTF_8);\n    try {\n      String line;\n\n      while (null != (line = reader.readLine())) {\n        Matcher matcher = ROUND_TRIP_MAPPING_LINE_PATTERN.matcher(line);\n        if (matcher.matches()) {\n          final String leftHandSide = matcher.group(1);\n          final String rightHandSide = matcher.group(2).trim();\n          List<String> diacritics = new ArrayList<>();\n          for (String outputCodePoint : rightHandSide.split(\"\\\\s+\")) {\n            int ch = Integer.parseInt(outputCodePoint, 16);\n            if (UCharacter.hasBinaryProperty(ch, UProperty.DIACRITIC)\n                // gennorm2 fails if U+0653-U+0656 are included in round-trip mappings\n                || (ch >= 0x653 && ch <= 0x656)) {\n              diacritics.add(outputCodePoint);\n            }\n          }\n          if ( ! diacritics.isEmpty()) {\n            StringBuilder replacementLine = new StringBuilder();\n            replacementLine.append(leftHandSide).append(\">\").append(rightHandSide);\n            replacementLine.append(\"  # one-way: diacritic\");\n            if (diacritics.size() > 1) {\n              replacementLine.append(\"s\");\n            }\n            for (String diacritic : diacritics) {\n              replacementLine.append(\" \").append(diacritic);\n            }\n            line = replacementLine.toString();\n          }\n        }\n        writer.write(line);\n        writer.write(\"\\n\");\n      }\n    } finally {\n      reader.close();\n      writer.close();\n    }\n    System.err.println(\"done.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f"],"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":["7d89d7e4e5101347833eea558851bf4209218619","fd86a6f83b714a27b74b3c352c35754a2da1eb92"],"c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fd86a6f83b714a27b74b3c352c35754a2da1eb92":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd86a6f83b714a27b74b3c352c35754a2da1eb92"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac":[],"c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6fd7790eae69bb7d4fc5a8070a3abf015a5fb3f","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","fd86a6f83b714a27b74b3c352c35754a2da1eb92"],"fd86a6f83b714a27b74b3c352c35754a2da1eb92":["94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","94f2d4492fe7f2ad392dfb81b309ee9afa8a32ac","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}