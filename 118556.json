{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqPostingsEnum#nextDoc().mjava","commits":[{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqPostingsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqDocsAndPositionsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      pos = -1;\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          if (hasPayloads) {\n            for(int i=0;i<freq;i++) {\n              upto++;\n              if (hasOffsets) {\n                upto += 2;\n              }\n              payloadOffset += postings[upto++];\n            }\n          } else {\n            upto += posMult * freq;\n          }\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          if (hasPayloads) {\n            for(int i=0;i<freq;i++) {\n              upto++;\n              if (hasOffsets) {\n                upto += 2;\n              }\n              payloadOffset += postings[upto++];\n            }\n          } else {\n            upto += posMult * freq;\n          }\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqPostingsEnum#nextDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.LowFreqPostingsEnum#nextDoc().mjava","sourceNew":"    @Override\n    public int nextDoc() {\n      pos = -1;\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (upto < postings.length) {\n        docID = postings[upto++];\n        freq = postings[upto++];\n        skipPositions = freq;\n        return docID;\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","sourceOld":"    @Override\n    public int nextDoc() {\n      pos = -1;\n      if (hasPayloads) {\n        for(int i=0;i<skipPositions;i++) {\n          upto++;\n          if (hasOffsets) {\n            upto += 2;\n          }\n          payloadOffset += postings[upto++];\n        }\n      } else {\n        upto += posMult * skipPositions;\n      }\n\n      if (liveDocs == null) {\n        if (upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          skipPositions = freq;\n          return docID;\n        }\n      } else {\n        while(upto < postings.length) {\n          docID = postings[upto++];\n          freq = postings[upto++];\n          if (liveDocs.get(docID)) {\n            skipPositions = freq;\n            return docID;\n          }\n          if (hasPayloads) {\n            for(int i=0;i<freq;i++) {\n              upto++;\n              if (hasOffsets) {\n                upto += 2;\n              }\n              payloadOffset += postings[upto++];\n            }\n          } else {\n            upto += posMult * freq;\n          }\n        }\n      }\n\n      return docID = NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}