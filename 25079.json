{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"Not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","sourceNew":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"Not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","sourceNew":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":["3646ead588297558973dbd1162e69791e822b944"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","sourceNew":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"Not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daeaac5f7b42498079f0fb7c3a91802e588fc21a","date":1493066118,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","sourceNew":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","sourceNew":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#init(PluginInfo,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/solr/SolrShardReporter#setCore(SolrCore).mjava","sourceNew":"  public void init(PluginInfo pluginInfo, SolrCore core) {\n    super.init(pluginInfo);\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  public void setCore(SolrCore core) {\n    if (reporter != null) {\n      reporter.close();\n    }\n    if (!enabled) {\n      log.info(\"Reporter disabled for registry \" + registryName);\n      return;\n    }\n    if (core.getCoreDescriptor().getCloudDescriptor() == null) {\n      // not a cloud core\n      log.warn(\"Not initializing shard reporter for non-cloud core \" + core.getName());\n      return;\n    }\n    if (period < 1) { // don't start it\n      log.warn(\"period=\" + period + \", not starting shard reporter \");\n      return;\n    }\n    // our id is coreNodeName\n    String id = core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\n    // target registry is the leaderRegistryName\n    String groupId = core.getCoreMetricManager().getLeaderRegistryName();\n    if (groupId == null) {\n      log.warn(\"No leaderRegistryName for core \" + core + \", not starting the reporter...\");\n      return;\n    }\n    SolrReporter.Report spec = new SolrReporter.Report(groupId, null, registryName, filters);\n    reporter = SolrReporter.Builder.forReports(metricManager, Collections.singletonList(spec))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .withHandler(handler)\n        .withReporterId(id)\n        .setCompact(true)\n        .cloudClient(false) // we want to send reports specifically to a selected leader instance\n        .skipAggregateValues(true) // we don't want to transport details of aggregates\n        .skipHistograms(true) // we don't want to transport histograms\n        .build(core.getCoreContainer().getUpdateShardHandler().getHttpClient(), new LeaderUrlSupplier(core));\n\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"816521ebaad5add9cb96bb88c577394e2938c40b":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["e9017cf144952056066919f1ebc7897ff9bd71b1","f90f26c648df8320685eb76fec8bb9972e1994c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}