{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterAbort().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void xxxtestDocumentsWriterAbort() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testDocumentsWriterAbort().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestDocumentsWriterAbort().mjava","sourceNew":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void testDocumentsWriterAbort() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n  }\n\n","sourceOld":"  // LUCENE-1072: make sure an errant exception on flushing\n  // one segment only takes out those docs in that one flush\n  public void xxxtestDocumentsWriterAbort() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyOnFlush failure = new FailOnlyOnFlush();\n    failure.setDoFail();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    String contents = \"aa bb cc dd ee ff gg hh ii jj kk\";\n    doc.add(new Field(\"content\", contents, Field.Store.NO,\n        Field.Index.ANALYZED));\n    boolean hitError = false;\n    for(int i=0;i<200;i++) {\n      try {\n        writer.addDocument(doc);\n      } catch (IOException ioe) {\n        // only one flush should fail:\n        assertFalse(hitError);\n        hitError = true;\n      }\n    }\n    assertTrue(hitError);\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    assertEquals(198, reader.docFreq(new Term(\"content\", \"aa\")));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}