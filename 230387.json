{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","sourceNew":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<SpanQuery>();\n      ArrayList<SpanQuery> nots = new ArrayList<SpanQuery>();\n      BooleanClause[] bclauses = qc.getClauses();\n\n      // For all clauses e.g. one* two~\n      for (int i = 0; i < bclauses.length; i++) {\n        Query childQuery = bclauses[i].getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (bclauses[i].getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","sourceOld":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<SpanQuery>();\n      ArrayList<SpanQuery> nots = new ArrayList<SpanQuery>();\n      BooleanClause[] bclauses = qc.getClauses();\n\n      // For all clauses e.g. one* two~\n      for (int i = 0; i < bclauses.length; i++) {\n        Query childQuery = bclauses[i].getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (bclauses[i].getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/complexPhrase/ComplexPhraseQueryParser.ComplexPhraseQuery#addComplexPhraseClause(List[SpanQuery],BooleanQuery).mjava","sourceNew":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<SpanQuery>();\n      ArrayList<SpanQuery> nots = new ArrayList<SpanQuery>();\n      BooleanClause[] bclauses = qc.getClauses();\n\n      // For all clauses e.g. one* two~\n      for (int i = 0; i < bclauses.length; i++) {\n        Query childQuery = bclauses[i].getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (bclauses[i].getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","sourceOld":"    private void addComplexPhraseClause(List<SpanQuery> spanClauses, BooleanQuery qc) {\n      ArrayList<SpanQuery> ors = new ArrayList<SpanQuery>();\n      ArrayList<SpanQuery> nots = new ArrayList<SpanQuery>();\n      BooleanClause[] bclauses = qc.getClauses();\n\n      // For all clauses e.g. one* two~\n      for (int i = 0; i < bclauses.length; i++) {\n        Query childQuery = bclauses[i].getQuery();\n\n        // select the list to which we will add these options\n        ArrayList<SpanQuery> chosenList = ors;\n        if (bclauses[i].getOccur() == BooleanClause.Occur.MUST_NOT) {\n          chosenList = nots;\n        }\n\n        if (childQuery instanceof TermQuery) {\n          TermQuery tq = (TermQuery) childQuery;\n          SpanTermQuery stq = new SpanTermQuery(tq.getTerm());\n          stq.setBoost(tq.getBoost());\n          chosenList.add(stq);\n        } else if (childQuery instanceof BooleanQuery) {\n          BooleanQuery cbq = (BooleanQuery) childQuery;\n          addComplexPhraseClause(chosenList, cbq);\n        } else {\n          // TODO alternatively could call extract terms here?\n          throw new IllegalArgumentException(\"Unknown query type:\"\n              + childQuery.getClass().getName());\n        }\n      }\n      if (ors.size() == 0) {\n        return;\n      }\n      SpanOrQuery soq = new SpanOrQuery(ors\n          .toArray(new SpanQuery[ors.size()]));\n      if (nots.size() == 0) {\n        spanClauses.add(soq);\n      } else {\n        SpanOrQuery snqs = new SpanOrQuery(nots\n            .toArray(new SpanQuery[nots.size()]));\n        SpanNotQuery snq = new SpanNotQuery(soq, snqs);\n        spanClauses.add(snq);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a53a291ad9b1cc050d846b68758c061a55d52734":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a53a291ad9b1cc050d846b68758c061a55d52734"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a53a291ad9b1cc050d846b68758c061a55d52734":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}