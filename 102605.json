{"path":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(SingleSubMergeState).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(SingleSubMergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DocValuesConsumer#merge(SingleSubMergeState).mjava","sourceNew":"  /**\n   * Merges the given {@link SingleSubMergeState} into this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the {@link SingleSubMergeState} to merge\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  // TODO: can't we have a default implementation here that merges naively with our apis?\n  // this is how stored fields and term vectors work. its a pain to have to impl merging\n  // (should be an optimization to override it)\n  protected abstract void merge(SingleSubMergeState mergeState) throws IOException;\n\n","sourceOld":"  /**\n   * Merges the given {@link SingleSubMergeState} into this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the {@link SingleSubMergeState} to merge\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  // TODO: can't we have a default implementation here that merges naively with our apis?\n  // this is how stored fields and term vectors work. its a pain to have to impl merging\n  // (should be an optimization to override it)\n  protected abstract void merge(SingleSubMergeState mergeState) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(SingleSubMergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(SingleSubMergeState).mjava","sourceNew":"  /**\n   * Merges the given {@link SingleSubMergeState} into this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the {@link SingleSubMergeState} to merge\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link SingleSubMergeState} into this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the {@link SingleSubMergeState} to merge\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  // TODO: can't we have a default implementation here that merges naively with our apis?\n  // this is how stored fields and term vectors work. its a pain to have to impl merging\n  // (should be an optimization to override it)\n  protected abstract void merge(SingleSubMergeState mergeState) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d9a00a908fbe2bd7894685ebb85c9e7f975fff0","date":1325783735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(SingleSubMergeState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(SingleSubMergeState).mjava","sourceNew":"  /**\n   * Merges the given {@link SingleSubMergeState} into this {@link DocValuesConsumer}.\n   * \n   * @param state\n   *          the {@link SingleSubMergeState} to merge\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Merges the given {@link SingleSubMergeState} into this {@link DocValuesConsumer}.\n   * \n   * @param mergeState\n   *          the {@link SingleSubMergeState} to merge\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/codecs/DocValuesConsumer#merge(SingleSubMergeState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Merges the given {@link SingleSubMergeState} into this {@link DocValuesConsumer}.\n   * \n   * @param state\n   *          the {@link SingleSubMergeState} to merge\n   * @throws IOException\n   *           if an {@link IOException} occurs\n   */\n  protected void merge(SingleSubMergeState state) throws IOException {\n    // This enables bulk copies in subclasses per MergeState, subclasses can\n    // simply override this and decide if they want to merge\n    // segments using this generic implementation or if a bulk merge is possible\n    // / feasible.\n    final Source source = state.reader.getDirectSource();\n    assert source != null;\n    setNextMergeSource(source); // set the current enum we are working on - the\n    // impl. will get the correct reference for the type\n    // it supports\n    int docID = state.docBase;\n    final Bits liveDocs = state.liveDocs;\n    final int docCount = state.docCount;\n    for (int i = 0; i < docCount; i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        mergeDoc(docID++, i);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["6d9a00a908fbe2bd7894685ebb85c9e7f975fff0"],"6d9a00a908fbe2bd7894685ebb85c9e7f975fff0":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0f44f887719e97183771e977cfc4bfb485b766"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"fa0f44f887719e97183771e977cfc4bfb485b766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d9a00a908fbe2bd7894685ebb85c9e7f975fff0":["fa0f44f887719e97183771e977cfc4bfb485b766"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["6d9a00a908fbe2bd7894685ebb85c9e7f975fff0"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}