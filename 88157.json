{"path":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#setupCluster(boolean,int,boolean,String).mjava","commits":[{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#setupCluster(boolean,int,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"  private void setupCluster(boolean async, int delay, boolean enableAuth, String muteRulesJson) throws Exception {\n    String securityJson = FileUtils.readFileToString(TEST_PATH().resolve(\"security\").resolve(\"auditlog_plugin_security.json\").toFile(), StandardCharsets.UTF_8);\n    securityJson = securityJson.replace(\"_PORT_\", Integer.toString(testHarness.get().callbackPort));\n    securityJson = securityJson.replace(\"_ASYNC_\", Boolean.toString(async));\n    securityJson = securityJson.replace(\"_DELAY_\", Integer.toString(delay));\n    securityJson = securityJson.replace(\"_AUTH_\", enableAuth ? AUTH_SECTION : \"\");\n    securityJson = securityJson.replace(\"_MUTERULES_\", muteRulesJson != null ? muteRulesJson : \"[]\");\n    MiniSolrCloudCluster myCluster = new Builder(NUM_SERVERS, createTempDir())\n        .withSecurityJson(securityJson)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .build();\n    \n    myCluster.waitForAllNodes(10);\n    testHarness.get().setCluster(myCluster);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d5482e225fe64e9f868c423923d1144adc88142","date":1571270194,"type":5,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#setupCluster(boolean,String,boolean,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/security/AuditLoggerIntegrationTest#setupCluster(boolean,int,boolean,String).mjava","sourceNew":"  /**\n   * Starts the cluster with a security.json built from template, using CallbackAuditLoggerPlugin. The params\n   * to this method will fill the template.\n   * @param async enable async audit logging\n   * @param semaphoreName name of semaphore for controlling how to delay logging\n   * @param enableAuth should authentication be enabled in this cluster?\n   * @param muteRulesJson mute rules to trim down what events we care about in our tests\n   * @throws Exception if anything goes wrong\n   */\n  private void setupCluster(boolean async, String semaphoreName, boolean enableAuth, String... muteRulesJson) throws Exception {\n    String securityJson = FileUtils.readFileToString(TEST_PATH().resolve(\"security\").resolve(\"auditlog_plugin_security.json\").toFile(), StandardCharsets.UTF_8);\n    securityJson = securityJson.replace(\"_PORT_\", Integer.toString(testHarness.get().callbackPort));\n    securityJson = securityJson.replace(\"_ASYNC_\", Boolean.toString(async));\n    securityJson = securityJson.replace(\"_SEMAPHORE_\",\n                                        null == semaphoreName ? \"null\" : \"\\\"\"+semaphoreName+\"\\\"\");\n    securityJson = securityJson.replace(\"_AUTH_\", enableAuth ? AUTH_SECTION : \"\");\n\n    // start with any test specific mute rules...\n    final List<String> muteRules = new ArrayList<>(Arrays.asList(muteRulesJson));\n\n    // for test purposes, ignore any intranode /metrics requests...\n    muteRules.add(\"\\\"path:/admin/metrics\\\"\");\n\n    // With auth enabled we're also getting /admin/info/key requests\n    // So for test purposes, we're automatically MUTEing those when auth is enabled...\n    if (enableAuth) {\n      muteRules.add(\"\\\"path:/admin/info/key\\\"\");\n    }\n\n    securityJson = securityJson.replace(\"_MUTERULES_\", \"[\" + StringUtils.join(muteRules, \",\") + \"]\");\n\n    MiniSolrCloudCluster myCluster = new Builder(NUM_SERVERS, createTempDir())\n        .withSecurityJson(securityJson)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .build();\n    \n    myCluster.waitForAllNodes(10);\n    testHarness.get().setCluster(myCluster);\n  }\n\n","sourceOld":"  private void setupCluster(boolean async, int delay, boolean enableAuth, String muteRulesJson) throws Exception {\n    String securityJson = FileUtils.readFileToString(TEST_PATH().resolve(\"security\").resolve(\"auditlog_plugin_security.json\").toFile(), StandardCharsets.UTF_8);\n    securityJson = securityJson.replace(\"_PORT_\", Integer.toString(testHarness.get().callbackPort));\n    securityJson = securityJson.replace(\"_ASYNC_\", Boolean.toString(async));\n    securityJson = securityJson.replace(\"_DELAY_\", Integer.toString(delay));\n    securityJson = securityJson.replace(\"_AUTH_\", enableAuth ? AUTH_SECTION : \"\");\n    securityJson = securityJson.replace(\"_MUTERULES_\", muteRulesJson != null ? muteRulesJson : \"[]\");\n    MiniSolrCloudCluster myCluster = new Builder(NUM_SERVERS, createTempDir())\n        .withSecurityJson(securityJson)\n        .addConfig(\"conf1\", TEST_PATH().resolve(\"configsets\").resolve(\"cloud-minimal\").resolve(\"conf\"))\n        .build();\n    \n    myCluster.waitForAllNodes(10);\n    testHarness.get().setCluster(myCluster);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d5482e225fe64e9f868c423923d1144adc88142":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d5482e225fe64e9f868c423923d1144adc88142"]},"commit2Childs":{"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["5d5482e225fe64e9f868c423923d1144adc88142"],"5d5482e225fe64e9f868c423923d1144adc88142":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}