{"path":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","commits":[{"id":"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1","date":1001444615,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"/dev/null","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchers.length; i++) {\n      \n      final int start = starts[i];\n\n      searchers[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce2d38fca9678b74e922c3d472944968909f7799","date":1013648326,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchers.length; i++) {\n      \n      final int start = starts[i];\n\n      searchers[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <it>all</it> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchers.length; i++) {\n      \n      final int start = starts[i];\n\n      searchers[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4","date":1016601998,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchers.length; i++) {\n\n      final int start = starts[i];\n\n      searchers[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchers.length; i++) {\n      \n      final int start = starts[i];\n\n      searchers[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c7454619ea6a0710272c1dd947345cee64489f6","date":1026927484,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public void search(Query query, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public final void search(Query query, Filter filter,\n\t\t\t   final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchers.length; i++) {\n\n      final int start = starts[i];\n\n      searchers[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32cf2e30bd45f6248722d0d19a0045a712782ebc","date":1080240435,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Query query, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link HitCollector#collect(int,float)} is called for every non-zero\n   * scoring document.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, a bitset used to eliminate some documents\n   * @param results to receive hits\n   */\n  public void search(Query query, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Query query, Filter filter, final HitCollector results)\n    throws IOException {\n      Weight weight = prepareWeight(query);\n      search(weight, filter, results);\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Query query, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(query, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Query,Filter,HitCollector).mjava","sourceNew":null,"sourceOld":"  // inherit javadoc\n  public void search(Query query, Filter filter, final HitCollector results)\n    throws IOException {\n      Weight weight = prepareWeight(query);\n      search(weight, filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4":["ce2d38fca9678b74e922c3d472944968909f7799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9c7454619ea6a0710272c1dd947345cee64489f6":["8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4"],"ce2d38fca9678b74e922c3d472944968909f7799":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["9c7454619ea6a0710272c1dd947345cee64489f6"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ceaa9738cad9616d1831286111af106e13e0e4b"]},"commit2Childs":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4":["9c7454619ea6a0710272c1dd947345cee64489f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bf4e1d12af525a2fb396e59a2d3aa7140cb727a1"],"9c7454619ea6a0710272c1dd947345cee64489f6":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"ce2d38fca9678b74e922c3d472944968909f7799":["8a58ad575aec80fb3fd8c0cb3cde065efe97c1a4"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"bf4e1d12af525a2fb396e59a2d3aa7140cb727a1":["ce2d38fca9678b74e922c3d472944968909f7799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}