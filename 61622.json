{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","commits":[{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n    assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b0883f7d5f5bb0efa9f5c95d23d49256e63818a","date":1295105929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n    assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"/dev/null","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", Field.Index.ANALYZED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    Terms terms = MultiFields.getTerms(r, \"f\");\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(terms.totalTermFreq(new BytesRef(\"b\")) != -1);\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n      assertEquals(2, terms.totalTermFreq(new BytesRef(\"a\")));\n      assertEquals(1, terms.totalTermFreq(new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    IndexReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testTotalTermFreqCached().mjava","sourceNew":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  // Make sure totalTermFreq works correctly in the terms\n  // dict cache\n  public void testTotalTermFreqCached() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document d = new Document();\n    d.add(newField(\"f\", \"a a b\", TextField.TYPE_UNSTORED));\n    writer.addDocument(d);\n    DirectoryReader r = writer.getReader();\n    writer.close();\n    try {\n      // Make sure codec impls totalTermFreq (eg PreFlex doesn't)\n      Assume.assumeTrue(MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")) != -1);\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n      assertEquals(2, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"a\")));\n      assertEquals(1, MultiFields.totalTermFreq(r, \"f\", new BytesRef(\"b\")));\n    } finally {\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"16843358872ed92ba92888ab99df297550b9a36a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b0883f7d5f5bb0efa9f5c95d23d49256e63818a"],"e2297162a22c55456e200caef2cbcb00fe381120":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":["16843358872ed92ba92888ab99df297550b9a36a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3b0883f7d5f5bb0efa9f5c95d23d49256e63818a":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["e2297162a22c55456e200caef2cbcb00fe381120","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3b0883f7d5f5bb0efa9f5c95d23d49256e63818a"],"a3776dccca01c11e7046323cfad46a3b4a471233":["3b0883f7d5f5bb0efa9f5c95d23d49256e63818a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3b0883f7d5f5bb0efa9f5c95d23d49256e63818a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["e2297162a22c55456e200caef2cbcb00fe381120"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"16843358872ed92ba92888ab99df297550b9a36a":["962d04139994fce5193143ef35615499a9a96d78"],"e2297162a22c55456e200caef2cbcb00fe381120":["5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"962d04139994fce5193143ef35615499a9a96d78":[],"3b0883f7d5f5bb0efa9f5c95d23d49256e63818a":["16843358872ed92ba92888ab99df297550b9a36a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["16843358872ed92ba92888ab99df297550b9a36a","29ef99d61cda9641b6250bf9567329a6e65f901d","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e2297162a22c55456e200caef2cbcb00fe381120"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["3b0883f7d5f5bb0efa9f5c95d23d49256e63818a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}