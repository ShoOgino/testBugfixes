{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","commits":[{"id":"798b82b2c9877fae10a0a7d2025c05cac832bda2","date":1384710991,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Subclass & override if you change the encoding. */\n  protected void decode(BytesRef buf, IntsRef ordinals) {\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (ordinals.ints.length < buf.length) {\n      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);\n    }\n\n    ordinals.offset = 0;\n    ordinals.length = 0;\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = ordinals.ints[ordinals.length];\n        ordinals.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","sourceNew":"  /** Subclass & override if you change the encoding. */\n  protected void decode(BytesRef buf, IntsRef ordinals) {\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (ordinals.ints.length < buf.length) {\n      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);\n    }\n\n    ordinals.offset = 0;\n    ordinals.length = 0;\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = ordinals.ints[ordinals.length];\n        ordinals.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","sourceOld":"  /** Subclass & override if you change the encoding. */\n  protected void decode(BytesRef buf, IntsRef ordinals) {\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (ordinals.ints.length < buf.length) {\n      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);\n    }\n\n    ordinals.offset = 0;\n    ordinals.length = 0;\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = ordinals.ints[ordinals.length];\n        ordinals.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"798b82b2c9877fae10a0a7d2025c05cac832bda2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"21d36d0db865f7b84026b447bec653469a6e66df":["798b82b2c9877fae10a0a7d2025c05cac832bda2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["798b82b2c9877fae10a0a7d2025c05cac832bda2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"798b82b2c9877fae10a0a7d2025c05cac832bda2":["21d36d0db865f7b84026b447bec653469a6e66df"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}