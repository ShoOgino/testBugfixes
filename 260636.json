{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/Passage#addMatch(int,int,Term).mjava","commits":[{"id":"ffabe030a2b84ad50adb7265da07ee78f1c58f6a","date":1355239263,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/Passage#addMatch(int,int,Term).mjava","pathOld":"/dev/null","sourceNew":"  void addMatch(int startOffset, int endOffset, Term term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      Term newMatchTerms[] = new Term[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["56c4afdffb7d4d205fdfe74efe460188a6197f19"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/Passage#addMatch(int,int,Term).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/postingshighlight/Passage#addMatch(int,int,Term).mjava","sourceNew":"  void addMatch(int startOffset, int endOffset, Term term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      Term newMatchTerms[] = new Term[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","sourceOld":"  void addMatch(int startOffset, int endOffset, Term term) {\n    assert startOffset >= this.startOffset && startOffset <= this.endOffset;\n    if (numMatches == matchStarts.length) {\n      matchStarts = ArrayUtil.grow(matchStarts, numMatches+1);\n      matchEnds = ArrayUtil.grow(matchEnds, numMatches+1);\n      Term newMatchTerms[] = new Term[ArrayUtil.oversize(numMatches+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n      System.arraycopy(matchTerms, 0, newMatchTerms, 0, numMatches);\n      matchTerms = newMatchTerms;\n    }\n    matchStarts[numMatches] = startOffset;\n    matchEnds[numMatches] = endOffset;\n    matchTerms[numMatches] = term;\n    numMatches++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["ffabe030a2b84ad50adb7265da07ee78f1c58f6a"],"ffabe030a2b84ad50adb7265da07ee78f1c58f6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"]},"commit2Childs":{"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ffabe030a2b84ad50adb7265da07ee78f1c58f6a":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffabe030a2b84ad50adb7265da07ee78f1c58f6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}