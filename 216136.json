{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory: \"info.dir=\" + info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfo info, boolean create) {\n\n      assert info.dir == directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","bugFix":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     * @throws IOException\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3af8c90c5e965a1a8011e827ab59de734c7dfb79","date":1368108782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      assert noDups();\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentCommitInfo,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfoPerCommit,boolean).mjava","sourceNew":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndUpdates)}.\n     */\n    public synchronized ReadersAndUpdates get(SegmentCommitInfo info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndUpdates rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndUpdates(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      assert noDups();\n\n      return rld;\n    }\n\n","sourceOld":"    /**\n     * Obtain a ReadersAndLiveDocs instance from the\n     * readerPool.  If create is true, you must later call\n     * {@link #release(ReadersAndLiveDocs)}.\n     */\n    public synchronized ReadersAndLiveDocs get(SegmentInfoPerCommit info, boolean create) {\n\n      assert info.info.dir == directory: \"info.dir=\" + info.info.dir + \" vs \" + directory;\n\n      ReadersAndLiveDocs rld = readerMap.get(info);\n      if (rld == null) {\n        if (!create) {\n          return null;\n        }\n        rld = new ReadersAndLiveDocs(IndexWriter.this, info);\n        // Steal initial reference:\n        readerMap.put(info, rld);\n      } else {\n        assert rld.info == info: \"rld.info=\" + rld.info + \" info=\" + info + \" isLive?=\" + infoIsLive(rld.info) + \" vs \" + infoIsLive(info);\n      }\n\n      if (create) {\n        // Return ref to caller:\n        rld.incRef();\n      }\n\n      assert noDups();\n\n      return rld;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d153abcf92dc5329d98571a8c3035df9bd80648"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3af8c90c5e965a1a8011e827ab59de734c7dfb79":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3af8c90c5e965a1a8011e827ab59de734c7dfb79":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3af8c90c5e965a1a8011e827ab59de734c7dfb79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}