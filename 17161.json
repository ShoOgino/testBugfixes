{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(PointWriter,long,int,int,byte[]).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(PointWriter,long,int,int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  private int getMaxDocId(PointWriter p, long size, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.getReader(0, size)) {\n      BytesRef packedValue = new BytesRef();\n      while (reader.next()) {\n        reader.packedValue(packedValue);\n        int offset = dimension * bytesPerDimension;\n        if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = reader.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(BKDRadixSelector.PathSlice,int,int,byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKDRadixSelector#getMaxDocId(PointWriter,long,int,int,byte[]).mjava","sourceNew":"  private int getMaxDocId(BKDRadixSelector.PathSlice p, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.writer.getReader(p.start, p.count)) {\n      BytesRef packedValue = new BytesRef();\n      while (reader.next()) {\n        reader.packedValue(packedValue);\n        int offset = dimension * bytesPerDimension;\n        if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = reader.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","sourceOld":"  private int getMaxDocId(PointWriter p, long size, int bytesPerDimension, int dimension, byte[] partitionPoint) throws  IOException {\n    int docID = Integer.MIN_VALUE;\n    try (PointReader reader = p.getReader(0, size)) {\n      BytesRef packedValue = new BytesRef();\n      while (reader.next()) {\n        reader.packedValue(packedValue);\n        int offset = dimension * bytesPerDimension;\n        if (FutureArrays.compareUnsigned(packedValue.bytes, packedValue.offset + offset, packedValue.offset + offset + bytesPerDimension, partitionPoint, 0, bytesPerDimension) == 0) {\n          int newDocID = reader.docID();\n          if (newDocID > docID) {\n            docID = newDocID;\n          }\n        }\n      }\n    }\n    return docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69ebf290ab26d026cc224e517e0d93d931ac87b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}