{"path":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    return checkUpdateStatus(xml, \"1\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    return checkUpdateStatus(xml, \"1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    return checkUpdateStatus(xml, \"1\");\n  }\n\n","sourceOld":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    return checkUpdateStatus(xml, \"1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    return checkUpdateStatus(xml, \"1\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e43d441e40dcdc973f88d42b450c772bb7e2154f","date":1293807941,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    return checkUpdateStatus(xml, \"1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","date":1294014627,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    return checkUpdateStatus(xml, \"1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    return checkUpdateStatus(xml, \"1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","pathOld":"solr/src/java/org/apache/solr/util/TestHarness#validateErrorUpdate(String).mjava","sourceNew":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","sourceOld":"  /**\n   * Validates that an \"update\" (add, commit or optimize) results in success.\n   *\n   * :TODO: currently only deals with one add/doc at a time, this will need changed if/when SOLR-2 is resolved\n   * \n   * @param xml The XML of the update\n   * @return null if successful, otherwise the XML response to the update\n   */\n  public String validateErrorUpdate(String xml) throws SAXException {\n    try {\n      return checkUpdateStatus(xml, \"1\");\n    } catch (SolrException e) {\n      // return ((SolrException)e).getMessage();\n      return null;  // success\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["1da8d55113b689b06716246649de6f62430f15c0","e43d441e40dcdc973f88d42b450c772bb7e2154f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["70ad682703b8585f5d0a637efec044d57ec05efb","b09c7419b92e982a901698cb401ce22ac35e4b04"],"d20d5e40789b1c42f4f926e3174b271256c43657":["e43d441e40dcdc973f88d42b450c772bb7e2154f"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"e43d441e40dcdc973f88d42b450c772bb7e2154f":["1da8d55113b689b06716246649de6f62430f15c0"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["1da8d55113b689b06716246649de6f62430f15c0","e43d441e40dcdc973f88d42b450c772bb7e2154f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b09c7419b92e982a901698cb401ce22ac35e4b04":["e43d441e40dcdc973f88d42b450c772bb7e2154f"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"45669a651c970812a680841b97a77cce06af559f":["ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","b09c7419b92e982a901698cb401ce22ac35e4b04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b09c7419b92e982a901698cb401ce22ac35e4b04"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d20d5e40789b1c42f4f926e3174b271256c43657":[],"1da8d55113b689b06716246649de6f62430f15c0":["70ad682703b8585f5d0a637efec044d57ec05efb","e43d441e40dcdc973f88d42b450c772bb7e2154f","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c"],"e43d441e40dcdc973f88d42b450c772bb7e2154f":["70ad682703b8585f5d0a637efec044d57ec05efb","d20d5e40789b1c42f4f926e3174b271256c43657","ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c","b09c7419b92e982a901698cb401ce22ac35e4b04"],"ff9cf7165d6cbafe4ef4431ecc2dc1af9cb2316c":["45669a651c970812a680841b97a77cce06af559f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"45669a651c970812a680841b97a77cce06af559f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}