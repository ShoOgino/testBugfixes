{"path":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(PayloadSpans,int,int[]).mjava","commits":[{"id":"fd5947db4de866f035b932f219674c03562d904e","date":1219248396,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(PayloadSpans,int,int[]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkSpans(PayloadSpans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(DEBUG)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        if(DEBUG)\n          System.out.println(\"payloads for span:\" + payload.size());\n        Iterator it = payload.iterator();\n        while(it.hasNext()) {\n          byte[] bytes = (byte[]) it.next();\n          if(DEBUG)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff93c6759a7da468c20c64fb459f85bccd0af370","date":1249413002,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(Spans,int,int[]).mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestPayloadSpans#checkSpans(PayloadSpans,int,int[]).mjava","sourceNew":"  private void checkSpans(Spans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(DEBUG)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        if(DEBUG)\n          System.out.println(\"payloads for span:\" + payload.size());\n        Iterator it = payload.iterator();\n        while(it.hasNext()) {\n          byte[] bytes = (byte[]) it.next();\n          if(DEBUG)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","sourceOld":"  private void checkSpans(PayloadSpans spans, int numSpans, int[] numPayloads) throws IOException {\n    int cnt = 0;\n\n    while (spans.next() == true) {\n      if(DEBUG)\n        System.out.println(\"\\nSpans Dump --\");\n      if (spans.isPayloadAvailable()) {\n        Collection payload = spans.getPayload();\n        if(DEBUG)\n          System.out.println(\"payloads for span:\" + payload.size());\n        Iterator it = payload.iterator();\n        while(it.hasNext()) {\n          byte[] bytes = (byte[]) it.next();\n          if(DEBUG)\n            System.out.println(\"doc:\" + spans.doc() + \" s:\" + spans.start() + \" e:\" + spans.end() + \" \"\n              + new String(bytes));\n        }\n\n        assertEquals(numPayloads[cnt],payload.size());\n      } else {\n        assertFalse(\"Expected spans:\" + numPayloads[cnt] + \" found: 0\",numPayloads.length > 0 && numPayloads[cnt] > 0 );\n      }\n      cnt++;\n    }\n\n    assertEquals(numSpans, cnt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fd5947db4de866f035b932f219674c03562d904e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["fd5947db4de866f035b932f219674c03562d904e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff93c6759a7da468c20c64fb459f85bccd0af370"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fd5947db4de866f035b932f219674c03562d904e"],"fd5947db4de866f035b932f219674c03562d904e":["ff93c6759a7da468c20c64fb459f85bccd0af370"],"ff93c6759a7da468c20c64fb459f85bccd0af370":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}