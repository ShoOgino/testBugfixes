{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#read().mjava","commits":[{"id":"91814ce09be68efd0626969632e79ae47d8876d4","date":1425951537,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#read().mjava","pathOld":"/dev/null","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    Map fields = jsonTupleStream.next();\n    if(fields == null) {\n      //Return the EOF tuple.\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      if(fieldMappings != null) {\n        fields = mapFields(fields, fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42f03b407cd85abd6edd2a1fe7cab9990164aa4b","date":1427303865,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    Map fields = jsonTupleStream.next();\n\n    if(trace) {\n      fields.put(\"_CORE_\", this.baseUrl);\n    }\n\n    if(fields == null) {\n      //Return the EOF tuple.\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      if(fieldMappings != null) {\n        fields = mapFields(fields, fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    Map fields = jsonTupleStream.next();\n    if(fields == null) {\n      //Return the EOF tuple.\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      if(fieldMappings != null) {\n        fields = mapFields(fields, fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#read().mjava","pathOld":"/dev/null","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    Map fields = jsonTupleStream.next();\n\n    if(trace) {\n      fields.put(\"_CORE_\", this.baseUrl);\n    }\n\n    if(fields == null) {\n      //Return the EOF tuple.\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      if(fieldMappings != null) {\n        fields = mapFields(fields, fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/SolrStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/SolrStream#read().mjava","sourceNew":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    Map fields = jsonTupleStream.next();\n\n    if(trace) {\n      fields.put(\"_CORE_\", this.baseUrl);\n    }\n\n    if(fields == null) {\n      //Return the EOF tuple.\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      if(fieldMappings != null) {\n        fields = mapFields(fields, fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n\n","sourceOld":"  /**\n  * Reads a Tuple from the stream. The Stream is completed when Tuple.EOF == true.\n  **/\n\n  public Tuple read() throws IOException {\n    Map fields = jsonTupleStream.next();\n\n    if(trace) {\n      fields.put(\"_CORE_\", this.baseUrl);\n    }\n\n    if(fields == null) {\n      //Return the EOF tuple.\n      Map m = new HashMap();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      if(fieldMappings != null) {\n        fields = mapFields(fields, fieldMappings);\n      }\n      return new Tuple(fields);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["91814ce09be68efd0626969632e79ae47d8876d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"91814ce09be68efd0626969632e79ae47d8876d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f00f1c5fad501b66705121feb623f8cfbb6712f9"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"42f03b407cd85abd6edd2a1fe7cab9990164aa4b":["f00f1c5fad501b66705121feb623f8cfbb6712f9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","91814ce09be68efd0626969632e79ae47d8876d4"],"91814ce09be68efd0626969632e79ae47d8876d4":["42f03b407cd85abd6edd2a1fe7cab9990164aa4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}