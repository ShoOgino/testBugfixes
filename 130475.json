{"path":"lucene/core/src/java/org/apache/lucene/util/packed/DirectMonotonicWriter#DirectMonotonicWriter(IndexOutput,IndexOutput,long,int).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectMonotonicWriter#DirectMonotonicWriter(IndexOutput,IndexOutput,long,int).mjava","pathOld":"/dev/null","sourceNew":"  DirectMonotonicWriter(IndexOutput metaOut, IndexOutput dataOut, long numValues, int blockShift) {\n    this.meta = metaOut;\n    this.data = dataOut;\n    this.numValues = numValues;\n    if (blockShift < 2 || blockShift > 30) {\n      throw new IllegalArgumentException(\"blockShift must be in [3-30], got \" + blockShift);\n    }\n    final int blockSize = 1 << blockShift;\n    this.buffer = new long[blockSize];\n    this.bufferSize = 0;\n    this.baseDataPointer = dataOut.getFilePointer();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67cbc09c46338500cb9e86ecb58b202ee257e3dc","date":1580234813,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectMonotonicWriter#DirectMonotonicWriter(IndexOutput,IndexOutput,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectMonotonicWriter#DirectMonotonicWriter(IndexOutput,IndexOutput,long,int).mjava","sourceNew":"  DirectMonotonicWriter(IndexOutput metaOut, IndexOutput dataOut, long numValues, int blockShift) {\n    if (blockShift < MIN_BLOCK_SHIFT || blockShift > MAX_BLOCK_SHIFT) {\n      throw new IllegalArgumentException(\"blockShift must be in [\" + MIN_BLOCK_SHIFT + \"-\" + MAX_BLOCK_SHIFT + \"], got \" + blockShift);\n    }\n    if (numValues < 0) {\n      throw new IllegalArgumentException(\"numValues can't be negative, got \" + numValues);\n    }\n    final long numBlocks = numValues == 0 ? 0 : ((numValues - 1) >>> blockShift) + 1;\n    if (numBlocks > ArrayUtil.MAX_ARRAY_LENGTH) {\n      throw new IllegalArgumentException(\"blockShift is too low for the provided number of values: blockShift=\" + blockShift +\n          \", numValues=\" + numValues + \", MAX_ARRAY_LENGTH=\" + ArrayUtil.MAX_ARRAY_LENGTH);\n    }\n    this.meta = metaOut;\n    this.data = dataOut;\n    this.numValues = numValues;\n    final int blockSize = 1 << blockShift;\n    this.buffer = new long[blockSize];\n    this.bufferSize = 0;\n    this.baseDataPointer = dataOut.getFilePointer();\n  }\n\n","sourceOld":"  DirectMonotonicWriter(IndexOutput metaOut, IndexOutput dataOut, long numValues, int blockShift) {\n    this.meta = metaOut;\n    this.data = dataOut;\n    this.numValues = numValues;\n    if (blockShift < 2 || blockShift > 30) {\n      throw new IllegalArgumentException(\"blockShift must be in [3-30], got \" + blockShift);\n    }\n    final int blockSize = 1 << blockShift;\n    this.buffer = new long[blockSize];\n    this.bufferSize = 0;\n    this.baseDataPointer = dataOut.getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"617d6d4150e0fb2acef8980ce51e3b8e628fb200","date":1580326292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectMonotonicWriter#DirectMonotonicWriter(IndexOutput,IndexOutput,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectMonotonicWriter#DirectMonotonicWriter(IndexOutput,IndexOutput,long,int).mjava","sourceNew":"  DirectMonotonicWriter(IndexOutput metaOut, IndexOutput dataOut, long numValues, int blockShift) {\n    if (blockShift < MIN_BLOCK_SHIFT || blockShift > MAX_BLOCK_SHIFT) {\n      throw new IllegalArgumentException(\"blockShift must be in [\" + MIN_BLOCK_SHIFT + \"-\" + MAX_BLOCK_SHIFT + \"], got \" + blockShift);\n    }\n    if (numValues < 0) {\n      throw new IllegalArgumentException(\"numValues can't be negative, got \" + numValues);\n    }\n    final long numBlocks = numValues == 0 ? 0 : ((numValues - 1) >>> blockShift) + 1;\n    if (numBlocks > ArrayUtil.MAX_ARRAY_LENGTH) {\n      throw new IllegalArgumentException(\"blockShift is too low for the provided number of values: blockShift=\" + blockShift +\n          \", numValues=\" + numValues + \", MAX_ARRAY_LENGTH=\" + ArrayUtil.MAX_ARRAY_LENGTH);\n    }\n    this.meta = metaOut;\n    this.data = dataOut;\n    this.numValues = numValues;\n    final int blockSize = 1 << blockShift;\n    this.buffer = new long[(int) Math.min(numValues, blockSize)];\n    this.bufferSize = 0;\n    this.baseDataPointer = dataOut.getFilePointer();\n  }\n\n","sourceOld":"  DirectMonotonicWriter(IndexOutput metaOut, IndexOutput dataOut, long numValues, int blockShift) {\n    if (blockShift < MIN_BLOCK_SHIFT || blockShift > MAX_BLOCK_SHIFT) {\n      throw new IllegalArgumentException(\"blockShift must be in [\" + MIN_BLOCK_SHIFT + \"-\" + MAX_BLOCK_SHIFT + \"], got \" + blockShift);\n    }\n    if (numValues < 0) {\n      throw new IllegalArgumentException(\"numValues can't be negative, got \" + numValues);\n    }\n    final long numBlocks = numValues == 0 ? 0 : ((numValues - 1) >>> blockShift) + 1;\n    if (numBlocks > ArrayUtil.MAX_ARRAY_LENGTH) {\n      throw new IllegalArgumentException(\"blockShift is too low for the provided number of values: blockShift=\" + blockShift +\n          \", numValues=\" + numValues + \", MAX_ARRAY_LENGTH=\" + ArrayUtil.MAX_ARRAY_LENGTH);\n    }\n    this.meta = metaOut;\n    this.data = dataOut;\n    this.numValues = numValues;\n    final int blockSize = 1 << blockShift;\n    this.buffer = new long[blockSize];\n    this.bufferSize = 0;\n    this.baseDataPointer = dataOut.getFilePointer();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67cbc09c46338500cb9e86ecb58b202ee257e3dc":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["67cbc09c46338500cb9e86ecb58b202ee257e3dc"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"]},"commit2Childs":{"67cbc09c46338500cb9e86ecb58b202ee257e3dc":["617d6d4150e0fb2acef8980ce51e3b8e628fb200"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"617d6d4150e0fb2acef8980ce51e3b8e628fb200":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a870f9917149dc600c4ad4417d615c1795de5864":["67cbc09c46338500cb9e86ecb58b202ee257e3dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}