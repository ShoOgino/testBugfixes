{"path":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setIndexOptions(IndexOptions).mjava","commits":[{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setIndexOptions(IndexOptions).mjava","pathOld":"/dev/null","sourceNew":"  /** Record the {@link IndexOptions} to use with this field. */\n  public void setIndexOptions(IndexOptions newIndexOptions) {\n    if (indexOptions != newIndexOptions) {\n      if (indexOptions == IndexOptions.NONE) {\n        indexOptions = newIndexOptions;\n      } else if (newIndexOptions != IndexOptions.NONE) {\n        // downgrade\n        indexOptions = indexOptions.compareTo(newIndexOptions) < 0 ? indexOptions : newIndexOptions;\n      }\n    }\n\n    if (indexOptions == IndexOptions.NONE || indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      storePayloads = false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c905a42bedc7c7d1acb37b177498306b7e866","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setIndexOptions(IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setIndexOptions(IndexOptions).mjava","sourceNew":"  /** Record the {@link IndexOptions} to use with this field. */\n  public void setIndexOptions(IndexOptions newIndexOptions) {\n    if (indexOptions != newIndexOptions) {\n      if (indexOptions == IndexOptions.NONE) {\n        indexOptions = newIndexOptions;\n      } else if (newIndexOptions != IndexOptions.NONE) {\n        throw new IllegalArgumentException(\"cannot change field \\\"\" + name + \"\\\" from index options=\" + indexOptions + \" to inconsistent index options=\" + newIndexOptions);\n      }\n    }\n\n    if (indexOptions == IndexOptions.NONE || indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      storePayloads = false;\n    }\n  }\n\n","sourceOld":"  /** Record the {@link IndexOptions} to use with this field. */\n  public void setIndexOptions(IndexOptions newIndexOptions) {\n    if (indexOptions != newIndexOptions) {\n      if (indexOptions == IndexOptions.NONE) {\n        indexOptions = newIndexOptions;\n      } else if (newIndexOptions != IndexOptions.NONE) {\n        // downgrade\n        indexOptions = indexOptions.compareTo(newIndexOptions) < 0 ? indexOptions : newIndexOptions;\n      }\n    }\n\n    if (indexOptions == IndexOptions.NONE || indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      storePayloads = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683b2041fcb490acd2bfec6034c593b3cfb2098c","date":1596135595,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setIndexOptions(IndexOptions).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FieldInfo#setIndexOptions(IndexOptions).mjava","sourceNew":"  /** Record the {@link IndexOptions} to use with this field. */\n  public void setIndexOptions(IndexOptions newIndexOptions) {\n    if (indexOptions != newIndexOptions) {\n      if (indexOptions == IndexOptions.NONE) {\n        indexOptions = newIndexOptions;\n      } else if (newIndexOptions != IndexOptions.NONE) {\n        throw new IllegalArgumentException(\"cannot change field \\\"\" + name + \"\\\" from index options=\" + indexOptions + \" to inconsistent index options=\" + newIndexOptions);\n      }\n    }\n\n    if (indexOptions == IndexOptions.NONE || indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      storePayloads = false;\n    }\n    this.checkConsistency();\n  }\n\n","sourceOld":"  /** Record the {@link IndexOptions} to use with this field. */\n  public void setIndexOptions(IndexOptions newIndexOptions) {\n    if (indexOptions != newIndexOptions) {\n      if (indexOptions == IndexOptions.NONE) {\n        indexOptions = newIndexOptions;\n      } else if (newIndexOptions != IndexOptions.NONE) {\n        throw new IllegalArgumentException(\"cannot change field \\\"\" + name + \"\\\" from index options=\" + indexOptions + \" to inconsistent index options=\" + newIndexOptions);\n      }\n    }\n\n    if (indexOptions == IndexOptions.NONE || indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      // cannot store payloads if we don't store positions:\n      storePayloads = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"165c905a42bedc7c7d1acb37b177498306b7e866":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"683b2041fcb490acd2bfec6034c593b3cfb2098c":["165c905a42bedc7c7d1acb37b177498306b7e866"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683b2041fcb490acd2bfec6034c593b3cfb2098c"]},"commit2Childs":{"165c905a42bedc7c7d1acb37b177498306b7e866":["683b2041fcb490acd2bfec6034c593b3cfb2098c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["165c905a42bedc7c7d1acb37b177498306b7e866"],"683b2041fcb490acd2bfec6034c593b3cfb2098c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}