{"path":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testEnsureReplicaInLeaderInitiatedRecovery().mjava","commits":[{"id":"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc","date":1426444850,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testEnsureReplicaInLeaderInitiatedRecovery().mjava","pathOld":"/dev/null","sourceNew":"  public void testEnsureReplicaInLeaderInitiatedRecovery() throws Exception  {\n    String zkDir = createTempDir(\"testEnsureReplicaInLeaderInitiatedRecovery\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      cc = getCoreContainer();\n      ZkController zkController = null;\n\n      try {\n        CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n        zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig, new CurrentCoreDescriptorProvider() {\n\n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            // do nothing\n            return null;\n          }\n        });\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1:8983/solr\");\n        propMap.put(ZkStateReader.CORE_NAME_PROP, \"replica1\");\n        propMap.put(ZkStateReader.NODE_NAME_PROP, \"127.0.0.1:8983_solr\");\n        Replica replica = new Replica(\"replica1\", propMap);\n        try {\n          // this method doesn't throw exception when node isn't leader\n          zkController.ensureReplicaInLeaderInitiatedRecovery(\"c1\", \"shard1\",\n              new ZkCoreNodeProps(replica), false, \"non_existent_leader\");\n          fail(\"ZkController should not write LIR state for node which is not leader\");\n        } catch (Exception e) {\n          assertNull(\"ZkController should not write LIR state for node which is not leader\",\n              zkController.getLeaderInitiatedRecoveryState(\"c1\", \"shard1\", \"replica1\"));\n        }\n      } finally {\n        if (zkController != null)\n          zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0932eb10135843758b2ca508d5aa2b4798aa07f9","date":1426947197,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testEnsureReplicaInLeaderInitiatedRecovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testEnsureReplicaInLeaderInitiatedRecovery().mjava","sourceNew":"  public void testEnsureReplicaInLeaderInitiatedRecovery() throws Exception  {\n    String zkDir = createTempDir(\"testEnsureReplicaInLeaderInitiatedRecovery\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      cc = getCoreContainer();\n      ZkController zkController = null;\n\n      try {\n        CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n        zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig, new CurrentCoreDescriptorProvider() {\n\n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            // do nothing\n            return null;\n          }\n        });\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1:8983/solr\");\n        propMap.put(ZkStateReader.CORE_NAME_PROP, \"replica1\");\n        propMap.put(ZkStateReader.NODE_NAME_PROP, \"127.0.0.1:8983_solr\");\n        Replica replica = new Replica(\"replica1\", propMap);\n        try {\n          // this method doesn't throw exception when node isn't leader\n          zkController.ensureReplicaInLeaderInitiatedRecovery(\"c1\", \"shard1\",\n              new ZkCoreNodeProps(replica), \"non_existent_leader\", false, false);\n          fail(\"ZkController should not write LIR state for node which is not leader\");\n        } catch (Exception e) {\n          assertNull(\"ZkController should not write LIR state for node which is not leader\",\n              zkController.getLeaderInitiatedRecoveryState(\"c1\", \"shard1\", \"replica1\"));\n        }\n      } finally {\n        if (zkController != null)\n          zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testEnsureReplicaInLeaderInitiatedRecovery() throws Exception  {\n    String zkDir = createTempDir(\"testEnsureReplicaInLeaderInitiatedRecovery\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      cc = getCoreContainer();\n      ZkController zkController = null;\n\n      try {\n        CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n        zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig, new CurrentCoreDescriptorProvider() {\n\n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            // do nothing\n            return null;\n          }\n        });\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1:8983/solr\");\n        propMap.put(ZkStateReader.CORE_NAME_PROP, \"replica1\");\n        propMap.put(ZkStateReader.NODE_NAME_PROP, \"127.0.0.1:8983_solr\");\n        Replica replica = new Replica(\"replica1\", propMap);\n        try {\n          // this method doesn't throw exception when node isn't leader\n          zkController.ensureReplicaInLeaderInitiatedRecovery(\"c1\", \"shard1\",\n              new ZkCoreNodeProps(replica), false, \"non_existent_leader\");\n          fail(\"ZkController should not write LIR state for node which is not leader\");\n        } catch (Exception e) {\n          assertNull(\"ZkController should not write LIR state for node which is not leader\",\n              zkController.getLeaderInitiatedRecoveryState(\"c1\", \"shard1\", \"replica1\"));\n        }\n      } finally {\n        if (zkController != null)\n          zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testEnsureReplicaInLeaderInitiatedRecovery().mjava","pathOld":"/dev/null","sourceNew":"  public void testEnsureReplicaInLeaderInitiatedRecovery() throws Exception  {\n    String zkDir = createTempDir(\"testEnsureReplicaInLeaderInitiatedRecovery\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      cc = getCoreContainer();\n      ZkController zkController = null;\n\n      try {\n        CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n        zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig, new CurrentCoreDescriptorProvider() {\n\n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            // do nothing\n            return null;\n          }\n        });\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1:8983/solr\");\n        propMap.put(ZkStateReader.CORE_NAME_PROP, \"replica1\");\n        propMap.put(ZkStateReader.NODE_NAME_PROP, \"127.0.0.1:8983_solr\");\n        Replica replica = new Replica(\"replica1\", propMap);\n        try {\n          // this method doesn't throw exception when node isn't leader\n          zkController.ensureReplicaInLeaderInitiatedRecovery(\"c1\", \"shard1\",\n              new ZkCoreNodeProps(replica), \"non_existent_leader\", false, false);\n          fail(\"ZkController should not write LIR state for node which is not leader\");\n        } catch (Exception e) {\n          assertNull(\"ZkController should not write LIR state for node which is not leader\",\n              zkController.getLeaderInitiatedRecoveryState(\"c1\", \"shard1\", \"replica1\"));\n        }\n      } finally {\n        if (zkController != null)\n          zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e11b7252d34d00665befca520dee82fd64aed3c2","date":1429595379,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testEnsureReplicaInLeaderInitiatedRecovery().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testEnsureReplicaInLeaderInitiatedRecovery().mjava","sourceNew":"  /*\n  Test that:\n  1) LIR state to 'down' is not set unless publishing node is a leader\n    1a) Test that leader can publish when LIR node already exists in zk\n    1b) Test that leader can publish when LIR node does not exist - TODO\n  2) LIR state to 'active' or 'recovery' can be set regardless of whether publishing\n    node is leader or not - TODO\n   */\n  public void testEnsureReplicaInLeaderInitiatedRecovery() throws Exception  {\n    String zkDir = createTempDir(\"testEnsureReplicaInLeaderInitiatedRecovery\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      cc = getCoreContainer();\n      ZkController zkController = null;\n\n      try {\n        CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n        zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig, new CurrentCoreDescriptorProvider() {\n\n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            // do nothing\n            return null;\n          }\n        });\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1:8983/solr\");\n        propMap.put(ZkStateReader.CORE_NAME_PROP, \"replica1\");\n        propMap.put(ZkStateReader.NODE_NAME_PROP, \"127.0.0.1:8983_solr\");\n        Replica replica = new Replica(\"replica1\", propMap);\n        try {\n          // this method doesn't throw exception when node isn't leader\n          zkController.ensureReplicaInLeaderInitiatedRecovery(\"c1\", \"shard1\",\n              new ZkCoreNodeProps(replica), \"non_existent_leader\", false, false);\n          fail(\"ZkController should not write LIR state for node which is not leader\");\n        } catch (Exception e) {\n          assertNull(\"ZkController should not write LIR state for node which is not leader\",\n              zkController.getLeaderInitiatedRecoveryState(\"c1\", \"shard1\", \"replica1\"));\n        }\n      } finally {\n        if (zkController != null)\n          zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testEnsureReplicaInLeaderInitiatedRecovery() throws Exception  {\n    String zkDir = createTempDir(\"testEnsureReplicaInLeaderInitiatedRecovery\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      cc = getCoreContainer();\n      ZkController zkController = null;\n\n      try {\n        CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n        zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig, new CurrentCoreDescriptorProvider() {\n\n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            // do nothing\n            return null;\n          }\n        });\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1:8983/solr\");\n        propMap.put(ZkStateReader.CORE_NAME_PROP, \"replica1\");\n        propMap.put(ZkStateReader.NODE_NAME_PROP, \"127.0.0.1:8983_solr\");\n        Replica replica = new Replica(\"replica1\", propMap);\n        try {\n          // this method doesn't throw exception when node isn't leader\n          zkController.ensureReplicaInLeaderInitiatedRecovery(\"c1\", \"shard1\",\n              new ZkCoreNodeProps(replica), \"non_existent_leader\", false, false);\n          fail(\"ZkController should not write LIR state for node which is not leader\");\n        } catch (Exception e) {\n          assertNull(\"ZkController should not write LIR state for node which is not leader\",\n              zkController.getLeaderInitiatedRecoveryState(\"c1\", \"shard1\", \"replica1\"));\n        }\n      } finally {\n        if (zkController != null)\n          zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22859cb40e09867e7da8de84a31956c07259f82f","date":1441822065,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testEnsureReplicaInLeaderInitiatedRecovery().mjava","sourceNew":null,"sourceOld":"  /*\n  Test that:\n  1) LIR state to 'down' is not set unless publishing node is a leader\n    1a) Test that leader can publish when LIR node already exists in zk\n    1b) Test that leader can publish when LIR node does not exist - TODO\n  2) LIR state to 'active' or 'recovery' can be set regardless of whether publishing\n    node is leader or not - TODO\n   */\n  public void testEnsureReplicaInLeaderInitiatedRecovery() throws Exception  {\n    String zkDir = createTempDir(\"testEnsureReplicaInLeaderInitiatedRecovery\").toFile().getAbsolutePath();\n    CoreContainer cc = null;\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      cc = getCoreContainer();\n      ZkController zkController = null;\n\n      try {\n        CloudConfig cloudConfig = new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"solr\").build();\n        zkController = new ZkController(cc, server.getZkAddress(), TIMEOUT, cloudConfig, new CurrentCoreDescriptorProvider() {\n\n          @Override\n          public List<CoreDescriptor> getCurrentDescriptors() {\n            // do nothing\n            return null;\n          }\n        });\n        HashMap<String, Object> propMap = new HashMap<>();\n        propMap.put(ZkStateReader.BASE_URL_PROP, \"http://127.0.0.1:8983/solr\");\n        propMap.put(ZkStateReader.CORE_NAME_PROP, \"replica1\");\n        propMap.put(ZkStateReader.NODE_NAME_PROP, \"127.0.0.1:8983_solr\");\n        Replica replica = new Replica(\"replica1\", propMap);\n        try {\n          // this method doesn't throw exception when node isn't leader\n          zkController.ensureReplicaInLeaderInitiatedRecovery(\"c1\", \"shard1\",\n              new ZkCoreNodeProps(replica), \"non_existent_leader\", false, false);\n          fail(\"ZkController should not write LIR state for node which is not leader\");\n        } catch (Exception e) {\n          assertNull(\"ZkController should not write LIR state for node which is not leader\",\n              zkController.getLeaderInitiatedRecoveryState(\"c1\", \"shard1\", \"replica1\"));\n        }\n      } finally {\n        if (zkController != null)\n          zkController.close();\n      }\n    } finally {\n      if (cc != null) {\n        cc.shutdown();\n      }\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0932eb10135843758b2ca508d5aa2b4798aa07f9"],"22859cb40e09867e7da8de84a31956c07259f82f":["e11b7252d34d00665befca520dee82fd64aed3c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc"],"e11b7252d34d00665befca520dee82fd64aed3c2":["0932eb10135843758b2ca508d5aa2b4798aa07f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22859cb40e09867e7da8de84a31956c07259f82f"]},"commit2Childs":{"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc":["0932eb10135843758b2ca508d5aa2b4798aa07f9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"22859cb40e09867e7da8de84a31956c07259f82f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e11b7252d34d00665befca520dee82fd64aed3c2"],"e11b7252d34d00665befca520dee82fd64aed3c2":["22859cb40e09867e7da8de84a31956c07259f82f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}