{"path":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Shape,int,boolean).mjava","commits":[{"id":"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e","date":1330665960,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Shape,int,boolean).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/prefix/tree/SpatialPrefixTree#getNodes(Shape,int,boolean).mjava","sourceNew":"  /**\n   * Gets the intersecting & including cells for the specified shape, without exceeding detail level.\n   * The result is a set of cells (no dups), sorted. Unmodifiable.\n   * <p/>\n   * This implementation checks if shape is a Point and if so uses an implementation that\n   * recursively calls {@link Node#getSubCell(com.spatial4j.core.shape.Point)}. Cell subclasses\n   * ideally implement that method with a quick implementation, otherwise, subclasses should\n   * override this method to invoke {@link #getNodesAltPoint(com.spatial4j.core.shape.Point, int, boolean)}.\n   * TODO consider another approach returning an iterator -- won't build up all cells in memory.\n   */\n  public List<Node> getNodes(Shape shape, int detailLevel, boolean inclParents) {\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n\n    List<Node> cells;\n    if (shape instanceof Point) {\n      //optimized point algorithm\n      final int initialCapacity = inclParents ? 1 + detailLevel : 1;\n      cells = new ArrayList<Node>(initialCapacity);\n      recursiveGetNodes(getWorldNode(), (Point) shape, detailLevel, true, cells);\n      assert cells.size() == initialCapacity;\n    } else {\n      cells = new ArrayList<Node>(inclParents ? 1024 : 512);\n      recursiveGetNodes(getWorldNode(), shape, detailLevel, inclParents, cells);\n    }\n    if (inclParents) {\n      Node c = cells.remove(0);//remove getWorldNode()\n      assert c.getLevel() == 0;\n    }\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Gets the intersecting & including cells for the specified shape, without exceeding detail level.\n   * The result is a set of cells (no dups), sorted. Unmodifiable.\n   * <p/>\n   * This implementation checks if shape is a Point and if so uses an implementation that\n   * recursively calls {@link Node#getSubCell(com.spatial4j.core.shape.Point)}. Cell subclasses\n   * ideally implement that method with a quick implementation, otherwise, subclasses should\n   * override this method to invoke {@link #getNodesAltPoint(com.spatial4j.core.shape.Point, int, boolean)}.\n   * TODO consider another approach returning an iterator -- won't build up all cells in memory.\n   */\n  public List<Node> getNodes(Shape shape, int detailLevel, boolean inclParents) {\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n\n    List<Node> cells;\n    if (shape instanceof Point) {\n      //optimized point algorithm\n      final int initialCapacity = inclParents ? 1 + detailLevel : 1;\n      cells = new ArrayList<Node>(initialCapacity);\n      recursiveGetNodes(getWorldNode(), (Point) shape, detailLevel, true, cells);\n      assert cells.size() == initialCapacity;\n    } else {\n      cells = new ArrayList<Node>(inclParents ? 1024 : 512);\n      recursiveGetNodes(getWorldNode(), shape, detailLevel, inclParents, cells);\n    }\n    if (inclParents) {\n      Node c = cells.remove(0);//remove getWorldNode()\n      assert c.getLevel() == 0;\n    }\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Shape,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets the intersecting & including cells for the specified shape, without exceeding detail level.\n   * The result is a set of cells (no dups), sorted. Unmodifiable.\n   * <p/>\n   * This implementation checks if shape is a Point and if so uses an implementation that\n   * recursively calls {@link Node#getSubCell(com.spatial4j.core.shape.Point)}. Cell subclasses\n   * ideally implement that method with a quick implementation, otherwise, subclasses should\n   * override this method to invoke {@link #getNodesAltPoint(com.spatial4j.core.shape.Point, int, boolean)}.\n   * TODO consider another approach returning an iterator -- won't build up all cells in memory.\n   */\n  public List<Node> getNodes(Shape shape, int detailLevel, boolean inclParents) {\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n\n    List<Node> cells;\n    if (shape instanceof Point) {\n      //optimized point algorithm\n      final int initialCapacity = inclParents ? 1 + detailLevel : 1;\n      cells = new ArrayList<Node>(initialCapacity);\n      recursiveGetNodes(getWorldNode(), (Point) shape, detailLevel, true, cells);\n      assert cells.size() == initialCapacity;\n    } else {\n      cells = new ArrayList<Node>(inclParents ? 1024 : 512);\n      recursiveGetNodes(getWorldNode(), shape, detailLevel, inclParents, cells);\n    }\n    if (inclParents) {\n      Node c = cells.remove(0);//remove getWorldNode()\n      assert c.getLevel() == 0;\n    }\n    return cells;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Shape,int,boolean).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/prefix/tree/SpatialPrefixTree#getNodes(Shape,int,boolean).mjava","sourceNew":"  /**\n   * Gets the intersecting & including cells for the specified shape, without exceeding detail level.\n   * The result is a set of cells (no dups), sorted. Unmodifiable.\n   * <p/>\n   * This implementation checks if shape is a Point and if so uses an implementation that\n   * recursively calls {@link Node#getSubCell(com.spatial4j.core.shape.Point)}. Cell subclasses\n   * ideally implement that method with a quick implementation, otherwise, subclasses should\n   * override this method to invoke {@link #getNodesAltPoint(com.spatial4j.core.shape.Point, int, boolean)}.\n   * TODO consider another approach returning an iterator -- won't build up all cells in memory.\n   */\n  public List<Node> getNodes(Shape shape, int detailLevel, boolean inclParents) {\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n\n    List<Node> cells;\n    if (shape instanceof Point) {\n      //optimized point algorithm\n      final int initialCapacity = inclParents ? 1 + detailLevel : 1;\n      cells = new ArrayList<Node>(initialCapacity);\n      recursiveGetNodes(getWorldNode(), (Point) shape, detailLevel, true, cells);\n      assert cells.size() == initialCapacity;\n    } else {\n      cells = new ArrayList<Node>(inclParents ? 1024 : 512);\n      recursiveGetNodes(getWorldNode(), shape, detailLevel, inclParents, cells);\n    }\n    if (inclParents) {\n      Node c = cells.remove(0);//remove getWorldNode()\n      assert c.getLevel() == 0;\n    }\n    return cells;\n  }\n\n","sourceOld":"  /**\n   * Gets the intersecting & including cells for the specified shape, without exceeding detail level.\n   * The result is a set of cells (no dups), sorted. Unmodifiable.\n   * <p/>\n   * This implementation checks if shape is a Point and if so uses an implementation that\n   * recursively calls {@link Node#getSubCell(com.spatial4j.core.shape.Point)}. Cell subclasses\n   * ideally implement that method with a quick implementation, otherwise, subclasses should\n   * override this method to invoke {@link #getNodesAltPoint(com.spatial4j.core.shape.Point, int, boolean)}.\n   * TODO consider another approach returning an iterator -- won't build up all cells in memory.\n   */\n  public List<Node> getNodes(Shape shape, int detailLevel, boolean inclParents) {\n    if (detailLevel > maxLevels) {\n      throw new IllegalArgumentException(\"detailLevel > maxLevels\");\n    }\n\n    List<Node> cells;\n    if (shape instanceof Point) {\n      //optimized point algorithm\n      final int initialCapacity = inclParents ? 1 + detailLevel : 1;\n      cells = new ArrayList<Node>(initialCapacity);\n      recursiveGetNodes(getWorldNode(), (Point) shape, detailLevel, true, cells);\n      assert cells.size() == initialCapacity;\n    } else {\n      cells = new ArrayList<Node>(inclParents ? 1024 : 512);\n      recursiveGetNodes(getWorldNode(), shape, detailLevel, inclParents, cells);\n    }\n    if (inclParents) {\n      Node c = cells.remove(0);//remove getWorldNode()\n      assert c.getLevel() == 0;\n    }\n    return cells;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e47768b261c28e7e6032060e8331475c81057953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e47768b261c28e7e6032060e8331475c81057953":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e47768b261c28e7e6032060e8331475c81057953","de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"e47768b261c28e7e6032060e8331475c81057953":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}