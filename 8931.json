{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter#incrementToken().mjava","commits":[{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  public final boolean incrementToken() throws IOException {\n    if (!prefixExhausted) {\n      Token nextToken = getNextPrefixInputToken(reusableToken);\n      if (nextToken == null) {\n        prefixExhausted = true;\n      } else {\n        previousPrefixToken.reinit(nextToken);\n        // Make it a deep copy\n        Payload p = previousPrefixToken.getPayload();\n        if (p != null) {\n          previousPrefixToken.setPayload((Payload) p.clone());\n        }\n        setCurrentToken(nextToken);\n        return true;\n      }\n    }\n\n    Token nextToken = getNextSuffixInputToken(reusableToken);\n    if (nextToken == null) {\n      return false;\n    }\n\n    nextToken = updateSuffixToken(nextToken, previousPrefixToken);\n    setCurrentToken(nextToken);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (!prefixExhausted) {\n      Token nextToken = getNextPrefixInputToken(reusableToken);\n      if (nextToken == null) {\n        prefixExhausted = true;\n      } else {\n        previousPrefixToken.reinit(nextToken);\n        // Make it a deep copy\n        Payload p = previousPrefixToken.getPayload();\n        if (p != null) {\n          previousPrefixToken.setPayload((Payload) p.clone());\n        }\n        setCurrentToken(nextToken);\n        return true;\n      }\n    }\n\n    Token nextToken = getNextSuffixInputToken(reusableToken);\n    if (nextToken == null) {\n      return false;\n    }\n\n    nextToken = updateSuffixToken(nextToken, previousPrefixToken);\n    setCurrentToken(nextToken);\n    return true;\n  }\n\n","sourceOld":"  public final boolean incrementToken() throws IOException {\n    if (!prefixExhausted) {\n      Token nextToken = getNextPrefixInputToken(reusableToken);\n      if (nextToken == null) {\n        prefixExhausted = true;\n      } else {\n        previousPrefixToken.reinit(nextToken);\n        // Make it a deep copy\n        Payload p = previousPrefixToken.getPayload();\n        if (p != null) {\n          previousPrefixToken.setPayload((Payload) p.clone());\n        }\n        setCurrentToken(nextToken);\n        return true;\n      }\n    }\n\n    Token nextToken = getNextSuffixInputToken(reusableToken);\n    if (nextToken == null) {\n      return false;\n    }\n\n    nextToken = updateSuffixToken(nextToken, previousPrefixToken);\n    setCurrentToken(nextToken);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/miscellaneous/PrefixAwareTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (!prefixExhausted) {\n      Token nextToken = getNextPrefixInputToken(reusableToken);\n      if (nextToken == null) {\n        prefixExhausted = true;\n      } else {\n        previousPrefixToken.reinit(nextToken);\n        // Make it a deep copy\n        Payload p = previousPrefixToken.getPayload();\n        if (p != null) {\n          previousPrefixToken.setPayload((Payload) p.clone());\n        }\n        setCurrentToken(nextToken);\n        return true;\n      }\n    }\n\n    Token nextToken = getNextSuffixInputToken(reusableToken);\n    if (nextToken == null) {\n      return false;\n    }\n\n    nextToken = updateSuffixToken(nextToken, previousPrefixToken);\n    setCurrentToken(nextToken);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    if (!prefixExhausted) {\n      Token nextToken = getNextPrefixInputToken(reusableToken);\n      if (nextToken == null) {\n        prefixExhausted = true;\n      } else {\n        previousPrefixToken.reinit(nextToken);\n        // Make it a deep copy\n        Payload p = previousPrefixToken.getPayload();\n        if (p != null) {\n          previousPrefixToken.setPayload((Payload) p.clone());\n        }\n        setCurrentToken(nextToken);\n        return true;\n      }\n    }\n\n    Token nextToken = getNextSuffixInputToken(reusableToken);\n    if (nextToken == null) {\n      return false;\n    }\n\n    nextToken = updateSuffixToken(nextToken, previousPrefixToken);\n    setCurrentToken(nextToken);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}