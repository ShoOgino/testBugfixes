{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","commits":[{"id":"547b9bdc942b65ebcd943738bb12c2a222fcf566","date":1432317527,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf","date":1432317730,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919a9ff0212f46eb240b8716a6d189b06659d3f2","date":1432317985,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1","date":1437834887,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","sourceNew":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","sourceOld":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      LogManager.getLogger(\"org.apache.zookeeper\").setLevel(Level.ERROR);\n      LogManager.getLogger(\"org.apache.solr.common.cloud\").setLevel(Level.WARN);\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","sourceNew":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","sourceOld":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","sourceNew":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","sourceOld":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient(zkHost)) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","sourceNew":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","sourceOld":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zkHost).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","bugFix":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b79a5db147a1c6f95d1625ddbc3561ef56955225","date":1528848080,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","sourceNew":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","sourceOld":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","sourceNew":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","sourceOld":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI#resolveSolrUrl(CommandLine).mjava","sourceNew":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","sourceOld":"  /**\n   * Get the base URL of a live Solr instance from either the solrUrl command-line option from ZooKeeper.\n   */\n  public static String resolveSolrUrl(CommandLine cli) throws Exception {\n    String solrUrl = cli.getOptionValue(\"solrUrl\");\n    if (solrUrl == null) {\n      String zkHost = cli.getOptionValue(\"zkHost\");\n      if (zkHost == null)\n        throw new IllegalStateException(\"Must provide either the '-solrUrl' or '-zkHost' parameters!\");\n\n      try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n        cloudSolrClient.connect();\n        Set<String> liveNodes = cloudSolrClient.getZkStateReader().getClusterState().getLiveNodes();\n        if (liveNodes.isEmpty())\n          throw new IllegalStateException(\"No live nodes found! Cannot determine 'solrUrl' from ZooKeeper: \"+zkHost);\n\n        String firstLiveNode = liveNodes.iterator().next();\n        solrUrl = cloudSolrClient.getZkStateReader().getBaseUrlForNodeName(firstLiveNode);\n      }\n    }\n    return solrUrl;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","b79a5db147a1c6f95d1625ddbc3561ef56955225"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"547b9bdc942b65ebcd943738bb12c2a222fcf566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b79a5db147a1c6f95d1625ddbc3561ef56955225"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["547b9bdc942b65ebcd943738bb12c2a222fcf566"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","b79a5db147a1c6f95d1625ddbc3561ef56955225"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","b79a5db147a1c6f95d1625ddbc3561ef56955225","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"547b9bdc942b65ebcd943738bb12c2a222fcf566":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["547b9bdc942b65ebcd943738bb12c2a222fcf566"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["c1a70d04f6bb2fdf51a08d4d2cb919057f29f0b1"],"b79a5db147a1c6f95d1625ddbc3561ef56955225":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}