{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","commits":[{"id":"3cdad2c6b6234338031bcc1f24c001a5ad66f714","date":1296866109,"type":0,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","sourceOld":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdad2c6b6234338031bcc1f24c001a5ad66f714"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","3cdad2c6b6234338031bcc1f24c001a5ad66f714","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"3cdad2c6b6234338031bcc1f24c001a5ad66f714":["b89678825b68eccaf09e6ab71675fc0b0af1e099","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}