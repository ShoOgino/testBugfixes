{"path":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#assertConsistent().mjava","commits":[{"id":"e5eed7b3a60b52b9f1c32db9c49da397e06f88af","date":1417105424,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#assertConsistent().mjava","pathOld":"/dev/null","sourceNew":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedFilters.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Filter> keys = new HashSet<Filter>(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedFilters);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed = 0;\n    for (Filter filter : mostRecentlyUsedFilters) {\n      recomputedRamBytesUsed += ramBytesUsed(filter);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += leafCache.ramBytesUsed();\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d6ade6517735e5fca21539f4ff32151bf0a89b8","date":1418291454,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#assertConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#assertConsistent().mjava","sourceNew":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedFilters.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Filter> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedFilters);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueFilters.size();\n    for (Filter filter : mostRecentlyUsedFilters) {\n      recomputedRamBytesUsed += ramBytesUsed(filter);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n  }\n\n","sourceOld":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedFilters.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Filter> keys = new HashSet<Filter>(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedFilters);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed = 0;\n    for (Filter filter : mostRecentlyUsedFilters) {\n      recomputedRamBytesUsed += ramBytesUsed(filter);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += leafCache.ramBytesUsed();\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19","date":1418741524,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#assertConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#assertConsistent().mjava","sourceNew":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedFilters.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Filter> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedFilters);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueFilters.size();\n    for (Filter filter : mostRecentlyUsedFilters) {\n      recomputedRamBytesUsed += ramBytesUsed(filter);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n\n    long recomputedCacheSize = 0;\n    for (LeafCache leafCache : cache.values()) {\n      recomputedCacheSize += leafCache.cache.size();\n    }\n    if (recomputedCacheSize != getCacheSize()) {\n      throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n    }\n  }\n\n","sourceOld":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedFilters.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Filter> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedFilters);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueFilters.size();\n    for (Filter filter : mostRecentlyUsedFilters) {\n      recomputedRamBytesUsed += ramBytesUsed(filter);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LRUQueryCache#assertConsistent().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#assertConsistent().mjava","sourceNew":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedQueries.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Query> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedQueries);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueQueries.size();\n    for (Query query : mostRecentlyUsedQueries) {\n      recomputedRamBytesUsed += ramBytesUsed(query);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n\n    long recomputedCacheSize = 0;\n    for (LeafCache leafCache : cache.values()) {\n      recomputedCacheSize += leafCache.cache.size();\n    }\n    if (recomputedCacheSize != getCacheSize()) {\n      throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n    }\n  }\n\n","sourceOld":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedFilters.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Filter> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedFilters);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueFilters.size();\n    for (Filter filter : mostRecentlyUsedFilters) {\n      recomputedRamBytesUsed += ramBytesUsed(filter);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n\n    long recomputedCacheSize = 0;\n    for (LeafCache leafCache : cache.values()) {\n      recomputedCacheSize += leafCache.cache.size();\n    }\n    if (recomputedCacheSize != getCacheSize()) {\n      throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/LRUFilterCache#assertConsistent().mjava","sourceNew":null,"sourceOld":"  // pkg-private for testing\n  synchronized void assertConsistent() {\n    if (requiresEviction()) {\n      throw new AssertionError(\"requires evictions: size=\" + mostRecentlyUsedFilters.size()\n          + \", maxSize=\" + maxSize + \", ramBytesUsed=\" + ramBytesUsed() + \", maxRamBytesUsed=\" + maxRamBytesUsed);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      Set<Filter> keys = Collections.newSetFromMap(new IdentityHashMap<>());\n      keys.addAll(leafCache.cache.keySet());\n      keys.removeAll(mostRecentlyUsedFilters);\n      if (!keys.isEmpty()) {\n        throw new AssertionError(\"One leaf cache contains more keys than the top-level cache: \" + keys);\n      }\n    }\n    long recomputedRamBytesUsed =\n          HASHTABLE_RAM_BYTES_PER_ENTRY * cache.size()\n        + LINKED_HASHTABLE_RAM_BYTES_PER_ENTRY * uniqueFilters.size();\n    for (Filter filter : mostRecentlyUsedFilters) {\n      recomputedRamBytesUsed += ramBytesUsed(filter);\n    }\n    for (LeafCache leafCache : cache.values()) {\n      recomputedRamBytesUsed += HASHTABLE_RAM_BYTES_PER_ENTRY * leafCache.cache.size();\n      for (DocIdSet set : leafCache.cache.values()) {\n        recomputedRamBytesUsed += set.ramBytesUsed();\n      }\n    }\n    if (recomputedRamBytesUsed != ramBytesUsed) {\n      throw new AssertionError(\"ramBytesUsed mismatch : \" + ramBytesUsed + \" != \" + recomputedRamBytesUsed);\n    }\n\n    long recomputedCacheSize = 0;\n    for (LeafCache leafCache : cache.values()) {\n      recomputedCacheSize += leafCache.cache.size();\n    }\n    if (recomputedCacheSize != getCacheSize()) {\n      throw new AssertionError(\"cacheSize mismatch : \" + getCacheSize() + \" != \" + recomputedCacheSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d6ade6517735e5fca21539f4ff32151bf0a89b8":["b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19"],"e5eed7b3a60b52b9f1c32db9c49da397e06f88af":["9d6ade6517735e5fca21539f4ff32151bf0a89b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e5eed7b3a60b52b9f1c32db9c49da397e06f88af"],"b976b5ac4d8353f1e0a7c6a8736d9c3f197b7c19":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}