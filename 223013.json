{"path":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDocMap(MergeState).mjava","commits":[{"id":"66b61ab77ab36893d701d693f1b6df2a383bb7b5","date":1364405461,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDocMap(MergeState).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public MergePolicy.DocMap getDocMap(final MergeState mergeState) {\n      if (unsortedReaders == null) {\n        throw new IllegalStateException();\n      }\n      if (docMap == null) {\n        return super.getDocMap(mergeState);\n      }\n      assert mergeState.docMaps.length == 1; // we returned a singleton reader\n      final MonotonicAppendingLongBuffer deletes = getDeletes(unsortedReaders);\n      return new MergePolicy.DocMap() {\n        @Override\n        public int map(int old) {\n          final int oldWithDeletes = old + (int) deletes.get(old);\n          final int newWithDeletes = docMap.oldToNew(oldWithDeletes);\n          return mergeState.docMaps[0].get(newWithDeletes);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd","date":1404226546,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDocMap(MergeState).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDocMap(MergeState).mjava","sourceNew":"    @Override\n    public MergePolicy.DocMap getDocMap(final MergeState mergeState) {\n      if (unsortedReaders == null) {\n        throw new IllegalStateException();\n      }\n      if (docMap == null) {\n        return super.getDocMap(mergeState);\n      }\n      assert mergeState.docMaps.length == 1; // we returned a singleton reader\n      final PackedLongValues deletes = getDeletes(unsortedReaders);\n      return new MergePolicy.DocMap() {\n        @Override\n        public int map(int old) {\n          final int oldWithDeletes = old + (int) deletes.get(old);\n          final int newWithDeletes = docMap.oldToNew(oldWithDeletes);\n          return mergeState.docMaps[0].get(newWithDeletes);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public MergePolicy.DocMap getDocMap(final MergeState mergeState) {\n      if (unsortedReaders == null) {\n        throw new IllegalStateException();\n      }\n      if (docMap == null) {\n        return super.getDocMap(mergeState);\n      }\n      assert mergeState.docMaps.length == 1; // we returned a singleton reader\n      final MonotonicAppendingLongBuffer deletes = getDeletes(unsortedReaders);\n      return new MergePolicy.DocMap() {\n        @Override\n        public int map(int old) {\n          final int oldWithDeletes = old + (int) deletes.get(old);\n          final int newWithDeletes = docMap.oldToNew(oldWithDeletes);\n          return mergeState.docMaps[0].get(newWithDeletes);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingMergePolicy.SortingOneMerge#getDocMap(MergeState).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingMergePolicy.SortingOneMerge#getDocMap(MergeState).mjava","sourceNew":"    @Override\n    public MergePolicy.DocMap getDocMap(final MergeState mergeState) {\n      if (unsortedReaders == null) {\n        throw new IllegalStateException();\n      }\n      if (docMap == null) {\n        return super.getDocMap(mergeState);\n      }\n      assert mergeState.docMaps.length == 1; // we returned a singleton reader\n      final PackedLongValues deletes = getDeletes(unsortedReaders);\n      return new MergePolicy.DocMap() {\n        @Override\n        public int map(int old) {\n          final int oldWithDeletes = old + (int) deletes.get(old);\n          final int newWithDeletes = docMap.oldToNew(oldWithDeletes);\n          return mergeState.docMaps[0].get(newWithDeletes);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public MergePolicy.DocMap getDocMap(final MergeState mergeState) {\n      if (unsortedReaders == null) {\n        throw new IllegalStateException();\n      }\n      if (docMap == null) {\n        return super.getDocMap(mergeState);\n      }\n      assert mergeState.docMaps.length == 1; // we returned a singleton reader\n      final PackedLongValues deletes = getDeletes(unsortedReaders);\n      return new MergePolicy.DocMap() {\n        @Override\n        public int map(int old) {\n          final int oldWithDeletes = old + (int) deletes.get(old);\n          final int newWithDeletes = docMap.oldToNew(oldWithDeletes);\n          return mergeState.docMaps[0].get(newWithDeletes);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["66b61ab77ab36893d701d693f1b6df2a383bb7b5"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66b61ab77ab36893d701d693f1b6df2a383bb7b5":["aae6236deecc1bf344f9c22d8d9dd09ef6701dbd"],"aae6236deecc1bf344f9c22d8d9dd09ef6701dbd":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}