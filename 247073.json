{"path":"solr/core/src/test/org/apache/solr/search/join/CrossCollectionJoinQueryTest#buildIndexes(boolean).mjava","commits":[{"id":"e62a54d8f17b7c7b5d395bad453c470cf4039a6f","date":1593091560,"type":1,"author":"Dan Fox","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/join/CrossCollectionJoinQueryTest#buildIndexes(boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/join/XCJFQueryTest#buildIndexes(boolean).mjava","sourceNew":"  private static void buildIndexes(boolean routeByKey) throws IOException, SolrServerException {\n    List<SolrInputDocument> productDocs = new ArrayList<>();\n    List<SolrInputDocument> partDocs = new ArrayList<>();\n\n    for (int productId = 0; productId < NUM_PRODUCTS; ++productId) {\n      int sizeNum = productId % SIZES.length;\n      String size = SIZES[sizeNum];\n\n      productDocs.add(new SolrInputDocument(\n          \"id\", buildId(productId, String.valueOf(productId), routeByKey),\n          \"product_id_i\", String.valueOf(productId),\n          \"product_id_l\", String.valueOf(productId),\n          \"product_id_s\", String.valueOf(productId),\n          \"size_s\", size));\n\n      // Index 1 parts document for each small product, 2 for each medium, 3 for each large, etc.\n      for (int partNum = 0; partNum <= sizeNum; partNum++) {\n        String partId = String.format(Locale.ROOT, \"%d_%d\", productId, partNum);\n        partDocs.add(new SolrInputDocument(\n            \"id\", buildId(productId, partId, routeByKey),\n            \"product_id_i\", String.valueOf(productId),\n            \"product_id_l\", String.valueOf(productId),\n            \"product_id_s\", String.valueOf(productId)));\n      }\n    }\n\n    indexDocs(\"products\", productDocs);\n    cluster.getSolrClient().commit(\"products\");\n\n    indexDocs(\"parts\", partDocs);\n    cluster.getSolrClient().commit(\"parts\");\n  }\n\n","sourceOld":"  private static void buildIndexes(boolean routeByKey) throws IOException, SolrServerException {\n    List<SolrInputDocument> productDocs = new ArrayList<>();\n    List<SolrInputDocument> partDocs = new ArrayList<>();\n\n    for (int productId = 0; productId < NUM_PRODUCTS; ++productId) {\n      int sizeNum = productId % SIZES.length;\n      String size = SIZES[sizeNum];\n\n      productDocs.add(new SolrInputDocument(\n          \"id\", buildId(productId, String.valueOf(productId), routeByKey),\n          \"product_id_i\", String.valueOf(productId),\n          \"product_id_l\", String.valueOf(productId),\n          \"product_id_s\", String.valueOf(productId),\n          \"size_s\", size));\n\n      // Index 1 parts document for each small product, 2 for each medium, 3 for each large, etc.\n      for (int partNum = 0; partNum <= sizeNum; partNum++) {\n        String partId = String.format(Locale.ROOT, \"%d_%d\", productId, partNum);\n        partDocs.add(new SolrInputDocument(\n            \"id\", buildId(productId, partId, routeByKey),\n            \"product_id_i\", String.valueOf(productId),\n            \"product_id_l\", String.valueOf(productId),\n            \"product_id_s\", String.valueOf(productId)));\n      }\n    }\n\n    indexDocs(\"products\", productDocs);\n    cluster.getSolrClient().commit(\"products\");\n\n    indexDocs(\"parts\", partDocs);\n    cluster.getSolrClient().commit(\"parts\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}