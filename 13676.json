{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","commits":[{"id":"e8550173e67bccdaad7c5cbb85fb81886fecfcb7","date":1376943063,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return SortedDocValues.EMPTY;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return SortedDocValues.EMPTY;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return SortedDocValues.EMPTY;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return SortedDocValues.EMPTY;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return SortedDocValues.EMPTY;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return SortedDocValues.EMPTY;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return SortedDocValues.EMPTY;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e","date":1397206443,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return DocValues.EMPTY_SORTED;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return SortedDocValues.EMPTY;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":["e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8405d98acebb7e287bf7ac40e937ba05b8661285","date":1401433291,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return DocValues.EMPTY_SORTED;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return DocValues.EMPTY_SORTED;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.sizeInBytes());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":["dac1db31006989ae24922811f00f909d30f1391d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRef term = new BytesRef();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          Util.toBytesRef(output, term);\n          return term;\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return DocValues.EMPTY_SORTED;\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          result.bytes = new byte[output.length];\n          result.offset = 0;\n          result.length = 0;\n          Util.toBytesRef(output, result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRef term = new BytesRef();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          Util.toBytesRef(output, term);\n          return term;\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":["e8550173e67bccdaad7c5cbb85fb81886fecfcb7","53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.name, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        if (!merging) {\n          ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          fstInstances.put(field.name, instance);\n        }\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.name, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        if (!merging) {\n          ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          fstInstances.put(field.name, instance);\n        }\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        ramBytesUsed.addAndGet(instance.ramBytesUsed());\n        fstInstances.put(field.name, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e1de7ca6cb231a67006f9dc4842722d219629fb","date":1453654393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        if (!merging) {\n          ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          fstInstances.put(field.name, instance);\n        }\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        if (!merging) {\n          ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          fstInstances.put(field.name, instance);\n        }\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    return new LegacySortedDocValuesWrapper(getSortedNonIterator(field), maxDoc);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        if (!merging) {\n          ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          fstInstances.put(field.name, instance);\n        }\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    return new LegacySortedDocValuesWrapper(getSortedNonIterator(field), maxDoc);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        if (!merging) {\n          ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          fstInstances.put(field.name, instance);\n        }\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    return new LegacySortedDocValuesWrapper(getSortedNonIterator(field), maxDoc);\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.name);\n    if (entry.numOrds == 0) {\n      return DocValues.emptySorted();\n    }\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.name);\n      if (instance == null) {\n        IndexInput data = this.data.clone();\n        data.seek(entry.offset);\n        instance = new FST<>(data, PositiveIntOutputs.getSingleton());\n        if (!merging) {\n          ramBytesUsed.addAndGet(instance.ramBytesUsed());\n          fstInstances.put(field.name, instance);\n        }\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader();\n    final Arc<Long> firstArc = new Arc<>();\n    final Arc<Long> scratchArc = new Arc<>();\n    final IntsRefBuilder scratchInts = new IntsRefBuilder();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<>(fst);\n    \n    return new SortedDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public BytesRef lookupOrd(int ord) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          IntsRef output = Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts);\n          return Util.toBytesRef(output, term);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return (int)entry.numOrds;\n      }\n\n      @Override\n      public TermsEnum termsEnum() {\n        return new FSTTermsEnum(fst);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    return new LegacySortedDocValuesWrapper(getSortedNonIterator(field), maxDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dac1db31006989ae24922811f00f909d30f1391d"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3e1de7ca6cb231a67006f9dc4842722d219629fb","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bc8f80fee115148a0e4a0574560be06b494de821":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9bb9a29a5e71a90295f175df8919802993142c9a":["0936055c0eed56be3e4ae5c9db5b0e355390736a","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["3e1de7ca6cb231a67006f9dc4842722d219629fb","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"dac1db31006989ae24922811f00f909d30f1391d":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8429ddf2214f2bf8abcbb5484fefef6aaf5c417e"],"8405d98acebb7e287bf7ac40e937ba05b8661285":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","dac1db31006989ae24922811f00f909d30f1391d"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"e8550173e67bccdaad7c5cbb85fb81886fecfcb7":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"8429ddf2214f2bf8abcbb5484fefef6aaf5c417e":["8405d98acebb7e287bf7ac40e937ba05b8661285"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9bb9a29a5e71a90295f175df8919802993142c9a":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","e8550173e67bccdaad7c5cbb85fb81886fecfcb7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","24f89e8a6aac05753cde4c83d62a74356098200d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"dac1db31006989ae24922811f00f909d30f1391d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}