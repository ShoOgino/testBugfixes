{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","commits":[{"id":"52e9359ec09a0ce311e6ce95805998bebc7f7fd0","date":1196417385,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"/dev/null","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer());\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer());\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void xxxtestOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void xxxtestOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13eaef7d286f35b5c850a1c2eb7b337679aa6453","date":1249118545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy();\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2));\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2));\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2));\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.setMaxBufferedDocs(2);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        writer.setMergePolicy(ldmp);\n        writer.setMergeFactor(5);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments().mjava","sourceNew":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2));\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments() throws IOException {\n\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      for(int numDocs=38;numDocs<500;numDocs += 38) {\n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n          .setMaxBufferedDocs(2));\n        LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n        ldmp.setMinMergeDocs(1);\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        for(int j=0;j<numDocs;j++)\n          writer.addDocument(doc);\n        writer.close();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n        final int segCount = sis.size();\n\n        writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        ldmp.setMergeFactor(5);\n        writer.setMergePolicy(ldmp);\n        writer.optimize(3);\n        writer.close();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 3)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(3, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"52e9359ec09a0ce311e6ce95805998bebc7f7fd0":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52e9359ec09a0ce311e6ce95805998bebc7f7fd0"],"13eaef7d286f35b5c850a1c2eb7b337679aa6453":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"09c482d1e63332617181729a225b215c452d8a79":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}