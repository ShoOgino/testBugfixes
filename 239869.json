{"path":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","commits":[{"id":"25433c5cacacb7a2055d62d4d36b0daf210e0a10","date":1315747522,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/PostingsConsumer#merge(MergeState,DocsEnum,FixedBitSet).mjava","sourceNew":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","sourceOld":"  /** Default merge impl: append documents, mapping around\n   *  deletes */\n  public TermStats merge(final MergeState mergeState, final DocsEnum postings, final FixedBitSet visitedDocs) throws IOException {\n\n    int df = 0;\n    long totTF = 0;\n\n    if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_ONLY) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        this.startDoc(doc, 0);\n        this.finishDoc();\n        df++;\n      }\n      totTF = -1;\n    } else if (mergeState.fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS) {\n      while(true) {\n        final int doc = postings.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postings.freq();\n        this.startDoc(doc, freq);\n        this.finishDoc();\n        df++;\n        totTF += freq;\n      }\n    } else {\n      final DocsAndPositionsEnum postingsEnum = (DocsAndPositionsEnum) postings;\n      while(true) {\n        final int doc = postingsEnum.nextDoc();\n        if (doc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        visitedDocs.set(doc);\n        final int freq = postingsEnum.freq();\n        this.startDoc(doc, freq);\n        totTF += freq;\n        for(int i=0;i<freq;i++) {\n          final int position = postingsEnum.nextPosition();\n          final BytesRef payload;\n          if (postingsEnum.hasPayload()) {\n            payload = postingsEnum.getPayload();\n          } else {\n            payload = null;\n          }\n          this.addPosition(position, payload);\n        }\n        this.finishDoc();\n        df++;\n      }\n    }\n    return new TermStats(df, totTF);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["25433c5cacacb7a2055d62d4d36b0daf210e0a10","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"25433c5cacacb7a2055d62d4d36b0daf210e0a10":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25433c5cacacb7a2055d62d4d36b0daf210e0a10"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}