{"path":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    assert delegator != null : \"init() was not called!\";\n    ((ResourceLoaderAware) delegator).inform(loader);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    assert delegator != null : \"init() was not called!\";\n    ((ResourceLoaderAware) delegator).inform(loader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05464f071eda06541fd9ed6f04aaca99b131dfa","date":1343110729,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void inform(ResourceLoader loader) {\n    final boolean ignoreCase = getBoolean(\"ignoreCase\", false); \n    this.ignoreCase = ignoreCase;\n\n    String tf = args.get(\"tokenizerFactory\");\n\n    final TokenizerFactory factory = tf == null ? null : loadTokenizerFactory(loader, tf);\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = factory == null ? new WhitespaceTokenizer(Version.LUCENE_50, reader) : factory.create(reader);\n        TokenStream stream = ignoreCase ? new LowerCaseFilter(Version.LUCENE_50, tokenizer) : tokenizer;\n        return new TokenStreamComponents(tokenizer, stream);\n      }\n    };\n\n    String format = args.get(\"format\");\n    try {\n      if (format == null || format.equals(\"solr\")) {\n        // TODO: expose dedup as a parameter?\n        map = loadSolrSynonyms(loader, true, analyzer);\n      } else if (format.equals(\"wordnet\")) {\n        map = loadWordnetSynonyms(loader, true, analyzer);\n      } else {\n        // TODO: somehow make this more pluggable\n        throw new InitializationException(\"Unrecognized synonyms format: \" + format);\n      }\n    } catch (Exception e) {\n      throw new InitializationException(\"Exception thrown while loading synonyms\", e);\n    }\n    \n    if (map.fst == null) {\n      log.warn(\"Synonyms loaded with \" + args + \" has empty rule set!\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["c26f00b574427b55127e869b935845554afde1fa"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","a05464f071eda06541fd9ed6f04aaca99b131dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a05464f071eda06541fd9ed6f04aaca99b131dfa","5a1a22b1ad88b436661458df567f3fdb446392a4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}