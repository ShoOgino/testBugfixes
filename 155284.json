{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  @Override\n  public synchronized int addCategory(CategoryPath categoryPath)\n  throws IOException {\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","sourceOld":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  public synchronized int addCategory(CategoryPath categoryPath)\n  throws IOException {\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea12b2546032c4f36b75a21b68c0b64334e31e88","date":1321433791,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  @Override\n  public synchronized int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","sourceOld":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  @Override\n  public synchronized int addCategory(CategoryPath categoryPath)\n  throws IOException {\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyWriter#addCategory(CategoryPath).mjava","sourceNew":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  @Override\n  public synchronized int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","sourceOld":"  // TODO (Facet): addCategory() is synchronized. This means that if indexing is\n  // multi-threaded, a new category that needs to be written to disk (and\n  // potentially even trigger a lengthy merge) locks out other addCategory()\n  // calls - even those which could immediately return a cached value.\n  // We definitely need to fix this situation!\n  @Override\n  public synchronized int addCategory(CategoryPath categoryPath) throws IOException {\n    ensureOpen();\n    // If the category is already in the cache and/or the taxonomy, we\n    // should return its existing ordinal:\n    int res = findCategory(categoryPath);\n    if (res < 0) {\n      // This is a new category, and we need to insert it into the index\n      // (and the cache). Actually, we might also need to add some of\n      // the category's ancestors before we can add the category itself\n      // (while keeping the invariant that a parent is always added to\n      // the taxonomy before its child). internalAddCategory() does all\n      // this recursively:\n      res = internalAddCategory(categoryPath, categoryPath.length());\n    }\n    return res;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea12b2546032c4f36b75a21b68c0b64334e31e88":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea12b2546032c4f36b75a21b68c0b64334e31e88"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"ea12b2546032c4f36b75a21b68c0b64334e31e88":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["ea12b2546032c4f36b75a21b68c0b64334e31e88"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}