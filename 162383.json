{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#initReader(long).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#initReader(long).mjava","pathOld":"/dev/null","sourceNew":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextDimensionalWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecf331f9d7bdd234863d2df2bb5c1f019979422f","date":1452250335,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#initReader(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#initReader(long).mjava","sourceNew":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextDimensionalWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes);\n  }\n\n","sourceOld":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextDimensionalWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextPointReader#initReader(long).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDimensionalReader#initReader(long).mjava","sourceNew":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextPointWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes);\n  }\n\n","sourceOld":"  private BKDReader initReader(long fp) throws IOException {\n    // NOTE: matches what writeIndex does in SimpleTextDimensionalWriter\n    dataIn.seek(fp);\n    readLine(dataIn);\n    int numDims = parseInt(NUM_DIMS);\n\n    readLine(dataIn);\n    int bytesPerDim = parseInt(BYTES_PER_DIM);\n\n    readLine(dataIn);\n    int maxPointsInLeafNode = parseInt(MAX_LEAF_POINTS);\n\n    readLine(dataIn);\n    int count = parseInt(INDEX_COUNT);\n\n    readLine(dataIn);\n    assert startsWith(MIN_VALUE);\n    BytesRef minValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MIN_VALUE));\n    assert minValue.length == numDims*bytesPerDim;\n\n    readLine(dataIn);\n    assert startsWith(MAX_VALUE);\n    BytesRef maxValue = SimpleTextUtil.fromBytesRefString(stripPrefix(MAX_VALUE));\n    assert maxValue.length == numDims*bytesPerDim;\n    \n    long[] leafBlockFPs = new long[count];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      leafBlockFPs[i] = parseLong(BLOCK_FP);\n    }\n    readLine(dataIn);\n    count = parseInt(SPLIT_COUNT);\n\n    byte[] splitPackedValues = new byte[count * (1 + bytesPerDim)];\n    for(int i=0;i<count;i++) {\n      readLine(dataIn);\n      splitPackedValues[(1 + bytesPerDim) * i] = (byte) parseInt(SPLIT_DIM);\n      readLine(dataIn);\n      assert startsWith(SPLIT_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(SPLIT_VALUE));\n      assert br.length == bytesPerDim;\n      System.arraycopy(br.bytes, br.offset, splitPackedValues, (1 + bytesPerDim) * i + 1, bytesPerDim);\n    }\n\n    return new SimpleTextBKDReader(dataIn, numDims, maxPointsInLeafNode, bytesPerDim, leafBlockFPs, splitPackedValues, minValue.bytes, maxValue.bytes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecf331f9d7bdd234863d2df2bb5c1f019979422f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["ecf331f9d7bdd234863d2df2bb5c1f019979422f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}