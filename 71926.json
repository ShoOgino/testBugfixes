{"path":"backwards/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"/dev/null","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (Iterator it = payloads.iterator(); it.hasNext();) {\n        count++;\n        it.next();\n        //System.out.println(new String((byte[]) it.next()));\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (Iterator it = pls.iterator(); it.hasNext();) {\n      String s = new String((byte[]) it.next());\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestPositionIncrement#testPayloadsPos0().mjava","sourceNew":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (Iterator it = payloads.iterator(); it.hasNext();) {\n        count++;\n        it.next();\n        //System.out.println(new String((byte[]) it.next()));\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (Iterator it = pls.iterator(); it.hasNext();) {\n      String s = new String((byte[]) it.next());\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testPayloadsPos0() throws Exception {\n    Directory dir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(dir,\n                                         new TestPayloadAnalyzer(), true,\n                                         IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\",\n                      new StringReader(\"a a b c d e a f g h i j a b k k\")));\n    writer.addDocument(doc);\n\n    IndexReader r = writer.getReader();\n\n    TermPositions tp = r.termPositions(new Term(\"content\", \"a\"));\n    int count = 0;\n    assertTrue(tp.next());\n    // \"a\" occurs 4 times\n    assertEquals(4, tp.freq());\n    int expected = 0;\n    assertEquals(expected, tp.nextPosition());\n    assertEquals(1, tp.nextPosition());\n    assertEquals(3, tp.nextPosition());\n    assertEquals(6, tp.nextPosition());\n\n    // only one doc has \"a\"\n    assertFalse(tp.next());\n\n    IndexSearcher is = new IndexSearcher(r);\n  \n    SpanTermQuery stq1 = new SpanTermQuery(new Term(\"content\", \"a\"));\n    SpanTermQuery stq2 = new SpanTermQuery(new Term(\"content\", \"k\"));\n    SpanQuery[] sqs = { stq1, stq2 };\n    SpanNearQuery snq = new SpanNearQuery(sqs, 30, false);\n\n    count = 0;\n    boolean sawZero = false;\n    //System.out.println(\"\\ngetPayloadSpans test\");\n    Spans pspans = snq.getSpans(is.getIndexReader());\n    while (pspans.next()) {\n      //System.out.println(pspans.doc() + \" - \" + pspans.start() + \" - \"+ pspans.end());\n      Collection payloads = pspans.getPayload();\n      sawZero |= pspans.start() == 0;\n      for (Iterator it = payloads.iterator(); it.hasNext();) {\n        count++;\n        it.next();\n        //System.out.println(new String((byte[]) it.next()));\n      }\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n\n    //System.out.println(\"\\ngetSpans test\");\n    Spans spans = snq.getSpans(is.getIndexReader());\n    count = 0;\n    sawZero = false;\n    while (spans.next()) {\n      count++;\n      sawZero |= spans.start() == 0;\n      //System.out.println(spans.doc() + \" - \" + spans.start() + \" - \" + spans.end());\n    }\n    assertEquals(4, count);\n    assertTrue(sawZero);\n  \n    //System.out.println(\"\\nPayloadSpanUtil test\");\n\n    sawZero = false;\n    PayloadSpanUtil psu = new PayloadSpanUtil(is.getIndexReader());\n    Collection pls = psu.getPayloadsForQuery(snq);\n    count = pls.size();\n    for (Iterator it = pls.iterator(); it.hasNext();) {\n      String s = new String((byte[]) it.next());\n      //System.out.println(s);\n      sawZero |= s.equals(\"pos: 0\");\n    }\n    assertEquals(5, count);\n    assertTrue(sawZero);\n    writer.close();\n    is.getIndexReader().close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}