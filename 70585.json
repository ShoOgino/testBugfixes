{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#createCollectAcc().mjava","commits":[{"id":"3661d6742eed69ff6cc30ea2538d572624a7cdf8","date":1472676864,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#createCollectAcc().mjava","pathOld":"/dev/null","sourceNew":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"602cca3f75af03832471d8324bbc5b977a02969c","date":1472676981,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashDV#createCollectAcc().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessorByHashNumeric#createCollectAcc().mjava","sourceNew":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","sourceOld":"  private void createCollectAcc() throws IOException {\n    int numSlots = table.numSlots();\n\n    if (freq.allBuckets) {\n      allBucketsSlot = numSlots++;\n    }\n\n    indexOrderAcc = new SlotAcc(fcontext) {\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        long s1 = calc.bitsToSortableBits(table.vals[slotA]);\n        long s2 = calc.bitsToSortableBits(table.vals[slotB]);\n        return Long.compare(s1, s2);\n      }\n\n      @Override\n      public Object getValue(int slotNum) throws IOException {\n        return null;\n      }\n\n      @Override\n      public void reset() {\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n      }\n    };\n\n    countAcc = new CountSlotAcc(fcontext) {\n      @Override\n      public void incrementCount(int slot, int count) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getCount(int slot) {\n        return table.counts[slot];\n      }\n\n      @Override\n      public Object getValue(int slotNum) {\n        return getCount(slotNum);\n      }\n\n      @Override\n      public void reset() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void collect(int doc, int slot) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int compare(int slotA, int slotB) {\n        return Integer.compare( table.counts[slotA], table.counts[slotB] );\n      }\n\n      @Override\n      public void resize(Resizer resizer) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    // we set the countAcc & indexAcc first so generic ones won't be created for us.\n    super.createCollectAcc(fcontext.base.size(), numSlots);\n\n    if (freq.allBuckets) {\n      allBucketsAcc = new SpecialSlotAcc(fcontext, collectAcc, allBucketsSlot, otherAccs, 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"602cca3f75af03832471d8324bbc5b977a02969c":["3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"602cca3f75af03832471d8324bbc5b977a02969c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3661d6742eed69ff6cc30ea2538d572624a7cdf8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["602cca3f75af03832471d8324bbc5b977a02969c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["602cca3f75af03832471d8324bbc5b977a02969c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}