{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addNumericFieldValues(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addNumericFieldValues(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  private void addNumericFieldValues(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    boolean missing = false;\n\n    long count = 0;\n    for (Number nv : values) {\n      if (nv != null) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n      } else {\n        missing = true;\n      }\n      count++;\n      if (count >= DirectDocValuesFormat.MAX_SORTED_SET_ORDS) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + DirectDocValuesFormat.MAX_SORTED_SET_ORDS + \" values/total ords\");\n      }\n    }\n    meta.writeInt((int) count);\n    \n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n\n    byte byteWidth;\n    if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      byteWidth = 1;\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      byteWidth = 2;\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      byteWidth = 4;\n    } else {\n      byteWidth = 8;\n    }\n    meta.writeByte(byteWidth);\n\n    for (Number nv : values) {\n      long v;\n      if (nv != null) {\n        v = nv.longValue();\n      } else {\n        v = 0;\n      }\n\n      switch(byteWidth) {\n      case 1:\n        data.writeByte((byte) v);\n        break;\n      case 2:\n        data.writeShort((short) v);\n        break;\n      case 4:\n        data.writeInt((int) v);\n        break;\n      case 8:\n        data.writeLong(v);\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f18fb78980c55a781fd9fdc505634171059b1d","date":1567674462,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesConsumer#addNumericFieldValues(FieldInfo,Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  private void addNumericFieldValues(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    boolean missing = false;\n\n    long count = 0;\n    for (Number nv : values) {\n      if (nv != null) {\n        long v = nv.longValue();\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n      } else {\n        missing = true;\n      }\n      count++;\n      if (count >= DirectDocValuesFormat.MAX_SORTED_SET_ORDS) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + DirectDocValuesFormat.MAX_SORTED_SET_ORDS + \" values/total ords\");\n      }\n    }\n    meta.writeInt((int) count);\n    \n    if (missing) {\n      long start = data.getFilePointer();\n      writeMissingBitset(values);\n      meta.writeLong(start);\n      meta.writeLong(data.getFilePointer() - start);\n    } else {\n      meta.writeLong(-1L);\n    }\n\n    byte byteWidth;\n    if (minValue >= Byte.MIN_VALUE && maxValue <= Byte.MAX_VALUE) {\n      byteWidth = 1;\n    } else if (minValue >= Short.MIN_VALUE && maxValue <= Short.MAX_VALUE) {\n      byteWidth = 2;\n    } else if (minValue >= Integer.MIN_VALUE && maxValue <= Integer.MAX_VALUE) {\n      byteWidth = 4;\n    } else {\n      byteWidth = 8;\n    }\n    meta.writeByte(byteWidth);\n\n    for (Number nv : values) {\n      long v;\n      if (nv != null) {\n        v = nv.longValue();\n      } else {\n        v = 0;\n      }\n\n      switch(byteWidth) {\n      case 1:\n        data.writeByte((byte) v);\n        break;\n      case 2:\n        data.writeShort((short) v);\n        break;\n      case 4:\n        data.writeInt((int) v);\n        break;\n      case 8:\n        data.writeLong(v);\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f18fb78980c55a781fd9fdc505634171059b1d":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74f18fb78980c55a781fd9fdc505634171059b1d"]},"commit2Childs":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["74f18fb78980c55a781fd9fdc505634171059b1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"74f18fb78980c55a781fd9fdc505634171059b1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}