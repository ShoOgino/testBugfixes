{"path":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","commits":[{"id":"45ccb604e99f21f1c05722c0e28bcfa64b94a861","date":1423735816,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return vals == null ? -1 : vals.get(docID).hashCode();\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return vals == null ? -1 : vals.get(docID).hashCode();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return vals == null ? -1 : vals.get(docID).hashCode();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() throws IOException {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() throws IOException {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          return vals == null ? -1 : vals.get(docID).hashCode();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return vals.advanceExact(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() throws IOException {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() throws IOException {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return vals.advanceExact(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() throws IOException {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() throws IOException {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/search/TestDiversifiedTopDocsCollector.HashedDocValuesDiversifiedCollector#getKeys(LeafReaderContext).mjava","sourceNew":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public boolean advanceExact(int target) throws IOException {\n          return vals.advanceExact(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() throws IOException {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    protected NumericDocValues getKeys(LeafReaderContext context) {\n      return new NumericDocValues() {\n        @Override\n        public int docID() {\n          return vals.docID();\n        }\n        @Override\n        public int nextDoc() throws IOException {\n          return vals.nextDoc();\n        }\n        @Override\n        public int advance(int target) throws IOException {\n          return vals.advance(target);\n        }\n        @Override\n        public long cost() {\n          return vals.cost();\n        }\n        @Override\n        public long longValue() throws IOException {\n          return vals == null ? -1 : vals.binaryValue().hashCode();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["45ccb604e99f21f1c05722c0e28bcfa64b94a861","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["f7558b5077dd4abd457be151475f13b541f4f13e","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["45ccb604e99f21f1c05722c0e28bcfa64b94a861","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["11134e449dabe11d6d0ff6a564d84b82cbe93722","d2714c85633b642b29871cf5ff8d17d3ba7bfd76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"45ccb604e99f21f1c05722c0e28bcfa64b94a861":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ccb604e99f21f1c05722c0e28bcfa64b94a861"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}