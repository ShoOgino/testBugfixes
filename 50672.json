{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":null,"sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf01d89e7e385042b94858f6ffb75e3a4154ca4","date":1283846490,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"shoudl be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/XMLResponseParser#readDocuments(XMLStreamReader).mjava","sourceNew":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","sourceOld":"  protected SolrDocumentList readDocuments( XMLStreamReader parser ) throws XMLStreamException\n  {\n    SolrDocumentList docs = new SolrDocumentList();\n\n    // Parse the attributes\n    for( int i=0; i<parser.getAttributeCount(); i++ ) {\n      String n = parser.getAttributeLocalName( i );\n      String v = parser.getAttributeValue( i );\n      if( \"numFound\".equals( n ) ) {\n        docs.setNumFound( Long.parseLong( v ) );\n      }\n      else if( \"start\".equals( n ) ) {\n        docs.setStart( Long.parseLong( v ) );\n      }\n      else if( \"maxScore\".equals( n ) ) {\n        docs.setMaxScore( Float.parseFloat( v ) );\n      }\n    }\n    \n    // Read through each document\n    int event;\n    while( true ) {\n      event = parser.next();\n      if( XMLStreamConstants.START_ELEMENT == event ) {\n        if( !\"doc\".equals( parser.getLocalName() ) ) {\n          throw new RuntimeException( \"should be doc! \"+parser.getLocalName() + \" :: \" + parser.getLocation() );\n        }\n        docs.add( readDocument( parser ) );\n      }\n      else if ( XMLStreamConstants.END_ELEMENT == event ) {\n        return docs;  // only happens once\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"edf01d89e7e385042b94858f6ffb75e3a4154ca4":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["edf01d89e7e385042b94858f6ffb75e3a4154ca4"],"c26f00b574427b55127e869b935845554afde1fa":["edf01d89e7e385042b94858f6ffb75e3a4154ca4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["edf01d89e7e385042b94858f6ffb75e3a4154ca4"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","edf01d89e7e385042b94858f6ffb75e3a4154ca4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["edf01d89e7e385042b94858f6ffb75e3a4154ca4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"edf01d89e7e385042b94858f6ffb75e3a4154ca4":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}