{"path":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,Reader,IndexableFieldType).mjava","commits":[{"id":"eeea025b4a7a8e8f70426ac4527ef481b3a86b72","date":1476199075,"type":1,"author":"yonik","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,Reader,IndexableFieldType).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,Reader,FieldType).mjava","sourceNew":"  /**\n   * Create field with Reader value.\n   * @param name field name\n   * @param reader reader value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null, or if the field's type is stored(), or\n   *         if tokenized() is false.\n   * @throws NullPointerException if the reader is null\n   */\n  public Field(String name, Reader reader, IndexableFieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (type == null) {\n      throw new IllegalArgumentException(\"type must not be null\");\n    }\n    if (reader == null) {\n      throw new NullPointerException(\"reader must not be null\");\n    }\n    if (type.stored()) {\n      throw new IllegalArgumentException(\"fields with a Reader value cannot be stored\");\n    }\n    if (type.indexOptions() != IndexOptions.NONE && !type.tokenized()) {\n      throw new IllegalArgumentException(\"non-tokenized fields must use String values\");\n    }\n    \n    this.name = name;\n    this.fieldsData = reader;\n    this.type = type;\n  }\n\n","sourceOld":"  /**\n   * Create field with Reader value.\n   * @param name field name\n   * @param reader reader value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null, or if the field's type is stored(), or\n   *         if tokenized() is false.\n   * @throws NullPointerException if the reader is null\n   */\n  public Field(String name, Reader reader, FieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (type == null) {\n      throw new IllegalArgumentException(\"type must not be null\");\n    }\n    if (reader == null) {\n      throw new NullPointerException(\"reader must not be null\");\n    }\n    if (type.stored()) {\n      throw new IllegalArgumentException(\"fields with a Reader value cannot be stored\");\n    }\n    if (type.indexOptions() != IndexOptions.NONE && !type.tokenized()) {\n      throw new IllegalArgumentException(\"non-tokenized fields must use String values\");\n    }\n    \n    this.name = name;\n    this.fieldsData = reader;\n    this.type = type;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Field#Field(String,Reader,IndexableFieldType).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create field with Reader value.\n   * @param name field name\n   * @param reader reader value\n   * @param type field type\n   * @throws IllegalArgumentException if either the name or type\n   *         is null, or if the field's type is stored(), or\n   *         if tokenized() is false.\n   * @throws NullPointerException if the reader is null\n   */\n  public Field(String name, Reader reader, IndexableFieldType type) {\n    if (name == null) {\n      throw new IllegalArgumentException(\"name must not be null\");\n    }\n    if (type == null) {\n      throw new IllegalArgumentException(\"type must not be null\");\n    }\n    if (reader == null) {\n      throw new NullPointerException(\"reader must not be null\");\n    }\n    if (type.stored()) {\n      throw new IllegalArgumentException(\"fields with a Reader value cannot be stored\");\n    }\n    if (type.indexOptions() != IndexOptions.NONE && !type.tokenized()) {\n      throw new IllegalArgumentException(\"non-tokenized fields must use String values\");\n    }\n    \n    this.name = name;\n    this.fieldsData = reader;\n    this.type = type;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eeea025b4a7a8e8f70426ac4527ef481b3a86b72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72"]},"commit2Childs":{"eeea025b4a7a8e8f70426ac4527ef481b3a86b72":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeea025b4a7a8e8f70426ac4527ef481b3a86b72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}