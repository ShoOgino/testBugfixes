{"path":"backwards/src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","pathOld":"/dev/null","sourceNew":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * TODO: Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (!scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (scorerDocQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerDocQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","pathOld":"backwards/src/java/org/apache/lucene/search/DisjunctionSumScorer#advanceAfterCurrent().mjava","sourceNew":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * TODO: Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (!scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (scorerDocQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerDocQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","sourceOld":"  /** Advance all subscorers after the current document determined by the\n   * top of the <code>scorerDocQueue</code>.\n   * Repeat until at least the minimum number of subscorers match on the same\n   * document and all subscorers are after that document or are exhausted.\n   * <br>On entry the <code>scorerDocQueue</code> has at least <code>minimumNrMatchers</code>\n   * available. At least the scorer with the minimum document number will be advanced.\n   * @return true iff there is a match.\n   * <br>In case there is a match, </code>currentDoc</code>, </code>currentSumScore</code>,\n   * and </code>nrMatchers</code> describe the match.\n   *\n   * TODO: Investigate whether it is possible to use skipTo() when\n   * the minimum number of matchers is bigger than one, ie. try and use the\n   * character of ConjunctionScorer for the minimum number of matchers.\n   * Also delay calling score() on the sub scorers until the minimum number of\n   * matchers is reached.\n   * <br>For this, a Scorer array with minimumNrMatchers elements might\n   * hold Scorers at currentDoc that are temporarily popped from scorerQueue.\n   */\n  protected boolean advanceAfterCurrent() throws IOException {\n    do { // repeat until minimum nr of matchers\n      currentDoc = scorerDocQueue.topDoc();\n      currentScore = scorerDocQueue.topScore();\n      nrMatchers = 1;\n      do { // Until all subscorers are after currentDoc\n        if (!scorerDocQueue.topNextAndAdjustElsePop()) {\n          if (scorerDocQueue.size() == 0) {\n            break; // nothing more to advance, check for last match.\n          }\n        }\n        if (scorerDocQueue.topDoc() != currentDoc) {\n          break; // All remaining subscorers are after currentDoc.\n        }\n        currentScore += scorerDocQueue.topScore();\n        nrMatchers++;\n      } while (true);\n      \n      if (nrMatchers >= minimumNrMatchers) {\n        return true;\n      } else if (scorerDocQueue.size() < minimumNrMatchers) {\n        return false;\n      }\n    } while (true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}