{"path":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String,IOContext).mjava","commits":[{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName, IOContext.DEFAULT);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockPostingsFormat.MockIntFactory#createOutput(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/codecs/mockintblock/MockVariableIntBlockCodec.MockIntFactory#createOutput(Directory,String,IOContext).mjava","sourceNew":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public IntIndexOutput createOutput(Directory dir, String fileName, IOContext context) throws IOException {\n      final IndexOutput out = dir.createOutput(fileName, context);\n      boolean success = false;\n      try {\n        out.writeInt(baseBlockSize);\n        VariableIntBlockIndexOutput ret = new VariableIntBlockIndexOutput(out, 2*baseBlockSize) {\n          int pendingCount;\n          final int[] buffer = new int[2+2*baseBlockSize];\n          \n          @Override\n          protected int add(int value) throws IOException {\n            assert value >= 0;\n            buffer[pendingCount++] = value;\n            // silly variable block length int encoder: if\n            // first value <= 3, we write N vints at once;\n            // else, 2*N\n            final int flushAt = buffer[0] <= 3 ? baseBlockSize : 2*baseBlockSize;\n            \n            // intentionally be non-causal here:\n            if (pendingCount == flushAt+1) {\n              for(int i=0;i<flushAt;i++) {\n                out.writeVInt(buffer[i]);\n              }\n              buffer[0] = buffer[flushAt];\n              pendingCount = 1;\n              return flushAt;\n            } else {\n              return 0;\n            }\n          }\n        };\n        success = true;\n        return ret;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(out);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7b91922b55d15444d554721b352861d028eb8278":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b6f9be74ca7baaef11857ad002cad40419979516"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["7b91922b55d15444d554721b352861d028eb8278"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6f9be74ca7baaef11857ad002cad40419979516","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"b6f9be74ca7baaef11857ad002cad40419979516":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["24230fe54121f9be9d85f2c2067536296785e421","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}