{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/PathHierarchyTokenizer#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/path/PathHierarchyTokenizer#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/path/PathHierarchyTokenizer#incrementToken().mjava","sourceNew":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    termAtt.append( resultToken );\n    if(resultToken.length() == 0){\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n    int length = 0;\n    boolean added = false;\n    if( endDelimiter ){\n      termAtt.append(replacement);\n      length++;\n      endDelimiter = false;\n      added = true;\n    }\n\n    while (true) {\n      int c = input.read();\n      if (c >= 0) {\n        charsRead++;\n      } else {\n        if( skipped > skip ) {\n          length += resultToken.length();\n          termAtt.setLength(length);\n           offsetAtt.setOffset(correctOffset(startPosition), correctOffset(startPosition + length));\n          if( added ){\n            resultToken.setLength(0);\n            resultToken.append(termAtt.buffer(), 0, length);\n          }\n          return added;\n        }\n        else{\n          return false;\n        }\n      }\n      if( !added ){\n        added = true;\n        skipped++;\n        if( skipped > skip ){\n          termAtt.append(c == delimiter ? replacement : (char)c);\n          length++;\n        }\n        else {\n          startPosition++;\n        }\n      }\n      else {\n        if( c == delimiter ){\n          if( skipped > skip ){\n            endDelimiter = true;\n            break;\n          }\n          skipped++;\n          if( skipped > skip ){\n            termAtt.append(replacement);\n            length++;\n          }\n          else {\n            startPosition++;\n          }\n        }\n        else {\n          if( skipped > skip ){\n            termAtt.append((char)c);\n            length++;\n          }\n          else {\n            startPosition++;\n          }\n        }\n      }\n    }\n    length += resultToken.length();\n    termAtt.setLength(length);\n    offsetAtt.setOffset(correctOffset(startPosition), correctOffset(startPosition+length));\n    resultToken.setLength(0);\n    resultToken.append(termAtt.buffer(), 0, length);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    termAtt.append( resultToken );\n    if(resultToken.length() == 0){\n      posAtt.setPositionIncrement(1);\n    }\n    else{\n      posAtt.setPositionIncrement(0);\n    }\n    int length = 0;\n    boolean added = false;\n    if( endDelimiter ){\n      termAtt.append(replacement);\n      length++;\n      endDelimiter = false;\n      added = true;\n    }\n\n    while (true) {\n      int c = input.read();\n      if (c >= 0) {\n        charsRead++;\n      } else {\n        if( skipped > skip ) {\n          length += resultToken.length();\n          termAtt.setLength(length);\n           offsetAtt.setOffset(correctOffset(startPosition), correctOffset(startPosition + length));\n          if( added ){\n            resultToken.setLength(0);\n            resultToken.append(termAtt.buffer(), 0, length);\n          }\n          return added;\n        }\n        else{\n          return false;\n        }\n      }\n      if( !added ){\n        added = true;\n        skipped++;\n        if( skipped > skip ){\n          termAtt.append(c == delimiter ? replacement : (char)c);\n          length++;\n        }\n        else {\n          startPosition++;\n        }\n      }\n      else {\n        if( c == delimiter ){\n          if( skipped > skip ){\n            endDelimiter = true;\n            break;\n          }\n          skipped++;\n          if( skipped > skip ){\n            termAtt.append(replacement);\n            length++;\n          }\n          else {\n            startPosition++;\n          }\n        }\n        else {\n          if( skipped > skip ){\n            termAtt.append((char)c);\n            length++;\n          }\n          else {\n            startPosition++;\n          }\n        }\n      }\n    }\n    length += resultToken.length();\n    termAtt.setLength(length);\n    offsetAtt.setOffset(correctOffset(startPosition), correctOffset(startPosition+length));\n    resultToken.setLength(0);\n    resultToken.append(termAtt.buffer(), 0, length);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}