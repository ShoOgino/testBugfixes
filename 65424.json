{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,CloudState,String).mjava","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String shardZkNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(shardZkNodeName);\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final CloudState state, final String shardZkNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(shardZkNodeName);\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,CloudState,String).mjava","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String shardZkNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(shardZkNodeName);\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final CloudState state, final String shardZkNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(shardZkNodeName);\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String shardZkNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(shardZkNodeName);\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(coreNodeName);\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String shardZkNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(shardZkNodeName);\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(getBaseUrl(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(coreNodeName);\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(getBaseUrl(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(coreNodeName);\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceca2bff80f22f2c69257979e86498558a4c2691","date":1393261456,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(getNodeName(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(getBaseUrl(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(getNodeName(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(getBaseUrl(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n                                           final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n\n    final String shardId = state.getShardId(getNodeName(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(getNodeName(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","sourceNew":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n                                           final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n\n    final String shardId = state.getShardId(getNodeName(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n      final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n    \n    final String shardId = state.getShardId(getNodeName(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#needsToBeAssignedShardId(CoreDescriptor,ClusterState,String).mjava","sourceNew":null,"sourceOld":"  private boolean needsToBeAssignedShardId(final CoreDescriptor desc,\n                                           final ClusterState state, final String coreNodeName) {\n\n    final CloudDescriptor cloudDesc = desc.getCloudDescriptor();\n\n    final String shardId = state.getShardId(getNodeName(), desc.getName());\n\n    if (shardId != null) {\n      cloudDesc.setShardId(shardId);\n      return false;\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"84f20f331d8001864545c7021812d8c6509c7593":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["849494cf2f3a96af5c8c84995108ddd8456fcd04","ceca2bff80f22f2c69257979e86498558a4c2691"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ceca2bff80f22f2c69257979e86498558a4c2691","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"ceca2bff80f22f2c69257979e86498558a4c2691":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84f20f331d8001864545c7021812d8c6509c7593"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["ceca2bff80f22f2c69257979e86498558a4c2691"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"84f20f331d8001864545c7021812d8c6509c7593":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","ceca2bff80f22f2c69257979e86498558a4c2691"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"ceca2bff80f22f2c69257979e86498558a4c2691":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["84f20f331d8001864545c7021812d8c6509c7593","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8fd5be977c105554c6a7b68afcdbc511439723ab","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}