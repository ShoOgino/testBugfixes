{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getTopReaderContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getTopReaderContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"211b1506e56f7860762fbd4698f6d1d1b57f672c","date":1344976996,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getTopReaderContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getTopReaderContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c188105a9aae04f56c24996f98f8333fc825d2e","date":1345031914,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getTopReaderContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c93396a1df03720cb20e2c2f513a6fa59b21e4c","date":1345032673,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getTopReaderContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getTopReaderContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc06632ede7e48a5ddc6917badec25c8336feedc","date":1366983006,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertNull(\"A inverse range should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertNull(\"A exclusive range starting with Integer.MAX_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertNull(\"A exclusive range ending with Integer.MIN_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertSame(\"A inverse range should return the EMPTY_DOCIDSET instance\", DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertSame(\"A exclusive range starting with Integer.MAX_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertSame(\"A exclusive range ending with Integer.MIN_VALUE should return the EMPTY_DOCIDSET instance\",\n               DocIdSet.EMPTY_DOCIDSET, f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":"  @Test\n  public void testInverseRange() throws Exception {\n    LeafReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertNull(\"A inverse range should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertNull(\"A exclusive range starting with Integer.MAX_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertNull(\"A exclusive range ending with Integer.MIN_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    AtomicReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertNull(\"A inverse range should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertNull(\"A exclusive range starting with Integer.MAX_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertNull(\"A exclusive range ending with Integer.MIN_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    LeafReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertNull(\"A inverse range should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertNull(\"A exclusive range starting with Integer.MAX_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertNull(\"A exclusive range ending with Integer.MIN_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testInverseRange().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testInverseRange() throws Exception {\n    LeafReaderContext context = SlowCompositeReaderWrapper.wrap(reader).getContext();\n    NumericRangeFilter<Integer> f = NumericRangeFilter.newIntRange(\"field8\", 8, 1000, -1000, true, true);\n    assertNull(\"A inverse range should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, Integer.MAX_VALUE, null, false, false);\n    assertNull(\"A exclusive range starting with Integer.MAX_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n    f = NumericRangeFilter.newIntRange(\"field8\", 8, null, Integer.MIN_VALUE, false, false);\n    assertNull(\"A exclusive range ending with Integer.MIN_VALUE should return the null instance\", f.getDocIdSet(context, context.reader().getLiveDocs()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["211b1506e56f7860762fbd4698f6d1d1b57f672c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9fb5f46e264daf5ba3860defe623a89d202dd87","2713584a660051cd646423be682771e3bbd99985"],"3c188105a9aae04f56c24996f98f8333fc825d2e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2713584a660051cd646423be682771e3bbd99985":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["3c188105a9aae04f56c24996f98f8333fc825d2e"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","211b1506e56f7860762fbd4698f6d1d1b57f672c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["dc06632ede7e48a5ddc6917badec25c8336feedc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"dc06632ede7e48a5ddc6917badec25c8336feedc":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3c188105a9aae04f56c24996f98f8333fc825d2e":["1c93396a1df03720cb20e2c2f513a6fa59b21e4c"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3c188105a9aae04f56c24996f98f8333fc825d2e","211b1506e56f7860762fbd4698f6d1d1b57f672c","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c93396a1df03720cb20e2c2f513a6fa59b21e4c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"211b1506e56f7860762fbd4698f6d1d1b57f672c":["dc06632ede7e48a5ddc6917badec25c8336feedc","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}