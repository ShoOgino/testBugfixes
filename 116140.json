{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","pathOld":"/dev/null","sourceNew":"    private Map<String, Object> getARow() {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<String, Object>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information\n            result.put(colName, resultSet.getObject(colName));\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = 12;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getDate(colName));\n              break;\n            case Types.BOOLEAN:\n              result\n                      .put(colName, resultSet.getBoolean(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Error reading data from database\", e);\n        }\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a0c5a98d3a49f05ff6367c6cf378e87cc2eba59b","a0c5a98d3a49f05ff6367c6cf378e87cc2eba59b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1f42aa085181c4bfc50d4acfff356b2ddc87775","date":1232051002,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","sourceNew":"    private Map<String, Object> getARow() {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<String, Object>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information\n            result.put(colName, resultSet.getObject(colName));\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getDate(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, resultSet.getBoolean(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Error reading data from database\", e);\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    private Map<String, Object> getARow() {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<String, Object>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information\n            result.put(colName, resultSet.getObject(colName));\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = 12;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getDate(colName));\n              break;\n            case Types.BOOLEAN:\n              result\n                      .put(colName, resultSet.getBoolean(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Error reading data from database\", e);\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"101d6b730bda9533276a5a536ed2e1f7acd83c99","date":1252314070,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","sourceNew":"    private Map<String, Object> getARow() {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<String, Object>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information\n            result.put(colName, resultSet.getObject(colName));\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getDate(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, resultSet.getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, resultSet.getBytes(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Error reading data from database\", e);\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    private Map<String, Object> getARow() {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<String, Object>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information\n            result.put(colName, resultSet.getObject(colName));\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getDate(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, resultSet.getBoolean(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Error reading data from database\", e);\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f24d87791042430a77c0e6c1e7a59d5840146f5e","date":1252329554,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","sourceNew":"    private Map<String, Object> getARow() {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<String, Object>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information\n            result.put(colName, resultSet.getObject(colName));\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getDate(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, resultSet.getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, resultSet.getBytes(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          wrapAndThrow(SEVERE, e, \"Error reading data from database\");\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    private Map<String, Object> getARow() {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<String, Object>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information\n            result.put(colName, resultSet.getObject(colName));\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getDate(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, resultSet.getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, resultSet.getBytes(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          throw new DataImportHandlerException(\n                  DataImportHandlerException.SEVERE,\n                  \"Error reading data from database\", e);\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.ResultSetIterator#getARow().mjava","sourceNew":"    private Map<String, Object> getARow() {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<String, Object>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information\n            result.put(colName, resultSet.getObject(colName));\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getDate(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, resultSet.getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, resultSet.getBytes(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          wrapAndThrow(SEVERE, e, \"Error reading data from database\");\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    private Map<String, Object> getARow() {\n      if (resultSet == null)\n        return null;\n      Map<String, Object> result = new HashMap<String, Object>();\n      for (String colName : colNames) {\n        try {\n          if (!convertType) {\n            // Use underlying database's type information\n            result.put(colName, resultSet.getObject(colName));\n            continue;\n          }\n\n          Integer type = fieldNameVsType.get(colName);\n          if (type == null)\n            type = Types.VARCHAR;\n          switch (type) {\n            case Types.INTEGER:\n              result.put(colName, resultSet.getInt(colName));\n              break;\n            case Types.FLOAT:\n              result.put(colName, resultSet.getFloat(colName));\n              break;\n            case Types.BIGINT:\n              result.put(colName, resultSet.getLong(colName));\n              break;\n            case Types.DOUBLE:\n              result.put(colName, resultSet.getDouble(colName));\n              break;\n            case Types.DATE:\n              result.put(colName, resultSet.getDate(colName));\n              break;\n            case Types.BOOLEAN:\n              result.put(colName, resultSet.getBoolean(colName));\n              break;\n            case Types.BLOB:\n              result.put(colName, resultSet.getBytes(colName));\n              break;\n            default:\n              result.put(colName, resultSet.getString(colName));\n              break;\n          }\n        } catch (SQLException e) {\n          logError(\"Error reading data \", e);\n          wrapAndThrow(SEVERE, e, \"Error reading data from database\");\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b1f42aa085181c4bfc50d4acfff356b2ddc87775":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"f24d87791042430a77c0e6c1e7a59d5840146f5e":["101d6b730bda9533276a5a536ed2e1f7acd83c99"],"ad94625fb8d088209f46650c8097196fec67f00c":["f24d87791042430a77c0e6c1e7a59d5840146f5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"101d6b730bda9533276a5a536ed2e1f7acd83c99":["b1f42aa085181c4bfc50d4acfff356b2ddc87775"]},"commit2Childs":{"b1f42aa085181c4bfc50d4acfff356b2ddc87775":["101d6b730bda9533276a5a536ed2e1f7acd83c99"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["b1f42aa085181c4bfc50d4acfff356b2ddc87775"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f24d87791042430a77c0e6c1e7a59d5840146f5e":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"101d6b730bda9533276a5a536ed2e1f7acd83c99":["f24d87791042430a77c0e6c1e7a59d5840146f5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}