{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.getCategoryPath());\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.getArraysLength();\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.getCategoryPath());\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.getArraysLength();\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a2548b7f050533ac9a884b31cab5fb6f0386fbb","date":1355233860,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.getCategoryPath());\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.getCategoryPath());\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.getArraysLength();\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.getCategoryPath());\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.getCategoryPath());\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.getArraysLength();\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.getCategoryPath());\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.getCategoryPath());\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"811cdb4a80352766eb0c762e48972707a924e5cd","date":1358767313,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      MutableFacetResultNode parentResultNode = \n        new MutableFacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dae862628c7a5275e1ff00ff3bc9803dedf124a9","date":1358939646,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      // TODO (Facet): should initial value of \"residue\" depend on aggregator if not sum?\n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TopKFacetResultsHandler#fetchPartitionResult(FacetArrays,int).mjava","sourceNew":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","sourceOld":"  // fetch top K for specific partition. \n  @Override\n  public IntermediateFacetResult fetchPartitionResult(FacetArrays facetArrays, int offset)\n  throws IOException {\n    TopKFacetResult res = null;\n    int ordinal = taxonomyReader.getOrdinal(facetRequest.categoryPath);\n    if (ordinal != TaxonomyReader.INVALID_ORDINAL) {\n      double value = 0;  \n      if (isSelfPartition(ordinal, facetArrays, offset)) {\n        int partitionSize = facetArrays.arrayLength;\n        value = facetRequest.getValueOf(facetArrays, ordinal % partitionSize);\n      }\n      \n      FacetResultNode parentResultNode = new FacetResultNode(ordinal, value);\n      \n      Heap<FacetResultNode> heap = ResultSortUtils.createSuitableHeap(facetRequest);\n      int totalFacets = heapDescendants(ordinal, heap, parentResultNode, facetArrays, offset);\n      res = new TopKFacetResult(facetRequest, parentResultNode, totalFacets);\n      res.setHeap(heap);\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["811cdb4a80352766eb0c762e48972707a924e5cd"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["c4015cd39dff8d4dec562d909f9766debac53aa6","811cdb4a80352766eb0c762e48972707a924e5cd"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["dae862628c7a5275e1ff00ff3bc9803dedf124a9"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"811cdb4a80352766eb0c762e48972707a924e5cd":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","dae862628c7a5275e1ff00ff3bc9803dedf124a9"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"dae862628c7a5275e1ff00ff3bc9803dedf124a9":["571abba77e55fea386a38c0024f72ffa5b37a9ad","b2d5244a676b83c2d551c3746e8181588ba619e1"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["07155cdd910937cdf6877e48884d5782845c8b8b"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","811cdb4a80352766eb0c762e48972707a924e5cd"],"811cdb4a80352766eb0c762e48972707a924e5cd":["dae862628c7a5275e1ff00ff3bc9803dedf124a9","07155cdd910937cdf6877e48884d5782845c8b8b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}