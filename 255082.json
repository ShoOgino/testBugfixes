{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#calculateCoefficient(int).mjava","commits":[{"id":"f13ec1b606a28789743a563929e7c556e8218297","date":1389302034,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#calculateCoefficient(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Calculate the weight coefficient based on the position of the first matching word.\n   * Subclass should override it to adapt it to particular needs\n   * @param position of the first matching word in text\n   * @return the coefficient\n   */\n  protected double calculateCoefficient(int position) {\n\n    double coefficient;\n    switch (blenderType) {\n      case POSITION_LINEAR:\n        coefficient = 1 - LINEAR_COEF * position;\n        break;\n\n      case POSITION_RECIPROCAL:\n        coefficient = 1. / (position + 1);\n        break;\n\n      default:\n        coefficient = 1;\n    }\n\n    return coefficient;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f074d711053c296894efa2d36276eff5030e62e","date":1450779998,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#calculateCoefficient(int).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/BlendedInfixSuggester#calculateCoefficient(int).mjava","sourceNew":"  /**\n   * Calculate the weight coefficient based on the position of the first matching word.\n   * Subclass should override it to adapt it to particular needs\n   * @param position of the first matching word in text\n   * @return the coefficient\n   */\n  protected double calculateCoefficient(int position) {\n\n    double coefficient;\n    switch (blenderType) {\n      case POSITION_LINEAR:\n        coefficient = 1 - LINEAR_COEF * position;\n        break;\n\n      case POSITION_RECIPROCAL:\n        coefficient = 1. / (position + 1);\n        break;\n\n      case POSITION_EXPONENTIAL_RECIPROCAL:\n        coefficient = 1. / Math.pow((position + 1.0), exponent);\n        break;\n\n      default:\n        coefficient = 1;\n    }\n\n    return coefficient;\n  }\n\n","sourceOld":"  /**\n   * Calculate the weight coefficient based on the position of the first matching word.\n   * Subclass should override it to adapt it to particular needs\n   * @param position of the first matching word in text\n   * @return the coefficient\n   */\n  protected double calculateCoefficient(int position) {\n\n    double coefficient;\n    switch (blenderType) {\n      case POSITION_LINEAR:\n        coefficient = 1 - LINEAR_COEF * position;\n        break;\n\n      case POSITION_RECIPROCAL:\n        coefficient = 1. / (position + 1);\n        break;\n\n      default:\n        coefficient = 1;\n    }\n\n    return coefficient;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f13ec1b606a28789743a563929e7c556e8218297":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f074d711053c296894efa2d36276eff5030e62e":["f13ec1b606a28789743a563929e7c556e8218297"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f074d711053c296894efa2d36276eff5030e62e"]},"commit2Childs":{"f13ec1b606a28789743a563929e7c556e8218297":["6f074d711053c296894efa2d36276eff5030e62e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f13ec1b606a28789743a563929e7c556e8218297"],"6f074d711053c296894efa2d36276eff5030e62e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}