{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithRouteKey().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithRouteKey().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithRouteKey().mjava","sourceNew":"  private void clusterStatusWithRouteKey() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(DEFAULT_COLLECTION)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"a!123\"); // goes to shard2. see ShardRoutingTest for details\n      client.add(doc);\n      client.commit();\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      params.set(ShardParams._ROUTE_, \"a!\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(1, shardStatus.size());\n      Map<String, Object> selectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(selectedShardStatus);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithRouteKey() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(DEFAULT_COLLECTION)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"a!123\"); // goes to shard2. see ShardRoutingTest for details\n      client.add(doc);\n      client.commit();\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      params.set(ShardParams._ROUTE_, \"a!\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(1, shardStatus.size());\n      Map<String, Object> selectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(selectedShardStatus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithRouteKey().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionAPI#clusterStatusWithRouteKey().mjava","sourceNew":"  private void clusterStatusWithRouteKey() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(DEFAULT_COLLECTION)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"a!123\"); // goes to shard2. see ShardRoutingTest for details\n      client.add(doc);\n      client.commit();\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      params.set(ShardParams._ROUTE_, \"a!\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(1, shardStatus.size());\n      Map<String, Object> selectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(selectedShardStatus);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithRouteKey() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(DEFAULT_COLLECTION)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"a!123\"); // goes to shard2. see ShardRoutingTest for details\n      client.add(doc);\n      client.commit();\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      params.set(ShardParams._ROUTE_, \"a!\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(1, shardStatus.size());\n      Map<String, Object> selectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(selectedShardStatus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithRouteKey().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithRouteKey().mjava","sourceNew":"  private void clusterStatusWithRouteKey() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(DEFAULT_COLLECTION)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"a!123\"); // goes to shard2. see ShardRoutingTest for details\n      client.add(doc);\n      client.commit();\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      params.set(ShardParams._ROUTE_, \"a!\");\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      assertEquals(1, collections.size());\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(1, shardStatus.size());\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> selectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(selectedShardStatus);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithRouteKey() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(DEFAULT_COLLECTION)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"a!123\"); // goes to shard2. see ShardRoutingTest for details\n      client.add(doc);\n      client.commit();\n\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(\"action\", CollectionParams.CollectionAction.CLUSTERSTATUS.toString());\n      params.set(\"collection\", DEFAULT_COLLECTION);\n      params.set(ShardParams._ROUTE_, \"a!\");\n      SolrRequest request = new QueryRequest(params);\n      request.setPath(\"/admin/collections\");\n\n      NamedList<Object> rsp = client.request(request);\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(DEFAULT_COLLECTION));\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(DEFAULT_COLLECTION);\n      assertEquals(\"conf1\", collection.get(\"configName\"));\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(1, shardStatus.size());\n      Map<String, Object> selectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(selectedShardStatus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}