{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/DeleteReplicaSuggester#init().mjava","commits":[{"id":"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a","date":1524514741,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/DeleteReplicaSuggester#init().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"delete-replica requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"delete-replica requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    Set<Number> counts = (Set<Number>) hints.getOrDefault(Hint.NUMBER, Collections.emptySet());\n    Integer count = null;\n    if (!counts.isEmpty()) {\n      if (counts.size() > 1) {\n        throw new RuntimeException(\"delete-replica allows at most one number hint specifying the number of replicas to delete\");\n      }\n      Number n = counts.iterator().next();\n      count = n.intValue();\n    }\n    Set<String> replicas = (Set<String>) hints.getOrDefault(Hint.REPLICA, Collections.emptySet());\n    String replica = null;\n    if (!replicas.isEmpty()) {\n      if (replicas.size() > 1) {\n        throw new RuntimeException(\"delete-replica allows at most one 'replica' hint\");\n      }\n      replica = replicas.iterator().next();\n    }\n    if (replica == null && count == null) {\n      throw new RuntimeException(\"delete-replica requires either 'replica' or 'number' hint\");\n    }\n    if (replica != null) {\n      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), replica);\n    } else {\n      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), count);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"527adea7ce767368d7317339023e18e39702132e","date":1592163810,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/DeleteReplicaSuggester#init().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/DeleteReplicaSuggester#init().mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest init() {\n    @SuppressWarnings({\"unchecked\"})\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"delete-replica requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"delete-replica requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    @SuppressWarnings({\"unchecked\"})\n    Set<Number> counts = (Set<Number>) hints.getOrDefault(Hint.NUMBER, Collections.emptySet());\n    Integer count = null;\n    if (!counts.isEmpty()) {\n      if (counts.size() > 1) {\n        throw new RuntimeException(\"delete-replica allows at most one number hint specifying the number of replicas to delete\");\n      }\n      Number n = counts.iterator().next();\n      count = n.intValue();\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Set<String> replicas = (Set<String>) hints.getOrDefault(Hint.REPLICA, Collections.emptySet());\n    String replica = null;\n    if (!replicas.isEmpty()) {\n      if (replicas.size() > 1) {\n        throw new RuntimeException(\"delete-replica allows at most one 'replica' hint\");\n      }\n      replica = replicas.iterator().next();\n    }\n    if (replica == null && count == null) {\n      throw new RuntimeException(\"delete-replica requires either 'replica' or 'number' hint\");\n    }\n    if (replica != null) {\n      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), replica);\n    } else {\n      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), count);\n    }\n  }\n\n","sourceOld":"  @Override\n  SolrRequest init() {\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"delete-replica requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"delete-replica requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    Set<Number> counts = (Set<Number>) hints.getOrDefault(Hint.NUMBER, Collections.emptySet());\n    Integer count = null;\n    if (!counts.isEmpty()) {\n      if (counts.size() > 1) {\n        throw new RuntimeException(\"delete-replica allows at most one number hint specifying the number of replicas to delete\");\n      }\n      Number n = counts.iterator().next();\n      count = n.intValue();\n    }\n    Set<String> replicas = (Set<String>) hints.getOrDefault(Hint.REPLICA, Collections.emptySet());\n    String replica = null;\n    if (!replicas.isEmpty()) {\n      if (replicas.size() > 1) {\n        throw new RuntimeException(\"delete-replica allows at most one 'replica' hint\");\n      }\n      replica = replicas.iterator().next();\n    }\n    if (replica == null && count == null) {\n      throw new RuntimeException(\"delete-replica requires either 'replica' or 'number' hint\");\n    }\n    if (replica != null) {\n      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), replica);\n    } else {\n      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/DeleteReplicaSuggester#init().mjava","sourceNew":null,"sourceOld":"  @Override\n  @SuppressWarnings({\"rawtypes\"})\n  SolrRequest init() {\n    @SuppressWarnings({\"unchecked\"})\n    Set<Pair<String, String>> shards = (Set<Pair<String, String>>) hints.getOrDefault(Hint.COLL_SHARD, Collections.emptySet());\n    if (shards.isEmpty()) {\n      throw new RuntimeException(\"delete-replica requires 'collection' and 'shard'\");\n    }\n    if (shards.size() > 1) {\n      throw new RuntimeException(\"delete-replica requires exactly one pair of 'collection' and 'shard'\");\n    }\n    Pair<String, String> collShard = shards.iterator().next();\n    @SuppressWarnings({\"unchecked\"})\n    Set<Number> counts = (Set<Number>) hints.getOrDefault(Hint.NUMBER, Collections.emptySet());\n    Integer count = null;\n    if (!counts.isEmpty()) {\n      if (counts.size() > 1) {\n        throw new RuntimeException(\"delete-replica allows at most one number hint specifying the number of replicas to delete\");\n      }\n      Number n = counts.iterator().next();\n      count = n.intValue();\n    }\n    @SuppressWarnings({\"unchecked\"})\n    Set<String> replicas = (Set<String>) hints.getOrDefault(Hint.REPLICA, Collections.emptySet());\n    String replica = null;\n    if (!replicas.isEmpty()) {\n      if (replicas.size() > 1) {\n        throw new RuntimeException(\"delete-replica allows at most one 'replica' hint\");\n      }\n      replica = replicas.iterator().next();\n    }\n    if (replica == null && count == null) {\n      throw new RuntimeException(\"delete-replica requires either 'replica' or 'number' hint\");\n    }\n    if (replica != null) {\n      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), replica);\n    } else {\n      return CollectionAdminRequest.deleteReplica(collShard.first(), collShard.second(), count);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["527adea7ce767368d7317339023e18e39702132e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"527adea7ce767368d7317339023e18e39702132e":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a":["527adea7ce767368d7317339023e18e39702132e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0b90ab8b228b1f7a05d5ddfbe879ce962d8964a"],"527adea7ce767368d7317339023e18e39702132e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}