{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n\t  Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n\t  Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n    Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\n    assertTrue(s1.next());\n    assertTrue(s2.next());\n\n    boolean hasMore = true;\n\n    do {\n      hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n      assertEquals(hasMore, s2.skipTo(s2.doc()));\n      assertEquals(s1.doc(), s2.doc());\n    } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n\t  SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n\t  Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n\t  Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\t  \n\t  assertTrue(s1.next());\n\t  assertTrue(s2.next());\n\t  \n\t  boolean hasMore = true;\n\t  \n\t  do {\n\t\t  hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n\t\t  assertEquals(hasMore, s2.skipTo(s2.doc()));\n\t\t  assertEquals(s1.doc(), s2.doc());\n\t  } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07c6861cb029cd251d930aa4c4578c8ca21aa957","date":1364984125,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n    Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\n    assertTrue(s1.next());\n    assertTrue(s2.next());\n\n    boolean hasMore = true;\n\n    do {\n      hasMore = skipToAccoringToJavaDocs(s1, s1.doc() + 1);\n      assertEquals(hasMore, s2.skipTo(s2.doc() + 1));\n      assertEquals(s1.doc(), s2.doc());\n    } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n    Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\n    assertTrue(s1.next());\n    assertTrue(s2.next());\n\n    boolean hasMore = true;\n\n    do {\n      hasMore = skipToAccoringToJavaDocs(s1, s1.doc());\n      assertEquals(hasMore, s2.skipTo(s2.doc()));\n      assertEquals(s1.doc(), s2.doc());\n    } while (hasMore);\n  }\n\n","bugFix":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":"  @Test\n  public void testSpansSkipTo() throws Exception {\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n    Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\n    assertTrue(s1.next());\n    assertTrue(s2.next());\n\n    boolean hasMore = true;\n\n    do {\n      hasMore = skipToAccordingToJavaDocs(s1, s1.doc() + 1);\n      assertEquals(hasMore, s2.skipTo(s2.doc() + 1));\n      assertEquals(s1.doc(), s2.doc());\n    } while (hasMore);\n  }\n\n","sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n    Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\n    assertTrue(s1.next());\n    assertTrue(s2.next());\n\n    boolean hasMore = true;\n\n    do {\n      hasMore = skipToAccoringToJavaDocs(s1, s1.doc() + 1);\n      assertEquals(hasMore, s2.skipTo(s2.doc() + 1));\n      assertEquals(s1.doc(), s2.doc());\n    } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n    Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\n    assertTrue(s1.next());\n    assertTrue(s2.next());\n\n    boolean hasMore = true;\n\n    do {\n      hasMore = skipToAccordingToJavaDocs(s1, s1.doc() + 1);\n      assertEquals(hasMore, s2.skipTo(s2.doc() + 1));\n      assertEquals(s1.doc(), s2.doc());\n    } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpansSkipTo().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSpansSkipTo() throws Exception {\n    SpanTermQuery t1 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    SpanTermQuery t2 = new SpanTermQuery(new Term(\"field\", \"seventy\"));\n    Spans s1 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t1);\n    Spans s2 = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), t2);\n\n    assertTrue(s1.next());\n    assertTrue(s2.next());\n\n    boolean hasMore = true;\n\n    do {\n      hasMore = skipToAccordingToJavaDocs(s1, s1.doc() + 1);\n      assertEquals(hasMore, s2.skipTo(s2.doc() + 1));\n      assertEquals(s1.doc(), s2.doc());\n    } while (hasMore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07c6861cb029cd251d930aa4c4578c8ca21aa957":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"fab172655716b96f7e42376116235017a922de3a":["b1eb427f2c6beed80d1724555fc1db003ccf3030","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"07c6861cb029cd251d930aa4c4578c8ca21aa957":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fab172655716b96f7e42376116235017a922de3a":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["07c6861cb029cd251d930aa4c4578c8ca21aa957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}