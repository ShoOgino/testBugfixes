{"path":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery.Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addBoostFunctions(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addBoostFunctions(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  protected void addBoostFunctions(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    String[] boostFuncs = solrParams.getParams(DisMaxParams.BF);\n    if (null != boostFuncs && 0 != boostFuncs.length) {\n      for (String boostFunc : boostFuncs) {\n        if (null == boostFunc || \"\".equals(boostFunc)) continue;\n        Map<String, Float> ff = SolrPluginUtils.parseFieldBoosts(boostFunc);\n        for (String f : ff.keySet()) {\n          Query fq = subQuery(f, FunctionQParserPlugin.NAME).getQuery();\n          Float b = ff.get(f);\n          if (null != b) {\n            fq.setBoost(b);\n          }\n          query.add(fq, BooleanClause.Occur.SHOULD);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb67100dc016748799a77218aa409478372d79":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","407687e67faf6e1f02a211ca078d8e3eed631027"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}