{"path":"src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","commits":[{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns sub IndexReader that contains the given document id.\n   *    \n   * @param doc\n   * @param reader\n   * @return\n   */\n  public static IndexReader subReader(int doc, IndexReader reader) {\n    List subReadersList = new ArrayList();\n    ReaderUtil.gatherSubReaders(subReadersList, reader);\n    IndexReader[] subReaders = (IndexReader[]) subReadersList\n        .toArray(new IndexReader[subReadersList.size()]);\n    int[] docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n    return subReaders[ReaderUtil.subIndex(doc, docStarts)];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2c3800fed12bcb045f9d4f5124cca905b8ecfb","date":1250399678,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","sourceNew":"  /**\n   * Returns sub IndexReader that contains the given document id.\n   *    \n   * @param doc id of document\n   * @param reader parent reader\n   * @return sub reader of parent which contains the specified doc id\n   */\n  public static IndexReader subReader(int doc, IndexReader reader) {\n    List subReadersList = new ArrayList();\n    ReaderUtil.gatherSubReaders(subReadersList, reader);\n    IndexReader[] subReaders = (IndexReader[]) subReadersList\n        .toArray(new IndexReader[subReadersList.size()]);\n    int[] docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n    return subReaders[ReaderUtil.subIndex(doc, docStarts)];\n  }\n\n","sourceOld":"  /**\n   * Returns sub IndexReader that contains the given document id.\n   *    \n   * @param doc\n   * @param reader\n   * @return\n   */\n  public static IndexReader subReader(int doc, IndexReader reader) {\n    List subReadersList = new ArrayList();\n    ReaderUtil.gatherSubReaders(subReadersList, reader);\n    IndexReader[] subReaders = (IndexReader[]) subReadersList\n        .toArray(new IndexReader[subReadersList.size()]);\n    int[] docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n    return subReaders[ReaderUtil.subIndex(doc, docStarts)];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","sourceNew":"  /**\n   * Returns sub IndexReader that contains the given document id.\n   *    \n   * @param doc id of document\n   * @param reader parent reader\n   * @return sub reader of parent which contains the specified doc id\n   */\n  public static IndexReader subReader(int doc, IndexReader reader) {\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReadersList, reader);\n    IndexReader[] subReaders = (IndexReader[]) subReadersList\n        .toArray(new IndexReader[subReadersList.size()]);\n    int[] docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n    return subReaders[ReaderUtil.subIndex(doc, docStarts)];\n  }\n\n","sourceOld":"  /**\n   * Returns sub IndexReader that contains the given document id.\n   *    \n   * @param doc id of document\n   * @param reader parent reader\n   * @return sub reader of parent which contains the specified doc id\n   */\n  public static IndexReader subReader(int doc, IndexReader reader) {\n    List subReadersList = new ArrayList();\n    ReaderUtil.gatherSubReaders(subReadersList, reader);\n    IndexReader[] subReaders = (IndexReader[]) subReadersList\n        .toArray(new IndexReader[subReadersList.size()]);\n    int[] docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n    return subReaders[ReaderUtil.subIndex(doc, docStarts)];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","sourceNew":"  /**\n   * Returns sub IndexReader that contains the given document id.\n   *    \n   * @param doc id of document\n   * @param reader parent reader\n   * @return sub reader of parent which contains the specified doc id\n   */\n  public static IndexReader subReader(int doc, IndexReader reader) {\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReadersList, reader);\n    IndexReader[] subReaders = subReadersList\n        .toArray(new IndexReader[subReadersList.size()]);\n    int[] docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n    return subReaders[ReaderUtil.subIndex(doc, docStarts)];\n  }\n\n","sourceOld":"  /**\n   * Returns sub IndexReader that contains the given document id.\n   *    \n   * @param doc id of document\n   * @param reader parent reader\n   * @return sub reader of parent which contains the specified doc id\n   */\n  public static IndexReader subReader(int doc, IndexReader reader) {\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReadersList, reader);\n    IndexReader[] subReaders = (IndexReader[]) subReadersList\n        .toArray(new IndexReader[subReadersList.size()]);\n    int[] docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n    return subReaders[ReaderUtil.subIndex(doc, docStarts)];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/util/ReaderUtil#subReader(int,IndexReader).mjava","sourceNew":"  /**\n   * Returns sub IndexReader that contains the given document id.\n   *    \n   * @param doc id of document\n   * @param reader parent reader\n   * @return sub reader of parent which contains the specified doc id\n   */\n  public static IndexReader subReader(int doc, IndexReader reader) {\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReadersList, reader);\n    IndexReader[] subReaders = subReadersList\n        .toArray(new IndexReader[subReadersList.size()]);\n    int[] docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n    return subReaders[ReaderUtil.subIndex(doc, docStarts)];\n  }\n\n","sourceOld":"  /**\n   * Returns sub IndexReader that contains the given document id.\n   *    \n   * @param doc id of document\n   * @param reader parent reader\n   * @return sub reader of parent which contains the specified doc id\n   */\n  public static IndexReader subReader(int doc, IndexReader reader) {\n    List<IndexReader> subReadersList = new ArrayList<IndexReader>();\n    ReaderUtil.gatherSubReaders(subReadersList, reader);\n    IndexReader[] subReaders = subReadersList\n        .toArray(new IndexReader[subReadersList.size()]);\n    int[] docStarts = new int[subReaders.length];\n    int maxDoc = 0;\n    for (int i = 0; i < subReaders.length; i++) {\n      docStarts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();\n    }\n    return subReaders[ReaderUtil.subIndex(doc, docStarts)];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef82ff03e4016c705811b2658e81471a645c0e49":["7a2c3800fed12bcb045f9d4f5124cca905b8ecfb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a2c3800fed12bcb045f9d4f5124cca905b8ecfb":["fe941135bdfc28c81e20b4d21422f8726af34925"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["ef82ff03e4016c705811b2658e81471a645c0e49"],"fe941135bdfc28c81e20b4d21422f8726af34925":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["20645c714ca2a7b7707c2707d58ee9fa384c7362"]},"commit2Childs":{"ef82ff03e4016c705811b2658e81471a645c0e49":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe941135bdfc28c81e20b4d21422f8726af34925"],"7a2c3800fed12bcb045f9d4f5124cca905b8ecfb":["ef82ff03e4016c705811b2658e81471a645c0e49"],"fe941135bdfc28c81e20b4d21422f8726af34925":["7a2c3800fed12bcb045f9d4f5124cca905b8ecfb"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}