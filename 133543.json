{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","commits":[{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"prepareCommit\".equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n      }\n\n      if (isCommit) {\n        if (!isDelete) {\n          fail1 = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          fail2 = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (\"org.apache.lucene.store.MockDirectoryWrapper\".equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (\"org.apache.lucene.index.SegmentInfos\".equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["66d4c05d2724c63d6dcbdb32aab67299d77e3ca1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions.FailOnlyInCommit#eval(MockDirectoryWrapper).mjava","sourceNew":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      StackTraceElement[] trace = new Exception().getStackTrace();\n      boolean isCommit = false;\n      boolean isDelete = false;\n      boolean isInGlobalFieldMap = false;\n      for (int i = 0; i < trace.length; i++) {\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && stage.equals(trace[i].getMethodName()))\n          isCommit = true;\n        if (MockDirectoryWrapper.class.getName().equals(trace[i].getClassName()) && \"deleteFile\".equals(trace[i].getMethodName()))\n          isDelete = true;\n        if (SegmentInfos.class.getName().equals(trace[i].getClassName()) && \"writeGlobalFieldMap\".equals(trace[i].getMethodName()))\n          isInGlobalFieldMap = true;\n          \n      }\n      if (isInGlobalFieldMap && dontFailDuringGlobalFieldMap) {\n        isCommit = false;\n      }\n      if (isCommit) {\n        if (!isDelete) {\n          failOnCommit = true;\n          throw new RuntimeException(\"now fail first\");\n        } else {\n          failOnDeleteFile = true;\n          throw new IOException(\"now fail during delete\");\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1224a4027481acce15495b03bce9b48b93b42722"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["85a883878c0af761245ab048babc63d099f835f3","1224a4027481acce15495b03bce9b48b93b42722"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc749c053615f5871f3b95715fe292f34e70a53":["1224a4027481acce15495b03bce9b48b93b42722"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1224a4027481acce15495b03bce9b48b93b42722":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1224a4027481acce15495b03bce9b48b93b42722"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"1224a4027481acce15495b03bce9b48b93b42722":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}