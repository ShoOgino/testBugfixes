{"path":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","commits":[{"id":"7e4c214a1f904dde76f5611b56d4081533055b3b","date":1421938451,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","pathOld":"/dev/null","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.getDocCount();\n        if (fullDelCount == segState.rld.info.info.getDocCount()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc != null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc != null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.getDocCount();\n        if (fullDelCount == segState.rld.info.info.getDocCount()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc != null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc != null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.getDocCount();\n        if (fullDelCount == segState.rld.info.info.getDocCount()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc != null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc != null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.getDocCount();\n        if (fullDelCount == segState.rld.info.info.getDocCount()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc != null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd","date":1491865645,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc != null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc != null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","date":1493374641,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      if (firstExc != null) {\n        throw IOUtils.rethrowAlways(firstExc);\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      if (firstExc != null) {\n        throw IOUtils.rethrowAlways(firstExc);\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  public ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success) throws IOException {\n    int count = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n\n    for (int j=0;j<count;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      if (firstExc != null) {\n        throw IOUtils.rethrowAlways(firstExc);\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"closeSegmentStates: \" + totDelCount + \" new deleted documents; pool \" + updates.size() + \" packets; bytesUsed=\" + pool.ramBytesUsed());\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, allDeleted);      \n  }\n\n","sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      if (firstExc != null) {\n        throw IOUtils.rethrowAlways(firstExc);\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":"  /** Close segment states previously opened with openSegmentStates. */\n  public ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success) throws IOException {\n    int count = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n\n    for (int j=0;j<count;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      if (firstExc != null) {\n        throw IOUtils.rethrowAlways(firstExc);\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"closeSegmentStates: \" + totDelCount + \" new deleted documents; pool \" + updates.size() + \" packets; bytesUsed=\" + pool.ramBytesUsed());\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, allDeleted);      \n  }\n\n","sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      if (firstExc != null) {\n        throw IOUtils.rethrowAlways(firstExc);\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/BufferedUpdatesStream#closeSegmentStates(IndexWriter.ReaderPool,SegmentState[],boolean,long).mjava","sourceNew":null,"sourceOld":"  /** Close segment states previously opened with openSegmentStates. */\n  private ApplyDeletesResult closeSegmentStates(IndexWriter.ReaderPool pool, SegmentState[] segStates, boolean success, long gen) throws IOException {\n    int numReaders = segStates.length;\n    Throwable firstExc = null;\n    List<SegmentCommitInfo> allDeleted = null;\n    long totDelCount = 0;\n    for (int j=0;j<numReaders;j++) {\n      SegmentState segState = segStates[j];\n      if (success) {\n        totDelCount += segState.rld.getPendingDeleteCount() - segState.startDelCount;\n        segState.reader.getSegmentInfo().setBufferedDeletesGen(gen);\n        int fullDelCount = segState.rld.info.getDelCount() + segState.rld.getPendingDeleteCount();\n        assert fullDelCount <= segState.rld.info.info.maxDoc();\n        if (fullDelCount == segState.rld.info.info.maxDoc()) {\n          if (allDeleted == null) {\n            allDeleted = new ArrayList<>();\n          }\n          allDeleted.add(segState.reader.getSegmentInfo());\n        }\n      }\n      try {\n        segStates[j].finish(pool);\n      } catch (Throwable th) {\n        if (firstExc == null) {\n          firstExc = th;\n        }\n      }\n    }\n\n    if (success) {\n      if (firstExc != null) {\n        throw IOUtils.rethrowAlways(firstExc);\n      }\n    }\n\n    if (infoStream.isEnabled(\"BD\")) {\n      infoStream.message(\"BD\", \"applyDeletes: \" + totDelCount + \" new deleted documents\");\n    }\n\n    return new ApplyDeletesResult(totDelCount > 0, gen, allDeleted);      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b0267c69e2456a3477a1ad785723f2135da3117e"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"b0267c69e2456a3477a1ad785723f2135da3117e":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd":["b0267c69e2456a3477a1ad785723f2135da3117e"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7e4c214a1f904dde76f5611b56d4081533055b3b","b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["7e4c214a1f904dde76f5611b56d4081533055b3b","b0267c69e2456a3477a1ad785723f2135da3117e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7e4c214a1f904dde76f5611b56d4081533055b3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"97fc96e6cc460e0ec1fb904a9c7ecd80680780c2":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b0267c69e2456a3477a1ad785723f2135da3117e":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a762c8d72fe1ebd4950ed2a5704b89eaeb6f8bfd":["97fc96e6cc460e0ec1fb904a9c7ecd80680780c2"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"7e4c214a1f904dde76f5611b56d4081533055b3b":["b0267c69e2456a3477a1ad785723f2135da3117e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}