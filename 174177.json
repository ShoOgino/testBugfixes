{"path":"lucene/core/src/java/org/apache/lucene/util/fst/BytesRefFSTEnum#seekExact(BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesRefFSTEnum#seekExact(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/BytesRefFSTEnum#seekExact(BytesRef).mjava","sourceNew":"  /** Seeks to exactly this term, returning null if the term\n   *  doesn't exist.  This is faster than using {@link\n   *  #seekFloor} or {@link #seekCeil} because it\n   *  short-circuits as soon the match is not found. */\n  public InputOutput<T> seekExact(BytesRef target) throws IOException {\n    this.target = target;\n    targetLength = target.length;\n    if (super.doSeekExact()) {\n      assert upto == 1+target.length;\n      return setResult();\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly this term, returning null if the term\n   *  doesn't exist.  This is faster than using {@link\n   *  #seekFloor} or {@link #seekCeil} because it\n   *  short-circuits as soon the match is not found. */\n  public InputOutput<T> seekExact(BytesRef target) throws IOException {\n    this.target = target;\n    targetLength = target.length;\n    if (super.doSeekExact()) {\n      assert upto == 1+target.length;\n      return setResult();\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b115f25f829e48473723bb73c2c09e29f0a3ed0d","date":1564170556,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesRefFSTEnum#seekExact(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BytesRefFSTEnum#seekExact(BytesRef).mjava","sourceNew":"  /** Seeks to exactly this term, returning null if the term\n   *  doesn't exist.  This is faster than using {@link\n   *  #seekFloor} or {@link #seekCeil} because it\n   *  short-circuits as soon the match is not found. */\n  public InputOutput<T> seekExact(BytesRef target) throws IOException {\n    this.target = target;\n    targetLength = target.length;\n    if (doSeekExact()) {\n      assert upto == 1+target.length;\n      return setResult();\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly this term, returning null if the term\n   *  doesn't exist.  This is faster than using {@link\n   *  #seekFloor} or {@link #seekCeil} because it\n   *  short-circuits as soon the match is not found. */\n  public InputOutput<T> seekExact(BytesRef target) throws IOException {\n    this.target = target;\n    targetLength = target.length;\n    if (super.doSeekExact()) {\n      assert upto == 1+target.length;\n      return setResult();\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/BytesRefFSTEnum#seekExact(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/BytesRefFSTEnum#seekExact(BytesRef).mjava","sourceNew":"  /** Seeks to exactly this term, returning null if the term\n   *  doesn't exist.  This is faster than using {@link\n   *  #seekFloor} or {@link #seekCeil} because it\n   *  short-circuits as soon the match is not found. */\n  public InputOutput<T> seekExact(BytesRef target) throws IOException {\n    this.target = target;\n    targetLength = target.length;\n    if (doSeekExact()) {\n      assert upto == 1+target.length;\n      return setResult();\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly this term, returning null if the term\n   *  doesn't exist.  This is faster than using {@link\n   *  #seekFloor} or {@link #seekCeil} because it\n   *  short-circuits as soon the match is not found. */\n  public InputOutput<T> seekExact(BytesRef target) throws IOException {\n    this.target = target;\n    targetLength = target.length;\n    if (super.doSeekExact()) {\n      assert upto == 1+target.length;\n      return setResult();\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b115f25f829e48473723bb73c2c09e29f0a3ed0d"]},"commit2Childs":{"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b115f25f829e48473723bb73c2c09e29f0a3ed0d","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}