{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int,CodecProvider).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n    if (codecs == null)  {\n      codecs = CodecProvider.getDefault();\n    }\n    \n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor, codecs);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int,CodecProvider).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n    if (codecs == null)  {\n      codecs = CodecProvider.getDefault();\n    }\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor, codecs);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n    if (codecs == null)  {\n      codecs = CodecProvider.getDefault();\n    }\n    \n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor, codecs);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int,CodecProvider).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n    if (codecs == null)  {\n      codecs = CodecProvider.getDefault();\n    }\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor, codecs);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int,CodecProvider).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n    if (codecs == null)  {\n      codecs = CodecProvider.getDefault();\n    }\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor, codecs);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int,CodecProvider).mjava","sourceNew":null,"sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n    if (codecs == null)  {\n      codecs = CodecProvider.getDefault();\n    }\n    \n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor, codecs);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["406e7055a3e99d3fa6ce49a555a51dd18b321806","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"]},"commit2Childs":{"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["406e7055a3e99d3fa6ce49a555a51dd18b321806","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}