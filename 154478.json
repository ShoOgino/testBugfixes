{"path":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","pathOld":"solr/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","sourceNew":"  /** Returns a cloned of this instance's concept of \"now\" */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","sourceOld":"  /** Returns a cloned of this instance's concept of \"now\" */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","pathOld":"solr/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","sourceNew":"  /** Returns a cloned of this instance's concept of \"now\" */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","sourceOld":"  /** Returns a cloned of this instance's concept of \"now\" */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","pathOld":"solr/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","sourceNew":"  /** Returns a cloned of this instance's concept of \"now\" */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","sourceOld":"  /** Returns a cloned of this instance's concept of \"now\" */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3c7501e15f71c01b69ba22749b192827fa2019b","date":1335285341,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","sourceNew":"  /** \n   * Returns a cloned of this instance's concept of \"now\".\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNow\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","sourceOld":"  /** Returns a cloned of this instance's concept of \"now\" */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","bugFix":null,"bugIntro":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f0ce26b8f14b1bf281ef9b2fff700b5472c574df","date":1335296208,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","sourceNew":"  /** \n   * Returns a cloned of this instance's concept of \"now\".\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNOW\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","sourceOld":"  /** \n   * Returns a cloned of this instance's concept of \"now\".\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNow\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","date":1463148204,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","sourceNew":"  /** \n   * Returns a clone of this instance's concept of \"now\" (never null).\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNOW\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW(); // never null\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","sourceOld":"  /** \n   * Returns a cloned of this instance's concept of \"now\".\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNOW\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","bugFix":["b3c7501e15f71c01b69ba22749b192827fa2019b","227a2cd43fc1affe16eb4c4ab4423fbc276bd81d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","sourceNew":"  /** \n   * Returns a clone of this instance's concept of \"now\" (never null).\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNOW\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW(); // never null\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","sourceOld":"  /** \n   * Returns a cloned of this instance's concept of \"now\".\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNOW\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","sourceNew":"  /** \n   * Returns a clone of this instance's concept of \"now\" (never null).\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNOW\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW(); // never null\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","sourceOld":"  /** \n   * Returns a cloned of this instance's concept of \"now\".\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNOW\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/DateMathParser#getNow().mjava","sourceNew":"  /** \n   * Returns a clone of this instance's concept of \"now\" (never null).\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNOW\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW(); // never null\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","sourceOld":"  /** \n   * Returns a cloned of this instance's concept of \"now\".\n   *\n   * If setNow was never called (or if null was specified) then this method \n   * first defines 'now' as the value dictated by the SolrRequestInfo if it \n   * exists -- otherwise it uses a new Date instance at the moment getNow() \n   * is first called.\n   * @see #setNow\n   * @see SolrRequestInfo#getNOW\n   */\n  public Date getNow() {\n    if (now == null) {\n      SolrRequestInfo reqInfo = SolrRequestInfo.getRequestInfo();\n      if (reqInfo == null) {\n        // fall back to current time if no request info set\n        now = new Date();\n      } else {\n        now = reqInfo.getNOW();\n      }\n    }\n    return (Date) now.clone();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["f0ce26b8f14b1bf281ef9b2fff700b5472c574df"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0ce26b8f14b1bf281ef9b2fff700b5472c574df":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"0ad30c6a479e764150a3316e57263319775f1df2":["f0ce26b8f14b1bf281ef9b2fff700b5472c574df","ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f0ce26b8f14b1bf281ef9b2fff700b5472c574df","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f0ce26b8f14b1bf281ef9b2fff700b5472c574df","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29":["0ad30c6a479e764150a3316e57263319775f1df2"],"b3c7501e15f71c01b69ba22749b192827fa2019b":["f0ce26b8f14b1bf281ef9b2fff700b5472c574df"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["b3c7501e15f71c01b69ba22749b192827fa2019b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"f0ce26b8f14b1bf281ef9b2fff700b5472c574df":["ba0bb1c61dbf71a82da9a3ea8cda3d481f703d29","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}