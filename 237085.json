{"path":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrServer,String,ByteBuffer).mjava","sourceNew":"  public static String postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response;\n    try {\n      httpPost = new HttpPost(baseUrl+\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      return EntityUtils.toString(entity, StandardCharsets.UTF_8);\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static String postData(CloudSolrServer cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response;\n    try {\n      httpPost = new HttpPost(baseUrl+\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbServer().getHttpClient().execute(httpPost).getEntity();\n      return EntityUtils.toString(entity, StandardCharsets.UTF_8);\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821","date":1420627779,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl+\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static String postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response;\n    try {\n      httpPost = new HttpPost(baseUrl+\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      return EntityUtils.toString(entity, StandardCharsets.UTF_8);\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1d6db279f8d7919e2403935d8da75fc1d265896","date":1421778301,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Replica leader = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\").getActiveSlices().iterator().next().getLeader();\n    try {\n      httpPost = new HttpPost(leader.getStr(ZkStateReader.BASE_URL_PROP) +\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl+\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f46340080a63f8bb8358e83e88dba6ad13faf103","date":1421824628,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl+\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    Replica leader = cloudClient.getZkStateReader().getClusterState().getCollection(\".system\").getActiveSlices().iterator().next().getLeader();\n    try {\n      httpPost = new HttpPost(leader.getStr(ZkStateReader.BASE_URL_PROP) +\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl+\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","sourceNew":null,"sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl+\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f46340080a63f8bb8358e83e88dba6ad13faf103","9aea0485ecacb6734c17da2d02569816c23a69c1"],"f1d6db279f8d7919e2403935d8da75fc1d265896":["bf5d1e2ebf4d31138a7dea67029f32e53f8ae821"],"f46340080a63f8bb8358e83e88dba6ad13faf103":["f1d6db279f8d7919e2403935d8da75fc1d265896"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["f46340080a63f8bb8358e83e88dba6ad13faf103"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aea0485ecacb6734c17da2d02569816c23a69c1"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"f1d6db279f8d7919e2403935d8da75fc1d265896":["f46340080a63f8bb8358e83e88dba6ad13faf103"],"f46340080a63f8bb8358e83e88dba6ad13faf103":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821":["f1d6db279f8d7919e2403935d8da75fc1d265896"],"bafca15d8e408346a67f4282ad1143b88023893b":["bf5d1e2ebf4d31138a7dea67029f32e53f8ae821"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}