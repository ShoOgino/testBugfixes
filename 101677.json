{"path":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","commits":[{"id":"4eb385ecd39bd1dd37ba80397e86b3c6bf229f50","date":1427031875,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","sourceNew":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","sourceNew":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","sourceNew":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","sourceNew":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = System.nanoTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(System.nanoTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4412883c12067d8a4e2a354aa8adc58c32be1d6","date":1521129281,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ActionThrottleTest#testAZeroNanoTimeReturnInWait().mjava","sourceNew":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = timeSource.getTimeNs();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTimeNs() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","sourceOld":"  @Test\n  public void testAZeroNanoTimeReturnInWait() throws Exception {\n\n    ActionThrottle at = new ActionThrottle(\"test\", 1000, new TestNanoTimeSource(Arrays.asList(new Long[]{0L, 10L})));\n    long start = timeSource.getTime();\n    \n    at.markAttemptingAction();\n    \n    at.minimumWaitBetweenActions();\n    \n    long elaspsedTime = TimeUnit.MILLISECONDS.convert(timeSource.getTime() - start, TimeUnit.NANOSECONDS);\n    \n    assertTrue(elaspsedTime + \"ms\", elaspsedTime >= 995);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4eb385ecd39bd1dd37ba80397e86b3c6bf229f50"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["4eb385ecd39bd1dd37ba80397e86b3c6bf229f50","5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["4eb385ecd39bd1dd37ba80397e86b3c6bf229f50","464244264804e3f981bf1fb4b732516d8d62dbc2"],"4eb385ecd39bd1dd37ba80397e86b3c6bf229f50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["4eb385ecd39bd1dd37ba80397e86b3c6bf229f50"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["4eb385ecd39bd1dd37ba80397e86b3c6bf229f50","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"4eb385ecd39bd1dd37ba80397e86b3c6bf229f50":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c304e97e7c1d472bc70e801b35ee78583916c6cd","5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2","560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4eb385ecd39bd1dd37ba80397e86b3c6bf229f50"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"d4412883c12067d8a4e2a354aa8adc58c32be1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["d4412883c12067d8a4e2a354aa8adc58c32be1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}