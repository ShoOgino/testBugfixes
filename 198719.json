{"path":"lucene/backwards/src/java/org/apache/lucene/search/function/CustomScoreProvider#customScore(int,float,float[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/function/CustomScoreProvider#customScore(int,float,float[]).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/function/CustomScoreProvider#customScore(int,float,float[]).mjava","sourceNew":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link ValueSourceQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link ValueSourceQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/function/CustomScoreProvider#customScore(int,float,float[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute a custom score by the subQuery score and a number of \n   * {@link ValueSourceQuery} scores.\n   * <p> \n   * Subclasses can override this method to modify the custom score.  \n   * <p>\n   * If your custom scoring is different than the default herein you \n   * should override at least one of the two customScore() methods.\n   * If the number of ValueSourceQueries is always &lt; 2 it is \n   * sufficient to override the other \n   * {@link #customScore(int, float, float) customScore()} \n   * method, which is simpler. \n   * <p>\n   * The default computation herein is a multiplication of given scores:\n   * <pre>\n   *     ModifiedScore = valSrcScore * valSrcScores[0] * valSrcScores[1] * ...\n   * </pre>\n   * \n   * @param doc id of scored doc. \n   * @param subQueryScore score of that doc by the subQuery.\n   * @param valSrcScores scores of that doc by the ValueSourceQuery.\n   * @return custom score.\n   */\n  public float customScore(int doc, float subQueryScore, float valSrcScores[]) throws IOException {\n    if (valSrcScores.length == 1) {\n      return customScore(doc, subQueryScore, valSrcScores[0]);\n    }\n    if (valSrcScores.length == 0) {\n      return customScore(doc, subQueryScore, 1);\n    }\n    float score = subQueryScore;\n    for(int i = 0; i < valSrcScores.length; i++) {\n      score *= valSrcScores[i];\n    }\n    return score;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}