{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> maps = (List) message.get(\"rule\");\n    if (maps == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : maps) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","sourceOld":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> maps = (List) message.get(\"rule\");\n    if (maps == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : maps) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","date":1457088757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","sourceOld":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> maps = (List) message.get(\"rule\");\n    if (maps == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : maps) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","sourceOld":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","sourceOld":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","sourceOld":"  private Map<Position, String> identifyNodes(ClusterState clusterState,\n                                              List<String> nodeList,\n                                              ZkNodeProps message,\n                                              List<String> shardNames,\n                                              int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e12a337a9a98e388c3a5bca9c8256d21c13781f9","date":1492093671,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    if (policyName != null) {\n      String collName = message.getStr(CommonParams.NAME, \"coll_\" + System.nanoTime());\n      try(CloudSolrClient csc = new CloudSolrClient.Builder()\n          .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n          .build()) {\n        ClientDataProvider clientDataProvider = new ClientDataProvider(csc);\n        Map<String, List<String>> locations = Policy.getReplicaLocations(collName,\n            zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n            policyName, clientDataProvider, shardNames, repFactor);\n        Map<Position, String> result = new HashMap<>();\n        for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n          List<String> value = e.getValue();\n          for ( int i = 0; i < value.size(); i++) {\n            result.put(new Position(e.getKey(),i), value.get(i));\n          }\n        }\n        return result;\n      }\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16bee608f125b24473408dcd45467990cc88bf03","date":1492503287,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    if (policyName != null) {\n      String collName = message.getStr(CommonParams.NAME, \"coll_\" + System.nanoTime());\n      try(CloudSolrClient csc = new CloudSolrClient.Builder()\n          .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n          .build()) {\n        ClientDataProvider clientDataProvider = new ClientDataProvider(csc);\n        Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n            zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n            policyName, clientDataProvider, shardNames, repFactor);\n        Map<Position, String> result = new HashMap<>();\n        for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n          List<String> value = e.getValue();\n          for ( int i = 0; i < value.size(); i++) {\n            result.put(new Position(e.getKey(),i), value.get(i));\n          }\n        }\n        return result;\n      }\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    if (policyName != null) {\n      String collName = message.getStr(CommonParams.NAME, \"coll_\" + System.nanoTime());\n      try(CloudSolrClient csc = new CloudSolrClient.Builder()\n          .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n          .build()) {\n        ClientDataProvider clientDataProvider = new ClientDataProvider(csc);\n        Map<String, List<String>> locations = Policy.getReplicaLocations(collName,\n            zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n            policyName, clientDataProvider, shardNames, repFactor);\n        Map<Position, String> result = new HashMap<>();\n        for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n          List<String> value = e.getValue();\n          for ( int i = 0; i < value.size(); i++) {\n            result.put(new Position(e.getKey(),i), value.get(i));\n          }\n        }\n        return result;\n      }\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    if (policyName != null) {\n      String collName = message.getStr(CommonParams.NAME, \"coll_\" + System.nanoTime());\n      try(CloudSolrClient csc = new CloudSolrClient.Builder()\n          .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n          .build()) {\n        SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n        Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n            zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n            clientDataProvider, shardNames, repFactor);\n        Map<Position, String> result = new HashMap<>();\n        for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n          List<String> value = e.getValue();\n          for ( int i = 0; i < value.size(); i++) {\n            result.put(new Position(e.getKey(),i), value.get(i));\n          }\n        }\n        return result;\n      }\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    if (policyName != null) {\n      String collName = message.getStr(CommonParams.NAME, \"coll_\" + System.nanoTime());\n      try(CloudSolrClient csc = new CloudSolrClient.Builder()\n          .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n          .build()) {\n        ClientDataProvider clientDataProvider = new ClientDataProvider(csc);\n        Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n            zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n            policyName, clientDataProvider, shardNames, repFactor);\n        Map<Position, String> result = new HashMap<>();\n        for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n          List<String> value = e.getValue();\n          for ( int i = 0; i < value.size(); i++) {\n            result.put(new Position(e.getKey(),i), value.get(i));\n          }\n        }\n        return result;\n      }\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d14f4b04a5c752272b2f79fd6684fee8dff2808","date":1494821985,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    Map m = zkStateReader.getZkClient().getJson(AUTOSCALING_PATH, true);\n    boolean useAutoScalingPolicy = false;\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap != null && (m.get(Policy.CLUSTER_POLICY) == null || m.get(Policy.CLUSTER_PREFERENCE) != null || policyName == null)) {\n      useAutoScalingPolicy = true;\n    }\n\n      if (rulesMap == null && !useAutoScalingPolicy) {\n        int i = 0;\n        Map<Position, String> result = new HashMap<>();\n        for (String aShard : shardNames) {\n          for (int j = 0; j < repFactor; j++) {\n            result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n            i++;\n          }\n        }\n        return result;\n      }\n\n\n      if (useAutoScalingPolicy) {\n        String tmpCollName = \"coll_\" + System.nanoTime();\n        String collName = message.getStr(CommonParams.NAME, tmpCollName);\n        try (CloudSolrClient csc = new CloudSolrClient.Builder()\n            .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n            .build()) {\n          SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n          Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n              zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n              clientDataProvider, Collections.singletonMap(tmpCollName, policyName), shardNames, repFactor);\n          Map<Position, String> result = new HashMap<>();\n          for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n            List<String> value = e.getValue();\n            for (int i = 0; i < value.size(); i++) {\n              result.put(new Position(e.getKey(), i), value.get(i));\n            }\n          }\n          return result;\n        }\n\n      } else {\n        List<Rule> rules = new ArrayList<>();\n        for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n        Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n        for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n        ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n            sharVsReplicaCount,\n            (List<Map>) message.get(SNITCH),\n            new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n            nodeList,\n            overseer.getZkController().getCoreContainer(),\n            clusterState);\n\n        return replicaAssigner.getNodeMappings();\n      }\n    }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap == null && policyName == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    if (policyName != null) {\n      String collName = message.getStr(CommonParams.NAME, \"coll_\" + System.nanoTime());\n      try(CloudSolrClient csc = new CloudSolrClient.Builder()\n          .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n          .build()) {\n        SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n        Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n            zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n            clientDataProvider, shardNames, repFactor);\n        Map<Position, String> result = new HashMap<>();\n        for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n          List<String> value = e.getValue();\n          for ( int i = 0; i < value.size(); i++) {\n            result.put(new Position(e.getKey(),i), value.get(i));\n          }\n        }\n        return result;\n      }\n\n    } else {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      return replicaAssigner.getNodeMappings();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6ec5c9a659f169b5e8bc058d91c880321ece61","date":1494837353,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    Map m = zkStateReader.getZkClient().getJson(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    boolean useAutoScalingPolicy = false;\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap != null && (m.get(Policy.CLUSTER_POLICY) == null || m.get(Policy.CLUSTER_PREFERENCE) != null || policyName == null)) {\n      useAutoScalingPolicy = true;\n    }\n\n      if (rulesMap == null && !useAutoScalingPolicy) {\n        int i = 0;\n        Map<Position, String> result = new HashMap<>();\n        for (String aShard : shardNames) {\n          for (int j = 0; j < repFactor; j++) {\n            result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n            i++;\n          }\n        }\n        return result;\n      }\n\n\n      if (useAutoScalingPolicy) {\n        String tmpCollName = \"coll_\" + System.nanoTime();\n        String collName = message.getStr(CommonParams.NAME, tmpCollName);\n        try (CloudSolrClient csc = new CloudSolrClient.Builder()\n            .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n            .build()) {\n          SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n          Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n              zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n              clientDataProvider, Collections.singletonMap(tmpCollName, policyName), shardNames, repFactor);\n          Map<Position, String> result = new HashMap<>();\n          for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n            List<String> value = e.getValue();\n            for (int i = 0; i < value.size(); i++) {\n              result.put(new Position(e.getKey(), i), value.get(i));\n            }\n          }\n          return result;\n        }\n\n      } else {\n        List<Rule> rules = new ArrayList<>();\n        for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n        Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n        for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n        ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n            sharVsReplicaCount,\n            (List<Map>) message.get(SNITCH),\n            new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n            nodeList,\n            overseer.getZkController().getCoreContainer(),\n            clusterState);\n\n        return replicaAssigner.getNodeMappings();\n      }\n    }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    Map m = zkStateReader.getZkClient().getJson(AUTOSCALING_PATH, true);\n    boolean useAutoScalingPolicy = false;\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap != null && (m.get(Policy.CLUSTER_POLICY) == null || m.get(Policy.CLUSTER_PREFERENCE) != null || policyName == null)) {\n      useAutoScalingPolicy = true;\n    }\n\n      if (rulesMap == null && !useAutoScalingPolicy) {\n        int i = 0;\n        Map<Position, String> result = new HashMap<>();\n        for (String aShard : shardNames) {\n          for (int j = 0; j < repFactor; j++) {\n            result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n            i++;\n          }\n        }\n        return result;\n      }\n\n\n      if (useAutoScalingPolicy) {\n        String tmpCollName = \"coll_\" + System.nanoTime();\n        String collName = message.getStr(CommonParams.NAME, tmpCollName);\n        try (CloudSolrClient csc = new CloudSolrClient.Builder()\n            .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n            .build()) {\n          SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n          Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n              zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n              clientDataProvider, Collections.singletonMap(tmpCollName, policyName), shardNames, repFactor);\n          Map<Position, String> result = new HashMap<>();\n          for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n            List<String> value = e.getValue();\n            for (int i = 0; i < value.size(); i++) {\n              result.put(new Position(e.getKey(), i), value.get(i));\n            }\n          }\n          return result;\n        }\n\n      } else {\n        List<Rule> rules = new ArrayList<>();\n        for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n        Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n        for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n        ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n            sharVsReplicaCount,\n            (List<Map>) message.get(SNITCH),\n            new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n            nodeList,\n            overseer.getZkController().getCoreContainer(),\n            clusterState);\n\n        return replicaAssigner.getNodeMappings();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":5,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int numNrtReplicas, \n                                      int numTlogReplicas,\n                                      int numPullReplicas) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < numNrtReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.NRT), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numTlogReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.TLOG), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n        for (int j = 0; j < numPullReplicas; j++){\n          result.put(new Position(aShard, j, Replica.Type.PULL), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules\");\n      }\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    if (rulesMap == null) {\n      int i = 0;\n      Map<Position, String> result = new HashMap<>();\n      for (String aShard : shardNames) {\n        for (int j = 0; j < repFactor; j++){\n          result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n          i++;\n        }\n      }\n      return result;\n    }\n\n    List<Rule> rules = new ArrayList<>();\n    for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n    Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n    for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n    ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n        sharVsReplicaCount,\n        (List<Map>) message.get(SNITCH),\n        new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n        nodeList,\n        overseer.getZkController().getCoreContainer(),\n        clusterState);\n\n    return replicaAssigner.getNodeMappings();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#identifyNodes(ClusterState,List[String],ZkNodeProps,List[String],int).mjava","sourceNew":null,"sourceOld":"  Map<Position, String> identifyNodes(ClusterState clusterState,\n                                      List<String> nodeList,\n                                      ZkNodeProps message,\n                                      List<String> shardNames,\n                                      int repFactor) throws IOException, KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    Map m = zkStateReader.getZkClient().getJson(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, true);\n    boolean useAutoScalingPolicy = false;\n    String policyName = message.getStr(\"policy\");\n    if (rulesMap != null && (m.get(Policy.CLUSTER_POLICY) == null || m.get(Policy.CLUSTER_PREFERENCE) != null || policyName == null)) {\n      useAutoScalingPolicy = true;\n    }\n\n      if (rulesMap == null && !useAutoScalingPolicy) {\n        int i = 0;\n        Map<Position, String> result = new HashMap<>();\n        for (String aShard : shardNames) {\n          for (int j = 0; j < repFactor; j++) {\n            result.put(new Position(aShard, j), nodeList.get(i % nodeList.size()));\n            i++;\n          }\n        }\n        return result;\n      }\n\n\n      if (useAutoScalingPolicy) {\n        String tmpCollName = \"coll_\" + System.nanoTime();\n        String collName = message.getStr(CommonParams.NAME, tmpCollName);\n        try (CloudSolrClient csc = new CloudSolrClient.Builder()\n            .withClusterStateProvider(new ZkClientClusterStateProvider(zkStateReader))\n            .build()) {\n          SolrClientDataProvider clientDataProvider = new SolrClientDataProvider(csc);\n          Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(collName,\n              zkStateReader.getZkClient().getJson(SOLR_AUTOSCALING_CONF_PATH, true),\n              clientDataProvider, Collections.singletonMap(tmpCollName, policyName), shardNames, repFactor);\n          Map<Position, String> result = new HashMap<>();\n          for (Map.Entry<String, List<String>> e : locations.entrySet()) {\n            List<String> value = e.getValue();\n            for (int i = 0; i < value.size(); i++) {\n              result.put(new Position(e.getKey(), i), value.get(i));\n            }\n          }\n          return result;\n        }\n\n      } else {\n        List<Rule> rules = new ArrayList<>();\n        for (Object map : rulesMap) rules.add(new Rule((Map) map));\n\n        Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n        for (String shard : shardNames) sharVsReplicaCount.put(shard, repFactor);\n        ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n            sharVsReplicaCount,\n            (List<Map>) message.get(SNITCH),\n            new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n            nodeList,\n            overseer.getZkController().getCoreContainer(),\n            clusterState);\n\n        return replicaAssigner.getNodeMappings();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"61c45e99cf6676da48f19d7511c73712ad39402b":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["86fff6c123a5a1d38adb665dd045347219798da9"],"86fff6c123a5a1d38adb665dd045347219798da9":["16bee608f125b24473408dcd45467990cc88bf03"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"16bee608f125b24473408dcd45467990cc88bf03":["e12a337a9a98e388c3a5bca9c8256d21c13781f9"],"7a6ec5c9a659f169b5e8bc058d91c880321ece61":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["7a6ec5c9a659f169b5e8bc058d91c880321ece61","61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c45e99cf6676da48f19d7511c73712ad39402b"]},"commit2Childs":{"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132":["403d05f7f8d69b65659157eff1bc1d2717f04c66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["61c45e99cf6676da48f19d7511c73712ad39402b","e12a337a9a98e388c3a5bca9c8256d21c13781f9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5d14f4b04a5c752272b2f79fd6684fee8dff2808":["7a6ec5c9a659f169b5e8bc058d91c880321ece61"],"86fff6c123a5a1d38adb665dd045347219798da9":["5d14f4b04a5c752272b2f79fd6684fee8dff2808"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["16bee608f125b24473408dcd45467990cc88bf03"],"16bee608f125b24473408dcd45467990cc88bf03":["86fff6c123a5a1d38adb665dd045347219798da9"],"7a6ec5c9a659f169b5e8bc058d91c880321ece61":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}