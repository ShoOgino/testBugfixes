{"path":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#generateId(SchemaField).mjava","commits":[{"id":"46dfcd540005e76a7db876d494ac74e82c476523","date":1229095104,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#generateId(SchemaField).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/SolrContentHandler#generateId(SchemaField).mjava","sourceNew":"  /**\n   * Generate an ID for the document.  First try to get\n   * {@link ExtractingMetadataConstants#STREAM_NAME} from the\n   * {@link org.apache.tika.metadata.Metadata}, then try {@link ExtractingMetadataConstants#STREAM_SOURCE_INFO}\n   * then try {@link org.apache.tika.metadata.Metadata#IDENTIFIER}.\n   * If those all are null, then generate a random UUID using {@link java.util.UUID#randomUUID()}.\n   *\n   * @param uniqueField The SchemaField representing the unique field.\n   * @return The id as a string\n   */\n  protected String generateId(SchemaField uniqueField) {\n    //we don't have a unique field specified, so let's add one\n    String uniqId = null;\n    FieldType type = uniqueField.getType();\n    if (type instanceof StrField || type instanceof TextField) {\n      uniqId = metadata.get(ExtractingMetadataConstants.STREAM_NAME);\n      if (uniqId == null) {\n        uniqId = metadata.get(ExtractingMetadataConstants.STREAM_SOURCE_INFO);\n      }\n      if (uniqId == null) {\n        uniqId = metadata.get(Metadata.IDENTIFIER);\n      }\n      if (uniqId == null) {\n        //last chance, just create one\n        uniqId = UUID.randomUUID().toString();\n      }\n    } else if (type instanceof UUIDField){\n      uniqId = UUID.randomUUID().toString();\n    }\n    else {\n      uniqId = String.valueOf(getNextId());\n    }\n    return uniqId;\n  }\n\n","sourceOld":"  /**\n   * Generate an ID for the document.  First try to get\n   * {@link org.apache.solr.handler.ExtractingMetadataConstants#STREAM_NAME} from the\n   * {@link org.apache.tika.metadata.Metadata}, then try {@link ExtractingMetadataConstants#STREAM_SOURCE_INFO}\n   * then try {@link org.apache.tika.metadata.Metadata#IDENTIFIER}.\n   * If those all are null, then generate a random UUID using {@link java.util.UUID#randomUUID()}.\n   *\n   * @param uniqueField The SchemaField representing the unique field.\n   * @return The id as a string\n   */\n  protected String generateId(SchemaField uniqueField) {\n    //we don't have a unique field specified, so let's add one\n    String uniqId = null;\n    FieldType type = uniqueField.getType();\n    if (type instanceof StrField || type instanceof TextField) {\n      uniqId = metadata.get(ExtractingMetadataConstants.STREAM_NAME);\n      if (uniqId == null) {\n        uniqId = metadata.get(ExtractingMetadataConstants.STREAM_SOURCE_INFO);\n      }\n      if (uniqId == null) {\n        uniqId = metadata.get(Metadata.IDENTIFIER);\n      }\n      if (uniqId == null) {\n        //last chance, just create one\n        uniqId = UUID.randomUUID().toString();\n      }\n    } else if (type instanceof UUIDField){\n      uniqId = UUID.randomUUID().toString();\n    }\n    else {\n      uniqId = String.valueOf(getNextId());\n    }\n    return uniqId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a75028b56df82c87510ec21c236855cc806a39a1","date":1229226462,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#generateId(SchemaField).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#generateId(SchemaField).mjava","sourceNew":"  /**\n   * Generate an ID for the document.  First try to get\n   * {@link ExtractingMetadataConstants#STREAM_NAME} from the\n   * {@link org.apache.tika.metadata.Metadata}, then try {@link ExtractingMetadataConstants#STREAM_SOURCE_INFO}\n   * then try {@link org.apache.tika.metadata.Metadata#IDENTIFIER}.\n   * If those all are null, then generate a random UUID using {@link java.util.UUID#randomUUID()}.\n   *\n   * @param uniqueField The SchemaField representing the unique field.\n   * @return The id as a string\n   */\n  protected String generateId(SchemaField uniqueField) {\n    //we don't have a unique field specified, so let's add one\n    String uniqId = null;\n    FieldType type = uniqueField.getType();\n    if (type instanceof StrField || type instanceof TextField) {\n      uniqId = metadata.get(ExtractingMetadataConstants.STREAM_NAME);\n      if (uniqId == null) {\n        uniqId = metadata.get(ExtractingMetadataConstants.STREAM_SOURCE_INFO);\n      }\n      if (uniqId == null) {\n        uniqId = metadata.get(Metadata.IDENTIFIER);\n      }\n      if (uniqId == null) {\n        //last chance, just create one\n        uniqId = UUID.randomUUID().toString();\n      }\n    } else if (type instanceof UUIDField) {\n      uniqId = UUID.randomUUID().toString();\n    } else {\n      uniqId = String.valueOf(getNextId());\n    }\n    return uniqId;\n  }\n\n","sourceOld":"  /**\n   * Generate an ID for the document.  First try to get\n   * {@link ExtractingMetadataConstants#STREAM_NAME} from the\n   * {@link org.apache.tika.metadata.Metadata}, then try {@link ExtractingMetadataConstants#STREAM_SOURCE_INFO}\n   * then try {@link org.apache.tika.metadata.Metadata#IDENTIFIER}.\n   * If those all are null, then generate a random UUID using {@link java.util.UUID#randomUUID()}.\n   *\n   * @param uniqueField The SchemaField representing the unique field.\n   * @return The id as a string\n   */\n  protected String generateId(SchemaField uniqueField) {\n    //we don't have a unique field specified, so let's add one\n    String uniqId = null;\n    FieldType type = uniqueField.getType();\n    if (type instanceof StrField || type instanceof TextField) {\n      uniqId = metadata.get(ExtractingMetadataConstants.STREAM_NAME);\n      if (uniqId == null) {\n        uniqId = metadata.get(ExtractingMetadataConstants.STREAM_SOURCE_INFO);\n      }\n      if (uniqId == null) {\n        uniqId = metadata.get(Metadata.IDENTIFIER);\n      }\n      if (uniqId == null) {\n        //last chance, just create one\n        uniqId = UUID.randomUUID().toString();\n      }\n    } else if (type instanceof UUIDField){\n      uniqId = UUID.randomUUID().toString();\n    }\n    else {\n      uniqId = String.valueOf(getNextId());\n    }\n    return uniqId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a34495372f0709e1ee7051e94886274dc993443","date":1234022561,"type":4,"author":"Grant Ingersoll","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#generateId(SchemaField).mjava","sourceNew":null,"sourceOld":"  /**\n   * Generate an ID for the document.  First try to get\n   * {@link ExtractingMetadataConstants#STREAM_NAME} from the\n   * {@link org.apache.tika.metadata.Metadata}, then try {@link ExtractingMetadataConstants#STREAM_SOURCE_INFO}\n   * then try {@link org.apache.tika.metadata.Metadata#IDENTIFIER}.\n   * If those all are null, then generate a random UUID using {@link java.util.UUID#randomUUID()}.\n   *\n   * @param uniqueField The SchemaField representing the unique field.\n   * @return The id as a string\n   */\n  protected String generateId(SchemaField uniqueField) {\n    //we don't have a unique field specified, so let's add one\n    String uniqId = null;\n    FieldType type = uniqueField.getType();\n    if (type instanceof StrField || type instanceof TextField) {\n      uniqId = metadata.get(ExtractingMetadataConstants.STREAM_NAME);\n      if (uniqId == null) {\n        uniqId = metadata.get(ExtractingMetadataConstants.STREAM_SOURCE_INFO);\n      }\n      if (uniqId == null) {\n        uniqId = metadata.get(Metadata.IDENTIFIER);\n      }\n      if (uniqId == null) {\n        //last chance, just create one\n        uniqId = UUID.randomUUID().toString();\n      }\n    } else if (type instanceof UUIDField) {\n      uniqId = UUID.randomUUID().toString();\n    } else {\n      uniqId = String.valueOf(getNextId());\n    }\n    return uniqId;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a75028b56df82c87510ec21c236855cc806a39a1":["46dfcd540005e76a7db876d494ac74e82c476523"],"3a34495372f0709e1ee7051e94886274dc993443":["a75028b56df82c87510ec21c236855cc806a39a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"46dfcd540005e76a7db876d494ac74e82c476523":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a75028b56df82c87510ec21c236855cc806a39a1":["3a34495372f0709e1ee7051e94886274dc993443"],"3a34495372f0709e1ee7051e94886274dc993443":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["46dfcd540005e76a7db876d494ac74e82c476523"],"46dfcd540005e76a7db876d494ac74e82c476523":["a75028b56df82c87510ec21c236855cc806a39a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a34495372f0709e1ee7051e94886274dc993443","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}