{"path":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    TermAttribute termAtt = (TermAttribute) source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List<String> tlist = new ArrayList<String>();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List tlist = new ArrayList();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, (String) tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["046829b17e246624c179b94d5a20cb53fa945e87"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List<String> tlist = new ArrayList<String>();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List<String> tlist = new ArrayList<String>();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/analyzing/AnalyzingQueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List<String> tlist = new ArrayList<String>();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","sourceOld":"  /**\n   * Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   * <p>\n   * Depending on analyzer and settings, a prefix term may (most probably will)\n   * be lower-cased automatically. It <b>will</b> go through the default Analyzer.\n   * <p>\n   * Overrides super class, by passing terms through analyzer.\n   *\n   * @param  field   Name of the field query will use.\n   * @param  termStr Term token to use for building term for the query\n   *                 (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @throws ParseException\n   */\n  @Override\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException {\n    // get Analyzer from superclass and tokenize the term\n    TokenStream source = getAnalyzer().tokenStream(field, new StringReader(termStr));\n    List<String> tlist = new ArrayList<String>();\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    \n    while (true) {\n      try {\n        if (!source.incrementToken()) break;\n      } catch (IOException e) {\n        break;\n      }\n      tlist.add(termAtt.term());\n    }\n\n    try {\n      source.close();\n    } catch (IOException e) {\n      // ignore\n    }\n\n    if (tlist.size() == 1) {\n      return super.getPrefixQuery(field, tlist.get(0));\n    } else {\n      /* this means that the analyzer used either added or consumed\n       * (common for a stemmer) tokens, and we can't build a PrefixQuery */\n      throw new ParseException(\"Cannot build PrefixQuery with analyzer \"\n          + getAnalyzer().getClass()\n          + (tlist.size() > 1 ? \" - token(s) added\" : \" - token consumed\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}