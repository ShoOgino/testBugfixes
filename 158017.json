{"path":"src/java/org/apache/lucene/search/NumericRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","commits":[{"id":"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426","date":1247563064,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter(\n      NumericRangeQuery.newLongRange(field, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a9e462a51fd525218b83cdc33329f5ee00ca20","date":1254431499,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/NumericRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Long>(\n      NumericRangeQuery.newLongRange(field, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter(\n      NumericRangeQuery.newLongRange(field, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/NumericRangeFilter#newLongRange(String,Long,Long,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Long>(\n      NumericRangeQuery.newLongRange(field, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that queries a <code>long</code>\n   * range using the default <code>precisionStep</code> {@link NumericUtils#PRECISION_STEP_DEFAULT} (4).\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Long> newLongRange(final String field,\n    Long min, Long max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Long>(\n      NumericRangeQuery.newLongRange(field, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70a9e462a51fd525218b83cdc33329f5ee00ca20"]},"commit2Childs":{"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["70a9e462a51fd525218b83cdc33329f5ee00ca20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"70a9e462a51fd525218b83cdc33329f5ee00ca20":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}