{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","sourceNew":"  SepSkipListWriter(int skipInterval, int numberOfSkipLevels, int docCount,\n                    IntIndexOutput freqOutput,\n                    IntIndexOutput docOutput,\n                    IntIndexOutput posOutput,\n                    IndexOutput payloadOutput)\n    throws IOException {\n    super(skipInterval, numberOfSkipLevels, docCount);\n\n    this.freqOutput = freqOutput;\n    this.posOutput = posOutput;\n    this.payloadOutput = payloadOutput;\n    \n    lastSkipDoc = new int[numberOfSkipLevels];\n    lastSkipPayloadLength = new int[numberOfSkipLevels];\n    // TODO: -- also cutover normal IndexOutput to use getIndex()?\n    lastSkipPayloadPointer = new long[numberOfSkipLevels];\n\n    freqIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    docIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    posIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      if (freqOutput != null) {\n        freqIndex[i] = freqOutput.index();\n      }\n      docIndex[i] = docOutput.index();\n      if (posOutput != null) {\n        posIndex[i] = posOutput.index();\n      }\n    }\n  }\n\n","sourceOld":"  SepSkipListWriter(int skipInterval, int numberOfSkipLevels, int docCount,\n                    IntIndexOutput freqOutput,\n                    IntIndexOutput docOutput,\n                    IntIndexOutput posOutput,\n                    IndexOutput payloadOutput)\n    throws IOException {\n    super(skipInterval, numberOfSkipLevels, docCount);\n\n    this.freqOutput = freqOutput;\n    this.posOutput = posOutput;\n    this.payloadOutput = payloadOutput;\n    \n    lastSkipDoc = new int[numberOfSkipLevels];\n    lastSkipPayloadLength = new int[numberOfSkipLevels];\n    // TODO: -- also cutover normal IndexOutput to use getIndex()?\n    lastSkipPayloadPointer = new long[numberOfSkipLevels];\n\n    freqIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    docIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    posIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      if (freqOutput != null) {\n        freqIndex[i] = freqOutput.index();\n      }\n      docIndex[i] = docOutput.index();\n      if (posOutput != null) {\n        posIndex[i] = posOutput.index();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","sourceNew":null,"sourceOld":"  SepSkipListWriter(int skipInterval, int numberOfSkipLevels, int docCount,\n                    IntIndexOutput freqOutput,\n                    IntIndexOutput docOutput,\n                    IntIndexOutput posOutput,\n                    IndexOutput payloadOutput)\n    throws IOException {\n    super(skipInterval, numberOfSkipLevels, docCount);\n\n    this.freqOutput = freqOutput;\n    this.posOutput = posOutput;\n    this.payloadOutput = payloadOutput;\n    \n    lastSkipDoc = new int[numberOfSkipLevels];\n    lastSkipPayloadLength = new int[numberOfSkipLevels];\n    // TODO: -- also cutover normal IndexOutput to use getIndex()?\n    lastSkipPayloadPointer = new long[numberOfSkipLevels];\n\n    freqIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    docIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    posIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      if (freqOutput != null) {\n        freqIndex[i] = freqOutput.index();\n      }\n      docIndex[i] = docOutput.index();\n      if (posOutput != null) {\n        posIndex[i] = posOutput.index();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepSkipListWriter#SepSkipListWriter(int,int,int,IntIndexOutput,IntIndexOutput,IntIndexOutput,IndexOutput).mjava","sourceNew":null,"sourceOld":"  SepSkipListWriter(int skipInterval, int numberOfSkipLevels, int docCount,\n                    IntIndexOutput freqOutput,\n                    IntIndexOutput docOutput,\n                    IntIndexOutput posOutput,\n                    IndexOutput payloadOutput)\n    throws IOException {\n    super(skipInterval, numberOfSkipLevels, docCount);\n\n    this.freqOutput = freqOutput;\n    this.posOutput = posOutput;\n    this.payloadOutput = payloadOutput;\n    \n    lastSkipDoc = new int[numberOfSkipLevels];\n    lastSkipPayloadLength = new int[numberOfSkipLevels];\n    // TODO: -- also cutover normal IndexOutput to use getIndex()?\n    lastSkipPayloadPointer = new long[numberOfSkipLevels];\n\n    freqIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    docIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n    posIndex = new IntIndexOutput.Index[numberOfSkipLevels];\n\n    for(int i=0;i<numberOfSkipLevels;i++) {\n      if (freqOutput != null) {\n        freqIndex[i] = freqOutput.index();\n      }\n      docIndex[i] = docOutput.index();\n      if (posOutput != null) {\n        posIndex[i] = posOutput.index();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}