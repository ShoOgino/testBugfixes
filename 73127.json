{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final int hasProx = input.readByte();\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final int hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (storeIsCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION)) ? SegmentInfo.YES : SegmentInfo.NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","sourceOld":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final int hasProx = input.readByte();\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final int hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (storeIsCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION)) ? SegmentInfo.YES : SegmentInfo.NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final boolean hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (storeIsCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n\n    // nocommit 3x always has norms?\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors, false, true, true);\n  }\n\n","sourceOld":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final int hasProx = input.readByte();\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final int hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (storeIsCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION)) ? SegmentInfo.YES : SegmentInfo.NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc834f3412d287003cc04691da380b69ab983239","date":1337276089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final boolean hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (storeIsCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","sourceOld":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final boolean hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (storeIsCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n\n    // nocommit 3x always has norms?\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors, false, true, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8b14bc4241c302311422d5c6f7627f8febb86e","date":1337291675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit cleane up\n    final boolean hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics);\n  }\n\n","sourceOld":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final boolean hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (storeIsCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION));\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc97c61094c5498702b29cc2e8309beac50c23dc","date":1337293692,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    // nocommit clean up\n    final boolean hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, codec, diagnostics);\n  }\n\n","sourceOld":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit cleane up\n    final boolean hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4356000e349e38c9fb48034695b7c309abd54557","date":1337460341,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,IndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":"  private SegmentInfo readSegmentInfo(Directory dir, int format, IndexInput input) throws IOException {\n    // check that it is a format we can understand\n    if (format > Lucene3xSegmentInfosFormat.FORMAT_MINIMUM) {\n      throw new IndexFormatTooOldException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    if (format < Lucene3xSegmentInfosFormat.FORMAT_CURRENT) {\n      throw new IndexFormatTooNewException(input, format,\n                                           Lucene3xSegmentInfosFormat.FORMAT_MINIMUM, Lucene3xSegmentInfosFormat.FORMAT_CURRENT);\n    }\n    final String version;\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n\n    System.out.println(\"version=\" + version + \" name=\" + name + \" docCount=\" + docCount + \" delGen=\" + delGen + \" dso=\" + docStoreOffset + \" dss=\" + docStoreSegment + \" dssCFs=\" + docStoreIsCompoundFile + \" b=\" + b + \" format=\" + format);\n\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    if (format <= Lucene3xSegmentInfosFormat.FORMAT_HAS_VECTORS) {\n      input.readByte();\n    }\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    SegmentInfo info = new SegmentInfo(dir, version, name, docCount, docStoreOffset,\n                                       docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n                                       delCount, null, diagnostics);\n    info.setDelGen(delGen);\n    return info;\n  }\n\n","sourceOld":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final boolean hasProx = input.readByte() == 1;\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    // nocommit we can use hasProx/hasVectors from the 3.x\n    // si... if we can pass this to the other components...?\n\n    // nocommit clean up\n    final boolean hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte() == 1;\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n    }\n\n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, codec, diagnostics);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xSegmentInfosReader#readSegmentInfo(Directory,int,ChecksumIndexInput).mjava","sourceNew":null,"sourceOld":"  // if we make a preflex impl we can remove a lot of this hair...\n  public SegmentInfo readSegmentInfo(Directory dir, int format, ChecksumIndexInput input) throws IOException {\n    final String version;\n    if (format <= SegmentInfos.FORMAT_3_1) {\n      version = input.readString();\n    } else {\n      version = null;\n    }\n    final String name = input.readString();\n    final int docCount = input.readInt();\n    final long delGen = input.readLong();\n    final int docStoreOffset = input.readInt();\n    final String docStoreSegment;\n    final boolean docStoreIsCompoundFile;\n    if (docStoreOffset != -1) {\n      docStoreSegment = input.readString();\n      docStoreIsCompoundFile = input.readByte() == SegmentInfo.YES;\n    } else {\n      docStoreSegment = name;\n      docStoreIsCompoundFile = false;\n    }\n\n    // pre-4.0 indexes write a byte if there is a single norms file\n    byte b = input.readByte();\n    assert 1 == b : \"expected 1 but was: \"+ b + \" format: \" + format;\n\n    final int numNormGen = input.readInt();\n    final Map<Integer,Long> normGen;\n    if (numNormGen == SegmentInfo.NO) {\n      normGen = null;\n    } else {\n      normGen = new HashMap<Integer, Long>();\n      for(int j=0;j<numNormGen;j++) {\n        normGen.put(j, input.readLong());\n      }\n    }\n    final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n\n    final int delCount = input.readInt();\n    assert delCount <= docCount;\n\n    final int hasProx = input.readByte();\n\n    final Codec codec = Codec.forName(\"Lucene3x\");\n    final Map<String,String> diagnostics = input.readStringStringMap();\n\n    final int hasVectors;\n    if (format <= SegmentInfos.FORMAT_HAS_VECTORS) {\n      hasVectors = input.readByte();\n    } else {\n      final String storesSegment;\n      final String ext;\n      final boolean storeIsCompoundFile;\n      if (docStoreOffset != -1) {\n        storesSegment = docStoreSegment;\n        storeIsCompoundFile = docStoreIsCompoundFile;\n        ext = Lucene3xCodec.COMPOUND_FILE_STORE_EXTENSION;\n      } else {\n        storesSegment = name;\n        storeIsCompoundFile = isCompoundFile;\n        ext = IndexFileNames.COMPOUND_FILE_EXTENSION;\n      }\n      final Directory dirToTest;\n      if (storeIsCompoundFile) {\n        dirToTest = new CompoundFileDirectory(dir, IndexFileNames.segmentFileName(storesSegment, \"\", ext), IOContext.READONCE, false);\n      } else {\n        dirToTest = dir;\n      }\n      try {\n        hasVectors = dirToTest.fileExists(IndexFileNames.segmentFileName(storesSegment, \"\", Lucene3xTermVectorsReader.VECTORS_INDEX_EXTENSION)) ? SegmentInfo.YES : SegmentInfo.NO;\n      } finally {\n        if (isCompoundFile) {\n          dirToTest.close();\n        }\n      }\n    }\n    \n    return new SegmentInfo(dir, version, name, docCount, delGen, docStoreOffset,\n      docStoreSegment, docStoreIsCompoundFile, normGen, isCompoundFile,\n      delCount, hasProx, codec, diagnostics, hasVectors);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["fc834f3412d287003cc04691da380b69ab983239"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4356000e349e38c9fb48034695b7c309abd54557"],"4356000e349e38c9fb48034695b7c309abd54557":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"fc834f3412d287003cc04691da380b69ab983239":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["dc97c61094c5498702b29cc2e8309beac50c23dc"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["fc834f3412d287003cc04691da380b69ab983239"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4356000e349e38c9fb48034695b7c309abd54557":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dc97c61094c5498702b29cc2e8309beac50c23dc":["4356000e349e38c9fb48034695b7c309abd54557"],"fc834f3412d287003cc04691da380b69ab983239":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}