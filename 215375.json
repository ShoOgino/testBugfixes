{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#getSnapshot(boolean).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#getSnapshot(boolean).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, Object> getSnapshot(boolean withAutoscaling) throws Exception {\n    Map<String, Object> snapshot = new LinkedHashMap<>(4);\n    Map<String, Object> managerState = new HashMap<>();\n    managerState.put(\"timeSource\", timeSource.toString());\n    snapshot.put(MANAGER_STATE_KEY, managerState);\n\n    snapshot.put(CLUSTER_STATE_KEY, clusterStateProvider.getSnapshot());\n    snapshot.put(NODE_STATE_KEY, nodeStateProvider.getSnapshot());\n    snapshot.put(DISTRIB_STATE_KEY, distribStateManager.getSnapshot());\n    if (withAutoscaling) {\n      AutoScalingConfig config = distribStateManager.getAutoScalingConfig();\n      Policy.Session session = config.getPolicy().createSession(this);\n      List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(config, this);\n      Map<String, Object> diagnostics = new LinkedHashMap<>();\n      PolicyHelper.getDiagnostics(session).toMap(diagnostics);\n      List<Map<String, Object>> suggestionDetails = new ArrayList<>(suggestions.size());\n      suggestions.forEach(s -> {\n        Map<String, Object> map = new LinkedHashMap<>();\n        map.put(\"suggestion\", s);\n        if (s.getOperation() != null) {\n          SolrParams params = s.getOperation().getParams();\n          if (s.getOperation() instanceof V2Request) {\n            params = SimUtils.v2AdminRequestToV1Params((V2Request)s.getOperation());\n          }\n          ReplicaInfo info = nodeStateProvider.getReplicaInfo(\n              params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n          if (info == null) {\n            log.warn(\"Can't find ReplicaInfo for suggested operation: \" + s);\n          } else {\n            map.put(\"replica\", info);\n          }\n        }\n        suggestionDetails.add(map);\n      });\n      Map<String, Object> autoscaling = new LinkedHashMap<>();\n      autoscaling.put(\"suggestions\", suggestionDetails);\n      autoscaling.put(\"diagnostics\", diagnostics);\n      snapshot.put(AUTOSCALING_STATE_KEY, autoscaling);\n    }\n    snapshot.put(STATISTICS_STATE_KEY, SimUtils.calculateStats(this, distribStateManager.getAutoScalingConfig(), true));\n    return snapshot;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#getSnapshot(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotCloudManager#getSnapshot(boolean).mjava","sourceNew":"  public Map<String, Object> getSnapshot(boolean withAutoscaling, boolean redact) throws Exception {\n    Map<String, Object> snapshot = new LinkedHashMap<>(4);\n    Map<String, Object> managerState = new HashMap<>();\n    managerState.put(\"timeSource\", timeSource.toString());\n    snapshot.put(MANAGER_STATE_KEY, managerState);\n    RedactionUtils.RedactionContext ctx = redact ? SimUtils.getRedactionContext(clusterStateProvider.getClusterState()) : null;\n    snapshot.put(CLUSTER_STATE_KEY, clusterStateProvider.getSnapshot());\n    snapshot.put(NODE_STATE_KEY, nodeStateProvider.getSnapshot());\n    snapshot.put(DISTRIB_STATE_KEY, distribStateManager.getSnapshot(ctx));\n    if (withAutoscaling) {\n      AutoScalingConfig config = distribStateManager.getAutoScalingConfig();\n      Policy.Session session = config.getPolicy().createSession(this);\n      List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(config, this);\n      Map<String, Object> diagnostics = new LinkedHashMap<>();\n      PolicyHelper.getDiagnostics(session).toMap(diagnostics);\n      List<Map<String, Object>> suggestionDetails = new ArrayList<>(suggestions.size());\n      suggestions.forEach(s -> {\n        Map<String, Object> map = new LinkedHashMap<>();\n        map.put(\"suggestion\", s);\n        if (s.getOperation() != null) {\n          SolrParams params = s.getOperation().getParams();\n          if (s.getOperation() instanceof V2Request) {\n            params = SimUtils.v2AdminRequestToV1Params((V2Request)s.getOperation());\n          }\n          ReplicaInfo info = nodeStateProvider.getReplicaInfo(\n              params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n          if (info == null) {\n            log.warn(\"Can't find ReplicaInfo for suggested operation: \" + s);\n          } else {\n            map.put(\"replica\", info);\n          }\n        }\n        suggestionDetails.add(map);\n      });\n      Map<String, Object> autoscaling = new LinkedHashMap<>();\n      autoscaling.put(\"suggestions\", suggestionDetails);\n      autoscaling.put(\"diagnostics\", diagnostics);\n      snapshot.put(AUTOSCALING_STATE_KEY, autoscaling);\n    }\n    snapshot.put(STATISTICS_STATE_KEY, SimUtils.calculateStats(this, distribStateManager.getAutoScalingConfig(), true));\n    return snapshot;\n  }\n\n","sourceOld":"  public Map<String, Object> getSnapshot(boolean withAutoscaling) throws Exception {\n    Map<String, Object> snapshot = new LinkedHashMap<>(4);\n    Map<String, Object> managerState = new HashMap<>();\n    managerState.put(\"timeSource\", timeSource.toString());\n    snapshot.put(MANAGER_STATE_KEY, managerState);\n\n    snapshot.put(CLUSTER_STATE_KEY, clusterStateProvider.getSnapshot());\n    snapshot.put(NODE_STATE_KEY, nodeStateProvider.getSnapshot());\n    snapshot.put(DISTRIB_STATE_KEY, distribStateManager.getSnapshot());\n    if (withAutoscaling) {\n      AutoScalingConfig config = distribStateManager.getAutoScalingConfig();\n      Policy.Session session = config.getPolicy().createSession(this);\n      List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(config, this);\n      Map<String, Object> diagnostics = new LinkedHashMap<>();\n      PolicyHelper.getDiagnostics(session).toMap(diagnostics);\n      List<Map<String, Object>> suggestionDetails = new ArrayList<>(suggestions.size());\n      suggestions.forEach(s -> {\n        Map<String, Object> map = new LinkedHashMap<>();\n        map.put(\"suggestion\", s);\n        if (s.getOperation() != null) {\n          SolrParams params = s.getOperation().getParams();\n          if (s.getOperation() instanceof V2Request) {\n            params = SimUtils.v2AdminRequestToV1Params((V2Request)s.getOperation());\n          }\n          ReplicaInfo info = nodeStateProvider.getReplicaInfo(\n              params.get(CollectionAdminParams.COLLECTION), params.get(\"replica\"));\n          if (info == null) {\n            log.warn(\"Can't find ReplicaInfo for suggested operation: \" + s);\n          } else {\n            map.put(\"replica\", info);\n          }\n        }\n        suggestionDetails.add(map);\n      });\n      Map<String, Object> autoscaling = new LinkedHashMap<>();\n      autoscaling.put(\"suggestions\", suggestionDetails);\n      autoscaling.put(\"diagnostics\", diagnostics);\n      snapshot.put(AUTOSCALING_STATE_KEY, autoscaling);\n    }\n    snapshot.put(STATISTICS_STATE_KEY, SimUtils.calculateStats(this, distribStateManager.getAutoScalingConfig(), true));\n    return snapshot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3d2a34ea3732f91149b31bcad82026ad85fda69"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}