{"path":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82eadba6520ccc12cf924caeab2390501879f631","date":1273769478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    RAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    RAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    RAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    RAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    RAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermEnum terms = reader.terms();\n    while (terms.next()) {\n      assertTrue(terms.term().text().indexOf('e') != -1);\n    }\n    terms.close();\n    \n    TermPositions positions = reader.termPositions(new Term(\"default\", \"one\"));\n    while (positions.next()) {\n      assertTrue((positions.doc() % 2) == 1);\n    }\n\n    int NUM_DOCS = 3;\n\n    TermDocs td = reader.termDocs(null);\n    for(int i=0;i<NUM_DOCS;i++) {\n      assertTrue(td.next());\n      assertEquals(i, td.doc());\n      assertEquals(1, td.freq());\n    }\n    td.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Random random = newRandom();\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    RAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    RAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    MockRAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Random random = newRandom();\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    RAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    MockRAMDirectory target = newDirectory(random);\n    writer = new IndexWriter(target, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    MockRAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    Directory target = newDirectory(random);\n    writer = new IndexWriter(target, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Random random = newRandom();\n    MockRAMDirectory directory = newDirectory(random);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    MockRAMDirectory target = newDirectory(random);\n    writer = new IndexWriter(target, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Random random = newRandom();\n    Directory directory = newDirectory(random);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    Directory target = newDirectory(random);\n    writer = new IndexWriter(target, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b4e4fa6ab206814d495da779e247d979fe2f8","date":1290192594,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(SlowMultiReaderWrapper.wrap(IndexReader.open(directory, true)));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51c34a3639838887e7997850b6be80f838a4d6f7","date":1290278815,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(SlowMultiReaderWrapper.wrap(IndexReader.open(directory, true)));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"636d0b32c3b49c8f784033c0bb64d4cc3cbfbc90","date":1290968805,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    RAMDirectory directory = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(new Field(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(new Field(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(new Field(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    //IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    RAMDirectory target = new MockRAMDirectory();\n    writer = new IndexWriter(target, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n\n    assertTrue(reader.isOptimized());\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seek(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getDeletedDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator();\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory, true));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target, true);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d85277fe0f487ec4ed00df56cce41f715e1a5a1c","date":1326716247,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFilterIndexReader#testFilterIndexReader().mjava","sourceNew":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the IndexReader.getFieldNames implementation\n   * @throws Exception on error\n   */\n  public void testFilterIndexReader() throws Exception {\n    Directory directory = newDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n\n    Document d1 = new Document();\n    d1.add(newField(\"default\",\"one two\", TextField.TYPE_STORED));\n    writer.addDocument(d1);\n\n    Document d2 = new Document();\n    d2.add(newField(\"default\",\"one three\", TextField.TYPE_STORED));\n    writer.addDocument(d2);\n\n    Document d3 = new Document();\n    d3.add(newField(\"default\",\"two four\", TextField.TYPE_STORED));\n    writer.addDocument(d3);\n\n    writer.close();\n\n    Directory target = newDirectory();\n\n    // We mess with the postings so this can fail:\n    ((MockDirectoryWrapper) target).setCrossCheckTermVectorsOnClose(false);\n\n    writer = new IndexWriter(target, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    IndexReader reader = new TestReader(IndexReader.open(directory));\n    writer.addIndexes(reader);\n    writer.close();\n    reader.close();\n    reader = IndexReader.open(target);\n    \n    TermsEnum terms = MultiFields.getTerms(reader, \"default\").iterator(null);\n    while (terms.next() != null) {\n      assertTrue(terms.term().utf8ToString().indexOf('e') != -1);\n    }\n    \n    assertEquals(TermsEnum.SeekStatus.FOUND, terms.seekCeil(new BytesRef(\"one\")));\n    \n    DocsAndPositionsEnum positions = terms.docsAndPositions(MultiFields.getLiveDocs(reader),\n                                                            null, false);\n    while (positions.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n      assertTrue((positions.docID() % 2) == 1);\n    }\n\n    reader.close();\n    directory.close();\n    target.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"82eadba6520ccc12cf924caeab2390501879f631":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["3cc749c053615f5871f3b95715fe292f34e70a53","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d85277fe0f487ec4ed00df56cce41f715e1a5a1c"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3cc749c053615f5871f3b95715fe292f34e70a53"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","636d0b32c3b49c8f784033c0bb64d4cc3cbfbc90"],"636d0b32c3b49c8f784033c0bb64d4cc3cbfbc90":["51c34a3639838887e7997850b6be80f838a4d6f7"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["636d0b32c3b49c8f784033c0bb64d4cc3cbfbc90"],"d85277fe0f487ec4ed00df56cce41f715e1a5a1c":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b65b4e4fa6ab206814d495da779e247d979fe2f8":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["82eadba6520ccc12cf924caeab2390501879f631"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"51c34a3639838887e7997850b6be80f838a4d6f7":["b65b4e4fa6ab206814d495da779e247d979fe2f8"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["82eadba6520ccc12cf924caeab2390501879f631","28427ef110c4c5bf5b4057731b83110bd1e13724"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fd9cc9d77712aba3662f24632df7539ab75e3667"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["636d0b32c3b49c8f784033c0bb64d4cc3cbfbc90","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["3cc749c053615f5871f3b95715fe292f34e70a53","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","636d0b32c3b49c8f784033c0bb64d4cc3cbfbc90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"82eadba6520ccc12cf924caeab2390501879f631":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["1509f151d7692d84fae414b2b799ac06ba60fcb4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["b65b4e4fa6ab206814d495da779e247d979fe2f8","3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"636d0b32c3b49c8f784033c0bb64d4cc3cbfbc90":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["fd9cc9d77712aba3662f24632df7539ab75e3667","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"d85277fe0f487ec4ed00df56cce41f715e1a5a1c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b65b4e4fa6ab206814d495da779e247d979fe2f8":["51c34a3639838887e7997850b6be80f838a4d6f7"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["b21422ff1d1d56499dec481f193b402e5e8def5b","5f4e87790277826a2aea119328600dfb07761f32"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3cc749c053615f5871f3b95715fe292f34e70a53"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","2553b00f699380c64959ccb27991289aae87be2e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["d85277fe0f487ec4ed00df56cce41f715e1a5a1c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"51c34a3639838887e7997850b6be80f838a4d6f7":["636d0b32c3b49c8f784033c0bb64d4cc3cbfbc90"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["82eadba6520ccc12cf924caeab2390501879f631"],"3cc749c053615f5871f3b95715fe292f34e70a53":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","1c5b026d03cbbb03ca4c0b97d14e9839682281dc","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","31f025ae60076ae95274433f3fe8e6ace2857a87"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}