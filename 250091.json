{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","pathOld":"/dev/null","sourceNew":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    CJKTokenizer tokenizer = new CJKTokenizer(new StringReader(str));\n    TermAttribute termAtt = (TermAttribute) tokenizer.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) tokenizer.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) tokenizer.getAttribute(TypeAttribute.class);\n    for (int i = 0; i < out_tokens.length; i++) {\n      assertTrue(tokenizer.incrementToken());\n      assertEquals(termAtt.term(), out_tokens[i].termText);\n      assertEquals(offsetAtt.startOffset(), out_tokens[i].start);\n      assertEquals(offsetAtt.endOffset(), out_tokens[i].end);\n      assertEquals(typeAtt.type(), out_tokens[i].type);\n    }\n    assertFalse(tokenizer.incrementToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e64a71406348a5942a2166256238aff8313d0914"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","sourceNew":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    CJKTokenizer tokenizer = new CJKTokenizer(new StringReader(str));\n    TermAttribute termAtt = tokenizer.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = tokenizer.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = tokenizer.getAttribute(TypeAttribute.class);\n    for (int i = 0; i < out_tokens.length; i++) {\n      assertTrue(tokenizer.incrementToken());\n      assertEquals(termAtt.term(), out_tokens[i].termText);\n      assertEquals(offsetAtt.startOffset(), out_tokens[i].start);\n      assertEquals(offsetAtt.endOffset(), out_tokens[i].end);\n      assertEquals(typeAtt.type(), out_tokens[i].type);\n    }\n    assertFalse(tokenizer.incrementToken());\n  }\n\n","sourceOld":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    CJKTokenizer tokenizer = new CJKTokenizer(new StringReader(str));\n    TermAttribute termAtt = (TermAttribute) tokenizer.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = (OffsetAttribute) tokenizer.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = (TypeAttribute) tokenizer.getAttribute(TypeAttribute.class);\n    for (int i = 0; i < out_tokens.length; i++) {\n      assertTrue(tokenizer.incrementToken());\n      assertEquals(termAtt.term(), out_tokens[i].termText);\n      assertEquals(offsetAtt.startOffset(), out_tokens[i].start);\n      assertEquals(offsetAtt.endOffset(), out_tokens[i].end);\n      assertEquals(typeAtt.type(), out_tokens[i].type);\n    }\n    assertFalse(tokenizer.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":["e64a71406348a5942a2166256238aff8313d0914"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e64a71406348a5942a2166256238aff8313d0914","date":1263756357,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","sourceNew":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    Analyzer analyzer = new CJKAnalyzer(Version.LUCENE_CURRENT);\n    String terms[] = new String[out_tokens.length];\n    int startOffsets[] = new int[out_tokens.length];\n    int endOffsets[] = new int[out_tokens.length];\n    String types[] = new String[out_tokens.length];\n    for (int i = 0; i < out_tokens.length; i++) {\n      terms[i] = out_tokens[i].termText;\n      startOffsets[i] = out_tokens[i].start;\n      endOffsets[i] = out_tokens[i].end;\n      types[i] = out_tokens[i].type;\n    }\n    assertAnalyzesTo(analyzer, str, terms, startOffsets, endOffsets, types, null);\n  }\n\n","sourceOld":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    CJKTokenizer tokenizer = new CJKTokenizer(new StringReader(str));\n    TermAttribute termAtt = tokenizer.getAttribute(TermAttribute.class);\n    OffsetAttribute offsetAtt = tokenizer.getAttribute(OffsetAttribute.class);\n    TypeAttribute typeAtt = tokenizer.getAttribute(TypeAttribute.class);\n    for (int i = 0; i < out_tokens.length; i++) {\n      assertTrue(tokenizer.incrementToken());\n      assertEquals(termAtt.term(), out_tokens[i].termText);\n      assertEquals(offsetAtt.startOffset(), out_tokens[i].start);\n      assertEquals(offsetAtt.endOffset(), out_tokens[i].end);\n      assertEquals(typeAtt.type(), out_tokens[i].type);\n    }\n    assertFalse(tokenizer.incrementToken());\n  }\n\n","bugFix":["8d78f014fded44fbde905f4f84cdc21907b371e8","9b5756469957918cac40a831acec9cf01c8c2bb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","sourceNew":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    Analyzer analyzer = new CJKAnalyzer(TEST_VERSION_CURRENT);\n    String terms[] = new String[out_tokens.length];\n    int startOffsets[] = new int[out_tokens.length];\n    int endOffsets[] = new int[out_tokens.length];\n    String types[] = new String[out_tokens.length];\n    for (int i = 0; i < out_tokens.length; i++) {\n      terms[i] = out_tokens[i].termText;\n      startOffsets[i] = out_tokens[i].start;\n      endOffsets[i] = out_tokens[i].end;\n      types[i] = out_tokens[i].type;\n    }\n    assertAnalyzesTo(analyzer, str, terms, startOffsets, endOffsets, types, null);\n  }\n\n","sourceOld":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    Analyzer analyzer = new CJKAnalyzer(Version.LUCENE_CURRENT);\n    String terms[] = new String[out_tokens.length];\n    int startOffsets[] = new int[out_tokens.length];\n    int endOffsets[] = new int[out_tokens.length];\n    String types[] = new String[out_tokens.length];\n    for (int i = 0; i < out_tokens.length; i++) {\n      terms[i] = out_tokens[i].termText;\n      startOffsets[i] = out_tokens[i].start;\n      endOffsets[i] = out_tokens[i].end;\n      types[i] = out_tokens[i].type;\n    }\n    assertAnalyzesTo(analyzer, str, terms, startOffsets, endOffsets, types, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/cjk/TestCJKTokenizer#checkCJKToken(String,TestToken[]).mjava","sourceNew":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    Analyzer analyzer = new CJKAnalyzer(TEST_VERSION_CURRENT);\n    String terms[] = new String[out_tokens.length];\n    int startOffsets[] = new int[out_tokens.length];\n    int endOffsets[] = new int[out_tokens.length];\n    String types[] = new String[out_tokens.length];\n    for (int i = 0; i < out_tokens.length; i++) {\n      terms[i] = out_tokens[i].termText;\n      startOffsets[i] = out_tokens[i].start;\n      endOffsets[i] = out_tokens[i].end;\n      types[i] = out_tokens[i].type;\n    }\n    assertAnalyzesTo(analyzer, str, terms, startOffsets, endOffsets, types, null);\n  }\n\n","sourceOld":"  public void checkCJKToken(final String str, final TestToken[] out_tokens) throws IOException {\n    Analyzer analyzer = new CJKAnalyzer(TEST_VERSION_CURRENT);\n    String terms[] = new String[out_tokens.length];\n    int startOffsets[] = new int[out_tokens.length];\n    int endOffsets[] = new int[out_tokens.length];\n    String types[] = new String[out_tokens.length];\n    for (int i = 0; i < out_tokens.length; i++) {\n      terms[i] = out_tokens[i].termText;\n      startOffsets[i] = out_tokens[i].start;\n      endOffsets[i] = out_tokens[i].end;\n      types[i] = out_tokens[i].type;\n    }\n    assertAnalyzesTo(analyzer, str, terms, startOffsets, endOffsets, types, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e64a71406348a5942a2166256238aff8313d0914":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e64a71406348a5942a2166256238aff8313d0914"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e64a71406348a5942a2166256238aff8313d0914":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["e64a71406348a5942a2166256238aff8313d0914"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}