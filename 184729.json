{"path":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","commits":[{"id":"a194d3ac4639a7909ea614667b9a7632a6aa14d1","date":1355475351,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(new TermQuery(t).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(new TermQuery(t).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"620f2c9cd3df8f77948c19b3165b5dc20700a5d5","date":1375193294,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getLowFreqMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(new TermQuery(t).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(\"(\");\n      buffer.append(getLowFreqMinimumNumberShouldMatch());\n      buffer.append(getHighFreqMinimumNumberShouldMatch());\n      buffer.append(\")\");\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(new TermQuery(t).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getLowFreqMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(new TermQuery(t).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(\"(\");\n      buffer.append(getLowFreqMinimumNumberShouldMatch());\n      buffer.append(getHighFreqMinimumNumberShouldMatch());\n      buffer.append(\")\");\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(new TermQuery(t).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(getMinimumNumberShouldMatch());\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b6341c01680bddb99b9aa4697c800f1b1f3c02","date":1393514086,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getLowFreqMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(newTermQuery(t, null).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(\"(\");\n      buffer.append(getLowFreqMinimumNumberShouldMatch());\n      buffer.append(getHighFreqMinimumNumberShouldMatch());\n      buffer.append(\")\");\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getLowFreqMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(new TermQuery(t).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(\"(\");\n      buffer.append(getLowFreqMinimumNumberShouldMatch());\n      buffer.append(getHighFreqMinimumNumberShouldMatch());\n      buffer.append(\")\");\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getLowFreqMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(newTermQuery(t, null).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(\"(\");\n      buffer.append(getLowFreqMinimumNumberShouldMatch());\n      buffer.append(getHighFreqMinimumNumberShouldMatch());\n      buffer.append(\")\");\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getLowFreqMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(new TermQuery(t).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(\"(\");\n      buffer.append(getLowFreqMinimumNumberShouldMatch());\n      buffer.append(getHighFreqMinimumNumberShouldMatch());\n      buffer.append(\")\");\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/CommonTermsQuery#toString(String).mjava","sourceNew":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getLowFreqMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(newTermQuery(t, null).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(\"(\");\n      buffer.append(getLowFreqMinimumNumberShouldMatch());\n      buffer.append(getHighFreqMinimumNumberShouldMatch());\n      buffer.append(\")\");\n    }\n    return buffer.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString(String field) {\n    StringBuilder buffer = new StringBuilder();\n    boolean needParens = (getBoost() != 1.0)\n        || (getLowFreqMinimumNumberShouldMatch() > 0);\n    if (needParens) {\n      buffer.append(\"(\");\n    }\n    for (int i = 0; i < terms.size(); i++) {\n      Term t = terms.get(i);\n      buffer.append(newTermQuery(t, null).toString());\n      \n      if (i != terms.size() - 1) buffer.append(\", \");\n    }\n    if (needParens) {\n      buffer.append(\")\");\n    }\n    if (getLowFreqMinimumNumberShouldMatch() > 0 || getHighFreqMinimumNumberShouldMatch() > 0) {\n      buffer.append('~');\n      buffer.append(\"(\");\n      buffer.append(getLowFreqMinimumNumberShouldMatch());\n      buffer.append(getHighFreqMinimumNumberShouldMatch());\n      buffer.append(\")\");\n    }\n    if (getBoost() != 1.0f) {\n      buffer.append(ToStringUtils.boost(getBoost()));\n    }\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"58b6341c01680bddb99b9aa4697c800f1b1f3c02":["620f2c9cd3df8f77948c19b3165b5dc20700a5d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["58b6341c01680bddb99b9aa4697c800f1b1f3c02"],"620f2c9cd3df8f77948c19b3165b5dc20700a5d5":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["620f2c9cd3df8f77948c19b3165b5dc20700a5d5","58b6341c01680bddb99b9aa4697c800f1b1f3c02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"58b6341c01680bddb99b9aa4697c800f1b1f3c02":["2dfdf766e55e943d942055d7de53c7ad6bc45283","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a194d3ac4639a7909ea614667b9a7632a6aa14d1"],"620f2c9cd3df8f77948c19b3165b5dc20700a5d5":["58b6341c01680bddb99b9aa4697c800f1b1f3c02","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"a194d3ac4639a7909ea614667b9a7632a6aa14d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","620f2c9cd3df8f77948c19b3165b5dc20700a5d5","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}