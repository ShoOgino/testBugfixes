{"path":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","commits":[{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      provider.register(new StandardCodec());\n      provider.register(new SimpleTextCodec());\n      // provider.register(new MockSepCodec()); // TODO enable once we have\n      // files per codec\n      // provider.register(new PulsingCodec());\n\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, random.nextBoolean() ? \"SimpleText\"\n            : \"Standard\"); // TODO enable other codecs once possible\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      provider.register(new StandardCodec());\n      provider.register(new SimpleTextCodec());\n      // provider.register(new MockSepCodec()); // TODO enable once we have\n      // files per codec\n      // provider.register(new PulsingCodec());\n\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, random.nextBoolean() ? \"SimpleText\"\n            : \"Standard\"); // TODO enable other codecs once possible\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16c697f6ca5cdc82f918f753317a4ac9c70d259f","date":1289840486,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      provider.register(new StandardCodec());\n      provider.register(new SimpleTextCodec());\n      // provider.register(new MockSepCodec()); // TODO enable once we have\n      // files per codec\n      // provider.register(new PulsingCodec());\n\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, random.nextBoolean() ? \"SimpleText\"\n            : \"Standard\"); // TODO enable other codecs once possible\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      provider.register(new StandardCodec());\n      provider.register(new SimpleTextCodec());\n      // provider.register(new MockSepCodec()); // TODO enable once we have\n      // files per codec\n      // provider.register(new PulsingCodec());\n\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, random.nextBoolean() ? \"SimpleText\"\n            : \"Standard\"); // TODO enable other codecs once possible\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer());\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = (TEST_NIGHTLY ? 5 : 1 ) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = atLeast(30);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        num = atLeast(30);\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = (TEST_NIGHTLY ? 5 : 1 ) * RANDOM_MULTIPLIER;\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = atLeast(30);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        num = atLeast(30);\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = atLeast(30);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        num = atLeast(30);\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    for (int i = 0; i < 5; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      for (int j = 0; j < 30 * RANDOM_MULTIPLIER; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < 30 * RANDOM_MULTIPLIER; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n      _TestUtil.checkIndex(dir, provider);\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94490c5d64c744b9fae5ce5974e162a85f369c00","date":1308535857,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = atLeast(30);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        num = atLeast(30);\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f902dca0fec763317e17fa91ff6543fc8120c609","date":1308553979,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = atLeast(30);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        num = atLeast(30);\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0b8069918917b33f361011899a1af0cdd2d462","date":1310039336,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(20)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(20)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(20)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(10)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(20)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    Index[] indexValue = new Index[] { Index.ANALYZED, Index.ANALYZED_NO_NORMS,\n        Index.NOT_ANALYZED, Index.NOT_ANALYZED_NO_NORMS };\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(20)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), indexValue[random\n              .nextInt(indexValue.length)]);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#testStressPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testStressPerFieldCodec().mjava","sourceNew":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      int num = _TestUtil.nextInt(random, 30, 60);\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test per field codec support - adding fields with random codecs\n   */\n  @Test\n  public void testStressPerFieldCodec() throws IOException {\n    Directory dir = newDirectory(random);\n    final int docsPerRound = 97;\n    int numRounds = atLeast(1);\n    for (int i = 0; i < numRounds; i++) {\n      CodecProvider provider = new CodecProvider();\n      Codec[] codecs = new Codec[] { new StandardCodec(),\n          new SimpleTextCodec(), new MockSepCodec(),\n          new PulsingCodec(1 + random.nextInt(20)),\n          new MockVariableIntBlockCodec(1 + random.nextInt(10)),\n          new MockFixedIntBlockCodec(1 + random.nextInt(10)) };\n      for (Codec codec : codecs) {\n        provider.register(codec);\n      }\n      int num = _TestUtil.nextInt(random, 30, 60);\n      for (int j = 0; j < num; j++) {\n        provider.setFieldCodec(\"\" + j, codecs[random.nextInt(codecs.length)].name);\n      }\n      IndexWriterConfig config = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer(random));\n      config.setOpenMode(OpenMode.CREATE_OR_APPEND);\n      config.setCodecProvider(provider);\n      IndexWriter writer = newWriter(dir, config);\n      for (int j = 0; j < docsPerRound; j++) {\n        final Document doc = new Document();\n        for (int k = 0; k < num; k++) {\n          FieldType customType = new FieldType(TextField.TYPE_UNSTORED);\n          customType.setTokenized(random.nextBoolean());\n          customType.setOmitNorms(random.nextBoolean());\n          Field field = newField(\"\" + k, _TestUtil\n              .randomRealisticUnicodeString(random, 128), customType);\n          doc.add(field);\n        }\n        writer.addDocument(doc);\n      }\n      if (random.nextBoolean()) {\n        writer.optimize();\n      }\n      writer.commit();\n      assertEquals((i + 1) * docsPerRound, writer.maxDoc());\n      writer.close();\n    }\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["cca56866c19997e28ef073622656669c15210540"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["85a883878c0af761245ab048babc63d099f835f3","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"f902dca0fec763317e17fa91ff6543fc8120c609":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","94490c5d64c744b9fae5ce5974e162a85f369c00"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bc0b8069918917b33f361011899a1af0cdd2d462":["94490c5d64c744b9fae5ce5974e162a85f369c00"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"94490c5d64c744b9fae5ce5974e162a85f369c00":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"7b91922b55d15444d554721b352861d028eb8278":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1291e4568eb7d9463d751627596ef14baf4c1603":["94490c5d64c744b9fae5ce5974e162a85f369c00","bc0b8069918917b33f361011899a1af0cdd2d462"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["16c697f6ca5cdc82f918f753317a4ac9c70d259f"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["f902dca0fec763317e17fa91ff6543fc8120c609","bc0b8069918917b33f361011899a1af0cdd2d462"],"a3776dccca01c11e7046323cfad46a3b4a471233":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["bc0b8069918917b33f361011899a1af0cdd2d462"],"cca56866c19997e28ef073622656669c15210540":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["f902dca0fec763317e17fa91ff6543fc8120c609"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","94490c5d64c744b9fae5ce5974e162a85f369c00","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"16c697f6ca5cdc82f918f753317a4ac9c70d259f":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"f902dca0fec763317e17fa91ff6543fc8120c609":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["16c697f6ca5cdc82f918f753317a4ac9c70d259f","85a883878c0af761245ab048babc63d099f835f3"],"85a883878c0af761245ab048babc63d099f835f3":["9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"bc0b8069918917b33f361011899a1af0cdd2d462":["1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"962d04139994fce5193143ef35615499a9a96d78":[],"94490c5d64c744b9fae5ce5974e162a85f369c00":["f902dca0fec763317e17fa91ff6543fc8120c609","bc0b8069918917b33f361011899a1af0cdd2d462","1291e4568eb7d9463d751627596ef14baf4c1603"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cca56866c19997e28ef073622656669c15210540"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7b91922b55d15444d554721b352861d028eb8278"],"cca56866c19997e28ef073622656669c15210540":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","1291e4568eb7d9463d751627596ef14baf4c1603","f0b9507caf22f292ac0e5e59f62db4275adf4511","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}