{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","commits":[{"id":"de11853c992f764e52d4164cc9afdebb989dba8a","date":1313510465,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f49143da0a5d278a72f741432047fcfa6da996e","date":1316927425,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","sourceNew":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","sourceOld":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new ReusableAnalyzerBase() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","sourceNew":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","sourceOld":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#testVanishingTerms().mjava","sourceNew":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","sourceOld":"  // LUCENE-3375\n  public void testVanishingTerms() throws Exception {\n    String testFile = \n      \"aaa => aaaa1 aaaa2 aaaa3\\n\" + \n      \"bbb => bbbb1 bbbb2\\n\";\n      \n    SolrSynonymParser parser = new SolrSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.add(new StringReader(testFile));\n    final SynonymMap map = parser.build();\n      \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, true);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, true));\n      }\n    };\n    \n    // where did my pot go?!\n    assertAnalyzesTo(analyzer, \"xyzzy bbb pot of gold\",\n                     new String[] { \"xyzzy\", \"bbbb1\", \"pot\", \"bbbb2\", \"of\", \"gold\" });\n    \n    // this one nukes 'pot' and 'of'\n    // xyzzy aaa pot of gold -> xyzzy aaaa1 aaaa2 aaaa3 gold\n    assertAnalyzesTo(analyzer, \"xyzzy aaa pot of gold\",\n                     new String[] { \"xyzzy\", \"aaaa1\", \"pot\", \"aaaa2\", \"of\", \"aaaa3\", \"gold\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"de11853c992f764e52d4164cc9afdebb989dba8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f49143da0a5d278a72f741432047fcfa6da996e":["de11853c992f764e52d4164cc9afdebb989dba8a"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["2f49143da0a5d278a72f741432047fcfa6da996e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de11853c992f764e52d4164cc9afdebb989dba8a":["2f49143da0a5d278a72f741432047fcfa6da996e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de11853c992f764e52d4164cc9afdebb989dba8a"],"2f49143da0a5d278a72f741432047fcfa6da996e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}