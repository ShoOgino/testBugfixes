{"path":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","commits":[{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":2,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.CollapsingFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            ord = segmentValues.getOrd(contextDoc);\n            if(ord > -1) {\n              ord = (int)segmentOrdinalMap.get(ord);\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            ord = segmentValues.getOrd(globalDoc);\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(fieldValueCollapse.getCollapsedSet(), 0); // cost is not useful here\n      int docId = -1;\n      int nullScoreIndex = 0;\n      float[] scores = fieldValueCollapse.getScores();\n      FloatArrayList nullScores = fieldValueCollapse.getNullScores();\n      float nullScore = fieldValueCollapse.getNullScore();\n      while((docId = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        if(this.needsScores){\n          int ord = values.getOrd(docId);\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (boostDocs != null && boostDocs.containsKey(docId)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        while(docId >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n        }\n\n        int contextDoc = docId-currentDocBase;\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (contextDoc > segmentValues.docID()) {\n              segmentValues.advance(contextDoc);\n            }\n            if (contextDoc == segmentValues.docID()) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (globalDoc > segmentValues.docID()) {\n              segmentValues.advance(globalDoc);\n            }\n            if (globalDoc == segmentValues.docID()) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            ord = segmentValues.getOrd(contextDoc);\n            if(ord > -1) {\n              ord = (int)segmentOrdinalMap.get(ord);\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            ord = segmentValues.getOrd(globalDoc);\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (contextDoc > segmentValues.docID()) {\n              segmentValues.advance(contextDoc);\n            }\n            if (contextDoc == segmentValues.docID()) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (globalDoc > segmentValues.docID()) {\n              segmentValues.advance(globalDoc);\n            }\n            if (globalDoc == segmentValues.docID()) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            ord = segmentValues.getOrd(contextDoc);\n            if(ord > -1) {\n              ord = (int)segmentOrdinalMap.get(ord);\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            ord = segmentValues.getOrd(globalDoc);\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (contextDoc > segmentValues.docID()) {\n              segmentValues.advance(contextDoc);\n            }\n            if (contextDoc == segmentValues.docID()) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (globalDoc > segmentValues.docID()) {\n              segmentValues.advance(globalDoc);\n            }\n            if (globalDoc == segmentValues.docID()) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            ord = segmentValues.getOrd(contextDoc);\n            if(ord > -1) {\n              ord = (int)segmentOrdinalMap.get(ord);\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            ord = segmentValues.getOrd(globalDoc);\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c62352c33f77624124d1cbf58a1291da78141f7","date":1518514846,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (segmentValues.advanceExact(contextDoc)) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (segmentValues.advanceExact(globalDoc)) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (contextDoc > segmentValues.docID()) {\n              segmentValues.advance(contextDoc);\n            }\n            if (contextDoc == segmentValues.docID()) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (globalDoc > segmentValues.docID()) {\n              segmentValues.advance(globalDoc);\n            }\n            if (globalDoc == segmentValues.docID()) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (segmentValues.advanceExact(contextDoc)) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (segmentValues.advanceExact(globalDoc)) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (contextDoc > segmentValues.docID()) {\n              segmentValues.advance(contextDoc);\n            }\n            if (contextDoc == segmentValues.docID()) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (globalDoc > segmentValues.docID()) {\n              segmentValues.advance(globalDoc);\n            }\n            if (globalDoc == segmentValues.docID()) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      ScoreAndDoc dummy = new ScoreAndDoc();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (segmentValues.advanceExact(contextDoc)) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (segmentValues.advanceExact(globalDoc)) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      DummyScorer dummy = new DummyScorer();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (segmentValues.advanceExact(contextDoc)) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (segmentValues.advanceExact(globalDoc)) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3575e61fd7df2bbcce8b977a23d3d67aa423ce62","date":1586507050,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      ScoreAndDoc dummy = new ScoreAndDoc();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      IntFloatDynamicMap scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (segmentValues.advanceExact(contextDoc)) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (segmentValues.advanceExact(globalDoc)) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores.get(ord);\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      ScoreAndDoc dummy = new ScoreAndDoc();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      float[] scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (segmentValues.advanceExact(contextDoc)) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (segmentValues.advanceExact(globalDoc)) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores[ord];\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a813b523bf76aa0a68013d636b6eb53cedb142a4","date":1601387389,"type":3,"author":"Guna Sekhar Dora Kovvuru","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/CollapsingQParserPlugin.OrdFieldValueCollector#finish().mjava","sourceNew":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      ScoreAndDoc dummy = new ScoreAndDoc();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      IntFloatDynamicMap scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (segmentValues.advanceExact(contextDoc)) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (segmentValues.advanceExact(globalDoc)) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores.get(ord);\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == NullPolicy.COLLAPSE.getCode()) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == NullPolicy.EXPAND.getCode()) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","sourceOld":"    public void finish() throws IOException {\n      if(contexts.length == 0) {\n        return;\n      }\n\n      int currentContext = 0;\n      int currentDocBase = 0;\n\n      this.collapseValues = collapseValuesProducer.getSorted(null);\n      if(collapseValues instanceof MultiDocValues.MultiSortedDocValues) {\n        this.multiSortedDocValues = (MultiDocValues.MultiSortedDocValues)collapseValues;\n        this.ordinalMap = multiSortedDocValues.mapping;\n      }\n      if(ordinalMap != null) {\n        this.segmentValues = this.multiSortedDocValues.values[currentContext];\n        this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n      } else {\n        this.segmentValues = collapseValues;\n      }\n\n      int nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n      leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n      ScoreAndDoc dummy = new ScoreAndDoc();\n      leafDelegate.setScorer(dummy);\n      DocIdSetIterator it = new BitSetIterator(collapseStrategy.getCollapsedSet(), 0); // cost is not useful here\n      int globalDoc = -1;\n      int nullScoreIndex = 0;\n      IntFloatDynamicMap scores = collapseStrategy.getScores();\n      FloatArrayList nullScores = collapseStrategy.getNullScores();\n      float nullScore = collapseStrategy.getNullScore();\n\n      MergeBoost mergeBoost = collapseStrategy.getMergeBoost();\n      while((globalDoc = it.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n\n\n        while(globalDoc >= nextDocBase) {\n          currentContext++;\n          currentDocBase = contexts[currentContext].docBase;\n          nextDocBase = currentContext+1 < contexts.length ? contexts[currentContext+1].docBase : maxDoc;\n          leafDelegate = delegate.getLeafCollector(contexts[currentContext]);\n          leafDelegate.setScorer(dummy);\n          if(ordinalMap != null) {\n            this.segmentValues = this.multiSortedDocValues.values[currentContext];\n            this.segmentOrdinalMap = this.ordinalMap.getGlobalOrds(currentContext);\n          }\n        }\n\n        int contextDoc = globalDoc-currentDocBase;\n\n        if(this.needsScores){\n          int ord = -1;\n          if(this.ordinalMap != null) {\n            //Handle ordinalMapping case\n            if (segmentValues.advanceExact(contextDoc)) {\n              ord = (int) segmentOrdinalMap.get(segmentValues.ordValue());\n            }\n          } else {\n            //Handle top Level FieldCache or Single Segment Case\n            if (segmentValues.advanceExact(globalDoc)) {\n              ord = segmentValues.ordValue();\n            }\n          }\n\n          if(ord > -1) {\n            dummy.score = scores.get(ord);\n          } else if (mergeBoost != null && mergeBoost.boost(globalDoc)) {\n            //It's an elevated doc so no score is needed\n            dummy.score = 0F;\n          } else if (nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n            dummy.score = nullScore;\n          } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n            dummy.score = nullScores.get(nullScoreIndex++);\n          }\n        }\n\n        dummy.docId = contextDoc;\n        leafDelegate.collect(contextDoc);\n      }\n\n      if(delegate instanceof DelegatingCollector) {\n        ((DelegatingCollector) delegate).finish();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a813b523bf76aa0a68013d636b6eb53cedb142a4":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c62352c33f77624124d1cbf58a1291da78141f7":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6c62352c33f77624124d1cbf58a1291da78141f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a813b523bf76aa0a68013d636b6eb53cedb142a4"]},"commit2Childs":{"a813b523bf76aa0a68013d636b6eb53cedb142a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6c62352c33f77624124d1cbf58a1291da78141f7":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"3575e61fd7df2bbcce8b977a23d3d67aa423ce62":["a813b523bf76aa0a68013d636b6eb53cedb142a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6c62352c33f77624124d1cbf58a1291da78141f7","bfcdec9fcf0409223f35c5ec3bc14094314941b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["3575e61fd7df2bbcce8b977a23d3d67aa423ce62"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}