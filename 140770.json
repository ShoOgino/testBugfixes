{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @param internalCollector\n   * @param facetArrays\n   * @param part\n   * @throws IOException\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(\n        facetArrays, partition);\n\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (!categoryList.skipTo(docID)) {\n          continue;\n        }\n        categorator.setNextDoc(docID, iterator.getScore());\n        long ordinal;\n        while ((ordinal = categoryList.nextCategory()) <= Integer.MAX_VALUE) {\n          categorator.aggregate((int) ordinal);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @param internalCollector\n   * @param facetArrays\n   * @param part\n   * @throws IOException\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(\n        facetArrays, partition);\n\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (!categoryList.skipTo(docID)) {\n          continue;\n        }\n        categorator.setNextDoc(docID, iterator.getScore());\n        long ordinal;\n        while ((ordinal = categoryList.nextCategory()) <= Integer.MAX_VALUE) {\n          categorator.aggregate((int) ordinal);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9be242e584b2f40a71c1736de4cbdb36bcf08a5","date":1335144174,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @param docids\n   * @param facetArrays\n   * @param partition\n   * @throws IOException\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(\n        facetArrays, partition);\n\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (!categoryList.skipTo(docID)) {\n          continue;\n        }\n        categorator.setNextDoc(docID, iterator.getScore());\n        long ordinal;\n        while ((ordinal = categoryList.nextCategory()) <= Integer.MAX_VALUE) {\n          categorator.aggregate((int) ordinal);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @param internalCollector\n   * @param facetArrays\n   * @param part\n   * @throws IOException\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(\n        facetArrays, partition);\n\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (!categoryList.skipTo(docID)) {\n          continue;\n        }\n        categorator.setNextDoc(docID, iterator.getScore());\n        long ordinal;\n        while ((ordinal = categoryList.nextCategory()) <= Integer.MAX_VALUE) {\n          categorator.aggregate((int) ordinal);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(\n        facetArrays, partition);\n\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (!categoryList.skipTo(docID)) {\n          continue;\n        }\n        categorator.setNextDoc(docID, iterator.getScore());\n        long ordinal;\n        while ((ordinal = categoryList.nextCategory()) <= Integer.MAX_VALUE) {\n          categorator.aggregate((int) ordinal);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @param docids\n   * @param facetArrays\n   * @param partition\n   * @throws IOException\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(\n        facetArrays, partition);\n\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (!categoryList.skipTo(docID)) {\n          continue;\n        }\n        categorator.setNextDoc(docID, iterator.getScore());\n        long ordinal;\n        while ((ordinal = categoryList.nextCategory()) <= Integer.MAX_VALUE) {\n          categorator.aggregate((int) ordinal);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        categoryList.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue;\n        }\n        categorator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(\n        facetArrays, partition);\n\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (!categoryList.skipTo(docID)) {\n          continue;\n        }\n        categorator.setNextDoc(docID, iterator.getScore());\n        long ordinal;\n        while ((ordinal = categoryList.nextCategory()) <= Integer.MAX_VALUE) {\n          categorator.aggregate((int) ordinal);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        categoryList.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue;\n        }\n        categorator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(\n        facetArrays, partition);\n\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (!categoryList.skipTo(docID)) {\n          continue;\n        }\n        categorator.setNextDoc(docID, iterator.getScore());\n        long ordinal;\n        while ((ordinal = categoryList.nextCategory()) <= Integer.MAX_VALUE) {\n          categorator.aggregate((int) ordinal);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42f51b3ab4258ff4623227b0db011b8bb83db5c7","date":1358164991,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        while (docID >= maxDoc) { // find the segment which contains this document\n          if (!contexts.hasNext()) {\n            throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n          }\n          current = contexts.next();\n          maxDoc = current.docBase + current.reader().maxDoc();\n          if (docID < maxDoc) { // segment has docs, check if it has categories\n            boolean validSegment = categoryListIter.setNextReader(current);\n            validSegment &= aggregator.setNextReader(current);\n            if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n              while (docID < maxDoc && iterator.next()) {\n                docID = iterator.getDocID();\n              }\n            }\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        categoryList.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue;\n        }\n        categorator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        while (docID >= maxDoc) { // find the segment which contains this document\n          if (!contexts.hasNext()) {\n            throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n          }\n          current = contexts.next();\n          maxDoc = current.docBase + current.reader().maxDoc();\n          if (docID < maxDoc) { // segment has docs, check if it has categories\n            boolean validSegment = categoryListIter.setNextReader(current);\n            validSegment &= aggregator.setNextReader(current);\n            if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n              while (docID < maxDoc && iterator.next()) {\n                docID = iterator.getDocID();\n              }\n            }\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids,\n      FacetArrays facetArrays, int partition) throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      CategoryListIterator categoryList = entry.getKey();\n      if (!categoryList.init()) {\n        continue;\n      }\n\n      Aggregator categorator = entry.getValue();\n      ScoredDocIDsIterator iterator = docids.iterator();\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        categoryList.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue;\n        }\n        categorator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        while (docID >= maxDoc) { // find the segment which contains this document\n          if (!contexts.hasNext()) {\n            throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n          }\n          current = contexts.next();\n          maxDoc = current.docBase + current.reader().maxDoc();\n          if (docID < maxDoc) { // segment has docs, check if it has categories\n            boolean validSegment = categoryListIter.setNextReader(current);\n            validSegment &= aggregator.setNextReader(current);\n            if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n              while (docID < maxDoc && iterator.next()) {\n                docID = iterator.getDocID();\n              }\n            }\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        while (docID >= maxDoc) { // find the segment which contains this document\n          if (!contexts.hasNext()) {\n            throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n          }\n          current = contexts.next();\n          maxDoc = current.docBase + current.reader().maxDoc();\n          if (docID < maxDoc) { // segment has docs, check if it has categories\n            boolean validSegment = categoryListIter.setNextReader(current);\n            validSegment &= aggregator.setNextReader(current);\n            if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n              while (docID < maxDoc && iterator.next()) {\n                docID = iterator.getDocID();\n              }\n            }\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","date":1375108983,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":5,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/old/OldFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/StandardFacetsAccumulator#fillArraysForPartition(ScoredDocIDs,FacetArrays,int).mjava","sourceNew":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Iterate over the documents for this partition and fill the facet arrays with the correct\n   * count/complement count/value.\n   */\n  private final void fillArraysForPartition(ScoredDocIDs docids, FacetArrays facetArrays, int partition) \n      throws IOException {\n    \n    if (isUsingComplements) {\n      initArraysByTotalCounts(facetArrays, partition, docids.size());\n    } else {\n      facetArrays.free(); // to get a cleared array for this partition\n    }\n\n    HashMap<CategoryListIterator, Aggregator> categoryLists = getCategoryListMap(facetArrays, partition);\n\n    IntsRef ordinals = new IntsRef(32); // a reasonable start capacity for most common apps\n    for (Entry<CategoryListIterator, Aggregator> entry : categoryLists.entrySet()) {\n      final ScoredDocIDsIterator iterator = docids.iterator();\n      final CategoryListIterator categoryListIter = entry.getKey();\n      final Aggregator aggregator = entry.getValue();\n      Iterator<AtomicReaderContext> contexts = indexReader.leaves().iterator();\n      AtomicReaderContext current = null;\n      int maxDoc = -1;\n      while (iterator.next()) {\n        int docID = iterator.getDocID();\n        if (docID >= maxDoc) {\n          boolean iteratorDone = false;\n          do { // find the segment which contains this document\n            if (!contexts.hasNext()) {\n              throw new RuntimeException(\"ScoredDocIDs contains documents outside this reader's segments !?\");\n            }\n            current = contexts.next();\n            maxDoc = current.docBase + current.reader().maxDoc();\n            if (docID < maxDoc) { // segment has docs, check if it has categories\n              boolean validSegment = categoryListIter.setNextReader(current);\n              validSegment &= aggregator.setNextReader(current);\n              if (!validSegment) { // if categoryList or aggregtor say it's an invalid segment, skip all docs\n                while (docID < maxDoc && iterator.next()) {\n                  docID = iterator.getDocID();\n                }\n                if (docID < maxDoc) {\n                  iteratorDone = true;\n                }\n              }\n            }\n          } while (docID >= maxDoc);\n          if (iteratorDone) { // iterator finished, terminate the loop\n            break;\n          }\n        }\n        docID -= current.docBase;\n        categoryListIter.getOrdinals(docID, ordinals);\n        if (ordinals.length == 0) {\n          continue; // document does not have category ordinals\n        }\n        aggregator.aggregate(docID, iterator.getScore(), ordinals);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["f9be242e584b2f40a71c1736de4cbdb36bcf08a5"],"f9be242e584b2f40a71c1736de4cbdb36bcf08a5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["4e6354dd7c71fe122926fc53d7d29f715b1283db","42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["42f51b3ab4258ff4623227b0db011b8bb83db5c7"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"f9be242e584b2f40a71c1736de4cbdb36bcf08a5":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"42f51b3ab4258ff4623227b0db011b8bb83db5c7":["8917bfede3b4ca30f4305c1e391e9218959cd723","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["42f51b3ab4258ff4623227b0db011b8bb83db5c7","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f9be242e584b2f40a71c1736de4cbdb36bcf08a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","d9b07d1cdffdee4f4bb3cef8670f6066cf6f64e6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}