{"path":"lucene/core/src/test/org/apache/lucene/util/graph/TestGraphTokenStreamFiniteStrings#testStackedGraph().mjava","commits":[{"id":"e52c30617998e1bc2a946cc226f52e9b35162b1e","date":1483438353,"type":0,"author":"Matt Weber","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/graph/TestGraphTokenStreamFiniteStrings#testStackedGraph().mjava","pathOld":"/dev/null","sourceNew":"  public void testStackedGraph() throws Exception {\n    TokenStream ts = new CannedTokenStream(\n        token(\"fast\", 1, 1),\n        token(\"wi\", 1, 1),\n        token(\"wifi\", 0, 2),\n        token(\"wireless\", 0, 2),\n        token(\"fi\", 1, 1),\n        token(\"network\", 1, 1)\n    );\n\n    List<TokenStream> finiteTokenStreams = GraphTokenStreamFiniteStrings.getTokenStreams(ts);\n\n    assertEquals(3, finiteTokenStreams.size());\n    assertTokenStream(finiteTokenStreams.get(0), new String[]{\"fast\", \"wi\", \"fi\", \"network\"}, new int[]{1, 1, 1, 1});\n    assertTokenStream(finiteTokenStreams.get(1), new String[]{\"fast\", \"wifi\", \"network\"}, new int[]{1, 1, 1});\n    assertTokenStream(finiteTokenStreams.get(2), new String[]{\"fast\", \"wireless\", \"network\"}, new int[]{1, 1, 1});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/graph/TestGraphTokenStreamFiniteStrings#testStackedGraph().mjava","pathOld":"/dev/null","sourceNew":"  public void testStackedGraph() throws Exception {\n    TokenStream ts = new CannedTokenStream(\n        token(\"fast\", 1, 1),\n        token(\"wi\", 1, 1),\n        token(\"wifi\", 0, 2),\n        token(\"wireless\", 0, 2),\n        token(\"fi\", 1, 1),\n        token(\"network\", 1, 1)\n    );\n\n    List<TokenStream> finiteTokenStreams = GraphTokenStreamFiniteStrings.getTokenStreams(ts);\n\n    assertEquals(3, finiteTokenStreams.size());\n    assertTokenStream(finiteTokenStreams.get(0), new String[]{\"fast\", \"wi\", \"fi\", \"network\"}, new int[]{1, 1, 1, 1});\n    assertTokenStream(finiteTokenStreams.get(1), new String[]{\"fast\", \"wifi\", \"network\"}, new int[]{1, 1, 1});\n    assertTokenStream(finiteTokenStreams.get(2), new String[]{\"fast\", \"wireless\", \"network\"}, new int[]{1, 1, 1});\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","date":1486463279,"type":3,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/graph/TestGraphTokenStreamFiniteStrings#testStackedGraph().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/graph/TestGraphTokenStreamFiniteStrings#testStackedGraph().mjava","sourceNew":"  public void testStackedGraph() throws Exception {\n    TokenStream ts = new CannedTokenStream(\n        token(\"fast\", 1, 1),\n        token(\"wi\", 1, 1),\n        token(\"wifi\", 0, 2),\n        token(\"wireless\", 0, 2),\n        token(\"fi\", 1, 1),\n        token(\"network\", 1, 1)\n    );\n\n    GraphTokenStreamFiniteStrings graph = new GraphTokenStreamFiniteStrings(ts);\n\n    Iterator<TokenStream> it = graph.getFiniteStrings();\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"fast\", \"wi\", \"fi\", \"network\"}, new int[]{1, 1, 1, 1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"fast\", \"wifi\", \"network\"}, new int[]{1, 1, 1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"fast\", \"wireless\", \"network\"}, new int[]{1, 1, 1});\n    assertFalse(it.hasNext());\n\n    int[] points = graph.articulationPoints();\n    assertArrayEquals(points, new int[] {1, 3});\n\n    assertFalse(graph.hasSidePath(0));\n    it = graph.getFiniteStrings(0, 1);\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"fast\"}, new int[] {1});\n    assertFalse(it.hasNext());\n    Term[] terms = graph.getTerms(\"field\", 0);\n    assertArrayEquals(terms, new Term[] {new Term(\"field\", \"fast\")});\n\n    assertTrue(graph.hasSidePath(1));\n    it = graph.getFiniteStrings(1, 3);\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"wi\", \"fi\"}, new int[]{1, 1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"wifi\"}, new int[]{1});\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"wireless\"}, new int[]{1});\n    assertFalse(it.hasNext());\n\n    assertFalse(graph.hasSidePath(3));\n    it = graph.getFiniteStrings(3, -1);\n    assertTrue(it.hasNext());\n    assertTokenStream(it.next(), new String[]{\"network\"}, new int[] {1});\n    assertFalse(it.hasNext());\n    terms = graph.getTerms(\"field\", 3);\n    assertArrayEquals(terms, new Term[] {new Term(\"field\", \"network\")});\n  }\n\n","sourceOld":"  public void testStackedGraph() throws Exception {\n    TokenStream ts = new CannedTokenStream(\n        token(\"fast\", 1, 1),\n        token(\"wi\", 1, 1),\n        token(\"wifi\", 0, 2),\n        token(\"wireless\", 0, 2),\n        token(\"fi\", 1, 1),\n        token(\"network\", 1, 1)\n    );\n\n    List<TokenStream> finiteTokenStreams = GraphTokenStreamFiniteStrings.getTokenStreams(ts);\n\n    assertEquals(3, finiteTokenStreams.size());\n    assertTokenStream(finiteTokenStreams.get(0), new String[]{\"fast\", \"wi\", \"fi\", \"network\"}, new int[]{1, 1, 1, 1});\n    assertTokenStream(finiteTokenStreams.get(1), new String[]{\"fast\", \"wifi\", \"network\"}, new int[]{1, 1, 1});\n    assertTokenStream(finiteTokenStreams.get(2), new String[]{\"fast\", \"wireless\", \"network\"}, new int[]{1, 1, 1});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e52c30617998e1bc2a946cc226f52e9b35162b1e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db"],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["e52c30617998e1bc2a946cc226f52e9b35162b1e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e52c30617998e1bc2a946cc226f52e9b35162b1e"]},"commit2Childs":{"e52c30617998e1bc2a946cc226f52e9b35162b1e":["7e0d75d7d3cda2b33e79d0eb0e716169cebec4db","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e52c30617998e1bc2a946cc226f52e9b35162b1e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7e0d75d7d3cda2b33e79d0eb0e716169cebec4db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}