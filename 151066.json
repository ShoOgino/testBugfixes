{"path":"solr/core/src/java/org/apache/solr/util/CryptoKeys#evpBytesTokey(int,int,MessageDigest,byte[],byte[],int).mjava","commits":[{"id":"284866683716f2dec31be6489f8f5d2432074d14","date":1431005603,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#evpBytesTokey(int,int,MessageDigest,byte[],byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  private static byte[][] evpBytesTokey(int key_len, int iv_len, MessageDigest md,\n                                        byte[] salt, byte[] data, int count) {\n    byte[][] both = new byte[2][];\n    byte[] key = new byte[key_len];\n    int key_ix = 0;\n    byte[] iv = new byte[iv_len];\n    int iv_ix = 0;\n    both[0] = key;\n    both[1] = iv;\n    byte[] md_buf = null;\n    int nkey = key_len;\n    int niv = iv_len;\n    int i = 0;\n    if (data == null) {\n      return both;\n    }\n    int addmd = 0;\n    for (; ; ) {\n      md.reset();\n      if (addmd++ > 0) {\n        md.update(md_buf);\n      }\n      md.update(data);\n      if (null != salt) {\n        md.update(salt, 0, 8);\n      }\n      md_buf = md.digest();\n      for (i = 1; i < count; i++) {\n        md.reset();\n        md.update(md_buf);\n        md_buf = md.digest();\n      }\n      i = 0;\n      if (nkey > 0) {\n        for (; ; ) {\n          if (nkey == 0)\n            break;\n          if (i == md_buf.length)\n            break;\n          key[key_ix++] = md_buf[i];\n          nkey--;\n          i++;\n        }\n      }\n      if (niv > 0 && i != md_buf.length) {\n        for (; ; ) {\n          if (niv == 0)\n            break;\n          if (i == md_buf.length)\n            break;\n          iv[iv_ix++] = md_buf[i];\n          niv--;\n          i++;\n        }\n      }\n      if (nkey == 0 && niv == 0) {\n        break;\n      }\n    }\n    for (i = 0; i < md_buf.length; i++) {\n      md_buf[i] = 0;\n    }\n    return both;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d757ce39e75479053df1fc9641acbe360e28376","date":1431020684,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#evpBytesTokey(int,int,MessageDigest,byte[],byte[],int).mjava","sourceNew":null,"sourceOld":"  private static byte[][] evpBytesTokey(int key_len, int iv_len, MessageDigest md,\n                                        byte[] salt, byte[] data, int count) {\n    byte[][] both = new byte[2][];\n    byte[] key = new byte[key_len];\n    int key_ix = 0;\n    byte[] iv = new byte[iv_len];\n    int iv_ix = 0;\n    both[0] = key;\n    both[1] = iv;\n    byte[] md_buf = null;\n    int nkey = key_len;\n    int niv = iv_len;\n    int i = 0;\n    if (data == null) {\n      return both;\n    }\n    int addmd = 0;\n    for (; ; ) {\n      md.reset();\n      if (addmd++ > 0) {\n        md.update(md_buf);\n      }\n      md.update(data);\n      if (null != salt) {\n        md.update(salt, 0, 8);\n      }\n      md_buf = md.digest();\n      for (i = 1; i < count; i++) {\n        md.reset();\n        md.update(md_buf);\n        md_buf = md.digest();\n      }\n      i = 0;\n      if (nkey > 0) {\n        for (; ; ) {\n          if (nkey == 0)\n            break;\n          if (i == md_buf.length)\n            break;\n          key[key_ix++] = md_buf[i];\n          nkey--;\n          i++;\n        }\n      }\n      if (niv > 0 && i != md_buf.length) {\n        for (; ; ) {\n          if (niv == 0)\n            break;\n          if (i == md_buf.length)\n            break;\n          iv[iv_ix++] = md_buf[i];\n          niv--;\n          i++;\n        }\n      }\n      if (nkey == 0 && niv == 0) {\n        break;\n      }\n    }\n    for (i = 0; i < md_buf.length; i++) {\n      md_buf[i] = 0;\n    }\n    return both;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c771b7f862d3df7cfa7208b4f79ac658406d6d15","date":1431023495,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#evpBytesTokey(int,int,MessageDigest,byte[],byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  private static byte[][] evpBytesTokey(int key_len, int iv_len, MessageDigest md,\n                                        byte[] salt, byte[] data, int count) {\n    byte[][] both = new byte[2][];\n    byte[] key = new byte[key_len];\n    int key_ix = 0;\n    byte[] iv = new byte[iv_len];\n    int iv_ix = 0;\n    both[0] = key;\n    both[1] = iv;\n    byte[] md_buf = null;\n    int nkey = key_len;\n    int niv = iv_len;\n    int i = 0;\n    if (data == null) {\n      return both;\n    }\n    int addmd = 0;\n    for (; ; ) {\n      md.reset();\n      if (addmd++ > 0) {\n        md.update(md_buf);\n      }\n      md.update(data);\n      if (null != salt) {\n        md.update(salt, 0, 8);\n      }\n      md_buf = md.digest();\n      for (i = 1; i < count; i++) {\n        md.reset();\n        md.update(md_buf);\n        md_buf = md.digest();\n      }\n      i = 0;\n      if (nkey > 0) {\n        for (; ; ) {\n          if (nkey == 0)\n            break;\n          if (i == md_buf.length)\n            break;\n          key[key_ix++] = md_buf[i];\n          nkey--;\n          i++;\n        }\n      }\n      if (niv > 0 && i != md_buf.length) {\n        for (; ; ) {\n          if (niv == 0)\n            break;\n          if (i == md_buf.length)\n            break;\n          iv[iv_ix++] = md_buf[i];\n          niv--;\n          i++;\n        }\n      }\n      if (nkey == 0 && niv == 0) {\n        break;\n      }\n    }\n    for (i = 0; i < md_buf.length; i++) {\n      md_buf[i] = 0;\n    }\n    return both;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d757ce39e75479053df1fc9641acbe360e28376":["284866683716f2dec31be6489f8f5d2432074d14"],"284866683716f2dec31be6489f8f5d2432074d14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c771b7f862d3df7cfa7208b4f79ac658406d6d15":["9d757ce39e75479053df1fc9641acbe360e28376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c771b7f862d3df7cfa7208b4f79ac658406d6d15"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["284866683716f2dec31be6489f8f5d2432074d14"],"9d757ce39e75479053df1fc9641acbe360e28376":["c771b7f862d3df7cfa7208b4f79ac658406d6d15"],"284866683716f2dec31be6489f8f5d2432074d14":["9d757ce39e75479053df1fc9641acbe360e28376"],"c771b7f862d3df7cfa7208b4f79ac658406d6d15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}