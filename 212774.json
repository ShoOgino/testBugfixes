{"path":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(XmlConfigFile).mjava","commits":[{"id":"ee622110ba6021d0390037e77574743c1e55348c","date":1546700916,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(Config).mjava","sourceNew":"  private static PluginInfo[] getMetricReporterPluginInfos(XmlConfigFile config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    List<PluginInfo> configs = new ArrayList<>();\n    boolean hasJmxReporter = false;\n    if (nodes != null && nodes.getLength() > 0) {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        // we don't require class in order to support predefined replica and node reporter classes\n        PluginInfo info = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n        String clazz = info.className;\n        if (clazz != null && clazz.equals(SolrJmxReporter.class.getName())) {\n          hasJmxReporter = true;\n        }\n        configs.add(info);\n      }\n    }\n    // if there's an MBean server running but there was no JMX reporter then add a default one\n    MBeanServer mBeanServer = JmxUtil.findFirstMBeanServer();\n    if (mBeanServer != null && !hasJmxReporter) {\n      log.info(\"MBean server found: \" + mBeanServer + \", but no JMX reporters were configured - adding default JMX reporter.\");\n      Map<String,Object> attributes = new HashMap<>();\n      attributes.put(\"name\", \"default\");\n      attributes.put(\"class\", SolrJmxReporter.class.getName());\n      PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n      configs.add(defaultPlugin);\n    }\n    return configs.toArray(new PluginInfo[configs.size()]);\n  }\n\n","sourceOld":"  private static PluginInfo[] getMetricReporterPluginInfos(Config config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    List<PluginInfo> configs = new ArrayList<>();\n    boolean hasJmxReporter = false;\n    if (nodes != null && nodes.getLength() > 0) {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        // we don't require class in order to support predefined replica and node reporter classes\n        PluginInfo info = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n        String clazz = info.className;\n        if (clazz != null && clazz.equals(SolrJmxReporter.class.getName())) {\n          hasJmxReporter = true;\n        }\n        configs.add(info);\n      }\n    }\n    // if there's an MBean server running but there was no JMX reporter then add a default one\n    MBeanServer mBeanServer = JmxUtil.findFirstMBeanServer();\n    if (mBeanServer != null && !hasJmxReporter) {\n      log.info(\"MBean server found: \" + mBeanServer + \", but no JMX reporters were configured - adding default JMX reporter.\");\n      Map<String,Object> attributes = new HashMap<>();\n      attributes.put(\"name\", \"default\");\n      attributes.put(\"class\", SolrJmxReporter.class.getName());\n      PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n      configs.add(defaultPlugin);\n    }\n    return configs.toArray(new PluginInfo[configs.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(XmlConfigFile).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrXmlConfig#getMetricReporterPluginInfos(XmlConfigFile).mjava","sourceNew":"  private static PluginInfo[] getMetricReporterPluginInfos(XmlConfigFile config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    List<PluginInfo> configs = new ArrayList<>();\n    boolean hasJmxReporter = false;\n    if (nodes != null && nodes.getLength() > 0) {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        // we don't require class in order to support predefined replica and node reporter classes\n        PluginInfo info = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n        String clazz = info.className;\n        if (clazz != null && clazz.equals(SolrJmxReporter.class.getName())) {\n          hasJmxReporter = true;\n        }\n        configs.add(info);\n      }\n    }\n    // if there's an MBean server running but there was no JMX reporter then add a default one\n    MBeanServer mBeanServer = JmxUtil.findFirstMBeanServer();\n    if (mBeanServer != null && !hasJmxReporter) {\n      log.info(\"MBean server found: {}, but no JMX reporters were configured - adding default JMX reporter.\", mBeanServer);\n      Map<String,Object> attributes = new HashMap<>();\n      attributes.put(\"name\", \"default\");\n      attributes.put(\"class\", SolrJmxReporter.class.getName());\n      PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n      configs.add(defaultPlugin);\n    }\n    return configs.toArray(new PluginInfo[configs.size()]);\n  }\n\n","sourceOld":"  private static PluginInfo[] getMetricReporterPluginInfos(XmlConfigFile config) {\n    NodeList nodes = (NodeList) config.evaluate(\"solr/metrics/reporter\", XPathConstants.NODESET);\n    List<PluginInfo> configs = new ArrayList<>();\n    boolean hasJmxReporter = false;\n    if (nodes != null && nodes.getLength() > 0) {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        // we don't require class in order to support predefined replica and node reporter classes\n        PluginInfo info = new PluginInfo(nodes.item(i), \"SolrMetricReporter\", true, false);\n        String clazz = info.className;\n        if (clazz != null && clazz.equals(SolrJmxReporter.class.getName())) {\n          hasJmxReporter = true;\n        }\n        configs.add(info);\n      }\n    }\n    // if there's an MBean server running but there was no JMX reporter then add a default one\n    MBeanServer mBeanServer = JmxUtil.findFirstMBeanServer();\n    if (mBeanServer != null && !hasJmxReporter) {\n      log.info(\"MBean server found: \" + mBeanServer + \", but no JMX reporters were configured - adding default JMX reporter.\");\n      Map<String,Object> attributes = new HashMap<>();\n      attributes.put(\"name\", \"default\");\n      attributes.put(\"class\", SolrJmxReporter.class.getName());\n      PluginInfo defaultPlugin = new PluginInfo(\"reporter\", attributes);\n      configs.add(defaultPlugin);\n    }\n    return configs.toArray(new PluginInfo[configs.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee622110ba6021d0390037e77574743c1e55348c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["ee622110ba6021d0390037e77574743c1e55348c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"]},"commit2Childs":{"ee622110ba6021d0390037e77574743c1e55348c":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee622110ba6021d0390037e77574743c1e55348c"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}