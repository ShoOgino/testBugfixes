{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","commits":[{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","sourceNew":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           final Map<String,TermFacet> expected,\n                                           final SolrParams baseParams,\n                                           final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the baseParams query does not match any docs with our field X\n        final long docsWithField = getRandClient(random()).query\n          (facet.applyValueConstraintAndDomain(baseParams, facetKey, \"[* TO *]\")).getResults().getNumFound();\n        assertEquals(facetKey + \" has no buckets, but docs in query exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n      \n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpected keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","sourceOld":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           final Map<String,TermFacet> expected,\n                                           final SolrParams baseParams,\n                                           final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the baseParams query does not match any docs with our field X\n        final long docsWithField = getRandClient(random()).query\n          (facet.applyValueConstraintAndDomain(baseParams, facetKey, \"[* TO *]\")).getResults().getNumFound();\n        assertEquals(facetKey + \" has no buckets, but docs in query exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n      \n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpected keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#assertFacetCountsAreCorrect(AtomicInteger,Map[String,TermFacet],SolrParams,NamedList).mjava","sourceNew":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           final Map<String,TermFacet> expected,\n                                           final SolrParams baseParams,\n                                           @SuppressWarnings({\"rawtypes\"})final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      @SuppressWarnings({\"rawtypes\"})\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the baseParams query does not match any docs with our field X\n        final long docsWithField = getRandClient(random()).query\n          (facet.applyValueConstraintAndDomain(baseParams, facetKey, \"[* TO *]\")).getResults().getNumFound();\n        assertEquals(facetKey + \" has no buckets, but docs in query exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n      \n      for (@SuppressWarnings({\"rawtypes\"})NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpected keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","sourceOld":"  /** \n   * Recursive Helper method that walks the actual facet response, comparing the counts to the expected output \n   * based on the equivalent filters generated from the original TermFacet.\n   */\n  private void assertFacetCountsAreCorrect(final AtomicInteger maxBucketsToCheck,\n                                           final Map<String,TermFacet> expected,\n                                           final SolrParams baseParams,\n                                           final NamedList actualFacetResponse) throws SolrServerException, IOException {\n\n    for (Map.Entry<String,TermFacet> entry : expected.entrySet()) {\n      final String facetKey = entry.getKey();\n      final TermFacet facet = entry.getValue();\n      final NamedList results = (NamedList) actualFacetResponse.get(facetKey);\n      assertNotNull(facetKey + \" key missing from: \" + actualFacetResponse, results);\n      final List<NamedList> buckets = (List<NamedList>) results.get(\"buckets\");\n      assertNotNull(facetKey + \" has null buckets: \" + actualFacetResponse, buckets);\n\n      if (buckets.isEmpty()) {\n        // should only happen if the baseParams query does not match any docs with our field X\n        final long docsWithField = getRandClient(random()).query\n          (facet.applyValueConstraintAndDomain(baseParams, facetKey, \"[* TO *]\")).getResults().getNumFound();\n        assertEquals(facetKey + \" has no buckets, but docs in query exist with field: \" + facet.field,\n                     0, docsWithField);\n      }\n      \n      for (NamedList bucket : buckets) {\n        final long count = ((Number) bucket.get(\"count\")).longValue();\n        final String fieldVal = bucket.get(\"val\").toString(); // int or stringified int\n\n        // change our query to filter on the fieldVal, and wrap in the facet domain (if any)\n        final SolrParams verifyParams = facet.applyValueConstraintAndDomain(baseParams, facetKey, fieldVal);\n\n        // check the count for this bucket\n        assertEquals(facetKey + \": \" + verifyParams,\n                     count, getRandClient(random()).query(verifyParams).getResults().getNumFound());\n\n        if (maxBucketsToCheck.decrementAndGet() <= 0) {\n          return;\n        }\n        \n        // recursively check subFacets\n        if (! facet.subFacets.isEmpty()) {\n          assertFacetCountsAreCorrect(maxBucketsToCheck, facet.subFacets, verifyParams, bucket);\n        }\n      }\n    }\n    assertTrue(\"facets have unexpected keys left over: \" + actualFacetResponse,\n               // should alwasy be a count, maybe a 'val' if we're a subfacet\n               (actualFacetResponse.size() == expected.size() + 1) ||\n               (actualFacetResponse.size() == expected.size() + 2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}