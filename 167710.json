{"path":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a new association-iterator, initializing the inner payload\n   * iterator, with the supplied term and checking whether there are any\n   * associations within the given index\n   * \n   * @param reader\n   *            a reader containing the postings to be iterated\n   * @param field\n   *            the field containing the relevant associations list term\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field)\n      throws IOException {\n    // Initialize the payloadDecodingIterator\n    associationPayloadIter = new PayloadIntDecodingIterator(\n        reader,\n        // TODO (Facet): should consolidate with AssociationListTokenizer which\n        // uses AssociationEnhancement.getCatTermText()\n        new Term(field, AssociationEnhancement.CATEGORY_LIST_TERM_TEXT),\n        new SimpleIntDecoder());\n\n    // Check whether there are any associations\n    hasAssociations = associationPayloadIter.init();\n\n    ordinalToAssociationMap = new IntToIntMap();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a new association-iterator, initializing the inner payload\n   * iterator, with the supplied term and checking whether there are any\n   * associations within the given index\n   * \n   * @param reader\n   *            a reader containing the postings to be iterated\n   * @param field\n   *            the field containing the relevant associations list term\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field)\n      throws IOException {\n    // Initialize the payloadDecodingIterator\n    associationPayloadIter = new PayloadIntDecodingIterator(\n        reader,\n        // TODO (Facet): should consolidate with AssociationListTokenizer which\n        // uses AssociationEnhancement.getCatTermText()\n        new Term(field, AssociationEnhancement.CATEGORY_LIST_TERM_TEXT),\n        new SimpleIntDecoder());\n\n    // Check whether there are any associations\n    hasAssociations = associationPayloadIter.init();\n\n    ordinalToAssociationMap = new IntToIntMap();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct a new association-iterator, initializing the inner payload\n   * iterator, with the supplied term and checking whether there are any\n   * associations within the given index\n   * \n   * @param reader\n   *            a reader containing the postings to be iterated\n   * @param field\n   *            the field containing the relevant associations list term\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field)\n      throws IOException {\n    // Initialize the payloadDecodingIterator\n    associationPayloadIter = new PayloadIntDecodingIterator(\n        reader,\n        // TODO (Facet): should consolidate with AssociationListTokenizer which\n        // uses AssociationEnhancement.getCatTermText()\n        new Term(field, AssociationEnhancement.CATEGORY_LIST_TERM_TEXT),\n        new SimpleIntDecoder());\n\n    // Check whether there are any associations\n    hasAssociations = associationPayloadIter.init();\n\n    ordinalToAssociationMap = new IntToIntMap();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationsPayloadIterator#AssociationsPayloadIterator(IndexReader,String).mjava","sourceNew":"  /**\n   * Construct a new association-iterator, initializing the inner payload\n   * iterator, with the supplied term and checking whether there are any\n   * associations within the given index\n   * \n   * @param reader\n   *            a reader containing the postings to be iterated\n   * @param field\n   *            the field containing the relevant associations list term\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field)\n      throws IOException {\n    // Initialize the payloadDecodingIterator\n    associationPayloadIter = new PayloadIntDecodingIterator(\n        reader,\n        // TODO (Facet): should consolidate with AssociationListTokenizer which\n        // uses AssociationEnhancement.getCatTermText()\n        new Term(field, AssociationEnhancement.CATEGORY_LIST_TERM_TEXT),\n        new SimpleIntDecoder());\n\n    // Check whether there are any associations\n    hasAssociations = associationPayloadIter.init();\n\n    ordinalToAssociationMap = new IntToIntMap();\n  }\n\n","sourceOld":"  /**\n   * Construct a new association-iterator, initializing the inner payload\n   * iterator, with the supplied term and checking whether there are any\n   * associations within the given index\n   * \n   * @param reader\n   *            a reader containing the postings to be iterated\n   * @param field\n   *            the field containing the relevant associations list term\n   */\n  public AssociationsPayloadIterator(IndexReader reader, String field)\n      throws IOException {\n    // Initialize the payloadDecodingIterator\n    associationPayloadIter = new PayloadIntDecodingIterator(\n        reader,\n        // TODO (Facet): should consolidate with AssociationListTokenizer which\n        // uses AssociationEnhancement.getCatTermText()\n        new Term(field, AssociationEnhancement.CATEGORY_LIST_TERM_TEXT),\n        new SimpleIntDecoder());\n\n    // Check whether there are any associations\n    hasAssociations = associationPayloadIter.init();\n\n    ordinalToAssociationMap = new IntToIntMap();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}