{"path":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#setUp().mjava","sourceNew":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(new Field(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(new Field(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            writer.addDocument(doc);\n        }\n\n        writer.optimize();\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n\n//System.out.println(\"Set up \" + getName());\n    }\n\n","sourceOld":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(new Field(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(new Field(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            writer.addDocument(doc);\n        }\n\n        writer.optimize();\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n\n//System.out.println(\"Set up \" + getName());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/TestBooleanMinShouldMatch#setUp().mjava","sourceNew":null,"sourceOld":"    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n\n\n        String[] data = new String [] {\n            \"A 1 2 3 4 5 6\",\n            \"Z       4 5 6\",\n            null,\n            \"B   2   4 5 6\",\n            \"Y     3   5 6\",\n            null,\n            \"C     3     6\",\n            \"X       4 5 6\"\n        };\n\n        index = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(index,\n                                             new WhitespaceAnalyzer(),\n                                             true, IndexWriter.MaxFieldLength.LIMITED);\n\n        for (int i = 0; i < data.length; i++) {\n            Document doc = new Document();\n            doc.add(new Field(\"id\", String.valueOf(i), Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"id\",String.valueOf(i)));\n            doc.add(new Field(\"all\", \"all\", Field.Store.YES, Field.Index.NOT_ANALYZED));//Field.Keyword(\"all\",\"all\"));\n            if (null != data[i]) {\n                doc.add(new Field(\"data\", data[i], Field.Store.YES, Field.Index.ANALYZED));//Field.Text(\"data\",data[i]));\n            }\n            writer.addDocument(doc);\n        }\n\n        writer.optimize();\n        writer.close();\n\n        r = IndexReader.open(index, true);\n        s = new IndexSearcher(r);\n\n//System.out.println(\"Set up \" + getName());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}