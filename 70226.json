{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testEqualsHashcode().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testEqualsHashcode().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#testEqualsHashcode().mjava","sourceNew":"  public void testEqualsHashcode() throws Exception {\n    // some tests before, if the used queries and filters work:\n    assertEquals(new PrefixFilter(new Term(\"field\", \"o\")), new PrefixFilter(new Term(\"field\", \"o\")));\n    assertFalse(new PrefixFilter(new Term(\"field\", \"a\")).equals(new PrefixFilter(new Term(\"field\", \"o\"))));\n    QueryUtils.checkHashEquals(new TermQuery(new Term(\"field\", \"one\")));\n    QueryUtils.checkUnequal(\n      new TermQuery(new Term(\"field\", \"one\")), new TermQuery(new Term(\"field\", \"two\"))\n    );\n    // now test FilteredQuery equals/hashcode:\n    QueryUtils.checkHashEquals(new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\"))));\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\"))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"two\")), new PrefixFilter(new Term(\"field\", \"o\")))\n    );\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"a\"))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\")))\n    );\n  }\n\n","sourceOld":"  public void testEqualsHashcode() throws Exception {\n    // some tests before, if the used queries and filters work:\n    assertEquals(new PrefixFilter(new Term(\"field\", \"o\")), new PrefixFilter(new Term(\"field\", \"o\")));\n    assertFalse(new PrefixFilter(new Term(\"field\", \"a\")).equals(new PrefixFilter(new Term(\"field\", \"o\"))));\n    QueryUtils.checkHashEquals(new TermQuery(new Term(\"field\", \"one\")));\n    QueryUtils.checkUnequal(\n      new TermQuery(new Term(\"field\", \"one\")), new TermQuery(new Term(\"field\", \"two\"))\n    );\n    // now test FilteredQuery equals/hashcode:\n    QueryUtils.checkHashEquals(new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\"))));\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\"))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"two\")), new PrefixFilter(new Term(\"field\", \"o\")))\n    );\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"a\"))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\")))\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testEqualsHashcode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testEqualsHashcode().mjava","sourceNew":"  public void testEqualsHashcode() throws Exception {\n    // some tests before, if the used queries and filters work:\n    assertEquals(new PrefixQuery(new Term(\"field\", \"o\")), new PrefixQuery(new Term(\"field\", \"o\")));\n    assertFalse(new PrefixQuery(new Term(\"field\", \"a\")).equals(new PrefixQuery(new Term(\"field\", \"o\"))));\n    QueryUtils.checkHashEquals(new TermQuery(new Term(\"field\", \"one\")));\n    QueryUtils.checkUnequal(\n      new TermQuery(new Term(\"field\", \"one\")), new TermQuery(new Term(\"field\", \"two\"))\n    );\n    // now test FilteredQuery equals/hashcode:\n    QueryUtils.checkHashEquals(new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\")))));\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\")))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"two\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\"))))\n    );\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"a\")))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\"))))\n    );\n  }\n\n","sourceOld":"  public void testEqualsHashcode() throws Exception {\n    // some tests before, if the used queries and filters work:\n    assertEquals(new PrefixFilter(new Term(\"field\", \"o\")), new PrefixFilter(new Term(\"field\", \"o\")));\n    assertFalse(new PrefixFilter(new Term(\"field\", \"a\")).equals(new PrefixFilter(new Term(\"field\", \"o\"))));\n    QueryUtils.checkHashEquals(new TermQuery(new Term(\"field\", \"one\")));\n    QueryUtils.checkUnequal(\n      new TermQuery(new Term(\"field\", \"one\")), new TermQuery(new Term(\"field\", \"two\"))\n    );\n    // now test FilteredQuery equals/hashcode:\n    QueryUtils.checkHashEquals(new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\"))));\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\"))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"two\")), new PrefixFilter(new Term(\"field\", \"o\")))\n    );\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"a\"))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\")))\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testEqualsHashcode().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testEqualsHashcode().mjava","sourceNew":"  public void testEqualsHashcode() throws Exception {\n    // some tests before, if the used queries and filters work:\n    assertEquals(new PrefixQuery(new Term(\"field\", \"o\")), new PrefixQuery(new Term(\"field\", \"o\")));\n    assertFalse(new PrefixQuery(new Term(\"field\", \"a\")).equals(new PrefixQuery(new Term(\"field\", \"o\"))));\n    QueryUtils.checkHashEquals(new TermQuery(new Term(\"field\", \"one\")));\n    QueryUtils.checkUnequal(\n      new TermQuery(new Term(\"field\", \"one\")), new TermQuery(new Term(\"field\", \"two\"))\n    );\n    // now test FilteredQuery equals/hashcode:\n    QueryUtils.checkHashEquals(new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\")))));\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\")))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"two\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\"))))\n    );\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"a\")))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\"))))\n    );\n  }\n\n","sourceOld":"  public void testEqualsHashcode() throws Exception {\n    // some tests before, if the used queries and filters work:\n    assertEquals(new PrefixFilter(new Term(\"field\", \"o\")), new PrefixFilter(new Term(\"field\", \"o\")));\n    assertFalse(new PrefixFilter(new Term(\"field\", \"a\")).equals(new PrefixFilter(new Term(\"field\", \"o\"))));\n    QueryUtils.checkHashEquals(new TermQuery(new Term(\"field\", \"one\")));\n    QueryUtils.checkUnequal(\n      new TermQuery(new Term(\"field\", \"one\")), new TermQuery(new Term(\"field\", \"two\"))\n    );\n    // now test FilteredQuery equals/hashcode:\n    QueryUtils.checkHashEquals(new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\"))));\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\"))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"two\")), new PrefixFilter(new Term(\"field\", \"o\")))\n    );\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"a\"))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new PrefixFilter(new Term(\"field\", \"o\")))\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#testEqualsHashcode().mjava","sourceNew":null,"sourceOld":"  public void testEqualsHashcode() throws Exception {\n    // some tests before, if the used queries and filters work:\n    assertEquals(new PrefixQuery(new Term(\"field\", \"o\")), new PrefixQuery(new Term(\"field\", \"o\")));\n    assertFalse(new PrefixQuery(new Term(\"field\", \"a\")).equals(new PrefixQuery(new Term(\"field\", \"o\"))));\n    QueryUtils.checkHashEquals(new TermQuery(new Term(\"field\", \"one\")));\n    QueryUtils.checkUnequal(\n      new TermQuery(new Term(\"field\", \"one\")), new TermQuery(new Term(\"field\", \"two\"))\n    );\n    // now test FilteredQuery equals/hashcode:\n    QueryUtils.checkHashEquals(new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\")))));\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\")))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"two\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\"))))\n    );\n    QueryUtils.checkUnequal(\n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"a\")))), \n      new FilteredQuery(new TermQuery(new Term(\"field\", \"one\")), new QueryWrapperFilter(new PrefixQuery(new Term(\"field\", \"o\"))))\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2713584a660051cd646423be682771e3bbd99985"],"1db68e96dd908fcd79ef809095822736aa601d08":["2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1db68e96dd908fcd79ef809095822736aa601d08"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}