{"path":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Runs persisted managed resource creation and update tests on Zookeeper storage.\n   */\n  @Test\n  public void testZkBasedJsonStorage() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());    \n    SolrZkClient zkClient = h.getCoreContainer().getZkController().getZkClient();    \n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");    \n    // Solr unit tests can only write to their working directory due to\n    // a custom Java Security Manager installed in the test environment\n    NamedList<String> initArgs = new NamedList<>();\n    try {\n      ZooKeeperStorageIO zkStorageIO = new ZooKeeperStorageIO(zkClient, \"/test\");\n      zkStorageIO.configure(loader, initArgs);\n      doStorageTests(loader, zkStorageIO);\n    } finally {\n      zkClient.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38aabd3f6197d25576587ec0d23b0a81c2ccbec9","date":1409160087,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","sourceNew":"  /**\n   * Runs persisted managed resource creation and update tests on Zookeeper storage.\n   */\n  @Test\n  public void testZkBasedJsonStorage() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());    \n    SolrZkClient zkClient = h.getCoreContainer().getZkController().getZkClient();    \n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");    \n    // Solr unit tests can only write to their working directory due to\n    // a custom Java Security Manager installed in the test environment\n    NamedList<String> initArgs = new NamedList<>();\n    try {\n      ZooKeeperStorageIO zkStorageIO = new ZooKeeperStorageIO(zkClient, \"/test\");\n      zkStorageIO.configure(loader, initArgs);\n      doStorageTests(loader, zkStorageIO);\n    } finally {\n      loader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Runs persisted managed resource creation and update tests on Zookeeper storage.\n   */\n  @Test\n  public void testZkBasedJsonStorage() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());    \n    SolrZkClient zkClient = h.getCoreContainer().getZkController().getZkClient();    \n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");    \n    // Solr unit tests can only write to their working directory due to\n    // a custom Java Security Manager installed in the test environment\n    NamedList<String> initArgs = new NamedList<>();\n    try {\n      ZooKeeperStorageIO zkStorageIO = new ZooKeeperStorageIO(zkClient, \"/test\");\n      zkStorageIO.configure(loader, initArgs);\n      doStorageTests(loader, zkStorageIO);\n    } finally {\n      zkClient.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"594351c163c479b0871ffbd92549d30347ecbf4e","date":1409260446,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","sourceNew":"  /**\n   * Runs persisted managed resource creation and update tests on Zookeeper storage.\n   */\n  @Test\n  public void testZkBasedJsonStorage() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    SolrZkClient zkClient = h.getCoreContainer().getZkController().getZkClient();\n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");    \n    // Solr unit tests can only write to their working directory due to\n    // a custom Java Security Manager installed in the test environment\n    NamedList<String> initArgs = new NamedList<>();\n    try {\n      ZooKeeperStorageIO zkStorageIO = new ZooKeeperStorageIO(zkClient, \"/test\");\n      zkStorageIO.configure(loader, initArgs);\n      doStorageTests(loader, zkStorageIO);\n    } finally {\n      loader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Runs persisted managed resource creation and update tests on Zookeeper storage.\n   */\n  @Test\n  public void testZkBasedJsonStorage() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());    \n    SolrZkClient zkClient = h.getCoreContainer().getZkController().getZkClient();    \n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");    \n    // Solr unit tests can only write to their working directory due to\n    // a custom Java Security Manager installed in the test environment\n    NamedList<String> initArgs = new NamedList<>();\n    try {\n      ZooKeeperStorageIO zkStorageIO = new ZooKeeperStorageIO(zkClient, \"/test\");\n      zkStorageIO.configure(loader, initArgs);\n      doStorageTests(loader, zkStorageIO);\n    } finally {\n      loader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","sourceNew":"  /**\n   * Runs persisted managed resource creation and update tests on Zookeeper storage.\n   */\n  @Test\n  public void testZkBasedJsonStorage() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    SolrZkClient zkClient = h.getCoreContainer().getZkController().getZkClient();\n    SolrResourceLoader loader = new SolrResourceLoader(Paths.get(\"./\"));\n    // Solr unit tests can only write to their working directory due to\n    // a custom Java Security Manager installed in the test environment\n    NamedList<String> initArgs = new NamedList<>();\n    try {\n      ZooKeeperStorageIO zkStorageIO = new ZooKeeperStorageIO(zkClient, \"/test\");\n      zkStorageIO.configure(loader, initArgs);\n      doStorageTests(loader, zkStorageIO);\n    } finally {\n      loader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Runs persisted managed resource creation and update tests on Zookeeper storage.\n   */\n  @Test\n  public void testZkBasedJsonStorage() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    SolrZkClient zkClient = h.getCoreContainer().getZkController().getZkClient();\n    SolrResourceLoader loader = new SolrResourceLoader(\"./\");    \n    // Solr unit tests can only write to their working directory due to\n    // a custom Java Security Manager installed in the test environment\n    NamedList<String> initArgs = new NamedList<>();\n    try {\n      ZooKeeperStorageIO zkStorageIO = new ZooKeeperStorageIO(zkClient, \"/test\");\n      zkStorageIO.configure(loader, initArgs);\n      doStorageTests(loader, zkStorageIO);\n    } finally {\n      loader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/TestManagedResourceStorage#testZkBasedJsonStorage().mjava","sourceNew":"  /**\n   * Runs persisted managed resource creation and update tests on Zookeeper storage.\n   */\n  @Test\n  public void testZkBasedJsonStorage() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    SolrResourceLoader loader = new SolrResourceLoader(Paths.get(\"./\"));\n    // Solr unit tests can only write to their working directory due to\n    // a custom Java Security Manager installed in the test environment\n    NamedList<String> initArgs = new NamedList<>();\n    try {\n      ZooKeeperStorageIO zkStorageIO = new ZooKeeperStorageIO(zkServer.getZkClient(), \"/test\");\n      zkStorageIO.configure(loader, initArgs);\n      doStorageTests(loader, zkStorageIO);\n    } finally {\n      loader.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Runs persisted managed resource creation and update tests on Zookeeper storage.\n   */\n  @Test\n  public void testZkBasedJsonStorage() throws Exception {\n    \n    // test using ZooKeeper\n    assertTrue(\"Not using ZooKeeper\", h.getCoreContainer().isZooKeeperAware());\n    SolrZkClient zkClient = h.getCoreContainer().getZkController().getZkClient();\n    SolrResourceLoader loader = new SolrResourceLoader(Paths.get(\"./\"));\n    // Solr unit tests can only write to their working directory due to\n    // a custom Java Security Manager installed in the test environment\n    NamedList<String> initArgs = new NamedList<>();\n    try {\n      ZooKeeperStorageIO zkStorageIO = new ZooKeeperStorageIO(zkClient, \"/test\");\n      zkStorageIO.configure(loader, initArgs);\n      doStorageTests(loader, zkStorageIO);\n    } finally {\n      loader.close();\n    }\n  }\n\n","bugFix":["594351c163c479b0871ffbd92549d30347ecbf4e","afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["594351c163c479b0871ffbd92549d30347ecbf4e"],"38aabd3f6197d25576587ec0d23b0a81c2ccbec9":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"594351c163c479b0871ffbd92549d30347ecbf4e":["38aabd3f6197d25576587ec0d23b0a81c2ccbec9"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"a626ec4d1c92e59fe390724d6220081047b03ce7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"38aabd3f6197d25576587ec0d23b0a81c2ccbec9":["594351c163c479b0871ffbd92549d30347ecbf4e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"594351c163c479b0871ffbd92549d30347ecbf4e":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["38aabd3f6197d25576587ec0d23b0a81c2ccbec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}