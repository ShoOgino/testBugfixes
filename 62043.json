{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#inform(SolrCore).mjava","commits":[{"id":"531fe719c7218235a679452eb3d137bfd8fc6af1","date":1415191086,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(final SolrCore core) {\n    if( ! (core.getResourceLoader() instanceof  ZkSolrResourceLoader)) return;\n    final ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) core.getResourceLoader();\n    if(zkSolrResourceLoader != null){\n      Runnable listener = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            if(core.isClosed()) return;\n            Stat stat = zkSolrResourceLoader.getZkController().getZkClient().exists((zkSolrResourceLoader).getCollectionZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME, null, true);\n            if(stat == null) return;\n            if (stat.getVersion() >  core.getSolrConfig().getOverlay().getZnodeVersion()) {\n              core.getCoreDescriptor().getCoreContainer().reload(core.getName());\n            }\n          } catch (KeeperException.NoNodeException nne){\n            //no problem\n          } catch (KeeperException e) {\n            log.error(\"error refreshing solrconfig \", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().isInterrupted();\n          }\n        }\n      };\n\n      zkSolrResourceLoader.getZkController().registerConfListenerForCore(zkSolrResourceLoader.getCollectionZkPath(), core,listener);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17778d9c1f3a8a67383edebf24754bf30a5120f8","date":1415342366,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(final SolrCore core) {\n    if( ! (core.getResourceLoader() instanceof  ZkSolrResourceLoader)) return;\n    final ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) core.getResourceLoader();\n    if(zkSolrResourceLoader != null){\n      Runnable listener = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            if(core.isClosed()) return;\n            Stat stat = zkSolrResourceLoader.getZkController().getZkClient().exists((zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME, null, true);\n            if(stat == null) return;\n            if (stat.getVersion() >  core.getSolrConfig().getOverlay().getZnodeVersion()) {\n              core.getCoreDescriptor().getCoreContainer().reload(core.getName());\n            }\n          } catch (KeeperException.NoNodeException nne){\n            //no problem\n          } catch (KeeperException e) {\n            log.error(\"error refreshing solrconfig \", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().isInterrupted();\n          }\n        }\n      };\n\n      zkSolrResourceLoader.getZkController().registerConfListenerForCore(zkSolrResourceLoader.getConfigSetZkPath(), core,listener);\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void inform(final SolrCore core) {\n    if( ! (core.getResourceLoader() instanceof  ZkSolrResourceLoader)) return;\n    final ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) core.getResourceLoader();\n    if(zkSolrResourceLoader != null){\n      Runnable listener = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            if(core.isClosed()) return;\n            Stat stat = zkSolrResourceLoader.getZkController().getZkClient().exists((zkSolrResourceLoader).getCollectionZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME, null, true);\n            if(stat == null) return;\n            if (stat.getVersion() >  core.getSolrConfig().getOverlay().getZnodeVersion()) {\n              core.getCoreDescriptor().getCoreContainer().reload(core.getName());\n            }\n          } catch (KeeperException.NoNodeException nne){\n            //no problem\n          } catch (KeeperException e) {\n            log.error(\"error refreshing solrconfig \", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().isInterrupted();\n          }\n        }\n      };\n\n      zkSolrResourceLoader.getZkController().registerConfListenerForCore(zkSolrResourceLoader.getCollectionZkPath(), core,listener);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#inform(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#inform(SolrCore).mjava","sourceNew":"  @Override\n  public void inform(final SolrCore core) {\n    if( ! (core.getResourceLoader() instanceof  ZkSolrResourceLoader)) return;\n    final ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) core.getResourceLoader();\n    if(zkSolrResourceLoader != null)\n      zkSolrResourceLoader.getZkController().registerConfListenerForCore(\n          zkSolrResourceLoader.getConfigSetZkPath(),\n          core,\n          getListener(core, zkSolrResourceLoader));\n\n  }\n\n","sourceOld":"  @Override\n  public void inform(final SolrCore core) {\n    if( ! (core.getResourceLoader() instanceof  ZkSolrResourceLoader)) return;\n    final ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) core.getResourceLoader();\n    if(zkSolrResourceLoader != null){\n      Runnable listener = new Runnable() {\n        @Override\n        public void run() {\n          try {\n            if(core.isClosed()) return;\n            Stat stat = zkSolrResourceLoader.getZkController().getZkClient().exists((zkSolrResourceLoader).getConfigSetZkPath() + \"/\" + ConfigOverlay.RESOURCE_NAME, null, true);\n            if(stat == null) return;\n            if (stat.getVersion() >  core.getSolrConfig().getOverlay().getZnodeVersion()) {\n              core.getCoreDescriptor().getCoreContainer().reload(core.getName());\n            }\n          } catch (KeeperException.NoNodeException nne){\n            //no problem\n          } catch (KeeperException e) {\n            log.error(\"error refreshing solrconfig \", e);\n          } catch (InterruptedException e) {\n            Thread.currentThread().isInterrupted();\n          }\n        }\n      };\n\n      zkSolrResourceLoader.getZkController().registerConfListenerForCore(zkSolrResourceLoader.getConfigSetZkPath(), core,listener);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9","date":1420028708,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#registerConfListener().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#inform(SolrCore).mjava","sourceNew":"  /**This registers one listener for the entire conf directory. In zookeeper\n   * there is no event fired when children are modified. So , we expect everyone\n   * to 'touch' the /conf directory by setting some data  so that events are triggered.\n   */\n  private void registerConfListener() {\n    if( ! (resourceLoader instanceof ZkSolrResourceLoader)) return;\n    final ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) resourceLoader;\n    if(zkSolrResourceLoader != null)\n      zkSolrResourceLoader.getZkController().registerConfListenerForCore(\n          zkSolrResourceLoader.getConfigSetZkPath(),\n          this,\n          getListener(this, zkSolrResourceLoader));\n\n  }\n\n","sourceOld":"  @Override\n  public void inform(final SolrCore core) {\n    if( ! (core.getResourceLoader() instanceof  ZkSolrResourceLoader)) return;\n    final ZkSolrResourceLoader zkSolrResourceLoader = (ZkSolrResourceLoader) core.getResourceLoader();\n    if(zkSolrResourceLoader != null)\n      zkSolrResourceLoader.getZkController().registerConfListenerForCore(\n          zkSolrResourceLoader.getConfigSetZkPath(),\n          core,\n          getListener(core, zkSolrResourceLoader));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4","date":1456067995,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler#inform(SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void inform(SolrCore core) {\n    isImmutableConfigSet = getImmutable(core);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["b5a70f7ff0756e3668447bffbbf8bce8e7c361b9"],"531fe719c7218235a679452eb3d137bfd8fc6af1":["17778d9c1f3a8a67383edebf24754bf30a5120f8"],"17778d9c1f3a8a67383edebf24754bf30a5120f8":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["531fe719c7218235a679452eb3d137bfd8fc6af1"],"b5a70f7ff0756e3668447bffbbf8bce8e7c361b9":["7a4f4b06bdac8a9a670d952d17df0ce87e02a2e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}