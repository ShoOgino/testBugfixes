{"path":"lucene/backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,Collector).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,Collector).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query,int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * \n  * <p>This method cannot be parallelized, because {@link Collector}\n  * supports no concurrent access.\n  *\n  * @param weight to match documents\n  * @param filter if non-null, a bitset used to eliminate some documents\n  * @param collector to receive hits\n  */\n  @Override\n  public void search(final Weight weight, final Filter filter, final Collector collector)\n   throws IOException {\n   for (int i = 0; i < searchables.length; i++) {\n\n     final int start = starts[i];\n\n     final Collector hc = new Collector() {\n       @Override\n       public void setScorer(final Scorer scorer) throws IOException {\n         collector.setScorer(scorer);\n       }\n       \n       @Override\n       public void collect(final int doc) throws IOException {\n         collector.collect(doc);\n       }\n       \n       @Override\n       public void setNextReader(final IndexReader reader, final int docBase) throws IOException {\n         collector.setNextReader(reader, start + docBase);\n       }\n       \n       @Override\n       public boolean acceptsDocsOutOfOrder() {\n         return collector.acceptsDocsOutOfOrder();\n       }\n     };\n     \n     searchables[i].search(weight, filter, hc);\n   }\n  }\n\n","sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query,int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * \n  * <p>This method cannot be parallelized, because {@link Collector}\n  * supports no concurrent access.\n  *\n  * @param weight to match documents\n  * @param filter if non-null, a bitset used to eliminate some documents\n  * @param collector to receive hits\n  */\n  @Override\n  public void search(final Weight weight, final Filter filter, final Collector collector)\n   throws IOException {\n   for (int i = 0; i < searchables.length; i++) {\n\n     final int start = starts[i];\n\n     final Collector hc = new Collector() {\n       @Override\n       public void setScorer(final Scorer scorer) throws IOException {\n         collector.setScorer(scorer);\n       }\n       \n       @Override\n       public void collect(final int doc) throws IOException {\n         collector.collect(doc);\n       }\n       \n       @Override\n       public void setNextReader(final IndexReader reader, final int docBase) throws IOException {\n         collector.setNextReader(reader, start + docBase);\n       }\n       \n       @Override\n       public boolean acceptsDocsOutOfOrder() {\n         return collector.acceptsDocsOutOfOrder();\n       }\n     };\n     \n     searchables[i].search(weight, filter, hc);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#search(Weight,Filter,Collector).mjava","sourceNew":null,"sourceOld":"  /** Lower-level search API.\n  *\n  * <p>{@link Collector#collect(int)} is called for every matching document.\n  *\n  * <p>Applications should only use this if they need <i>all</i> of the\n  * matching documents.  The high-level search API ({@link\n  * Searcher#search(Query,int)}) is usually more efficient, as it skips\n  * non-high-scoring hits.\n  * \n  * <p>This method cannot be parallelized, because {@link Collector}\n  * supports no concurrent access.\n  *\n  * @param weight to match documents\n  * @param filter if non-null, a bitset used to eliminate some documents\n  * @param collector to receive hits\n  */\n  @Override\n  public void search(final Weight weight, final Filter filter, final Collector collector)\n   throws IOException {\n   for (int i = 0; i < searchables.length; i++) {\n\n     final int start = starts[i];\n\n     final Collector hc = new Collector() {\n       @Override\n       public void setScorer(final Scorer scorer) throws IOException {\n         collector.setScorer(scorer);\n       }\n       \n       @Override\n       public void collect(final int doc) throws IOException {\n         collector.collect(doc);\n       }\n       \n       @Override\n       public void setNextReader(final IndexReader reader, final int docBase) throws IOException {\n         collector.setNextReader(reader, start + docBase);\n       }\n       \n       @Override\n       public boolean acceptsDocsOutOfOrder() {\n         return collector.acceptsDocsOutOfOrder();\n       }\n     };\n     \n     searchables[i].search(weight, filter, hc);\n   }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}