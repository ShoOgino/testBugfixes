{"path":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexWriter,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","commits":[{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexWriter,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, SegmentReader[] oldReaders,\n    boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners\n  ) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    return new DirectoryReader(newReaders,\n      directory, writer, infos, termInfosIndexDivisor,\n      false, readerFinishedListeners);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dea241098eaf5af8a4789a62634f655d226641","date":1323618214,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexWriter,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexWriter,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, SegmentReader[] oldReaders,\n    boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners\n  ) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      IOException prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } catch (IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ex) {\n                if (prior == null) prior = ex;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) throw prior;\n      }\n    }    \n    return new DirectoryReader(newReaders,\n      directory, writer, infos, termInfosIndexDivisor,\n      false, readerFinishedListeners);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, SegmentReader[] oldReaders,\n    boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners\n  ) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    return new DirectoryReader(newReaders,\n      directory, writer, infos, termInfosIndexDivisor,\n      false, readerFinishedListeners);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexWriter,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#DirectoryReader(Directory,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, SegmentReader[] oldReaders,\n    boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners\n  ) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      IOException prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } catch (IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ex) {\n                if (prior == null) prior = ex;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) throw prior;\n      }\n    }    \n    return new DirectoryReader(newReaders,\n      directory, writer, infos, termInfosIndexDivisor,\n      false, readerFinishedListeners);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  DirectoryReader(Directory directory, SegmentInfos infos, SegmentReader[] oldReaders,\n                  boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners) throws IOException {\n    this.directory = directory;\n    this.segmentInfos = infos;\n    this.termInfosIndexDivisor = termInfosIndexDivisor;\n    this.readerFinishedListeners = readerFinishedListeners;\n    applyAllDeletes = false;\n\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ignore) {\n                // keep going - we want to clean up as much as possible\n              }\n            }\n          }\n        }\n      }\n    }    \n    \n    // initialize the readers to calculate maxDoc before we try to reuse the old normsCache\n    initialize(newReaders);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexWriter,SegmentInfos,SegmentReader[],boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexWriter,SegmentInfos,SegmentReader[],boolean,int,Collection[ReaderFinishedListener]).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, SegmentReader[] oldReaders,\n    boolean doClone, int termInfosIndexDivisor) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      IOException prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } catch (IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ex) {\n                if (prior == null) prior = ex;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) throw prior;\n      }\n    }    \n    return new DirectoryReader(newReaders, directory, writer, \n        infos, termInfosIndexDivisor, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, SegmentReader[] oldReaders,\n    boolean doClone, int termInfosIndexDivisor, Collection<ReaderFinishedListener> readerFinishedListeners\n  ) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      IOException prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // We should never see a totally new segment during cloning\n          assert !doClone;\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = SegmentReader.get(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          newReader.readerFinishedListeners = readerFinishedListeners;\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          newReader = newReaders[i].reopenSegment(infos.info(i), doClone);\n          if (newReader == null) {\n            // this reader will be shared between the old and the new one,\n            // so we must incRef it\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            assert newReader.readerFinishedListeners == readerFinishedListeners;\n            readerShared[i] = false;\n            // Steal ref returned to us by reopenSegment:\n            newReaders[i] = newReader;\n          }\n        }\n        success = true;\n      } catch (IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ex) {\n                if (prior == null) prior = ex;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) throw prior;\n      }\n    }    \n    return new DirectoryReader(newReaders,\n      directory, writer, infos, termInfosIndexDivisor,\n      false, readerFinishedListeners);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57dea241098eaf5af8a4789a62634f655d226641"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["57dea241098eaf5af8a4789a62634f655d226641"],"57dea241098eaf5af8a4789a62634f655d226641":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eeb24fe119d55091148e2a3d94e80c9e349d886c"]},"commit2Childs":{"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["57dea241098eaf5af8a4789a62634f655d226641"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57dea241098eaf5af8a4789a62634f655d226641":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","eeb24fe119d55091148e2a3d94e80c9e349d886c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}