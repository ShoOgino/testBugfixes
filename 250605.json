{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doWhiteboxCreateFields(String,Class[#],Object...).mjava","commits":[{"id":"0ff61c2e5ce6b1f26a271d9d454206db1917d628","date":1491505661,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doWhiteboxCreateFields(String,Class[#],Object...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Calls {@link #callAndCheckCreateFields} on each of the specified values.\n   * This is a convinience method for testing the same fieldname with multiple inputs.\n   *\n   * @see #callAndCheckCreateFields\n   */\n  private void doWhiteboxCreateFields(final String fieldName, final Class<?> pointType, final Object... values) throws Exception {\n    \n    for (Object value : values) {\n      // ideally we should require that all input values be diff forms of the same logical value\n      // (ie '\"42\"' vs 'new Integer(42)') and assert that each produces an equivilent list of IndexableField objects\n      // but that doesn't seem to work -- appears not all IndexableField classes override Object.equals?\n      final List<IndexableField> result = callAndCheckCreateFields(fieldName, pointType, value);\n      assertNotNull(value + \" => null\", result);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doWhiteboxCreateFields(String,Class[#],Object...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Calls {@link #callAndCheckCreateFields} on each of the specified values.\n   * This is a convinience method for testing the same fieldname with multiple inputs.\n   *\n   * @see #callAndCheckCreateFields\n   */\n  private void doWhiteboxCreateFields(final String fieldName, final Class<?> pointType, final Object... values) throws Exception {\n    \n    for (Object value : values) {\n      // ideally we should require that all input values be diff forms of the same logical value\n      // (ie '\"42\"' vs 'new Integer(42)') and assert that each produces an equivilent list of IndexableField objects\n      // but that doesn't seem to work -- appears not all IndexableField classes override Object.equals?\n      final List<IndexableField> result = callAndCheckCreateFields(fieldName, pointType, value);\n      assertNotNull(value + \" => null\", result);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doWhiteboxCreateFields(String,Class[#],Object...).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#doWhiteboxCreateFields(String,Class[#],Object...).mjava","sourceNew":"  /** \n   * Calls {@link #callAndCheckCreateFields} on each of the specified values.\n   * This is a convinience method for testing the same fieldname with multiple inputs.\n   *\n   * @see #callAndCheckCreateFields\n   */\n  private void doWhiteboxCreateFields(final String fieldName, final Class<?> pointType, final Object... values) throws Exception {\n    \n    for (Object value : values) {\n      // ideally we should require that all input values be diff forms of the same logical value\n      // (ie '\"42\"' vs 'new Integer(42)') and assert that each produces an equivalent list of IndexableField objects\n      // but that doesn't seem to work -- appears not all IndexableField classes override Object.equals?\n      final List<IndexableField> result = callAndCheckCreateFields(fieldName, pointType, value);\n      assertNotNull(value + \" => null\", result);\n    }\n  }\n\n","sourceOld":"  /** \n   * Calls {@link #callAndCheckCreateFields} on each of the specified values.\n   * This is a convinience method for testing the same fieldname with multiple inputs.\n   *\n   * @see #callAndCheckCreateFields\n   */\n  private void doWhiteboxCreateFields(final String fieldName, final Class<?> pointType, final Object... values) throws Exception {\n    \n    for (Object value : values) {\n      // ideally we should require that all input values be diff forms of the same logical value\n      // (ie '\"42\"' vs 'new Integer(42)') and assert that each produces an equivilent list of IndexableField objects\n      // but that doesn't seem to work -- appears not all IndexableField classes override Object.equals?\n      final List<IndexableField> result = callAndCheckCreateFields(fieldName, pointType, value);\n      assertNotNull(value + \" => null\", result);\n    }\n  }\n\n","bugFix":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"9f4251f14d2db68330fc1e6f0495c053a905d560":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0ff61c2e5ce6b1f26a271d9d454206db1917d628"],"0ff61c2e5ce6b1f26a271d9d454206db1917d628":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}