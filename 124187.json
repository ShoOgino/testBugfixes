{"path":"lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","commits":[{"id":"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","date":1311898374,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","pathOld":"/dev/null","sourceNew":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTerm.bytes.copy(term.bytes);\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["01fc0eec0e4dd3fdd2977bb8d7d2997a4c8075cb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","sourceNew":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTerm.bytes.copyBytes(term.bytes);\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTerm.bytes.copy(term.bytes);\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.Builder#add(Term).mjava","sourceNew":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTerm.bytes.copyBytes(term.bytes);\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","sourceOld":"    /** add a term */\n    public void add(Term term) {\n      assert lastTerm.equals(new Term(\"\")) || term.compareTo(lastTerm) > 0;\n\n      try {\n        int prefix = sharedPrefix(lastTerm.bytes, term.bytes);\n        int suffix = term.bytes.length - prefix;\n        if (term.field.equals(lastTerm.field)) {\n          output.writeVInt(prefix << 1);\n        } else {\n          output.writeVInt(prefix << 1 | 1);\n          output.writeString(term.field);\n        }\n        output.writeVInt(suffix);\n        output.writeBytes(term.bytes.bytes, term.bytes.offset + prefix, suffix);\n        lastTerm.bytes.copyBytes(term.bytes);\n        lastTerm.field = term.field;\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["e6e919043fa85ee891123768dd655a98edbbf63c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"e6e919043fa85ee891123768dd655a98edbbf63c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}