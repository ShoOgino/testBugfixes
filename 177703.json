{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","commits":[{"id":"f5b5db770a9921aab2a50a23ff9431365c9b8831","date":1393964899,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseTopScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","sourceNew":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseTopScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","sourceNew":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","sourceNew":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.shutdown();\n\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5","date":1429083443,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","sourceNew":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","sourceNew":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n    q2.add(q1.build(), BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2.build(), 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery q2 = new BooleanQuery();\n    q2.add(q1, BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2, 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","sourceNew":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n    q2.add(q1.build(), BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2.build(), 10).totalHits.value);\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n    q2.add(q1.build(), BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2.build(), 10).totalHits);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e708f948b384f9aa85c665caee4486eb2d9e197d","date":1533106881,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanScorer#testEmbeddedBooleanScorer().mjava","sourceNew":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n    q2.add(q1.build(), BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.count(q2.build()));\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Make sure BooleanScorer can embed another\n   *  BooleanScorer. */\n  public void testEmbeddedBooleanScorer() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"field\", \"doctors are people who prescribe medicines of which they know little, to cure diseases of which they know less, in human beings of whom they know nothing\", Field.Store.NO));\n    w.addDocument(doc);\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = new IndexSearcher(r);\n    BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n    q1.add(new TermQuery(new Term(\"field\", \"little\")), BooleanClause.Occur.SHOULD);\n    q1.add(new TermQuery(new Term(\"field\", \"diseases\")), BooleanClause.Occur.SHOULD);\n\n    BooleanQuery.Builder q2 = new BooleanQuery.Builder();\n    q2.add(q1.build(), BooleanClause.Occur.SHOULD);\n    q2.add(new CrazyMustUseBulkScorerQuery(), BooleanClause.Occur.SHOULD);\n\n    assertEquals(1, s.search(q2.build(), 10).totalHits.value);\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"e708f948b384f9aa85c665caee4486eb2d9e197d":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["f5b5db770a9921aab2a50a23ff9431365c9b8831"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f5b5db770a9921aab2a50a23ff9431365c9b8831":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a5794e5c995c57444b154b01a9f3c837cd530a77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e708f948b384f9aa85c665caee4486eb2d9e197d"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"e708f948b384f9aa85c665caee4486eb2d9e197d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5b5db770a9921aab2a50a23ff9431365c9b8831","acf00221f44c5f08ccea014f2492b53af15ecd66"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ac499dbbdb250b9bf6a4846ff4db7b1cb304f9c5"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["e708f948b384f9aa85c665caee4486eb2d9e197d"],"f5b5db770a9921aab2a50a23ff9431365c9b8831":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}