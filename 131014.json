{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","sourceNew":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(msClassName);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(msClassName);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","sourceNew":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(msClassName);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(msClassName);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","pathOld":"solr/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","sourceNew":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(msClassName);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(msClassName);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","date":1334628185,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","sourceNew":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = schema.getResourceLoader().newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = (MergeScheduler) schema.getResourceLoader().newInstance(msClassName);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"be3b141eed4372b3eb04def61ab79f86f572f481","date":1372468407,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","sourceNew":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = schema.getResourceLoader().newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = schema.getResourceLoader().newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","bugFix":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","sourceNew":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = schema.getResourceLoader().newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = schema.getResourceLoader().newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null)\n      SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n\n    return scheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fc849bc99a046ff6fb7e03c792f2a4ddee419f2","date":1524216844,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","sourceNew":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = schema.getResourceLoader().newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        Boolean ioThrottle = (Boolean) args.remove(\"ioThrottle\");\n        if (ioThrottle != null && !ioThrottle) { //by-default 'enabled'\n            ((ConcurrentMergeScheduler) scheduler).disableAutoIOThrottle();\n        }\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = schema.getResourceLoader().newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df151630bfbea5338a007b97bfd37e4ec94f873f","date":1553017904,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","sourceNew":"  private MergeScheduler buildMergeScheduler(SolrResourceLoader resourceLoader) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = resourceLoader.newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        Boolean ioThrottle = (Boolean) args.remove(\"ioThrottle\");\n        if (ioThrottle != null && !ioThrottle) { //by-default 'enabled'\n            ((ConcurrentMergeScheduler) scheduler).disableAutoIOThrottle();\n        }\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = schema.getResourceLoader().newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        Boolean ioThrottle = (Boolean) args.remove(\"ioThrottle\");\n        if (ioThrottle != null && !ioThrottle) { //by-default 'enabled'\n            ((ConcurrentMergeScheduler) scheduler).disableAutoIOThrottle();\n        }\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"df151630bfbea5338a007b97bfd37e4ec94f873f":["1fc849bc99a046ff6fb7e03c792f2a4ddee419f2"],"1fc849bc99a046ff6fb7e03c792f2a4ddee419f2":["be3b141eed4372b3eb04def61ab79f86f572f481"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41","be3b141eed4372b3eb04def61ab79f86f572f481"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be3b141eed4372b3eb04def61ab79f86f572f481":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df151630bfbea5338a007b97bfd37e4ec94f873f"]},"commit2Childs":{"df151630bfbea5338a007b97bfd37e4ec94f873f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1fc849bc99a046ff6fb7e03c792f2a4ddee419f2":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41"],"a7ebf3a5f9e588d0bb564ac30d6dc32056ce9a41":["37a0f60745e53927c4c876cfe5b5a58170f0646c","be3b141eed4372b3eb04def61ab79f86f572f481"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"be3b141eed4372b3eb04def61ab79f86f572f481":["1fc849bc99a046ff6fb7e03c792f2a4ddee419f2","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}