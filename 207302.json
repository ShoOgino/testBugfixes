{"path":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"/dev/null","sourceNew":"    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n          } finally {\n            //closing Inputstream and HTTP connection takes a long time,\n            // so replication status shows as 'replicating' even though it is aborted.\n            new Thread() {\n              public void run() {\n                closeNoExp(is);\n                try {\n                  if (post != null)\n                    post.releaseConnection();\n                } catch (Exception e) {\n                }\n              }\n            }.start();\n          }\n        }\n      } finally {\n        cleanup();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","12c3a8aa53fabcd216e6ca9a2529a2bed74c8e21"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9","date":1225202752,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**The main method which downloads file\n     * @throws Exception\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            //closing Inputstream and HTTP connection takes a long time,\n            // so replication status shows as 'replicating' even though it is aborted.\n            new Thread() {\n              public void run() {\n                closeNoExp(is);\n                try {\n                  if (post != null)\n                    post.releaseConnection();\n                } catch (Exception e) {\n                }\n              }\n            }.start();\n          }\n        }\n      } finally {\n        cleanup();\n      }\n    }\n\n","sourceOld":"    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n          } finally {\n            //closing Inputstream and HTTP connection takes a long time,\n            // so replication status shows as 'replicating' even though it is aborted.\n            new Thread() {\n              public void run() {\n                closeNoExp(is);\n                try {\n                  if (post != null)\n                    post.releaseConnection();\n                } catch (Exception e) {\n                }\n              }\n            }.start();\n          }\n        }\n      } finally {\n        cleanup();\n      }\n    }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            // closing Inputstream and HTTP connection takes a long time,\n            // so replication status shows as 'replicating' even though it is aborted.\n            new Thread() {\n              public void run() {\n                closeNoExp(is);\n                try {\n                  if (post != null)\n                    post.releaseConnection();\n                } catch (Exception e) {\n                }\n              }\n            }.start();\n          }\n        }\n      } finally {\n        cleanup();\n      }\n    }\n\n","sourceOld":"    /**The main method which downloads file\n     * @throws Exception\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            //closing Inputstream and HTTP connection takes a long time,\n            // so replication status shows as 'replicating' even though it is aborted.\n            new Thread() {\n              public void run() {\n                closeNoExp(is);\n                try {\n                  if (post != null)\n                    post.releaseConnection();\n                } catch (Exception e) {\n                }\n              }\n            }.start();\n          }\n        }\n      } finally {\n        cleanup();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            closeNoExp(is);\n          }\n        }\n      } finally {\n        cleanup();\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            // closing Inputstream and HTTP connection takes a long time,\n            // so replication status shows as 'replicating' even though it is aborted.\n            new Thread() {\n              public void run() {\n                closeNoExp(is);\n                try {\n                  if (post != null)\n                    post.releaseConnection();\n                } catch (Exception e) {\n                }\n              }\n            }.start();\n          }\n        }\n      } finally {\n        cleanup();\n      }\n    }\n\n","bugFix":null,"bugIntro":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aab56102a66ad6123bbc7a10ec65d998b5e6117a","date":1238749717,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            closeNoExp(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            closeNoExp(is);\n          }\n        }\n      } finally {\n        cleanup();\n      }\n    }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12c3a8aa53fabcd216e6ca9a2529a2bed74c8e21","date":1240555350,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            closeNoExp(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists())\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            closeNoExp(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"217dd2e5ec780896e70b9d4bf5ff18c0079142fb","date":1241459287,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            closeNoExp(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"bugIntro":["ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757","ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchFile().mjava","sourceNew":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","sourceOld":"    /**\n     * The main method which downloads file\n     */\n    void fetchFile() throws Exception {\n      try {\n        while (true) {\n          final FastInputStream is = getStream();\n          int result;\n          try {\n            //fetch packets one by one in a single request\n            result = fetchPackets(is);\n            if (result == 0 || result == NO_CONTENT) {\n              // if the file is downloaded properly set the\n              //  timestamp same as that in the server\n              if (file.exists() && lastmodified > 0)\n                file.setLastModified(lastmodified);\n              return;\n            }\n            //if there is an error continue. But continue from the point where it got broken\n          } finally {\n            IOUtils.closeQuietly(is);\n          }\n        }\n      } finally {\n        cleanup();\n        //if cleanup suceeds . The file is downloaded fully. do an fsync\n        fsyncService.submit(new Runnable(){\n          public void run() {\n            try {\n              FileUtils.sync(file);\n            } catch (IOException e) {\n              fsyncException = e;\n            }\n          }\n        });\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"12c3a8aa53fabcd216e6ca9a2529a2bed74c8e21":["aab56102a66ad6123bbc7a10ec65d998b5e6117a"],"aab56102a66ad6123bbc7a10ec65d998b5e6117a":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"8620c64e323e74078214cf931e505179d14c888e":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"ad94625fb8d088209f46650c8097196fec67f00c":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["8620c64e323e74078214cf931e505179d14c888e"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["12c3a8aa53fabcd216e6ca9a2529a2bed74c8e21"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"12c3a8aa53fabcd216e6ca9a2529a2bed74c8e21":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb"],"aab56102a66ad6123bbc7a10ec65d998b5e6117a":["12c3a8aa53fabcd216e6ca9a2529a2bed74c8e21"],"8620c64e323e74078214cf931e505179d14c888e":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["aab56102a66ad6123bbc7a10ec65d998b5e6117a"],"6c89a4aebdbd208d5517a488e7dd7c1d164c3bc9":["8620c64e323e74078214cf931e505179d14c888e"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"217dd2e5ec780896e70b9d4bf5ff18c0079142fb":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}