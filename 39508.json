{"path":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight).mjava","commits":[{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(Similarity,AtomicReaderContext,ConstantWeight).mjava","sourceNew":"    public ConstantScorer(AtomicReaderContext context, ConstantWeight w) throws IOException {\n      super(w);\n      theScore = w.getValue();\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","sourceOld":"    public ConstantScorer(Similarity similarity, AtomicReaderContext context, ConstantWeight w) throws IOException {\n      super(similarity);\n      theScore = w.getValue();\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(Similarity,AtomicReaderContext,ConstantWeight).mjava","sourceNew":"    public ConstantScorer(AtomicReaderContext context, ConstantWeight w) throws IOException {\n      super(w);\n      theScore = w.getValue();\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","sourceOld":"    public ConstantScorer(Similarity similarity, AtomicReaderContext context, ConstantWeight w) throws IOException {\n      super(similarity);\n      theScore = w.getValue();\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight).mjava","pathOld":"/dev/null","sourceNew":"    public ConstantScorer(AtomicReaderContext context, ConstantWeight w) throws IOException {\n      super(w);\n      theScore = w.getValue();\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight).mjava","sourceNew":"    public ConstantScorer(AtomicReaderContext context, ConstantWeight w, float theScore) throws IOException {\n      super(w);\n      this.theScore = theScore;\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","sourceOld":"    public ConstantScorer(AtomicReaderContext context, ConstantWeight w) throws IOException {\n      super(w);\n      theScore = w.getValue();\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight).mjava","sourceNew":"    public ConstantScorer(AtomicReaderContext context, ConstantWeight w) throws IOException {\n      super(w);\n      theScore = w.getValue();\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","sourceOld":"    public ConstantScorer(AtomicReaderContext context, ConstantWeight w) throws IOException {\n      super(w);\n      theScore = w.getValue();\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight,float).mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrConstantScoreQuery.ConstantScorer#ConstantScorer(AtomicReaderContext,ConstantWeight).mjava","sourceNew":"    public ConstantScorer(AtomicReaderContext context, ConstantWeight w, float theScore) throws IOException {\n      super(w);\n      this.theScore = theScore;\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","sourceOld":"    public ConstantScorer(AtomicReaderContext context, ConstantWeight w) throws IOException {\n      super(w);\n      theScore = w.getValue();\n      DocIdSet docIdSet = filter instanceof SolrFilter ? ((SolrFilter)filter).getDocIdSet(w.context, context) : filter.getDocIdSet(context);\n      if (docIdSet == null) {\n        docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n      } else {\n        DocIdSetIterator iter = docIdSet.iterator();\n        if (iter == null) {\n          docIdSetIterator = DocIdSet.EMPTY_DOCIDSET.iterator();\n        } else {\n          docIdSetIterator = iter;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["e5e679b9c5f68f1f331de920ae8366af75b44060","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5e679b9c5f68f1f331de920ae8366af75b44060":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f3cee3d20b0c786e6fca20539454262e29edcab"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":[],"0f3cee3d20b0c786e6fca20539454262e29edcab":["1291e4568eb7d9463d751627596ef14baf4c1603","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","e5e679b9c5f68f1f331de920ae8366af75b44060","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["1291e4568eb7d9463d751627596ef14baf4c1603","0f3cee3d20b0c786e6fca20539454262e29edcab","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1291e4568eb7d9463d751627596ef14baf4c1603","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}