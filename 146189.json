{"path":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"/dev/null","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doSnapPull();\n        } catch (Exception e) {\n          LOG.error(\"Exception in pulling snapshot\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    executorService.scheduleAtFixedRate(task, pollInterval, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd564545498afb928bdfecf369ec06cd377413d2","date":1230103123,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doSnapPull(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in pulling snapshot\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    executorService.scheduleAtFixedRate(task, pollInterval, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doSnapPull();\n        } catch (Exception e) {\n          LOG.error(\"Exception in pulling snapshot\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    executorService.scheduleAtFixedRate(task, pollInterval, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1d4115d58bc5d3a2a98f005f14f93c382e874c1","date":1246604190,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doSnapPull(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    executorService.scheduleAtFixedRate(task, pollInterval, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doSnapPull(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in pulling snapshot\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    executorService.scheduleAtFixedRate(task, pollInterval, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e0049b151d932b18c3acc1ef8366262ae9809d","date":1247648156,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    executorService.scheduleAtFixedRate(task, pollInterval, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doSnapPull(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    executorService.scheduleAtFixedRate(task, pollInterval, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11b51a6f104d9611137cc7dba1e84f0afb06ae86","date":1253186856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    executorService.scheduleAtFixedRate(task, pollInterval, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#startExecutorService().mjava","sourceNew":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","sourceOld":"  private void startExecutorService() {\n    Runnable task = new Runnable() {\n      public void run() {\n        if (pollDisabled.get()) {\n          LOG.info(\"Poll disabled\");\n          return;\n        }\n        try {\n          executorStartTime = System.currentTimeMillis();\n          replicationHandler.doFetch(null);\n        } catch (Exception e) {\n          LOG.error(\"Exception in fetching index\", e);\n        }\n      }\n    };\n    executorService = Executors.newSingleThreadScheduledExecutor();\n    long initialDelay = pollInterval - (System.currentTimeMillis() % pollInterval);\n    executorService.scheduleAtFixedRate(task, initialDelay, pollInterval, TimeUnit.MILLISECONDS);\n    LOG.info(\"Poll Scheduled at an interval of \" + pollInterval + \"ms\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"b1d4115d58bc5d3a2a98f005f14f93c382e874c1":["dd564545498afb928bdfecf369ec06cd377413d2"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["b1d4115d58bc5d3a2a98f005f14f93c382e874c1"],"ad94625fb8d088209f46650c8097196fec67f00c":["11b51a6f104d9611137cc7dba1e84f0afb06ae86"],"11b51a6f104d9611137cc7dba1e84f0afb06ae86":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"dd564545498afb928bdfecf369ec06cd377413d2":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["dd564545498afb928bdfecf369ec06cd377413d2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b1d4115d58bc5d3a2a98f005f14f93c382e874c1":["c7e0049b151d932b18c3acc1ef8366262ae9809d"],"c7e0049b151d932b18c3acc1ef8366262ae9809d":["11b51a6f104d9611137cc7dba1e84f0afb06ae86"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"11b51a6f104d9611137cc7dba1e84f0afb06ae86":["ad94625fb8d088209f46650c8097196fec67f00c"],"dd564545498afb928bdfecf369ec06cd377413d2":["b1d4115d58bc5d3a2a98f005f14f93c382e874c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}