{"path":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Intervals#wildcard(BytesRef,int).mjava","commits":[{"id":"f4dbf8f05456e82753f622c3ca7e5f0b9502aac0","date":1561967576,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Intervals#wildcard(BytesRef,int).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/intervals/Intervals#wildcard(String,int).mjava","sourceNew":"  /**\n   * Expert: Return an {@link IntervalsSource} over the disjunction of all terms that match a wildcard glob\n   *\n   * WARNING: Setting {@code maxExpansions} to higher than the default value of 128\n   * can be both slow and memory-intensive\n   *\n   * @param wildcard the glob to expand\n   * @param maxExpansions the maximum number of terms to expand to\n   *\n   * @throws IllegalStateException if the wildcard glob expands to more than {@code maxExpansions} terms\n   *\n   * @see WildcardQuery for glob format\n   */\n  public static IntervalsSource wildcard(BytesRef wildcard, int maxExpansions) {\n    CompiledAutomaton ca = new CompiledAutomaton(WildcardQuery.toAutomaton(new Term(\"\", wildcard)));\n    return new MultiTermIntervalsSource(ca, maxExpansions, wildcard.utf8ToString());\n  }\n\n","sourceOld":"  /**\n   * Expert: Return an {@link IntervalsSource} over the disjunction of all terms that match a wildcard glob\n   *\n   * WARNING: Setting {@code maxExpansions} to higher than the default value of 128\n   * can be both slow and memory-intensive\n   *\n   * @param wildcard the glob to expand\n   * @param maxExpansions the maximum number of terms to expand to\n   *\n   * @throws IllegalStateException if the wildcard glob expands to more than {@code maxExpansions} terms\n   *\n   * @see WildcardQuery for glob format\n   */\n  public static IntervalsSource wildcard(String wildcard, int maxExpansions) {\n    CompiledAutomaton ca = new CompiledAutomaton(WildcardQuery.toAutomaton(new Term(\"\", wildcard)));\n    return new MultiTermIntervalsSource(ca, maxExpansions, wildcard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4dbf8f05456e82753f622c3ca7e5f0b9502aac0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4dbf8f05456e82753f622c3ca7e5f0b9502aac0"]},"commit2Childs":{"f4dbf8f05456e82753f622c3ca7e5f0b9502aac0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4dbf8f05456e82753f622c3ca7e5f0b9502aac0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}