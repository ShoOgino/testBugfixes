{"path":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = DistanceUtils.parsePoint(null, externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = DistanceUtils.parsePoint(null, externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = DistanceUtils.parsePoint(null, externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = DistanceUtils.parsePoint(null, externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = DistanceUtils.parsePoint(null, externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = DistanceUtils.parsePoint(null, externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = DistanceUtils.parsePoint(null, externalVal, dimension);\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"292ece8c0acfbfc6126153b17f0c3ca809add4f0","date":1300388028,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/PointType#createFields(SchemaField,String,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    String[] point = new String[0];\n    try {\n      point = DistanceUtils.parsePoint(null, externalVal, dimension);\n    } catch (InvalidGeoException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n    }\n\n    // TODO: this doesn't currently support polyFields as sub-field types\n    Fieldable[] f = new Fieldable[ (field.indexed() ? dimension : 0) + (field.stored() ? 1 : 0) ];\n\n    if (field.indexed()) {\n      for (int i=0; i<dimension; i++) {\n        f[i] = subField(field, i).createField(point[i], boost);\n      }\n    }\n\n    if (field.stored()) {\n      String storedVal = externalVal;  // normalize or not?\n      f[f.length - 1] = createField(field.getName(), storedVal,\n                getFieldStore(field, storedVal), Field.Index.NO, Field.TermVector.NO,\n                false, false, boost);\n    }\n    \n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["5f4e87790277826a2aea119328600dfb07761f32","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["d619839baa8ce5503e496b94a9e42ad6f079293f","5f4e87790277826a2aea119328600dfb07761f32","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"1da8d55113b689b06716246649de6f62430f15c0":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}