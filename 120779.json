{"path":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","commits":[{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<Integer,String>();\n    String rulefilesArg = args.remove(RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    tailored = new HashMap<Integer,String>();\n    String rulefilesArg = args.get(RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dcae30df9fe9300569835aef42ec65802c7c0afb","date":1364859933,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<Integer,String>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<Integer,String>();\n    String rulefilesArg = args.remove(RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b07bc5b253e2373a655fc734d650af4ac46c8614","date":1386093923,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<Integer,String>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<Integer,String>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<Integer,String>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<Integer,String>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<Integer,String>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b34acf30a377e146cfc8f7da3ec9a01e944403e1","date":1469718024,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    myanmarAsWords = getBoolean(args, \"myanmarAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    myanmarAsWords = getBoolean(args, \"myanmarAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/ICUTokenizerFactory#ICUTokenizerFactory(Map[String,String]).mjava","sourceNew":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    myanmarAsWords = getBoolean(args, \"myanmarAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  /** Creates a new ICUTokenizerFactory */\n  public ICUTokenizerFactory(Map<String,String> args) {\n    super(args);\n    tailored = new HashMap<>();\n    String rulefilesArg = get(args, RULEFILES);\n    if (rulefilesArg != null) {\n      List<String> scriptAndResourcePaths = splitFileNames(rulefilesArg);\n      for (String scriptAndResourcePath : scriptAndResourcePaths) {\n        int colonPos = scriptAndResourcePath.indexOf(\":\");\n        String scriptCode = scriptAndResourcePath.substring(0, colonPos).trim();\n        String resourcePath = scriptAndResourcePath.substring(colonPos+1).trim();\n        tailored.put(UCharacter.getPropertyValueEnum(UProperty.SCRIPT, scriptCode), resourcePath);\n      }\n    }\n    cjkAsWords = getBoolean(args, \"cjkAsWords\", true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b07bc5b253e2373a655fc734d650af4ac46c8614"],"b34acf30a377e146cfc8f7da3ec9a01e944403e1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b07bc5b253e2373a655fc734d650af4ac46c8614":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["dcae30df9fe9300569835aef42ec65802c7c0afb","b07bc5b253e2373a655fc734d650af4ac46c8614"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b34acf30a377e146cfc8f7da3ec9a01e944403e1"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b34acf30a377e146cfc8f7da3ec9a01e944403e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b34acf30a377e146cfc8f7da3ec9a01e944403e1"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b34acf30a377e146cfc8f7da3ec9a01e944403e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"b34acf30a377e146cfc8f7da3ec9a01e944403e1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b07bc5b253e2373a655fc734d650af4ac46c8614":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"dcae30df9fe9300569835aef42ec65802c7c0afb":["b07bc5b253e2373a655fc734d650af4ac46c8614","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["dcae30df9fe9300569835aef42ec65802c7c0afb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}