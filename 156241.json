{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","commits":[{"id":"f3517d617f8b4502b5cca1a57e228d54bda3dd0f","date":1307019502,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next, stemmed, input Token.\n   *  @return The stemed form of a token.\n   *  @throws IOException\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken())\n      return false;\n\n    char[] term = termAttribute.buffer();\n    int len = termAttribute.length();\n    if ((!keywordAtt.isKeyword()) && stemmer.stem(term, len)) {\n      char[] chars = stemmer.asString().toCharArray();\n      termAttribute.copyBuffer(chars, 0, chars.length);\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62f5453a200cec2cbb60148de159dbf55591e9d","date":1307049300,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next, stemmed, input Token.\n   *  @return The stemed form of a token.\n   *  @throws IOException\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken())\n      return false;\n\n    char[] term = termAttribute.buffer();\n    int len = termAttribute.length();\n    if ((!keywordAtt.isKeyword()) && stemmer.stem(term, len)) {\n      char[] chars = stemmer.asString().toCharArray();\n      termAttribute.copyBuffer(chars, 0, chars.length);\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next, stemmed, input Token.\n   *  @return The stemed form of a token.\n   *  @throws IOException\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken())\n      return false;\n\n    char[] term = termAttribute.buffer();\n    int len = termAttribute.length();\n    if ((!keywordAtt.isKeyword()) && stemmer.stem(term, len)) {\n      char[] chars = stemmer.asString().toCharArray();\n      termAttribute.copyBuffer(chars, 0, chars.length);\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9de003101d86d8e0bf95a0b8d1f12a0cddf37d92","date":1307714432,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","sourceNew":"  /** Returns the next, stemmed, input Token.\n   *  @return The stemed form of a token.\n   *  @throws IOException\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken())\n      return false;\n\n    char[] term = termAttribute.buffer();\n    int len = termAttribute.length();\n    if ((!keywordAtt.isKeyword()) && stemmer.stem(term, len)) {\n      termAttribute.setEmpty().append(stemmer.asCharSequence());\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next, stemmed, input Token.\n   *  @return The stemed form of a token.\n   *  @throws IOException\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken())\n      return false;\n\n    char[] term = termAttribute.buffer();\n    int len = termAttribute.length();\n    if ((!keywordAtt.isKeyword()) && stemmer.stem(term, len)) {\n      char[] chars = stemmer.asString().toCharArray();\n      termAttribute.copyBuffer(chars, 0, chars.length);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","sourceNew":"  /** Returns the next, stemmed, input Token.\n   *  @return The stemed form of a token.\n   *  @throws IOException\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken())\n      return false;\n\n    char[] term = termAttribute.buffer();\n    int len = termAttribute.length();\n    if ((!keywordAtt.isKeyword()) && stemmer.stem(term, len)) {\n      termAttribute.setEmpty().append(stemmer.asCharSequence());\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next, stemmed, input Token.\n   *  @return The stemed form of a token.\n   *  @throws IOException\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken())\n      return false;\n\n    char[] term = termAttribute.buffer();\n    int len = termAttribute.length();\n    if ((!keywordAtt.isKeyword()) && stemmer.stem(term, len)) {\n      char[] chars = stemmer.asString().toCharArray();\n      termAttribute.copyBuffer(chars, 0, chars.length);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemFilter#incrementToken().mjava","sourceNew":"  /** Returns the next, stemmed, input Token.\n   *  @return The stemed form of a token.\n   *  @throws IOException\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken())\n      return false;\n\n    char[] term = termAttribute.buffer();\n    int len = termAttribute.length();\n    if ((!keywordAtt.isKeyword()) && stemmer.stem(term, len)) {\n      termAttribute.setEmpty().append(stemmer.asCharSequence());\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next, stemmed, input Token.\n   *  @return The stemed form of a token.\n   *  @throws IOException\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken())\n      return false;\n\n    char[] term = termAttribute.buffer();\n    int len = termAttribute.length();\n    if ((!keywordAtt.isKeyword()) && stemmer.stem(term, len)) {\n      termAttribute.setEmpty().append(stemmer.asCharSequence());\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["d62f5453a200cec2cbb60148de159dbf55591e9d","9de003101d86d8e0bf95a0b8d1f12a0cddf37d92"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["9de003101d86d8e0bf95a0b8d1f12a0cddf37d92"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"9de003101d86d8e0bf95a0b8d1f12a0cddf37d92":["f3517d617f8b4502b5cca1a57e228d54bda3dd0f"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","9de003101d86d8e0bf95a0b8d1f12a0cddf37d92"],"9de003101d86d8e0bf95a0b8d1f12a0cddf37d92":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c715a0f99152be7566591f323c6c5a25725a1bcb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}