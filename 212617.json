{"path":"src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","commits":[{"id":"d41ab32fc87982eab82a896cee390971b5c08fd2","date":1225735438,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"/dev/null","sourceNew":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  <p><b>WARNING</b>: This API is new and experimental, and may suddenly\n   *  change.</p> */\n  public float computeNorm(String field, FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return (float) (state.getBoost() * lengthNorm(field, numTerms));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20645c714ca2a7b7707c2707d58ee9fa384c7362","date":1256074979,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  <p><b>WARNING</b>: This API is new and experimental, and may suddenly\n   *  change.</p> */\n  public float computeNorm(String field, FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return (state.getBoost() * lengthNorm(field, numTerms));\n  }\n\n","sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  <p><b>WARNING</b>: This API is new and experimental, and may suddenly\n   *  change.</p> */\n  public float computeNorm(String field, FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return (float) (state.getBoost() * lengthNorm(field, numTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  <p><b>WARNING</b>: This API is new and experimental, and may suddenly\n   *  change.</p> */\n  @Override\n  public float computeNorm(String field, FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return (state.getBoost() * lengthNorm(field, numTerms));\n  }\n\n","sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  <p><b>WARNING</b>: This API is new and experimental, and may suddenly\n   *  change.</p> */\n  public float computeNorm(String field, FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return (state.getBoost() * lengthNorm(field, numTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6","date":1264951226,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float computeNorm(String field, FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return (state.getBoost() * lengthNorm(field, numTerms));\n  }\n\n","sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  <p><b>WARNING</b>: This API is new and experimental, and may suddenly\n   *  change.</p> */\n  @Override\n  public float computeNorm(String field, FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return (state.getBoost() * lengthNorm(field, numTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","pathOld":"src/java/org/apache/lucene/search/DefaultSimilarity#computeNorm(String,FieldInvertState).mjava","sourceNew":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float computeNorm(String field, FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return (state.getBoost() * lengthNorm(field, numTerms));\n  }\n\n","sourceOld":"  /** Implemented as\n   *  <code>state.getBoost()*lengthNorm(numTerms)</code>, where\n   *  <code>numTerms</code> is {@link FieldInvertState#getLength()} if {@link\n   *  #setDiscountOverlaps} is false, else it's {@link\n   *  FieldInvertState#getLength()} - {@link\n   *  FieldInvertState#getNumOverlap()}.\n   *\n   *  @lucene.experimental */\n  @Override\n  public float computeNorm(String field, FieldInvertState state) {\n    final int numTerms;\n    if (discountOverlaps)\n      numTerms = state.getLength() - state.getNumOverlap();\n    else\n      numTerms = state.getLength();\n    return (state.getBoost() * lengthNorm(field, numTerms));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1e0ca16f14d94e05bda40e00ecb2a2c0225343c6"]},"commit2Childs":{"d41ab32fc87982eab82a896cee390971b5c08fd2":["20645c714ca2a7b7707c2707d58ee9fa384c7362"],"1e0ca16f14d94e05bda40e00ecb2a2c0225343c6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d41ab32fc87982eab82a896cee390971b5c08fd2"],"8a9e385641d717e641408d8fbbc62be8fc766357":["1e0ca16f14d94e05bda40e00ecb2a2c0225343c6"],"20645c714ca2a7b7707c2707d58ee9fa384c7362":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}