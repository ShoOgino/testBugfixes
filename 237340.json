{"path":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,PayloadDecoder,boolean).mjava","commits":[{"id":"1abe64b887edbb37f6261531cf8a62d88d63fdcb","date":1510236307,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,PayloadDecoder,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param decoder a PayloadDecoder to convert payloads into float values\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, PayloadDecoder decoder, boolean includeSpanScore) {\n    this.wrappedQuery = Objects.requireNonNull(wrappedQuery);\n    this.function = Objects.requireNonNull(function);\n    this.decoder = decoder;\n    this.includeSpanScore = includeSpanScore;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2","date":1510236334,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,PayloadDecoder,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery#PayloadScoreQuery(SpanQuery,PayloadFunction,PayloadDecoder,boolean).mjava","sourceNew":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param decoder a PayloadDecoder to convert payloads into float values\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, PayloadDecoder decoder, boolean includeSpanScore) {\n    this.wrappedQuery = Objects.requireNonNull(wrappedQuery);\n    this.function = Objects.requireNonNull(function);\n    this.decoder = Objects.requireNonNull(decoder);\n    this.includeSpanScore = includeSpanScore;\n  }\n\n","sourceOld":"  /**\n   * Creates a new PayloadScoreQuery\n   * @param wrappedQuery the query to wrap\n   * @param function a PayloadFunction to use to modify the scores\n   * @param decoder a PayloadDecoder to convert payloads into float values\n   * @param includeSpanScore include both span score and payload score in the scoring algorithm\n   */\n  public PayloadScoreQuery(SpanQuery wrappedQuery, PayloadFunction function, PayloadDecoder decoder, boolean includeSpanScore) {\n    this.wrappedQuery = Objects.requireNonNull(wrappedQuery);\n    this.function = Objects.requireNonNull(function);\n    this.decoder = decoder;\n    this.includeSpanScore = includeSpanScore;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"]},"commit2Childs":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["4d9b8e4987e93a0ea580f91defdc31ce5dd572e2"],"4d9b8e4987e93a0ea580f91defdc31ce5dd572e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}