{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestAxiomaticSimilarity#testSaneNormValues().mjava","commits":[{"id":"fbc431f993cb68e5cd7af59f2d7c081ff1290b33","date":1479540505,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestAxiomaticSimilarity#testSaneNormValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testSaneNormValues() {\n    Axiomatic sim = new AxiomaticF2EXP();\n    for (int i = 0; i < 256; i++) {\n      float len = sim.decodeNormValue((byte) i);\n      assertFalse(\"negative len: \" + len + \", byte=\" + i, len < 0.0f);\n      assertFalse(\"inf len: \" + len + \", byte=\" + i, Float.isInfinite(len));\n      assertFalse(\"nan len for byte=\" + i, Float.isNaN(len));\n      if (i > 0) {\n        assertTrue(\"len is not decreasing: \" + len + \",byte=\" + i, len < sim.decodeNormValue((byte) (i - 1)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd70af1186a18d10a788433cc33be44327a83ce7","date":1479767946,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestAxiomaticSimilarity#testSaneNormValues().mjava","pathOld":"/dev/null","sourceNew":"  public void testSaneNormValues() {\n    Axiomatic sim = new AxiomaticF2EXP();\n    for (int i = 0; i < 256; i++) {\n      float len = sim.decodeNormValue((byte) i);\n      assertFalse(\"negative len: \" + len + \", byte=\" + i, len < 0.0f);\n      assertFalse(\"inf len: \" + len + \", byte=\" + i, Float.isInfinite(len));\n      assertFalse(\"nan len for byte=\" + i, Float.isNaN(len));\n      if (i > 0) {\n        assertTrue(\"len is not decreasing: \" + len + \",byte=\" + i, len < sim.decodeNormValue((byte) (i - 1)));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestAxiomaticSimilarity#testSaneNormValues().mjava","sourceNew":null,"sourceOld":"  public void testSaneNormValues() {\n    Axiomatic sim = new AxiomaticF2EXP();\n    for (int i = 0; i < 256; i++) {\n      float len = sim.decodeNormValue((byte) i);\n      assertFalse(\"negative len: \" + len + \", byte=\" + i, len < 0.0f);\n      assertFalse(\"inf len: \" + len + \", byte=\" + i, Float.isInfinite(len));\n      assertFalse(\"nan len for byte=\" + i, Float.isNaN(len));\n      if (i > 0) {\n        assertTrue(\"len is not decreasing: \" + len + \",byte=\" + i, len < sim.decodeNormValue((byte) (i - 1)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestAxiomaticSimilarity#testSaneNormValues().mjava","sourceNew":null,"sourceOld":"  public void testSaneNormValues() {\n    Axiomatic sim = new AxiomaticF2EXP();\n    for (int i = 0; i < 256; i++) {\n      float len = sim.decodeNormValue((byte) i);\n      assertFalse(\"negative len: \" + len + \", byte=\" + i, len < 0.0f);\n      assertFalse(\"inf len: \" + len + \", byte=\" + i, Float.isInfinite(len));\n      assertFalse(\"nan len for byte=\" + i, Float.isNaN(len));\n      if (i > 0) {\n        assertTrue(\"len is not decreasing: \" + len + \",byte=\" + i, len < sim.decodeNormValue((byte) (i - 1)));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["fbc431f993cb68e5cd7af59f2d7c081ff1290b33","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["fbc431f993cb68e5cd7af59f2d7c081ff1290b33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd70af1186a18d10a788433cc33be44327a83ce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fbc431f993cb68e5cd7af59f2d7c081ff1290b33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"],"fbc431f993cb68e5cd7af59f2d7c081ff1290b33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd70af1186a18d10a788433cc33be44327a83ce7","fbc431f993cb68e5cd7af59f2d7c081ff1290b33"],"cd70af1186a18d10a788433cc33be44327a83ce7":[],"fbc431f993cb68e5cd7af59f2d7c081ff1290b33":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a","cd70af1186a18d10a788433cc33be44327a83ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd70af1186a18d10a788433cc33be44327a83ce7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}