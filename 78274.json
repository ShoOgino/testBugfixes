{"path":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"/dev/null","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":null,"sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"/dev/null","sourceNew":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","sourceOld":"  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4db894b344611aea3da1ed9083ae2381dc90aa23","date":1308051590,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\"processAttachement\", true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#init(Context).mjava","sourceNew":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    logConfig();\n  }\n\n","sourceOld":"  @Override\n  public void init(Context context) {\n    super.init(context);\n    // set attributes using  XXX getXXXFromContext(attribute, defualtValue);\n    // applies variable resolver and return default if value is not found or null\n    // REQUIRED : connection and folder info\n    user = getStringFromContext(\"user\", null);\n    password = getStringFromContext(\"password\", null);\n    host = getStringFromContext(\"host\", null);\n    protocol = getStringFromContext(\"protocol\", null);\n    folderNames = getStringFromContext(\"folders\", null);\n    // validate\n    if (host == null || protocol == null || user == null || password == null\n            || folderNames == null)\n      throw new DataImportHandlerException(DataImportHandlerException.SEVERE,\n              \"'user|password|protocol|host|folders' are required attributes\");\n\n    //OPTIONAL : have defaults and are optional\n    recurse = getBoolFromContext(\"recurse\", true);\n    String excludes = getStringFromContext(\"exclude\", \"\");\n    if (excludes != null && !excludes.trim().equals(\"\")) {\n      exclude = Arrays.asList(excludes.split(\",\"));\n    }\n    String includes = getStringFromContext(\"include\", \"\");\n    if (includes != null && !includes.trim().equals(\"\")) {\n      include = Arrays.asList(includes.split(\",\"));\n    }\n    batchSize = getIntFromContext(\"batchSize\", 20);\n    customFilter = getStringFromContext(\"customFilter\", \"\");\n    String s = getStringFromContext(\"fetchMailsSince\", \"\");\n    if (s != null)\n      try {\n        fetchMailsSince = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").parse(s);\n      } catch (ParseException e) {\n        throw new DataImportHandlerException(DataImportHandlerException.SEVERE, \"Invalid value for fetchMailSince: \" + s, e);\n      }\n\n    fetchSize = getIntFromContext(\"fetchSize\", 32 * 1024);\n    cTimeout = getIntFromContext(\"connectTimeout\", 30 * 1000);\n    rTimeout = getIntFromContext(\"readTimeout\", 60 * 1000);\n    processAttachment = getBoolFromContext(\n              getStringFromContext(\"processAttachment\",null) == null ? \"processAttachement\":\"processAttachment\"\n            , true);\n\n    logConfig();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["4db894b344611aea3da1ed9083ae2381dc90aa23","d20d5e40789b1c42f4f926e3174b271256c43657"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d20d5e40789b1c42f4f926e3174b271256c43657":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"4db894b344611aea3da1ed9083ae2381dc90aa23":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["d20d5e40789b1c42f4f926e3174b271256c43657","4db894b344611aea3da1ed9083ae2381dc90aa23","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d20d5e40789b1c42f4f926e3174b271256c43657":["c26f00b574427b55127e869b935845554afde1fa"],"1da8d55113b689b06716246649de6f62430f15c0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4db894b344611aea3da1ed9083ae2381dc90aa23":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}