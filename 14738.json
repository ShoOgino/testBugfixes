{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Directory).mjava","sourceNew":"  // try cloning and reopening the norms\n  private void doTestNorms(Directory dir) throws IOException {\n    addDocs(dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    irc3.close();\n  }\n\n","sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Directory dir) throws IOException {\n    addDocs(dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Directory).mjava","sourceNew":"  // try cloning and reopening the norms\n  private void doTestNorms(Random random, Directory dir) throws IOException {\n    addDocs(random, dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    irc3.close();\n  }\n\n","sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Directory dir) throws IOException {\n    addDocs(dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderCloneNorms#doTestNorms(Directory).mjava","sourceNew":null,"sourceOld":"  // try cloning and reopening the norms\n  private void doTestNorms(Directory dir) throws IOException {\n    addDocs(dir, 12, true);\n    IndexReader ir = IndexReader.open(dir, false);\n    verifyIndex(ir);\n    modifyNormsForF1(ir);\n    IndexReader irc = (IndexReader) ir.clone();// IndexReader.open(dir, false);//ir.clone();\n    verifyIndex(irc);\n\n    modifyNormsForF1(irc);\n\n    IndexReader irc3 = (IndexReader) irc.clone();\n    verifyIndex(irc3);\n    modifyNormsForF1(irc3);\n    verifyIndex(irc3);\n    irc3.flush();\n    irc3.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}