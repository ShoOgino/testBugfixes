{"path":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(RawPostingList).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(RawPostingList).mjava","pathOld":"src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(RawPostingList).mjava","sourceNew":"  @Override\n  final void addTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n\n    assert omitTermFreqAndPositions || p.docFreq > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != p.lastDocID) {\n        assert docState.docID > p.lastDocID;\n        termsHashPerField.writeVInt(0, p.lastDocCode);\n        p.lastDocCode = docState.docID - p.lastDocID;\n        p.lastDocID = docState.docID;\n      }\n    } else {\n      if (docState.docID != p.lastDocID) {\n        assert docState.docID > p.lastDocID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == p.docFreq)\n          termsHashPerField.writeVInt(0, p.lastDocCode|1);\n        else {\n          termsHashPerField.writeVInt(0, p.lastDocCode);\n          termsHashPerField.writeVInt(0, p.docFreq);\n        }\n        p.docFreq = 1;\n        p.lastDocCode = (docState.docID - p.lastDocID) << 1;\n        p.lastDocID = docState.docID;\n        writeProx(p, fieldState.position);\n      } else {\n        p.docFreq++;\n        writeProx(p, fieldState.position-p.lastPosition);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  final void addTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n\n    assert omitTermFreqAndPositions || p.docFreq > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != p.lastDocID) {\n        assert docState.docID > p.lastDocID;\n        termsHashPerField.writeVInt(0, p.lastDocCode);\n        p.lastDocCode = docState.docID - p.lastDocID;\n        p.lastDocID = docState.docID;\n      }\n    } else {\n      if (docState.docID != p.lastDocID) {\n        assert docState.docID > p.lastDocID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == p.docFreq)\n          termsHashPerField.writeVInt(0, p.lastDocCode|1);\n        else {\n          termsHashPerField.writeVInt(0, p.lastDocCode);\n          termsHashPerField.writeVInt(0, p.docFreq);\n        }\n        p.docFreq = 1;\n        p.lastDocCode = (docState.docID - p.lastDocID) << 1;\n        p.lastDocID = docState.docID;\n        writeProx(p, fieldState.position);\n      } else {\n        p.docFreq++;\n        writeProx(p, fieldState.position-p.lastPosition);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9","date":1269379515,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/FreqProxTermsWriterPerField#addTerm(RawPostingList).mjava","sourceNew":null,"sourceOld":"  @Override\n  final void addTerm(RawPostingList p0) {\n\n    assert docState.testPoint(\"FreqProxTermsWriterPerField.addTerm start\");\n\n    FreqProxTermsWriter.PostingList p = (FreqProxTermsWriter.PostingList) p0;\n\n    assert omitTermFreqAndPositions || p.docFreq > 0;\n\n    if (omitTermFreqAndPositions) {\n      if (docState.docID != p.lastDocID) {\n        assert docState.docID > p.lastDocID;\n        termsHashPerField.writeVInt(0, p.lastDocCode);\n        p.lastDocCode = docState.docID - p.lastDocID;\n        p.lastDocID = docState.docID;\n      }\n    } else {\n      if (docState.docID != p.lastDocID) {\n        assert docState.docID > p.lastDocID;\n        // Term not yet seen in the current doc but previously\n        // seen in other doc(s) since the last flush\n\n        // Now that we know doc freq for previous doc,\n        // write it & lastDocCode\n        if (1 == p.docFreq)\n          termsHashPerField.writeVInt(0, p.lastDocCode|1);\n        else {\n          termsHashPerField.writeVInt(0, p.lastDocCode);\n          termsHashPerField.writeVInt(0, p.docFreq);\n        }\n        p.docFreq = 1;\n        p.lastDocCode = (docState.docID - p.lastDocID) << 1;\n        p.lastDocID = docState.docID;\n        writeProx(p, fieldState.position);\n      } else {\n        p.docFreq++;\n        writeProx(p, fieldState.position-p.lastPosition);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["741ed634ca00f7fcf06280bd2bf3f7eb9b605cc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}