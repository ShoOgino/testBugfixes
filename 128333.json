{"path":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","pathOld":"/dev/null","sourceNew":"    public WildcardQuery(Term term) {\n        super(term);\n        wildcardTerm = term;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","sourceNew":"  public WildcardQuery(Term term) {\n    super(term);\n  }\n\n","sourceOld":"    public WildcardQuery(Term term) {\n        super(term);\n        wildcardTerm = term;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"918dc6e0012887379516499555f2c1660a6418eb","date":1164067790,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","sourceNew":"  public WildcardQuery(Term term) {\n    super(term);\n    this.termContainsWildcard = (term.text().indexOf('*') != -1) || (term.text().indexOf('?') != -1);\n  }\n\n","sourceOld":"  public WildcardQuery(Term term) {\n    super(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d0a32bc578c175fa42d65d95f21290d3473d84","date":1241610125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","sourceNew":"  public WildcardQuery(Term term) {\n    super(term); //will be removed in 3.0\n    this.term = term;\n    this.termContainsWildcard = (term.text().indexOf('*') != -1) || (term.text().indexOf('?') != -1);\n  }\n\n","sourceOld":"  public WildcardQuery(Term term) {\n    super(term);\n    this.termContainsWildcard = (term.text().indexOf('*') != -1) || (term.text().indexOf('?') != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105155c00cbd8195407715ef8d1e5bc0189f04c0","date":1255035571,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","sourceNew":"  public WildcardQuery(Term term) {\n    super(term); //will be removed in 3.0\n    this.term = term;\n    String text = term.text();\n    this.termContainsWildcard = (text.indexOf('*') != -1)\n        || (text.indexOf('?') != -1);\n    this.termIsPrefix = termContainsWildcard \n        && (text.indexOf('?') == -1) \n        && (text.indexOf('*') == text.length() - 1);\n  }\n\n","sourceOld":"  public WildcardQuery(Term term) {\n    super(term); //will be removed in 3.0\n    this.term = term;\n    this.termContainsWildcard = (term.text().indexOf('*') != -1) || (term.text().indexOf('?') != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322d95cfb0c59ace7533e19e5cec7f359ce6d6d3","date":1255442836,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","sourceNew":"  public WildcardQuery(Term term) {\n    this.term = term;\n    String text = term.text();\n    this.termContainsWildcard = (text.indexOf('*') != -1)\n        || (text.indexOf('?') != -1);\n    this.termIsPrefix = termContainsWildcard \n        && (text.indexOf('?') == -1) \n        && (text.indexOf('*') == text.length() - 1);\n  }\n\n","sourceOld":"  public WildcardQuery(Term term) {\n    super(term); //will be removed in 3.0\n    this.term = term;\n    String text = term.text();\n    this.termContainsWildcard = (text.indexOf('*') != -1)\n        || (text.indexOf('?') != -1);\n    this.termIsPrefix = termContainsWildcard \n        && (text.indexOf('?') == -1) \n        && (text.indexOf('*') == text.length() - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","pathOld":"src/java/org/apache/lucene/search/WildcardQuery#WildcardQuery(Term).mjava","sourceNew":"  public WildcardQuery(Term term) {\n    this.term = term;\n    String text = term.text();\n    this.termContainsWildcard = (text.indexOf('*') != -1)\n        || (text.indexOf('?') != -1);\n    this.termIsPrefix = termContainsWildcard \n        && (text.indexOf('?') == -1) \n        && (text.indexOf('*') == text.length() - 1);\n  }\n\n","sourceOld":"  public WildcardQuery(Term term) {\n    this.term = term;\n    String text = term.text();\n    this.termContainsWildcard = (text.indexOf('*') != -1)\n        || (text.indexOf('?') != -1);\n    this.termIsPrefix = termContainsWildcard \n        && (text.indexOf('?') == -1) \n        && (text.indexOf('*') == text.length() - 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58d0a32bc578c175fa42d65d95f21290d3473d84":["918dc6e0012887379516499555f2c1660a6418eb"],"918dc6e0012887379516499555f2c1660a6418eb":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"322d95cfb0c59ace7533e19e5cec7f359ce6d6d3":["105155c00cbd8195407715ef8d1e5bc0189f04c0"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"105155c00cbd8195407715ef8d1e5bc0189f04c0":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["322d95cfb0c59ace7533e19e5cec7f359ce6d6d3"]},"commit2Childs":{"58d0a32bc578c175fa42d65d95f21290d3473d84":["105155c00cbd8195407715ef8d1e5bc0189f04c0"],"918dc6e0012887379516499555f2c1660a6418eb":["58d0a32bc578c175fa42d65d95f21290d3473d84"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"322d95cfb0c59ace7533e19e5cec7f359ce6d6d3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["918dc6e0012887379516499555f2c1660a6418eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"105155c00cbd8195407715ef8d1e5bc0189f04c0":["322d95cfb0c59ace7533e19e5cec7f359ce6d6d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}