{"path":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","commits":[{"id":"cee263b0163fa111cfda384934079baae77fccac","date":1382523980,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"/dev/null","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<DocRouter.Range>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["344b0840364d990b29b97467bfcc766ff8325d11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<DocRouter.Range>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrServer.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":["cee263b0163fa111cfda384934079baae77fccac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getSlice(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ShardSplitTest#incompleteOrOverlappingCustomRangeTest().mjava","sourceNew":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","sourceOld":"  private void incompleteOrOverlappingCustomRangeTest() throws Exception  {\n    ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n    final DocRouter router = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getRouter();\n    Slice shard1 = clusterState.getCollection(AbstractDistribZkTestBase.DEFAULT_COLLECTION).getSlice(SHARD1);\n    DocRouter.Range shard1Range = shard1.getRange() != null ? shard1.getRange() : router.fullRange();\n\n    List<DocRouter.Range> subRanges = new ArrayList<>();\n    List<DocRouter.Range> ranges = router.partitionRange(4, shard1Range);\n\n    // test with only one range\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with just one custom hash range should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with ranges with a hole in between them\n    subRanges.add(ranges.get(3)); // order shouldn't matter\n    subRanges.add(ranges.get(0));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with missing hashes in between given ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n\n    // test with overlapping ranges\n    subRanges.add(ranges.get(0));\n    subRanges.add(ranges.get(1));\n    subRanges.add(ranges.get(2));\n    subRanges.add(new DocRouter.Range(ranges.get(3).min - 15, ranges.get(3).max));\n    try {\n      splitShard(AbstractDistribZkTestBase.DEFAULT_COLLECTION, SHARD1, subRanges, null);\n      fail(\"Shard splitting with overlapping ranges should not succeed\");\n    } catch (HttpSolrClient.RemoteSolrException e) {\n      log.info(\"Expected exception:\", e);\n    }\n    subRanges.clear();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cee263b0163fa111cfda384934079baae77fccac"],"b94236357aaa22b76c10629851fe4e376e0cea82":["344b0840364d990b29b97467bfcc766ff8325d11","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["bafca15d8e408346a67f4282ad1143b88023893b","344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["344b0840364d990b29b97467bfcc766ff8325d11"],"bafca15d8e408346a67f4282ad1143b88023893b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cee263b0163fa111cfda384934079baae77fccac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["bafca15d8e408346a67f4282ad1143b88023893b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"344b0840364d990b29b97467bfcc766ff8325d11":["b94236357aaa22b76c10629851fe4e376e0cea82","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cee263b0163fa111cfda384934079baae77fccac"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cee263b0163fa111cfda384934079baae77fccac":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bafca15d8e408346a67f4282ad1143b88023893b":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","344b0840364d990b29b97467bfcc766ff8325d11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}