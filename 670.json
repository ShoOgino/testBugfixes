{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/PowerEvaluatorTest#powTwoFieldsWithValues().mjava","commits":[{"id":"6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4","date":1491098284,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/PowerEvaluatorTest#powTwoFieldsWithValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void powTwoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"pow(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", 2);\n    values.put(\"b\", 5);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Number);\n    Assert.assertEquals(BigDecimal.valueOf(Math.pow(2, 5)), BigDecimal.valueOf(result instanceof Long ? (long)result : (double)result));\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Number);\n    Assert.assertEquals(Math.pow(1.1, 2), result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Number);\n    Assert.assertEquals(Math.pow(1.1, 2.1), result);\n    \n    values.clear();\n    values.put(\"a\", -1.1);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(Double.isNaN((double)result));\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", -2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Number);\n    Assert.assertEquals(Math.pow(1.1, -2.1), result);\n    \n    values.clear();\n    values.put(\"a\", -1.1);\n    values.put(\"b\", -2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(Double.isNaN((double)result));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d97e737ece4381771c200f1c5030a5a167c09977","date":1491219821,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/eval/PowerEvaluatorTest#powTwoFieldsWithValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void powTwoFieldsWithValues() throws Exception{\n    StreamEvaluator evaluator = factory.constructEvaluator(\"pow(a,b)\");\n    Object result;\n    \n    values.clear();\n    values.put(\"a\", 2);\n    values.put(\"b\", 5);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Number);\n    Assert.assertEquals(BigDecimal.valueOf(Math.pow(2, 5)), BigDecimal.valueOf(result instanceof Long ? (long)result : (double)result));\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Number);\n    Assert.assertEquals(Math.pow(1.1, 2), result);\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Number);\n    Assert.assertEquals(Math.pow(1.1, 2.1), result);\n    \n    values.clear();\n    values.put(\"a\", -1.1);\n    values.put(\"b\", 2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(Double.isNaN((double)result));\n    \n    values.clear();\n    values.put(\"a\", 1.1);\n    values.put(\"b\", -2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(result instanceof Number);\n    Assert.assertEquals(Math.pow(1.1, -2.1), result);\n    \n    values.clear();\n    values.put(\"a\", -1.1);\n    values.put(\"b\", -2.1);\n    result = evaluator.evaluate(new Tuple(values));\n    Assert.assertTrue(Double.isNaN((double)result));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d97e737ece4381771c200f1c5030a5a167c09977":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4"]},"commit2Childs":{"6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c73f5c06ecda4281a8efee68d5fb9dafb92c1c4","d97e737ece4381771c200f1c5030a5a167c09977"],"d97e737ece4381771c200f1c5030a5a167c09977":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d97e737ece4381771c200f1c5030a5a167c09977","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}