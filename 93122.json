{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","commits":[{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","sourceOld":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9c5c0e8e826d8fd169840564bcf8606cf81d15b","date":1473715404,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":null,"sourceOld":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":null,"sourceOld":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":null,"sourceOld":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowFuzzyTermsEnum.LinearFuzzyTermsEnum#calculateMaxDistance(int).mjava","sourceNew":null,"sourceOld":"    /**\n     * The max Distance is the maximum Levenshtein distance for the text\n     * compared to some other value that results in score that is\n     * better than the minimum similarity.\n     * @param m the length of the \"other value\"\n     * @return the maximum levenshtein distance that we care about\n     */\n    private int calculateMaxDistance(int m) {\n      return raw ? maxEdits : Math.min(maxEdits, \n          (int)((1-minSimilarity) * (Math.min(text.length, m) + realPrefixLength)));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d374631bb6f5665bd5907a6186a9bb283a315f7d","89424def13674ea17829b41c5883c54ecc31a132"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d374631bb6f5665bd5907a6186a9bb283a315f7d","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"89424def13674ea17829b41c5883c54ecc31a132":["d374631bb6f5665bd5907a6186a9bb283a315f7d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","b9c5c0e8e826d8fd169840564bcf8606cf81d15b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"b9c5c0e8e826d8fd169840564bcf8606cf81d15b":["89424def13674ea17829b41c5883c54ecc31a132"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}