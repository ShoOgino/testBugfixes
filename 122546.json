{"path":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(FSTCompiler.UnCompiledNode[T],long).mjava","commits":[{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(FSTCompiler.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","sourceNew":"  private boolean nodesEqual(FSTCompiler.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final FSTCompiler.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((FSTCompiler.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(FSTCompiler.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","sourceNew":"  private boolean nodesEqual(FSTCompiler.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final FSTCompiler.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((FSTCompiler.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(FSTCompiler.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(FSTCompiler.UnCompiledNode[T],long).mjava","sourceNew":"  private boolean nodesEqual(FSTCompiler.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != FST.Arc.BitTable.countBits(scratchArc, in)) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final FSTCompiler.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((FSTCompiler.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(FSTCompiler.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n\n    // Fail fast for a node with fixed length arcs.\n    if (scratchArc.bytesPerArc() != 0) {\n      if (scratchArc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH) {\n        if (node.numArcs != scratchArc.numArcs()) {\n          return false;\n        }\n      } else {\n        assert scratchArc.nodeFlags() == FST.ARCS_FOR_DIRECT_ADDRESSING;\n        if ((node.arcs[node.numArcs - 1].label - node.arcs[0].label + 1) != scratchArc.numArcs()\n            || node.numArcs != scratchArc.bitTable().countBits()) {\n          return false;\n        }\n      }\n    }\n\n    for(int arcUpto=0; arcUpto < node.numArcs; arcUpto++) {\n      final FSTCompiler.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label() ||\n          !arc.output.equals(scratchArc.output()) ||\n          ((FSTCompiler.CompiledNode) arc.target).node != scratchArc.target() ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput()) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":["71d31a7d5773508492505519bb5230b87c8937ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["06086b5bd0f0d57858f0675becc58edf1f6b7c11","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}