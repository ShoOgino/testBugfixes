{"path":"solr/core/src/test/org/apache/solr/cloud/NodeStateWatcherTest#testCoreAddDelete().mjava","commits":[{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/NodeStateWatcherTest#testCoreAddDelete().mjava","pathOld":"/dev/null","sourceNew":"  public void testCoreAddDelete() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    MockZKController controller = null;\n\n    try {\n      final String NODE_NAME = \"node1\";\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      controller = new MockZKController(server.getZkAddress(), NODE_NAME, \"collection1\");\n\n      final String path = Overseer.STATES_NODE + \"/\" + NODE_NAME;\n      \n      final AtomicInteger callCounter = new AtomicInteger();\n      NodeStateWatcher watcher = new NodeStateWatcher(zkClient, NODE_NAME, path, new NodeStateChangeListener() {\n        \n        @Override\n        public void coreChanged(String nodeName, Set<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n\n        @Override\n        public void coreDeleted(String nodeName, Collection<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n      });\n\n      controller.publishState(\"core1\", \"state1\", 2);\n      waitForCall(1, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", \"state1\", 2);\n      waitForCall(2, callCounter);\n      assertEquals(2, watcher.getCurrentState().size());\n      controller.publishState(\"core1\", null, 2);\n      waitForCall(3, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", null, 2);\n      waitForCall(4, callCounter);\n      assertEquals(0, watcher.getCurrentState().size());\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (controller != null) {\n        controller.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d05854aa6fb36cfe1a6e745776aec397719f6612","date":1330887140,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/NodeStateWatcherTest#testCoreAddDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/NodeStateWatcherTest#testCoreAddDelete().mjava","sourceNew":"  public void testCoreAddDelete() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    MockZKController controller = null;\n\n    try {\n      final String NODE_NAME = \"node1\";\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      controller = new MockZKController(server.getZkAddress(), NODE_NAME, \"collection1\");\n\n      final String path = Overseer.STATES_NODE + \"/\" + NODE_NAME;\n      \n      final AtomicInteger callCounter = new AtomicInteger();\n      NodeStateWatcher watcher = new NodeStateWatcher(zkClient, NODE_NAME, path, new NodeStateChangeListener() {\n        \n        @Override\n        public void coreChanged(String nodeName, Set<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n\n        @Override\n        public void coreDeleted(String nodeName, Collection<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n      });\n\n      controller.publishState(\"core1\", \"state1\", 2);\n      waitForCall(1, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", \"state1\", 2);\n      waitForCall(2, callCounter);\n      assertEquals(2, watcher.getCurrentState().size());\n      controller.publishState(\"core1\", null, 2);\n      waitForCall(3, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", null, 2);\n      waitForCall(4, callCounter);\n      assertEquals(0, watcher.getCurrentState().size());\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (controller != null) {\n        controller.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n\n    }\n\n  }\n\n","sourceOld":"  public void testCoreAddDelete() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    MockZKController controller = null;\n\n    try {\n      final String NODE_NAME = \"node1\";\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      controller = new MockZKController(server.getZkAddress(), NODE_NAME, \"collection1\");\n\n      final String path = Overseer.STATES_NODE + \"/\" + NODE_NAME;\n      \n      final AtomicInteger callCounter = new AtomicInteger();\n      NodeStateWatcher watcher = new NodeStateWatcher(zkClient, NODE_NAME, path, new NodeStateChangeListener() {\n        \n        @Override\n        public void coreChanged(String nodeName, Set<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n\n        @Override\n        public void coreDeleted(String nodeName, Collection<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n      });\n\n      controller.publishState(\"core1\", \"state1\", 2);\n      waitForCall(1, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", \"state1\", 2);\n      waitForCall(2, callCounter);\n      assertEquals(2, watcher.getCurrentState().size());\n      controller.publishState(\"core1\", null, 2);\n      waitForCall(3, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", null, 2);\n      waitForCall(4, callCounter);\n      assertEquals(0, watcher.getCurrentState().size());\n    } finally {\n\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (controller != null) {\n        controller.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/NodeStateWatcherTest#testCoreAddDelete().mjava","pathOld":"/dev/null","sourceNew":"  public void testCoreAddDelete() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    MockZKController controller = null;\n\n    try {\n      final String NODE_NAME = \"node1\";\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      controller = new MockZKController(server.getZkAddress(), NODE_NAME, \"collection1\");\n\n      final String path = Overseer.STATES_NODE + \"/\" + NODE_NAME;\n      \n      final AtomicInteger callCounter = new AtomicInteger();\n      NodeStateWatcher watcher = new NodeStateWatcher(zkClient, NODE_NAME, path, new NodeStateChangeListener() {\n        \n        @Override\n        public void coreChanged(String nodeName, Set<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n\n        @Override\n        public void coreDeleted(String nodeName, Collection<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n      });\n\n      controller.publishState(\"core1\", \"state1\", 2);\n      waitForCall(1, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", \"state1\", 2);\n      waitForCall(2, callCounter);\n      assertEquals(2, watcher.getCurrentState().size());\n      controller.publishState(\"core1\", null, 2);\n      waitForCall(3, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", null, 2);\n      waitForCall(4, callCounter);\n      assertEquals(0, watcher.getCurrentState().size());\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (controller != null) {\n        controller.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/NodeStateWatcherTest#testCoreAddDelete().mjava","sourceNew":null,"sourceOld":"  public void testCoreAddDelete() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n    ZkStateReader reader = null;\n    SolrZkClient overseerClient = null;\n    MockZKController controller = null;\n\n    try {\n      final String NODE_NAME = \"node1\";\n      server.run();\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n      zkClient.makePath(\"/live_nodes\", true);\n\n      System.setProperty(ZkStateReader.NUM_SHARDS_PROP, \"2\");\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      controller = new MockZKController(server.getZkAddress(), NODE_NAME, \"collection1\");\n\n      final String path = Overseer.STATES_NODE + \"/\" + NODE_NAME;\n      \n      final AtomicInteger callCounter = new AtomicInteger();\n      NodeStateWatcher watcher = new NodeStateWatcher(zkClient, NODE_NAME, path, new NodeStateChangeListener() {\n        \n        @Override\n        public void coreChanged(String nodeName, Set<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n\n        @Override\n        public void coreDeleted(String nodeName, Collection<CoreState> states)\n            throws KeeperException, InterruptedException {\n          callCounter.incrementAndGet();\n        }\n      });\n\n      controller.publishState(\"core1\", \"state1\", 2);\n      waitForCall(1, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", \"state1\", 2);\n      waitForCall(2, callCounter);\n      assertEquals(2, watcher.getCurrentState().size());\n      controller.publishState(\"core1\", null, 2);\n      waitForCall(3, callCounter);\n      assertEquals(1, watcher.getCurrentState().size());\n      controller.publishState(\"core2\", null, 2);\n      waitForCall(4, callCounter);\n      assertEquals(0, watcher.getCurrentState().size());\n    } finally {\n      System.clearProperty(ZkStateReader.NUM_SHARDS_PROP);\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (controller != null) {\n        controller.close();\n      }\n      if (overseerClient != null) {\n        overseerClient.close();\n      }\n      if (reader != null) {\n        reader.close();\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d05854aa6fb36cfe1a6e745776aec397719f6612"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["d05854aa6fb36cfe1a6e745776aec397719f6612"],"d05854aa6fb36cfe1a6e745776aec397719f6612":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d05854aa6fb36cfe1a6e745776aec397719f6612":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["d05854aa6fb36cfe1a6e745776aec397719f6612"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}