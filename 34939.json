{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","commits":[{"id":"33d0ed80b7b47e34ad3ff033a77544563aba3085","date":1341244632,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getCloudState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      return deleteCollection(zkStateReader.getCloudState(), message);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8512200aed2724abd80dbeb686d3412d537b7d8a","date":1342139754,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getCloudState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","sourceOld":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getCloudState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      return deleteCollection(zkStateReader.getCloudState(), message);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"/dev/null","sourceNew":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getCloudState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getCloudState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","sourceOld":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getCloudState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      return deleteCollection(zkStateReader.getCloudState(), message);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getClusterState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","sourceOld":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getCloudState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getClusterState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","sourceOld":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getCloudState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getClusterState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","sourceOld":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getCloudState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getCloudState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a57adc9bfabbc207ed17740dd86e0a2401ea385","date":1355507623,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getClusterState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","sourceOld":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getClusterState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getClusterState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","sourceOld":"  private boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getClusterState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c986b1ea9768aff3c903f05a2c85b7b672b5c225","date":1359126891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknow the operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (SolrException ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\");\n      results.add(\"Operation \" + operation + \" cause exception:\", ex);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getClusterState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknow the operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (SolrException ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\");\n      results.add(\"Operation \" + operation + \" cause exception:\", ex);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected boolean processMessage(ZkNodeProps message, String operation) {\n    if (CREATECOLLECTION.equals(operation)) {\n      return createCollection(zkStateReader.getClusterState(), message);\n    } else if (DELETECOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n      params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    } else if (RELOADCOLLECTION.equals(operation)) {\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n      return collectionCmd(zkStateReader.getClusterState(), message, params);\n    }\n    // unknown command, toss it from our queue\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49db68c2dd947ac4c509b59ea4d38468b1f96320","date":1360907219,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknow the operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (SolrException ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\");\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknow the operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (SolrException ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\");\n      results.add(\"Operation \" + operation + \" cause exception:\", ex);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknow the operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (SolrException ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\");\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknow the operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (SolrException ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\");\n      results.add(\"Operation \" + operation + \" cause exception:\", ex);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cfa38e36fa296bb93d77df7d5556257dffa4535","date":1362635543,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknow the operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknow the operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (SolrException ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\");\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe999fc2d95d6fea71f960bf9556858387ba21f5","date":1363294860,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknow the operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de051a65606160ec06ecd38df9dd6905e4b18b6d","date":1363626222,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c4e1105d2401d7a5be8dda5b782acb68313542a","date":1364006441,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n      int failed = 0;\n      ShardResponse srsp;\n      \n      do {\n        srsp = shardHandler.takeCompletedIncludingErrors();\n        if (srsp != null) {\n          Throwable e = srsp.getException();\n          if (e != null) {\n            failed++;\n            log.error(\"Error talking to shard: \" + srsp.getShard(), e);\n            results.add(srsp.getShard(), e);\n          } else {\n            results.add(srsp.getShard(), srsp.getSolrResponse().getResponse());\n          }\n        }\n      } while (srsp != null);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0beaed456aa3358e5e4a99ea2aea994ef6c81de3","date":1365434191,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"587bce86f07b072818f585d0fd32bb3fc7a1c647","date":1366063632,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n        \n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n            Overseer.REMOVECOLLECTION, \"name\", message.getStr(\"name\"));\n          Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(m));\n          \n        // wait for a while until we don't see the collection\n        long now = System.currentTimeMillis();\n        long timeout = now + 30000;\n        boolean removed = false;\n        while (System.currentTimeMillis() < timeout) {\n          Thread.sleep(100);\n          removed = !zkStateReader.getClusterState().getCollections().contains(message.getStr(\"name\"));\n          if (removed) {\n            Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n            break;\n          }\n        }\n        if (!removed) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully remove collection: \" + message.getStr(\"name\"));\n        }\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a44e1f82dd00d77140a06c6abf2c87d60d57a64","date":1366478185,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n        \n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n            Overseer.REMOVECOLLECTION, \"name\", message.getStr(\"name\"));\n          Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(m));\n          \n        // wait for a while until we don't see the collection\n        long now = System.currentTimeMillis();\n        long timeout = now + 30000;\n        boolean removed = false;\n        while (System.currentTimeMillis() < timeout) {\n          Thread.sleep(100);\n          removed = !zkStateReader.getClusterState().getCollections().contains(message.getStr(\"name\"));\n          if (removed) {\n            Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n            break;\n          }\n        }\n        if (!removed) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully remove collection: \" + message.getStr(\"name\"));\n        }\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n        \n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n            Overseer.REMOVECOLLECTION, \"name\", message.getStr(\"name\"));\n          Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(m));\n          \n        // wait for a while until we don't see the collection\n        long now = System.currentTimeMillis();\n        long timeout = now + 30000;\n        boolean removed = false;\n        while (System.currentTimeMillis() < timeout) {\n          Thread.sleep(100);\n          removed = !zkStateReader.getClusterState().getCollections().contains(message.getStr(\"name\"));\n          if (removed) {\n            Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n            break;\n          }\n        }\n        if (!removed) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully remove collection: \" + message.getStr(\"name\"));\n        }\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception ex) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", ex);\n      results.add(\"Operation \" + operation + \" caused exception:\", ex);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", ex.getMessage());\n      nl.add(\"rspCode\", ex instanceof SolrException ? ((SolrException)ex).code() : -1);\n      results.add(\"exception\", nl);\n    } finally {\n      return new OverseerSolrResponse(results);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df3539da245010a5d5ef132079eaa0542e7f7209","date":1366512125,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n        \n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n            Overseer.REMOVECOLLECTION, \"name\", message.getStr(\"name\"));\n          Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(m));\n          \n        // wait for a while until we don't see the collection\n        long now = System.currentTimeMillis();\n        long timeout = now + 30000;\n        boolean removed = false;\n        while (System.currentTimeMillis() < timeout) {\n          Thread.sleep(100);\n          removed = !zkStateReader.getClusterState().getCollections().contains(message.getStr(\"name\"));\n          if (removed) {\n            Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n            break;\n          }\n        }\n        if (!removed) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully remove collection: \" + message.getStr(\"name\"));\n        }\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n        \n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n            Overseer.REMOVECOLLECTION, \"name\", message.getStr(\"name\"));\n          Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(m));\n          \n        // wait for a while until we don't see the collection\n        long now = System.currentTimeMillis();\n        long timeout = now + 30000;\n        boolean removed = false;\n        while (System.currentTimeMillis() < timeout) {\n          Thread.sleep(100);\n          removed = !zkStateReader.getClusterState().getCollections().contains(message.getStr(\"name\"));\n          if (removed) {\n            Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n            break;\n          }\n        }\n        if (!removed) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully remove collection: \" + message.getStr(\"name\"));\n        }\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n        \n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n            Overseer.REMOVECOLLECTION, \"name\", message.getStr(\"name\"));\n          Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(m));\n          \n        // wait for a while until we don't see the collection\n        long now = System.currentTimeMillis();\n        long timeout = now + 30000;\n        boolean removed = false;\n        while (System.currentTimeMillis() < timeout) {\n          Thread.sleep(100);\n          removed = !zkStateReader.getClusterState().getCollections().contains(message.getStr(\"name\"));\n          if (removed) {\n            Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n            break;\n          }\n        }\n        if (!removed) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully remove collection: \" + message.getStr(\"name\"));\n        }\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.UNLOAD.toString());\n        params.set(CoreAdminParams.DELETE_INSTANCE_DIR, true);\n        params.set(CoreAdminParams.DELETE_DATA_DIR, true);\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, null);\n        \n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n            Overseer.REMOVECOLLECTION, \"name\", message.getStr(\"name\"));\n          Overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(m));\n          \n        // wait for a while until we don't see the collection\n        long now = System.currentTimeMillis();\n        long timeout = now + 30000;\n        boolean removed = false;\n        while (System.currentTimeMillis() < timeout) {\n          Thread.sleep(100);\n          removed = !zkStateReader.getClusterState().getCollections().contains(message.getStr(\"name\"));\n          if (removed) {\n            Thread.sleep(100); // just a bit of time so it's more likely other readers see on return\n            break;\n          }\n        }\n        if (!removed) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not fully remove collection: \" + message.getStr(\"name\"));\n        }\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    \n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"40dce2b6d4360eb09fa16fb6c40a18b25507ed73","date":1383035822,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da888af1ab894358122a22229051215f58cf4d54","date":1384408702,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Throwable t) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", t);\n      results.add(\"Operation \" + operation + \" caused exception:\", t);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", t.getMessage());\n      nl.add(\"rspCode\", t instanceof SolrException ? ((SolrException)t).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":["3a44e1f82dd00d77140a06c6abf2c87d60d57a64"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44de42d869f7d8e5235d43c4ad9a99f520363a2f","date":1389871557,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.toString().toLowerCase().equals(operation) || ADDROLE.toString().toLowerCase().equals(operation) ){\n        processRoleCommand(message, operation);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf3dec259855047447dd4d8b00a92ac220a476d1","date":1389889474,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.toString().toLowerCase(Locale.ROOT).equals(operation) || ADDROLE.toString().toLowerCase(Locale.ROOT).equals(operation) ){\n        processRoleCommand(message, operation);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.toString().toLowerCase().equals(operation) || ADDROLE.toString().toLowerCase().equals(operation) ){\n        processRoleCommand(message, operation);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab88842367a77ce26aedb47e9ea666beea01cf9","date":1391433372,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(CollectionParams.CollectionAction.CLUSTERPROP.toString().equalsIgnoreCase(operation)){\n        handleProp(message,results);\n      } else if(REMOVEROLE.toString().toLowerCase(Locale.ROOT).equals(operation) || ADDROLE.toString().toLowerCase(Locale.ROOT).equals(operation) ){\n        processRoleCommand(message, operation);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.toString().toLowerCase(Locale.ROOT).equals(operation) || ADDROLE.toString().toLowerCase(Locale.ROOT).equals(operation) ){\n        processRoleCommand(message, operation);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8497bb4f9de61b5520423bd9af88ea11a6e109e7","date":1393245090,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(CollectionParams.CollectionAction.CLUSTERPROP.toString().equalsIgnoreCase(operation)){\n        handleProp(message,results);\n      } else if(REMOVEROLE.toString().toLowerCase(Locale.ROOT).equals(operation) || ADDROLE.toString().toLowerCase(Locale.ROOT).equals(operation) ){\n        processRoleCommand(message, operation);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(CollectionParams.CollectionAction.CLUSTERPROP.toString().equalsIgnoreCase(operation)){\n        handleProp(message,results);\n      } else if(REMOVEROLE.toString().toLowerCase(Locale.ROOT).equals(operation) || ADDROLE.toString().toLowerCase(Locale.ROOT).equals(operation) ){\n        processRoleCommand(message, operation);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (REQUESTSTATUS.equals(operation)) {\n        requestStatus(message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f45f67a018421da088ea39274f23ad5d339b97d","date":1395559348,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (REQUESTSTATUS.equals(operation)) {\n        requestStatus(message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (REQUESTSTATUS.equals(operation)) {\n        requestStatus(message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78ae724e55b07e7d158110151c0a7247cd54b460","date":1396011287,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (REQUESTSTATUS.equals(operation)) {\n        requestStatus(message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (REQUESTSTATUS.equals(operation)) {\n        requestStatus(message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb7299fddbea34e76b950854f150f14b895ba68","date":1396327974,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (REQUESTSTATUS.equals(operation)) {\n        requestStatus(message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b15576cafd8b5d06857055c28f26912321937e3","date":1396452121,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (REQUESTSTATUS.equals(operation)) {\n        requestStatus(message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3ebc36c5479f702461eb39aae47dfa1e0a4962a","date":1396462206,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (REQUESTSTATUS.equals(operation)) {\n        requestStatus(message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (REQUESTSTATUS.equals(operation)) {\n        requestStatus(message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      }\n\n      else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n        getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n        getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n         getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    } \n    \n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      if (CREATECOLLECTION.equals(operation)) {\n        createCollection(zkStateReader.getClusterState(), message, results);\n      } else if (DELETECOLLECTION.equals(operation)) {\n        deleteCollection(message, results);\n      } else if (RELOADCOLLECTION.equals(operation)) {\n        ModifiableSolrParams params = new ModifiableSolrParams();\n        params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n        collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n      } else if (CREATEALIAS.equals(operation)) {\n        createAlias(zkStateReader.getAliases(), message);\n      } else if (DELETEALIAS.equals(operation)) {\n        deleteAlias(zkStateReader.getAliases(), message);\n      } else if (SPLITSHARD.equals(operation))  {\n        splitShard(zkStateReader.getClusterState(), message, results);\n      } else if (CREATESHARD.equals(operation))  {\n        createShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETESHARD.equals(operation)) {\n        deleteShard(zkStateReader.getClusterState(), message, results);\n      } else if (DELETEREPLICA.equals(operation)) {\n        deleteReplica(zkStateReader.getClusterState(), message, results);\n      } else if (MIGRATE.equals(operation)) {\n        migrate(zkStateReader.getClusterState(), message, results);\n      } else if(REMOVEROLE.isEqual(operation) || ADDROLE.isEqual(operation) ){\n        processRoleCommand(message, operation);\n      } else if (ADDREPLICA.isEqual(operation))  {\n        addReplica(zkStateReader.getClusterState(), message, results);\n      } else if (OVERSEERSTATUS.isEqual(operation)) {\n        getOverseerStatus(message, results);\n      } else if(LIST.isEqual(operation)) {\n        listCollections(zkStateReader.getClusterState(), results);\n      } else if (CLUSTERSTATUS.isEqual(operation)) {\n        getClusterStatus(zkStateReader.getClusterState(), message, results);\n      } else {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n            + operation);\n      }\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d10bf33b2d7004bbd1c9db4fd73fd7d0a0c9dbf9","date":1411488701,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      SolrException.log(log, \"Collection \" + operation + \" of \" + operation\n          + \" failed\", e);\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64707d25b6352cf02909d3916038a3b3cec7f0a8","date":1412782122,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESLICEUNIQUE:\n            balanceProperty(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESLICEUNIQUE:\n            balanceProperty(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESLICEUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processAssignLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESLICEUNIQUE:\n            balanceProperty(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":["1bd110770d1b52ca7d7201410a102c468c540967"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESLICEUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processAssignLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESLICEUNIQUE:\n            balanceProperty(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfb61c9baefa8681e40fca3c803f61bf485a9d8d","date":1414979559,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processAssignLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESLICEUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processAssignLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bd110770d1b52ca7d7201410a102c468c540967","date":1419034668,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n//          case REBALANCELEADERS:\n//            processAssignLeaders(message);\n//            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processAssignLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd45c40db7386b20de53b81216bcf574f15be40","date":1419458105,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processAssignLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n//          case REBALANCELEADERS:\n//            processAssignLeaders(message);\n//            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processRebalanceLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processAssignLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"479f20dae0180aeb69c61839e910a2407645c4a6","date":1423085987,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processRebalanceLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case LIST:\n            listCollections(zkStateReader.getClusterState(), results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processRebalanceLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2686a7d33e6cba9dd5d997d5366c199de8f91a00","date":1424193043,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processRebalanceLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processRebalanceLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02f50c561548cfceea8b9255e35f632714c274b8","date":1427543237,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processRebalanceLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        // back-compat because we used strings different than enum values before SOLR-6115\n        switch (operation) {\n          case CREATECOLLECTION:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETECOLLECTION:\n            deleteCollection(message, results);\n            break;\n          case RELOADCOLLECTION:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      } else  {\n        switch (action) {\n          case CREATE:\n            createCollection(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETE:\n            deleteCollection(message, results);\n            break;\n          case RELOAD:\n            ModifiableSolrParams params = new ModifiableSolrParams();\n            params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n            collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n            break;\n          case CREATEALIAS:\n            createAlias(zkStateReader.getAliases(), message);\n            break;\n          case DELETEALIAS:\n            deleteAlias(zkStateReader.getAliases(), message);\n            break;\n          case SPLITSHARD:\n            splitShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETESHARD:\n            deleteShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case CREATESHARD:\n            createShard(zkStateReader.getClusterState(), message, results);\n            break;\n          case DELETEREPLICA:\n            deleteReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case MIGRATE:\n            migrate(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDROLE:\n            processRoleCommand(message, operation);\n            break;\n          case REMOVEROLE:\n            processRoleCommand(message, operation);\n            break;\n          case ADDREPLICA:\n            addReplica(zkStateReader.getClusterState(), message, results);\n            break;\n          case OVERSEERSTATUS:\n            getOverseerStatus(message, results);\n            break;\n          case CLUSTERSTATUS:\n            getClusterStatus(zkStateReader.getClusterState(), message, results);\n            break;\n          case ADDREPLICAPROP:\n            processReplicaAddPropertyCommand(message);\n            break;\n          case DELETEREPLICAPROP:\n            processReplicaDeletePropertyCommand(message);\n            break;\n          case BALANCESHARDUNIQUE:\n            balanceProperty(message);\n            break;\n          case REBALANCELEADERS:\n            processRebalanceLeaders(message);\n            break;\n          default:\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n                + operation);\n        }\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(\"name\");\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, ZkStateReader.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8","date":1431966199,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85f6ce3af19fc13abaaade6799a6e8c192e9b8e2","date":1433415299,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS:\n          getClusterStatus(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(ZkStateReader.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState(true);\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processMessage(ZkNodeProps,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#processMessage(ZkNodeProps,String).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  protected SolrResponse processMessage(ZkNodeProps message, String operation) {\n    log.warn(\"OverseerCollectionProcessor.processMessage : \"+ operation + \" , \"+ message.toString());\n\n    NamedList results = new NamedList();\n    try {\n      // force update the cluster state\n      zkStateReader.updateClusterState();\n      CollectionParams.CollectionAction action = CollectionParams.CollectionAction.get(operation);\n      if (action == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\" + operation);\n      }\n      switch (action) {\n        case CREATE:\n          createCollection(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETE:\n          deleteCollection(message, results);\n          break;\n        case RELOAD:\n          ModifiableSolrParams params = new ModifiableSolrParams();\n          params.set(CoreAdminParams.ACTION, CoreAdminAction.RELOAD.toString());\n          collectionCmd(zkStateReader.getClusterState(), message, params, results, Replica.State.ACTIVE);\n          break;\n        case CREATEALIAS:\n          createAlias(zkStateReader.getAliases(), message);\n          break;\n        case DELETEALIAS:\n          deleteAlias(zkStateReader.getAliases(), message);\n          break;\n        case SPLITSHARD:\n          splitShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETESHARD:\n          deleteShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case CREATESHARD:\n          createShard(zkStateReader.getClusterState(), message, results);\n          break;\n        case DELETEREPLICA:\n          deleteReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case MIGRATE:\n          migrate(zkStateReader.getClusterState(), message, results);\n          break;\n        case ADDROLE:\n          processRoleCommand(message, operation);\n          break;\n        case REMOVEROLE:\n          processRoleCommand(message, operation);\n          break;\n        case ADDREPLICA:\n          addReplica(zkStateReader.getClusterState(), message, results);\n          break;\n        case OVERSEERSTATUS:\n          getOverseerStatus(message, results);\n          break;\n        case CLUSTERSTATUS://TODO . deprecated. OCP does not need to do it .remove in a later release\n          new ClusterStatus(zkStateReader, message).getClusterStatus(results);\n          break;\n        case ADDREPLICAPROP:\n          processReplicaAddPropertyCommand(message);\n          break;\n        case DELETEREPLICAPROP:\n          processReplicaDeletePropertyCommand(message);\n          break;\n        case BALANCESHARDUNIQUE:\n          balanceProperty(message);\n          break;\n        case REBALANCELEADERS:\n          processRebalanceLeaders(message);\n          break;\n        case MODIFYCOLLECTION:\n          overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(message));\n          break;\n        default:\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Unknown operation:\"\n              + operation);\n      }\n    } catch (Exception e) {\n      String collName = message.getStr(\"collection\");\n      if (collName == null) collName = message.getStr(NAME);\n\n      if (collName == null) {\n        SolrException.log(log, \"Operation \" + operation + \" failed\", e);\n      } else  {\n        SolrException.log(log, \"Collection: \" + collName + \" operation: \" + operation\n            + \" failed\", e);\n      }\n\n      results.add(\"Operation \" + operation + \" caused exception:\", e);\n      SimpleOrderedMap nl = new SimpleOrderedMap();\n      nl.add(\"msg\", e.getMessage());\n      nl.add(\"rspCode\", e instanceof SolrException ? ((SolrException)e).code() : -1);\n      results.add(\"exception\", nl);\n    }\n    return new OverseerSolrResponse(results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fd45c40db7386b20de53b81216bcf574f15be40":["1bd110770d1b52ca7d7201410a102c468c540967"],"d10bf33b2d7004bbd1c9db4fd73fd7d0a0c9dbf9":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["df3539da245010a5d5ef132079eaa0542e7f7209","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["49db68c2dd947ac4c509b59ea4d38468b1f96320"],"479f20dae0180aeb69c61839e910a2407645c4a6":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"3a44e1f82dd00d77140a06c6abf2c87d60d57a64":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"1bd110770d1b52ca7d7201410a102c468c540967":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["d10bf33b2d7004bbd1c9db4fd73fd7d0a0c9dbf9"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["6f26f74e4969851a019d28f10315cb1c77786f22"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"5eb7299fddbea34e76b950854f150f14b895ba68":["78ae724e55b07e7d158110151c0a7247cd54b460"],"aba371508186796cc6151d8223a5b4e16d02e26e":["33d0ed80b7b47e34ad3ff033a77544563aba3085","8512200aed2724abd80dbeb686d3412d537b7d8a"],"3b41f996b22bd5518650f897d050088ff808ec03":["c986b1ea9768aff3c903f05a2c85b7b672b5c225","49db68c2dd947ac4c509b59ea4d38468b1f96320"],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"6f26f74e4969851a019d28f10315cb1c77786f22":["a3ebc36c5479f702461eb39aae47dfa1e0a4962a"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["da888af1ab894358122a22229051215f58cf4d54"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["1fd45c40db7386b20de53b81216bcf574f15be40"],"df3539da245010a5d5ef132079eaa0542e7f7209":["3a44e1f82dd00d77140a06c6abf2c87d60d57a64"],"fab88842367a77ce26aedb47e9ea666beea01cf9":["bf3dec259855047447dd4d8b00a92ac220a476d1"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"02f50c561548cfceea8b9255e35f632714c274b8":["2686a7d33e6cba9dd5d997d5366c199de8f91a00"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["d10bf33b2d7004bbd1c9db4fd73fd7d0a0c9dbf9","dc2bafa00000be70227a04c29e3f885ff41e531d"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["64707d25b6352cf02909d3916038a3b3cec7f0a8"],"a3ebc36c5479f702461eb39aae47dfa1e0a4962a":["5b15576cafd8b5d06857055c28f26912321937e3"],"da888af1ab894358122a22229051215f58cf4d54":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"de051a65606160ec06ecd38df9dd6905e4b18b6d":["fe999fc2d95d6fea71f960bf9556858387ba21f5"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["1cfa38e36fa296bb93d77df7d5556257dffa4535"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8512200aed2724abd80dbeb686d3412d537b7d8a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","3f767f8c99eaedb984df754fe61f21c5de260f94"],"5c4e1105d2401d7a5be8dda5b782acb68313542a":["de051a65606160ec06ecd38df9dd6905e4b18b6d"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["fab88842367a77ce26aedb47e9ea666beea01cf9"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["df3539da245010a5d5ef132079eaa0542e7f7209"],"85f6ce3af19fc13abaaade6799a6e8c192e9b8e2":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3f767f8c99eaedb984df754fe61f21c5de260f94","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"bf3dec259855047447dd4d8b00a92ac220a476d1":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"9f45f67a018421da088ea39274f23ad5d339b97d":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"b7605579001505896d48b07160075a5c8b8e128e":["a3ebc36c5479f702461eb39aae47dfa1e0a4962a","6f26f74e4969851a019d28f10315cb1c77786f22"],"2686a7d33e6cba9dd5d997d5366c199de8f91a00":["479f20dae0180aeb69c61839e910a2407645c4a6"],"78ae724e55b07e7d158110151c0a7247cd54b460":["9f45f67a018421da088ea39274f23ad5d339b97d"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["fab88842367a77ce26aedb47e9ea666beea01cf9","8497bb4f9de61b5520423bd9af88ea11a6e109e7"],"49db68c2dd947ac4c509b59ea4d38468b1f96320":["c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["2686a7d33e6cba9dd5d997d5366c199de8f91a00","02f50c561548cfceea8b9255e35f632714c274b8"],"5b15576cafd8b5d06857055c28f26912321937e3":["5eb7299fddbea34e76b950854f150f14b895ba68"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["02f50c561548cfceea8b9255e35f632714c274b8"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["33d0ed80b7b47e34ad3ff033a77544563aba3085"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5eb2511ababf862ea11e10761c70ee560cd84510":["9f45f67a018421da088ea39274f23ad5d339b97d","a3ebc36c5479f702461eb39aae47dfa1e0a4962a"],"55980207f1977bd1463465de1659b821347e2fa8":["d9a47902d6207303f5ed3e7aaca62ca33433af66","64707d25b6352cf02909d3916038a3b3cec7f0a8"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1eeda7e62e149f90eee8895af874c74efa7d4852"],"587bce86f07b072818f585d0fd32bb3fc7a1c647":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["85f6ce3af19fc13abaaade6799a6e8c192e9b8e2"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["5c4e1105d2401d7a5be8dda5b782acb68313542a"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8512200aed2724abd80dbeb686d3412d537b7d8a"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["55980207f1977bd1463465de1659b821347e2fa8","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"1fd45c40db7386b20de53b81216bcf574f15be40":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"d10bf33b2d7004bbd1c9db4fd73fd7d0a0c9dbf9":["dc2bafa00000be70227a04c29e3f885ff41e531d","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"1cfa38e36fa296bb93d77df7d5556257dffa4535":["fe999fc2d95d6fea71f960bf9556858387ba21f5"],"479f20dae0180aeb69c61839e910a2407645c4a6":["2686a7d33e6cba9dd5d997d5366c199de8f91a00"],"3a44e1f82dd00d77140a06c6abf2c87d60d57a64":["df3539da245010a5d5ef132079eaa0542e7f7209"],"1bd110770d1b52ca7d7201410a102c468c540967":["1fd45c40db7386b20de53b81216bcf574f15be40"],"64707d25b6352cf02909d3916038a3b3cec7f0a8":["5455c7b3fed6c1671990a44c19071cb0488c2c25","55980207f1977bd1463465de1659b821347e2fa8"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["9f45f67a018421da088ea39274f23ad5d339b97d"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"dc2bafa00000be70227a04c29e3f885ff41e531d":["64707d25b6352cf02909d3916038a3b3cec7f0a8","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["d10bf33b2d7004bbd1c9db4fd73fd7d0a0c9dbf9"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"5eb7299fddbea34e76b950854f150f14b895ba68":["5b15576cafd8b5d06857055c28f26912321937e3"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["30c688f7052130cef7bd419c85e3c5be214f7b9e","b7605579001505896d48b07160075a5c8b8e128e"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["44de42d869f7d8e5235d43c4ad9a99f520363a2f"],"df3539da245010a5d5ef132079eaa0542e7f7209":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["479f20dae0180aeb69c61839e910a2407645c4a6"],"33d0ed80b7b47e34ad3ff033a77544563aba3085":["aba371508186796cc6151d8223a5b4e16d02e26e","8512200aed2724abd80dbeb686d3412d537b7d8a"],"fab88842367a77ce26aedb47e9ea666beea01cf9":["8497bb4f9de61b5520423bd9af88ea11a6e109e7","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"02f50c561548cfceea8b9255e35f632714c274b8":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["55980207f1977bd1463465de1659b821347e2fa8"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["cfb61c9baefa8681e40fca3c803f61bf485a9d8d","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"a3ebc36c5479f702461eb39aae47dfa1e0a4962a":["6f26f74e4969851a019d28f10315cb1c77786f22","b7605579001505896d48b07160075a5c8b8e128e","5eb2511ababf862ea11e10761c70ee560cd84510"],"da888af1ab894358122a22229051215f58cf4d54":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"de051a65606160ec06ecd38df9dd6905e4b18b6d":["5c4e1105d2401d7a5be8dda5b782acb68313542a"],"fe999fc2d95d6fea71f960bf9556858387ba21f5":["de051a65606160ec06ecd38df9dd6905e4b18b6d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"5c4e1105d2401d7a5be8dda5b782acb68313542a":["0beaed456aa3358e5e4a99ea2aea994ef6c81de3"],"8497bb4f9de61b5520423bd9af88ea11a6e109e7":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1eeda7e62e149f90eee8895af874c74efa7d4852"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"85f6ce3af19fc13abaaade6799a6e8c192e9b8e2":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cfb61c9baefa8681e40fca3c803f61bf485a9d8d":["1bd110770d1b52ca7d7201410a102c468c540967"],"bf3dec259855047447dd4d8b00a92ac220a476d1":["fab88842367a77ce26aedb47e9ea666beea01cf9"],"9f45f67a018421da088ea39274f23ad5d339b97d":["78ae724e55b07e7d158110151c0a7247cd54b460","5eb2511ababf862ea11e10761c70ee560cd84510"],"b7605579001505896d48b07160075a5c8b8e128e":[],"78ae724e55b07e7d158110151c0a7247cd54b460":["5eb7299fddbea34e76b950854f150f14b895ba68"],"2686a7d33e6cba9dd5d997d5366c199de8f91a00":["02f50c561548cfceea8b9255e35f632714c274b8","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"44de42d869f7d8e5235d43c4ad9a99f520363a2f":["bf3dec259855047447dd4d8b00a92ac220a476d1"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"49db68c2dd947ac4c509b59ea4d38468b1f96320":["1cfa38e36fa296bb93d77df7d5556257dffa4535","3b41f996b22bd5518650f897d050088ff808ec03"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5b15576cafd8b5d06857055c28f26912321937e3":["a3ebc36c5479f702461eb39aae47dfa1e0a4962a"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["dd45d4a2ee01a1932d33eec42f5272c2402da679","3b41f996b22bd5518650f897d050088ff808ec03","49db68c2dd947ac4c509b59ea4d38468b1f96320"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["a219f1dcad1700e84807666bdbd2b573e8de7021","d2638f781be724518ff6c2263d14a48cf6e68017"],"8512200aed2724abd80dbeb686d3412d537b7d8a":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","3f767f8c99eaedb984df754fe61f21c5de260f94"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["85f6ce3af19fc13abaaade6799a6e8c192e9b8e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33d0ed80b7b47e34ad3ff033a77544563aba3085","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"55980207f1977bd1463465de1659b821347e2fa8":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"587bce86f07b072818f585d0fd32bb3fc7a1c647":["3a44e1f82dd00d77140a06c6abf2c87d60d57a64"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"0beaed456aa3358e5e4a99ea2aea994ef6c81de3":["587bce86f07b072818f585d0fd32bb3fc7a1c647"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","8fd5be977c105554c6a7b68afcdbc511439723ab","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["da888af1ab894358122a22229051215f58cf4d54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["dd45d4a2ee01a1932d33eec42f5272c2402da679","3b41f996b22bd5518650f897d050088ff808ec03","d2638f781be724518ff6c2263d14a48cf6e68017","d6f074e73200c07d54f242d3880a8da5a35ff97b","b7605579001505896d48b07160075a5c8b8e128e","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","5eb2511ababf862ea11e10761c70ee560cd84510","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","8fd5be977c105554c6a7b68afcdbc511439723ab","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}