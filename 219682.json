{"path":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":5,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#haversine(double,double,double,double,double).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":"  /**\n   * @param x1     The x coordinate of the first point, in radians\n   * @param y1     The y coordinate of the first point, in radians\n   * @param x2     The x coordinate of the second point, in radians\n   * @param y2     The y coordinate of the second point, in radians\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["15cafceb8478fa94442a7368e682a9d9b61d8d13"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/distance/DistanceUtils#haversine(double,double,double,double,double).mjava","sourceNew":null,"sourceOld":"  /**\n   * @param x1     The x coordinate of the first point\n   * @param y1     The y coordinate of the first point\n   * @param x2     The x coordinate of the second point\n   * @param y2     The y coordinate of the second point\n   * @param radius The radius of the sphere\n   * @return The distance between the two points, as determined by the Haversine formula.\n   * @see org.apache.solr.search.function.distance.HaversineFunction\n   */\n  public static double haversine(double x1, double y1, double x2, double y2, double radius) {\n    double result = 0;\n    //make sure they aren't all the same, as then we can just return 0\n    if ((x1 != x2) || (y1 != y2)) {\n      double diffX = x1 - x2;\n      double diffY = y1 - y2;\n      double hsinX = Math.sin(diffX * 0.5);\n      double hsinY = Math.sin(diffY * 0.5);\n      double h = hsinX * hsinX +\n              (Math.cos(x1) * Math.cos(x2) * hsinY * hsinY);\n      result = (radius * 2 * Math.atan2(Math.sqrt(h), Math.sqrt(1 - h)));\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["1da8d55113b689b06716246649de6f62430f15c0","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1da8d55113b689b06716246649de6f62430f15c0":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}