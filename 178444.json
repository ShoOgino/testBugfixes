{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#read().mjava","commits":[{"id":"3d635d99fef6495f949f7bbac12fd269db070ee5","date":1499965547,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n\n      String plot= stringParams.get(\"type\");\n      StreamEvaluator xvalues = evaluatorParams.get(\"x\");\n      StreamEvaluator yvalues = evaluatorParams.get(\"y\");\n\n      List<Number> y = (List<Number>)yvalues.evaluateOverContext();\n      List<Number> x = null;\n\n      if(xvalues == null) {\n        //x is null so add a sequence\n        x = new ArrayList();\n        for(int i=0; i<y.size(); i++) {\n          x.add(i+1);\n        }\n      } else {\n        x = (List<Number>) xvalues.evaluateOverContext();\n      }\n\n      List<List<Number>> xy = new ArrayList();\n      for(int i=0; i<x.size(); i++) {\n        List<Number> pair = new ArrayList();\n        pair.add(x.get(i));\n        pair.add(y.get(i));\n        xy.add(pair);\n      }\n\n      values.put(\"plot\", plot);\n      values.put(\"data\", xy);\n\n      Tuple tup = new Tuple(values);\n      tup.fieldLabels = fieldLabels;\n      tup.fieldNames = fieldNames;\n      return tup;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60355a16a23c1def910de79fb1fb46300eb0d967","date":1500045189,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n\n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n\n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n\n      List<Number> y = (List<Number>)values.get(\"y\");\n      List<Number> x = (List<Number>)values.get(\"x\");\n\n      if(x == null) {\n        //x is null so add a sequence\n        x = new ArrayList();\n        for(int i=0; i<y.size(); i++) {\n          x.add(i+1);\n        }\n      }\n\n      List<List<Number>> xy = new ArrayList();\n      for(int i=0; i<x.size(); i++) {\n        List<Number> pair = new ArrayList();\n        pair.add(x.get(i));\n        pair.add(y.get(i));\n        xy.add(pair);\n      }\n\n      values.put(\"plot\", values.get(\"type\"));\n      values.put(\"data\", xy);\n\n      Tuple tup = new Tuple(values);\n      tup.fieldLabels = fieldLabels;\n      tup.fieldNames = fieldNames;\n      return tup;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n\n      String plot= stringParams.get(\"type\");\n      StreamEvaluator xvalues = evaluatorParams.get(\"x\");\n      StreamEvaluator yvalues = evaluatorParams.get(\"y\");\n\n      List<Number> y = (List<Number>)yvalues.evaluateOverContext();\n      List<Number> x = null;\n\n      if(xvalues == null) {\n        //x is null so add a sequence\n        x = new ArrayList();\n        for(int i=0; i<y.size(); i++) {\n          x.add(i+1);\n        }\n      } else {\n        x = (List<Number>) xvalues.evaluateOverContext();\n      }\n\n      List<List<Number>> xy = new ArrayList();\n      for(int i=0; i<x.size(); i++) {\n        List<Number> pair = new ArrayList();\n        pair.add(x.get(i));\n        pair.add(y.get(i));\n        xy.add(pair);\n      }\n\n      values.put(\"plot\", plot);\n      values.put(\"data\", xy);\n\n      Tuple tup = new Tuple(values);\n      tup.fieldLabels = fieldLabels;\n      tup.fieldNames = fieldNames;\n      return tup;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aaf90fc29510e72665ac7934f34c3d1c25efad64","date":1500354819,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#read().mjava","pathOld":"/dev/null","sourceNew":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n\n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n\n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n\n      List<Number> y = (List<Number>)values.get(\"y\");\n      List<Number> x = (List<Number>)values.get(\"x\");\n\n      if(x == null) {\n        //x is null so add a sequence\n        x = new ArrayList();\n        for(int i=0; i<y.size(); i++) {\n          x.add(i+1);\n        }\n      }\n\n      List<List<Number>> xy = new ArrayList();\n      for(int i=0; i<x.size(); i++) {\n        List<Number> pair = new ArrayList();\n        pair.add(x.get(i));\n        pair.add(y.get(i));\n        xy.add(pair);\n      }\n\n      values.put(\"plot\", values.get(\"type\"));\n      values.put(\"data\", xy);\n\n      Tuple tup = new Tuple(values);\n      tup.fieldLabels = fieldLabels;\n      tup.fieldNames = fieldNames;\n      return tup;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#read().mjava","sourceNew":"  public Tuple read() throws IOException {\n\n    if (finished) {\n      return Tuple.EOF();\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n\n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n\n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n\n      List<Number> y = (List<Number>)values.get(\"y\");\n      List<Number> x = (List<Number>)values.get(\"x\");\n\n      if(x == null) {\n        //x is null so add a sequence\n        x = new ArrayList();\n        for(int i=0; i<y.size(); i++) {\n          x.add(i+1);\n        }\n      }\n\n      List<List<Number>> xy = new ArrayList();\n      for(int i=0; i<x.size(); i++) {\n        List<Number> pair = new ArrayList();\n        pair.add(x.get(i));\n        pair.add(y.get(i));\n        xy.add(pair);\n      }\n\n      values.put(\"plot\", values.get(\"type\"));\n      values.put(\"data\", xy);\n\n      Tuple tup = new Tuple(values);\n      tup.setFieldLabels(fieldLabels);\n      tup.setFieldNames(fieldNames);\n      return tup;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if(finished) {\n      Map<String,Object> m = new HashMap<>();\n      m.put(\"EOF\", true);\n      return new Tuple(m);\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n\n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n\n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n\n      List<Number> y = (List<Number>)values.get(\"y\");\n      List<Number> x = (List<Number>)values.get(\"x\");\n\n      if(x == null) {\n        //x is null so add a sequence\n        x = new ArrayList();\n        for(int i=0; i<y.size(); i++) {\n          x.add(i+1);\n        }\n      }\n\n      List<List<Number>> xy = new ArrayList();\n      for(int i=0; i<x.size(); i++) {\n        List<Number> pair = new ArrayList();\n        pair.add(x.get(i));\n        pair.add(y.get(i));\n        xy.add(pair);\n      }\n\n      values.put(\"plot\", values.get(\"type\"));\n      values.put(\"data\", xy);\n\n      Tuple tup = new Tuple(values);\n      tup.fieldLabels = fieldLabels;\n      tup.fieldNames = fieldNames;\n      return tup;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#read().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/PlotStream#read().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public Tuple read() throws IOException {\n\n    if (finished) {\n      return Tuple.EOF();\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n\n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n\n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n\n      List<Number> y = (List<Number>)values.get(\"y\");\n      List<Number> x = (List<Number>)values.get(\"x\");\n\n      if(x == null) {\n        //x is null so add a sequence\n        x = new ArrayList<>();\n        for(int i=0; i<y.size(); i++) {\n          x.add(i+1);\n        }\n      }\n\n      List<List<Number>> xy = new ArrayList<>();\n      for(int i=0; i<x.size(); i++) {\n        List<Number> pair = new ArrayList<>();\n        pair.add(x.get(i));\n        pair.add(y.get(i));\n        xy.add(pair);\n      }\n\n      values.put(\"plot\", values.get(\"type\"));\n      values.put(\"data\", xy);\n\n      Tuple tup = new Tuple(values);\n      tup.setFieldLabels(fieldLabels);\n      tup.setFieldNames(fieldNames);\n      return tup;\n    }\n  }\n\n","sourceOld":"  public Tuple read() throws IOException {\n\n    if (finished) {\n      return Tuple.EOF();\n    } else {\n      finished = true;\n      Map<String, Object> values = new HashMap<>();\n\n      // add all string based params\n      // these could come from the context, or they will just be treated as straight strings\n      for(Entry<String,String> param : stringParams.entrySet()){\n        if(streamContext.getLets().containsKey(param.getValue())){\n          values.put(param.getKey(), streamContext.getLets().get(param.getValue()));\n        }\n        else{\n          values.put(param.getKey(), param.getValue());\n        }\n      }\n\n      // add all evaluators\n      for(Entry<String,StreamEvaluator> param : evaluatorParams.entrySet()){\n        values.put(param.getKey(), param.getValue().evaluateOverContext());\n      }\n\n      List<Number> y = (List<Number>)values.get(\"y\");\n      List<Number> x = (List<Number>)values.get(\"x\");\n\n      if(x == null) {\n        //x is null so add a sequence\n        x = new ArrayList();\n        for(int i=0; i<y.size(); i++) {\n          x.add(i+1);\n        }\n      }\n\n      List<List<Number>> xy = new ArrayList();\n      for(int i=0; i<x.size(); i++) {\n        List<Number> pair = new ArrayList();\n        pair.add(x.get(i));\n        pair.add(y.get(i));\n        xy.add(pair);\n      }\n\n      values.put(\"plot\", values.get(\"type\"));\n      values.put(\"data\", xy);\n\n      Tuple tup = new Tuple(values);\n      tup.setFieldLabels(fieldLabels);\n      tup.setFieldNames(fieldNames);\n      return tup;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60355a16a23c1def910de79fb1fb46300eb0d967"],"3d635d99fef6495f949f7bbac12fd269db070ee5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["60355a16a23c1def910de79fb1fb46300eb0d967"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"60355a16a23c1def910de79fb1fb46300eb0d967":["3d635d99fef6495f949f7bbac12fd269db070ee5"]},"commit2Childs":{"aaf90fc29510e72665ac7934f34c3d1c25efad64":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aaf90fc29510e72665ac7934f34c3d1c25efad64","3d635d99fef6495f949f7bbac12fd269db070ee5"],"3d635d99fef6495f949f7bbac12fd269db070ee5":["60355a16a23c1def910de79fb1fb46300eb0d967"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"60355a16a23c1def910de79fb1fb46300eb0d967":["aaf90fc29510e72665ac7934f34c3d1c25efad64","804a8d5358fe7b7563b85ee7838714d720b89272"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aaf90fc29510e72665ac7934f34c3d1c25efad64","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}