{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#startTerm().mjava","sourceNew":"  @Override\n  public void startTerm() {\n    docTermStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posTermStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payTermStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docTermStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","sourceOld":"  @Override\n  public void startTerm() {\n    docTermStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posTermStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payTermStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docTermStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#startTerm().mjava","sourceNew":"  @Override\n  public void startTerm() {\n    docTermStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posTermStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payTermStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docTermStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","sourceOld":"  @Override\n  public void startTerm() {\n    docTermStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posTermStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payTermStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docTermStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#startTerm().mjava","sourceNew":"  @Override\n  public void startTerm() {\n    docTermStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posTermStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payTermStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docTermStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","sourceOld":"  @Override\n  public void startTerm() {\n    docTermStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posTermStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payTermStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docTermStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"339d0e916669734510414f62912f1fcf120ecf9d","date":1378483491,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","sourceNew":"  @Override\n  public void startTerm() {\n    docStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","sourceOld":"  @Override\n  public void startTerm() {\n    docTermStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posTermStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payTermStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docTermStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","sourceNew":"  @Override\n  public void startTerm() {\n    docStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","sourceOld":"  @Override\n  public void startTerm() {\n    docTermStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posTermStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payTermStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docTermStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","sourceNew":"  @Override\n  public void startTerm() {\n    docStartFP = docOut.getFilePointer();\n    if (writePositions) {\n      posStartFP = posOut.getFilePointer();\n      if (writePayloads || writeOffsets) {\n        payStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","sourceOld":"  @Override\n  public void startTerm() {\n    docStartFP = docOut.getFilePointer();\n    if (fieldHasPositions) {\n      posStartFP = posOut.getFilePointer();\n      if (fieldHasPayloads || fieldHasOffsets) {\n        payStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","sourceNew":"  @Override\n  public void startTerm() {\n    docStartFP = docOut.getFilePointer();\n    if (writePositions) {\n      posStartFP = posOut.getFilePointer();\n      if (writePayloads || writeOffsets) {\n        payStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","sourceOld":"  @Override\n  public void startTerm() {\n    docStartFP = docOut.getFilePointer();\n    if (writePositions) {\n      posStartFP = posOut.getFilePointer();\n      if (writePayloads || writeOffsets) {\n        payStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#startTerm().mjava","sourceNew":"  @Override\n  public void startTerm() {\n    docStartFP = docOut.getFilePointer();\n    if (writePositions) {\n      posStartFP = posOut.getFilePointer();\n      if (writePayloads || writeOffsets) {\n        payStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","sourceOld":"  @Override\n  public void startTerm() {\n    docStartFP = docOut.getFilePointer();\n    if (writePositions) {\n      posStartFP = posOut.getFilePointer();\n      if (writePayloads || writeOffsets) {\n        payStartFP = payOut.getFilePointer();\n      }\n    }\n    lastDocID = 0;\n    lastBlockDocID = -1;\n    // if (DEBUG) {\n    //   System.out.println(\"FPW.startTerm startFP=\" + docStartFP);\n    // }\n    skipWriter.resetSkip();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"339d0e916669734510414f62912f1fcf120ecf9d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","99eb4a732d1a908f4636ace52928876136bf1896"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","339d0e916669734510414f62912f1fcf120ecf9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"339d0e916669734510414f62912f1fcf120ecf9d":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["339d0e916669734510414f62912f1fcf120ecf9d","db4fdbf3d262768eabc027cd8321edca0cd11fa8","2f948dd442d23baa6cbb28daf77c8db78b351329"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}