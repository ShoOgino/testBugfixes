{"path":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0f42e0639920b2e917c9ece35fb68ad83021e38","date":1337629438,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.storePayloads;\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storeTermVector), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.storePayloads), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitNorms), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.indexOptions.toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83ede60c0b5bb96ad193414bbd663193b56689b3","date":1338331478,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, INDEXOPTIONS);\n        SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":["3cc749c053615f5871f3b95715fe292f34e70a53","76923f6a33f2c4bec7f584e3f251261afe7ea276","a0f42e0639920b2e917c9ece35fb68ad83021e38"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput out = directory.createOutput(fileName, context);\n    BytesRef scratch = new BytesRef();\n    try {\n      SimpleTextUtil.write(out, NUMFIELDS);\n      SimpleTextUtil.write(out, Integer.toString(infos.size()), scratch);\n      SimpleTextUtil.writeNewline(out);\n      \n      for (FieldInfo fi : infos) {\n        SimpleTextUtil.write(out, NAME);\n        SimpleTextUtil.write(out, fi.name, scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NUMBER);\n        SimpleTextUtil.write(out, Integer.toString(fi.number), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, ISINDEXED);\n        SimpleTextUtil.write(out, Boolean.toString(fi.isIndexed()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        if (fi.isIndexed()) {\n          assert fi.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 || !fi.hasPayloads();\n          SimpleTextUtil.write(out, INDEXOPTIONS);\n          SimpleTextUtil.write(out, fi.getIndexOptions().toString(), scratch);\n          SimpleTextUtil.writeNewline(out);\n        }\n        \n        SimpleTextUtil.write(out, STORETV);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasVectors()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, PAYLOADS);\n        SimpleTextUtil.write(out, Boolean.toString(fi.hasPayloads()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        SimpleTextUtil.write(out, NORMS);\n        SimpleTextUtil.write(out, Boolean.toString(!fi.omitsNorms()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, NORMS_TYPE);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getNormType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n        \n        SimpleTextUtil.write(out, DOCVALUES);\n        SimpleTextUtil.write(out, getDocValuesType(fi.getDocValuesType()), scratch);\n        SimpleTextUtil.writeNewline(out);\n               \n        Map<String,String> atts = fi.attributes();\n        int numAtts = atts == null ? 0 : atts.size();\n        SimpleTextUtil.write(out, NUM_ATTS);\n        SimpleTextUtil.write(out, Integer.toString(numAtts), scratch);\n        SimpleTextUtil.writeNewline(out);\n      \n        if (numAtts > 0) {\n          for (Map.Entry<String,String> entry : atts.entrySet()) {\n            SimpleTextUtil.write(out, ATT_KEY);\n            SimpleTextUtil.write(out, entry.getKey(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          \n            SimpleTextUtil.write(out, ATT_VALUE);\n            SimpleTextUtil.write(out, entry.getValue(), scratch);\n            SimpleTextUtil.writeNewline(out);\n          }\n        }\n      }\n    } finally {\n      out.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a0f42e0639920b2e917c9ece35fb68ad83021e38"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83ede60c0b5bb96ad193414bbd663193b56689b3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["a0f42e0639920b2e917c9ece35fb68ad83021e38"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"83ede60c0b5bb96ad193414bbd663193b56689b3":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}