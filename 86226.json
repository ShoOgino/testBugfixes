{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (finiteStrings == null) {\n      //TODO: make this return a Iterator<IntsRef> instead?\n      Automaton automaton = toAutomaton(input);\n      Set<IntsRef> strings = Operations.getFiniteStrings(automaton, maxGraphExpansions);\n\n      posInc = strings.size();\n      finiteStrings = strings.iterator();\n    }\n    if (finiteStrings.hasNext()) {\n      posAttr.setPositionIncrement(posInc);\n      /*\n       * this posInc encodes the number of paths that this surface form\n       * produced. Multi Fields have the same surface form and therefore sum up\n       */\n      posInc = 0;\n      Util.toBytesRef(finiteStrings.next(), bytesAtt.builder()); // now we have UTF-8\n      if (charTermAttribute != null) {\n        charTermAttribute.setLength(0);\n        charTermAttribute.append(bytesAtt.toUTF16());\n      }\n      if (payload != null) {\n        payloadAttr.setPayload(this.payload);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (finiteStrings == null) {\n      //TODO: make this return a Iterator<IntsRef> instead?\n      Automaton automaton = toAutomaton(input);\n      Set<IntsRef> strings = Operations.getFiniteStrings(automaton, maxGraphExpansions);\n\n      posInc = strings.size();\n      finiteStrings = strings.iterator();\n    }\n    if (finiteStrings.hasNext()) {\n      posAttr.setPositionIncrement(posInc);\n      /*\n       * this posInc encodes the number of paths that this surface form\n       * produced. Multi Fields have the same surface form and therefore sum up\n       */\n      posInc = 0;\n      Util.toBytesRef(finiteStrings.next(), bytesAtt.builder()); // now we have UTF-8\n      if (charTermAttribute != null) {\n        charTermAttribute.setLength(0);\n        charTermAttribute.append(bytesAtt.toUTF16());\n      }\n      if (payload != null) {\n        payloadAttr.setPayload(this.payload);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (finiteStrings == null) {\n      //TODO: make this return a Iterator<IntsRef> instead?\n      Automaton automaton = toAutomaton();\n      Set<IntsRef> strings = Operations.getFiniteStrings(automaton, maxGraphExpansions);\n\n      posInc = strings.size();\n      finiteStrings = strings.iterator();\n    }\n    if (finiteStrings.hasNext()) {\n      posAttr.setPositionIncrement(posInc);\n      /*\n       * this posInc encodes the number of paths that this surface form\n       * produced. Multi Fields have the same surface form and therefore sum up\n       */\n      posInc = 0;\n      Util.toBytesRef(finiteStrings.next(), bytesAtt.builder()); // now we have UTF-8\n      if (charTermAttribute != null) {\n        charTermAttribute.setLength(0);\n        charTermAttribute.append(bytesAtt.toUTF16());\n      }\n      if (payload != null) {\n        payloadAttr.setPayload(this.payload);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (finiteStrings == null) {\n      //TODO: make this return a Iterator<IntsRef> instead?\n      Automaton automaton = toAutomaton(input);\n      Set<IntsRef> strings = Operations.getFiniteStrings(automaton, maxGraphExpansions);\n\n      posInc = strings.size();\n      finiteStrings = strings.iterator();\n    }\n    if (finiteStrings.hasNext()) {\n      posAttr.setPositionIncrement(posInc);\n      /*\n       * this posInc encodes the number of paths that this surface form\n       * produced. Multi Fields have the same surface form and therefore sum up\n       */\n      posInc = 0;\n      Util.toBytesRef(finiteStrings.next(), bytesAtt.builder()); // now we have UTF-8\n      if (charTermAttribute != null) {\n        charTermAttribute.setLength(0);\n        charTermAttribute.append(bytesAtt.toUTF16());\n      }\n      if (payload != null) {\n        payloadAttr.setPayload(this.payload);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fa550f45857d99d3d6d743420ee54b4d0c37f8","date":1436039255,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (finiteStrings == null) {\n      Automaton automaton = toAutomaton();\n      finiteStrings = new LimitedFiniteStringsIterator(automaton, maxGraphExpansions);\n    }\n\n    IntsRef string = finiteStrings.next();\n    if (string == null) {\n      return false;\n    }\n\n    Util.toBytesRef(string, bytesAtt.builder()); // now we have UTF-8\n    if (charTermAttribute != null) {\n      charTermAttribute.setLength(0);\n      charTermAttribute.append(bytesAtt.toUTF16());\n    }\n    if (payload != null) {\n      payloadAttr.setPayload(this.payload);\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (finiteStrings == null) {\n      //TODO: make this return a Iterator<IntsRef> instead?\n      Automaton automaton = toAutomaton();\n      Set<IntsRef> strings = Operations.getFiniteStrings(automaton, maxGraphExpansions);\n\n      posInc = strings.size();\n      finiteStrings = strings.iterator();\n    }\n    if (finiteStrings.hasNext()) {\n      posAttr.setPositionIncrement(posInc);\n      /*\n       * this posInc encodes the number of paths that this surface form\n       * produced. Multi Fields have the same surface form and therefore sum up\n       */\n      posInc = 0;\n      Util.toBytesRef(finiteStrings.next(), bytesAtt.builder()); // now we have UTF-8\n      if (charTermAttribute != null) {\n        charTermAttribute.setLength(0);\n        charTermAttribute.append(bytesAtt.toUTF16());\n      }\n      if (payload != null) {\n        payloadAttr.setPayload(this.payload);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","date":1528168051,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(payload);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (finiteStrings == null) {\n      Automaton automaton = toAutomaton();\n      finiteStrings = new LimitedFiniteStringsIterator(automaton, maxGraphExpansions);\n    }\n\n    IntsRef string = finiteStrings.next();\n    if (string == null) {\n      return false;\n    }\n\n    Util.toBytesRef(string, bytesAtt.builder()); // now we have UTF-8\n    if (charTermAttribute != null) {\n      charTermAttribute.setLength(0);\n      charTermAttribute.append(bytesAtt.toUTF16());\n    }\n    if (payload != null) {\n      payloadAttr.setPayload(this.payload);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(payload);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (finiteStrings == null) {\n      Automaton automaton = toAutomaton();\n      finiteStrings = new LimitedFiniteStringsIterator(automaton, maxGraphExpansions);\n    }\n\n    IntsRef string = finiteStrings.next();\n    if (string == null) {\n      return false;\n    }\n\n    Util.toBytesRef(string, bytesAtt.builder()); // now we have UTF-8\n    if (charTermAttribute != null) {\n      charTermAttribute.setLength(0);\n      charTermAttribute.append(bytesAtt.toUTF16());\n    }\n    if (payload != null) {\n      payloadAttr.setPayload(this.payload);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionTokenStream#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      payloadAttr.setPayload(payload);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (finiteStrings == null) {\n      Automaton automaton = toAutomaton();\n      finiteStrings = new LimitedFiniteStringsIterator(automaton, maxGraphExpansions);\n    }\n\n    IntsRef string = finiteStrings.next();\n    if (string == null) {\n      return false;\n    }\n\n    Util.toBytesRef(string, bytesAtt.builder()); // now we have UTF-8\n    if (charTermAttribute != null) {\n      charTermAttribute.setLength(0);\n      charTermAttribute.append(bytesAtt.toUTF16());\n    }\n    if (payload != null) {\n      payloadAttr.setPayload(this.payload);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["35fa550f45857d99d3d6d743420ee54b4d0c37f8","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"f592209545c71895260367152601e9200399776d":["35fa550f45857d99d3d6d743420ee54b4d0c37f8","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"]},"commit2Childs":{"35fa550f45857d99d3d6d743420ee54b4d0c37f8":["b70042a8a492f7054d480ccdd2be9796510d4327","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","f592209545c71895260367152601e9200399776d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["35fa550f45857d99d3d6d743420ee54b4d0c37f8"],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}