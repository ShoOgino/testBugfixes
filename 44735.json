{"path":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#seek(long).mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#seek(long).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Advances to the first beyond the current whose version number is greater\n     * than or equal to <i>targetVersion</i>.<br>\n     * Returns true if the reader has been advanced. If <i>targetVersion</i> is\n     * greater than the highest version number in the updates log, the reader\n     * has been advanced to the end of the current tlog, and a call to\n     * {@link #next()} will probably return null.<br>\n     * Returns false if <i>targetVersion</i> is lower than the oldest known entry.\n     * In this scenario, it probably means that there is a gap in the updates log.<br>\n     * <p>\n     * <b>NOTE:</b> This method must be called before the first call to {@link #next()}.\n     */\n    public boolean seek(long targetVersion) throws IOException, InterruptedException {\n      Object o;\n      // version is negative for deletes - ensure that we are manipulating absolute version numbers.\n      targetVersion = Math.abs(targetVersion);\n\n      if (tlogs.isEmpty() || !this.seekTLog(targetVersion)) {\n        return false;\n      }\n\n      // now that we might be on the right tlog, iterates over the entries to find the one we are looking for\n      while ((o = this.next()) != null) {\n        if (this.getVersion(o) >= targetVersion) {\n          this.resetToLastPosition();\n          return true;\n        }\n      }\n\n      return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/update/CdcrUpdateLog.CdcrLogReader#seek(long).mjava","sourceNew":null,"sourceOld":"    /**\n     * Advances to the first beyond the current whose version number is greater\n     * than or equal to <i>targetVersion</i>.<br>\n     * Returns true if the reader has been advanced. If <i>targetVersion</i> is\n     * greater than the highest version number in the updates log, the reader\n     * has been advanced to the end of the current tlog, and a call to\n     * {@link #next()} will probably return null.<br>\n     * Returns false if <i>targetVersion</i> is lower than the oldest known entry.\n     * In this scenario, it probably means that there is a gap in the updates log.<br>\n     * <p>\n     * <b>NOTE:</b> This method must be called before the first call to {@link #next()}.\n     */\n    public boolean seek(long targetVersion) throws IOException, InterruptedException {\n      Object o;\n      // version is negative for deletes - ensure that we are manipulating absolute version numbers.\n      targetVersion = Math.abs(targetVersion);\n\n      if (tlogs.isEmpty() || !this.seekTLog(targetVersion)) {\n        return false;\n      }\n\n      // now that we might be on the right tlog, iterates over the entries to find the one we are looking for\n      while ((o = this.next()) != null) {\n        if (this.getVersion(o) >= targetVersion) {\n          this.resetToLastPosition();\n          return true;\n        }\n      }\n\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}