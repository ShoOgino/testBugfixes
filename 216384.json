{"path":"solr/core/src/test/org/apache/solr/core/DirectoryFactoriesTest#testExistsBehavior(Class[#-extends-DirectoryFactory]).mjava","commits":[{"id":"f22981dc4238e0407b64c7f17e98adf5ee7b3f61","date":1599653300,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/DirectoryFactoriesTest#testExistsBehavior(Class[#-extends-DirectoryFactory]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestDirectoryFactory#testExistsBehavior(Class[#-extends-DirectoryFactory]).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  private void testExistsBehavior(Class<? extends DirectoryFactory> clazz) throws Exception {\n    final String path = createTempDir().toString() + \"/\" + clazz + \"_somedir\";\n    DirectoryFactory dirFac = null;\n    try {\n      dirFac = clazz.getConstructor().newInstance();\n      dirFac.initCoreContainer(null); // greybox testing directly against path\n      dirFac.init(new NamedList());\n\n      assertFalse(path + \" should not exist yet\", dirFac.exists(path));\n      Directory dir = dirFac.get(path, DirectoryFactory.DirContext.DEFAULT,\n                                 DirectoryFactory.LOCK_TYPE_SINGLE);\n      try {\n        assertFalse(path + \" should still not exist\", dirFac.exists(path));\n        try (IndexOutput file = dir.createOutput(\"test_file\", IOContext.DEFAULT)) {\n          file.writeInt(42);\n\n          // TODO: even StandardDirectoryFactory & NRTCachingDirectoryFactory can't agree on this...\n          // ... should we consider this explicitly undefinied?\n          // ... or should *all* Caching DirFactories consult the cache as well as the disk itself?\n          // assertFalse(path + \" should still not exist until file is closed\", dirFac.exists(path));\n          \n        } // implicitly close file...\n        \n        // TODO: even StandardDirectoryFactory & NRTCachingDirectoryFactory can't agree on this...\n        // ... should we consider this explicitly undefinied?\n        // ... or should *all* Caching DirFactories consult the cache as well as the disk itself?\n        // assertTrue(path + \" should exist once file is closed\", dirFac.exists(path));\n        \n        dir.sync(Collections.singleton(\"test_file\"));\n        assertTrue(path + \" should exist once file is synced\", dirFac.exists(path));\n\n        \n      } finally {\n        dirFac.release(dir);\n      }\n      assertTrue(path + \" should still exist even after being released\", dirFac.exists(path));\n      \n    } catch (AssertionError ae) {\n      throw new AssertionError(clazz + \": \" + ae.getMessage());\n    } finally {\n      if (null != dirFac) {\n        dirFac.close();\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  private void testExistsBehavior(Class<? extends DirectoryFactory> clazz) throws Exception {\n    final String path = createTempDir().toString() + \"/\" + clazz + \"_somedir\";\n    DirectoryFactory dirFac = null;\n    try {\n      dirFac = clazz.getConstructor().newInstance();\n      dirFac.initCoreContainer(null); // greybox testing directly against path\n      dirFac.init(new NamedList());\n\n      assertFalse(path + \" should not exist yet\", dirFac.exists(path));\n      Directory dir = dirFac.get(path, DirectoryFactory.DirContext.DEFAULT,\n                                 DirectoryFactory.LOCK_TYPE_SINGLE);\n      try {\n        assertFalse(path + \" should still not exist\", dirFac.exists(path));\n        try (IndexOutput file = dir.createOutput(\"test_file\", IOContext.DEFAULT)) {\n          file.writeInt(42);\n\n          // TODO: even StandardDirectoryFactory & NRTCachingDirectoryFactory can't agree on this...\n          // ... should we consider this explicitly undefinied?\n          // ... or should *all* Caching DirFactories consult the cache as well as the disk itself?\n          // assertFalse(path + \" should still not exist until file is closed\", dirFac.exists(path));\n          \n        } // implicitly close file...\n        \n        // TODO: even StandardDirectoryFactory & NRTCachingDirectoryFactory can't agree on this...\n        // ... should we consider this explicitly undefinied?\n        // ... or should *all* Caching DirFactories consult the cache as well as the disk itself?\n        // assertTrue(path + \" should exist once file is closed\", dirFac.exists(path));\n        \n        dir.sync(Collections.singleton(\"test_file\"));\n        assertTrue(path + \" should exist once file is synced\", dirFac.exists(path));\n\n        \n      } finally {\n        dirFac.release(dir);\n      }\n      assertTrue(path + \" should still exist even after being released\", dirFac.exists(path));\n      \n    } catch (AssertionError ae) {\n      throw new AssertionError(clazz + \": \" + ae.getMessage());\n    } finally {\n      if (null != dirFac) {\n        dirFac.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f22981dc4238e0407b64c7f17e98adf5ee7b3f61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f22981dc4238e0407b64c7f17e98adf5ee7b3f61"]},"commit2Childs":{"f22981dc4238e0407b64c7f17e98adf5ee7b3f61":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f22981dc4238e0407b64c7f17e98adf5ee7b3f61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}