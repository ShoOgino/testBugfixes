{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","commits":[{"id":"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8","date":1431966199,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if(message.get(prop)!= null) m.put(prop,message.get(prop));\n    }\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4425aa1103f1abe8e39d220f12e82b94c4f8272a","date":1467268836,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if(message.get(prop)!= null) {\n        hasAnyOps = true;\n        m.put(prop,message.get(prop));\n      }\n    }\n    \n    if(!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n    \n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","sourceOld":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if(message.get(prop)!= null) m.put(prop,message.get(prop));\n    }\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if(message.get(prop)!= null) {\n        hasAnyOps = true;\n        m.put(prop,message.get(prop));\n      }\n    }\n    \n    if(!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n    \n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","sourceOld":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if(message.get(prop)!= null) m.put(prop,message.get(prop));\n    }\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"397b96a886ece05a1444aa3771e10825e1145c1f","date":1529309393,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if (message.get(prop) != null) {\n        hasAnyOps = true;\n        m.put(prop,message.get(prop));\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n    \n    if(!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n    \n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","sourceOld":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if(message.get(prop)!= null) {\n        hasAnyOps = true;\n        m.put(prop,message.get(prop));\n      }\n    }\n    \n    if(!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n    \n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82b686ab2904b3e81184ecea0d238b4ab0885376","date":1529576124,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message) {\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionAdminRequest.MODIFIABLE_COLLECTION_PROPERTIES) {\n      if (message.containsKey(prop)) {\n        hasAnyOps = true;\n        if (PROPERTY_UNSET.equals(prop))  {\n          m.remove(message.getStr(prop));\n        } else  {\n          m.put(prop, message.get(prop));\n        }\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n\n    if (!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion(), coll.getZNode()));\n  }\n\n","sourceOld":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if (message.get(prop) != null) {\n        hasAnyOps = true;\n        m.put(prop,message.get(prop));\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n    \n    if(!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n    \n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c72a217478b8fa40b34697477ecd97e00789579f","date":1529924692,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message) {\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionAdminRequest.MODIFIABLE_COLLECTION_PROPERTIES) {\n      if (message.containsKey(prop)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null)  {\n          m.remove(prop);\n        } else  {\n          m.put(prop, message.get(prop));\n        }\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n\n    if (!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion(), coll.getZNode()));\n  }\n\n","sourceOld":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message) {\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionAdminRequest.MODIFIABLE_COLLECTION_PROPERTIES) {\n      if (message.containsKey(prop)) {\n        hasAnyOps = true;\n        if (PROPERTY_UNSET.equals(prop))  {\n          m.remove(message.getStr(prop));\n        } else  {\n          m.put(prop, message.get(prop));\n        }\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n\n    if (!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion(), coll.getZNode()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message) {\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionAdminRequest.MODIFIABLE_COLLECTION_PROPERTIES) {\n      if (message.containsKey(prop)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null)  {\n          m.remove(prop);\n        } else  {\n          m.put(prop, message.get(prop));\n        }\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n\n    if (!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion(), coll.getZNode()));\n  }\n\n","sourceOld":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if(message.get(prop)!= null) {\n        hasAnyOps = true;\n        m.put(prop,message.get(prop));\n      }\n    }\n    \n    if(!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n    \n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message) {\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionAdminRequest.MODIFIABLE_COLLECTION_PROPERTIES) {\n      if (message.containsKey(prop)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null)  {\n          m.remove(prop);\n        } else  {\n          m.put(prop, message.get(prop));\n        }\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n\n    if (!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion(), coll.getZNode()));\n  }\n\n","sourceOld":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message){\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionsHandler.MODIFIABLE_COLL_PROPS) {\n      if(message.get(prop)!= null) {\n        hasAnyOps = true;\n        m.put(prop,message.get(prop));\n      }\n    }\n    \n    if(!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n    \n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(),coll.getSlicesMap(),m,coll.getRouter(),coll.getZNodeVersion(),coll.getZNode()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e","date":1551802585,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message) {\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionAdminRequest.MODIFIABLE_COLLECTION_PROPERTIES) {\n      if (message.containsKey(prop)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null)  {\n          m.remove(prop);\n        } else  {\n          m.put(prop, message.get(prop));\n        }\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n    // other aux properties are also modifiable\n    for (String prop : message.keySet()) {\n      if (prop.startsWith(CollectionAdminRequest.PROPERTY_PREFIX)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null) {\n          m.remove(prop);\n        } else {\n          m.put(prop, message.get(prop));\n        }\n      }\n    }\n\n    if (!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion(), coll.getZNode()));\n  }\n\n","sourceOld":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message) {\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionAdminRequest.MODIFIABLE_COLLECTION_PROPERTIES) {\n      if (message.containsKey(prop)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null)  {\n          m.remove(prop);\n        } else  {\n          m.put(prop, message.get(prop));\n        }\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n\n    if (!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion(), coll.getZNode()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#modifyCollection(ClusterState,ZkNodeProps).mjava","sourceNew":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message) {\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionAdminRequest.MODIFIABLE_COLLECTION_PROPERTIES) {\n      if (message.containsKey(prop)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null)  {\n          m.remove(prop);\n        } else  {\n          m.put(prop, message.get(prop));\n        }\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n    // other aux properties are also modifiable\n    for (String prop : message.keySet()) {\n      if (prop.startsWith(CollectionAdminRequest.PROPERTY_PREFIX)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null) {\n          m.remove(prop);\n        } else {\n          m.put(prop, message.get(prop));\n        }\n      }\n    }\n\n    if (!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion()));\n  }\n\n","sourceOld":"  public ZkWriteCommand modifyCollection(final ClusterState clusterState, ZkNodeProps message) {\n    if (!checkCollectionKeyExistence(message)) return ZkStateWriter.NO_OP;\n    DocCollection coll = clusterState.getCollection(message.getStr(COLLECTION_PROP));\n    Map<String, Object> m = coll.shallowCopy();\n    boolean hasAnyOps = false;\n    for (String prop : CollectionAdminRequest.MODIFIABLE_COLLECTION_PROPERTIES) {\n      if (message.containsKey(prop)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null)  {\n          m.remove(prop);\n        } else  {\n          m.put(prop, message.get(prop));\n        }\n        if (prop == REPLICATION_FACTOR) { //SOLR-11676 : keep NRT_REPLICAS and REPLICATION_FACTOR in sync\n          m.put(NRT_REPLICAS, message.get(REPLICATION_FACTOR));\n        }\n      }\n    }\n    // other aux properties are also modifiable\n    for (String prop : message.keySet()) {\n      if (prop.startsWith(CollectionAdminRequest.PROPERTY_PREFIX)) {\n        hasAnyOps = true;\n        if (message.get(prop) == null) {\n          m.remove(prop);\n        } else {\n          m.put(prop, message.get(prop));\n        }\n      }\n    }\n\n    if (!hasAnyOps) {\n      return ZkStateWriter.NO_OP;\n    }\n\n    return new ZkWriteCommand(coll.getName(),\n        new DocCollection(coll.getName(), coll.getSlicesMap(), m, coll.getRouter(), coll.getZNodeVersion(), coll.getZNode()));\n  }\n\n","bugFix":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e":["c72a217478b8fa40b34697477ecd97e00789579f"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4425aa1103f1abe8e39d220f12e82b94c4f8272a","c72a217478b8fa40b34697477ecd97e00789579f"],"397b96a886ece05a1444aa3771e10825e1145c1f":["4425aa1103f1abe8e39d220f12e82b94c4f8272a"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"82b686ab2904b3e81184ecea0d238b4ab0885376":["397b96a886ece05a1444aa3771e10825e1145c1f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8","4425aa1103f1abe8e39d220f12e82b94c4f8272a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"c72a217478b8fa40b34697477ecd97e00789579f":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4425aa1103f1abe8e39d220f12e82b94c4f8272a","c72a217478b8fa40b34697477ecd97e00789579f"]},"commit2Childs":{"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"397b96a886ece05a1444aa3771e10825e1145c1f":["82b686ab2904b3e81184ecea0d238b4ab0885376"],"4425aa1103f1abe8e39d220f12e82b94c4f8272a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","397b96a886ece05a1444aa3771e10825e1145c1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8":["4425aa1103f1abe8e39d220f12e82b94c4f8272a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["07dbf37ea1062f6f3f4fc7deb3ae385ab837ebc8"],"82b686ab2904b3e81184ecea0d238b4ab0885376":["c72a217478b8fa40b34697477ecd97e00789579f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c72a217478b8fa40b34697477ecd97e00789579f":["fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}