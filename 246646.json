{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","commits":[{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Bits,SpanCollector).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, acceptDocs, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, acceptDocs, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, SpanCollector collector) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, acceptDocs, collector);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, acceptDocs, collector);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery.SpanNotWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, final Bits acceptDocs, Postings requiredPostings) throws IOException {\n      Spans includeSpans = includeWeight.getSpans(context, acceptDocs, requiredPostings);\n      if (includeSpans == null) {\n        return null;\n      }\n\n      Spans excludeSpans = excludeWeight.getSpans(context, acceptDocs, requiredPostings);\n      if (excludeSpans == null) {\n        return includeSpans;\n      }\n\n      TwoPhaseIterator excludeTwoPhase = excludeSpans.asTwoPhaseIterator();\n      DocIdSetIterator excludeApproximation = excludeTwoPhase == null ? null : excludeTwoPhase.approximation();\n\n      return new FilterSpans(includeSpans) {\n        // last document we have checked matches() against for the exclusion, and failed\n        // when using approximations, so we don't call it again, and pass thru all inclusions.\n        int lastApproxDoc = -1;\n        boolean lastApproxResult = false;\n\n        @Override\n        protected AcceptStatus accept(Spans candidate) throws IOException {\n          // TODO: this logic is ugly and sneaky, can we clean it up?\n          int doc = candidate.docID();\n          if (doc > excludeSpans.docID()) {\n            // catch up 'exclude' to the current doc\n            if (excludeTwoPhase != null) {\n              if (excludeApproximation.advance(doc) == doc) {\n                lastApproxDoc = doc;\n                lastApproxResult = excludeTwoPhase.matches();\n              }\n            } else {\n              excludeSpans.advance(doc);\n            }\n          } else if (excludeTwoPhase != null && doc == excludeSpans.docID() && doc != lastApproxDoc) {\n            // excludeSpans already sitting on our candidate doc, but matches not called yet.\n            lastApproxDoc = doc;\n            lastApproxResult = excludeTwoPhase.matches();\n          }\n\n          if (doc != excludeSpans.docID() || (doc == lastApproxDoc && lastApproxResult == false)) {\n            return AcceptStatus.YES;\n          }\n\n          if (excludeSpans.startPosition() == -1) { // init exclude start position if needed\n            excludeSpans.nextStartPosition();\n          }\n\n          while (excludeSpans.endPosition() <= candidate.startPosition() - pre) {\n            // exclude end position is before a possible exclusion\n            if (excludeSpans.nextStartPosition() == NO_MORE_POSITIONS) {\n              return AcceptStatus.YES; // no more exclude at current doc.\n            }\n          }\n\n          // exclude end position far enough in current doc, check start position:\n          if (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n            return AcceptStatus.YES;\n          } else {\n            return AcceptStatus.NO;\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["29aea3139c4326c0501d75d51059855463220279"],"29aea3139c4326c0501d75d51059855463220279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29aea3139c4326c0501d75d51059855463220279":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}