{"path":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Converts a millisecond time to a string suitable for indexing. */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    while (s.length() < DATE_LEN)\n      s = \"0\" + s;\t\t\t\t  // pad with leading zeros\n\n    return s;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30d13828158b64cdd98dde735f0ab0291010a7c9","date":1023655642,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","pathOld":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * This method will throw a RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970.\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    while (s.length() < DATE_LEN)\n      s = \"0\" + s;\t\t\t\t  // pad with leading zeros\n\n    return s;\n  }\n\n","sourceOld":"  /** Converts a millisecond time to a string suitable for indexing. */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    while (s.length() < DATE_LEN)\n      s = \"0\" + s;\t\t\t\t  // pad with leading zeros\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2ffda7a1ecb465d19f368d81bd4737bcf4fd087","date":1024963531,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","pathOld":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * This method will throw a RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970.\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuffer sb = new StringBuffer(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, ' ');\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * This method will throw a RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970.\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    while (s.length() < DATE_LEN)\n      s = \"0\" + s;\t\t\t\t  // pad with leading zeros\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76e3331051b5738a430e970cd324e10e9a3ebf48","date":1041698496,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","pathOld":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * This method will throw a RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970.\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuffer sb = new StringBuffer(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * This method will throw a RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970.\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuffer sb = new StringBuffer(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, ' ');\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60acbc7ec0e5ea4c6fb343937e6d323ead8978ab","date":1084538186,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","pathOld":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuffer sb = new StringBuffer(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * This method will throw a RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970.\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuffer sb = new StringBuffer(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aed719e16e13641c8a7fab079bd29842e50a89de","date":1140724406,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","pathOld":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time '\" + time + \"' is too early, must be >= 0\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time '\" + time + \"' is too late, length of string \" +\n          \"representation must be <= \" + DATE_LEN);\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuffer sb = new StringBuffer(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time too early\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time too late\");\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuffer sb = new StringBuffer(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","pathOld":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time '\" + time + \"' is too early, must be >= 0\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time '\" + time + \"' is too late, length of string \" +\n          \"representation must be <= \" + DATE_LEN);\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuilder sb = new StringBuilder(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time '\" + time + \"' is too early, must be >= 0\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time '\" + time + \"' is too late, length of string \" +\n          \"representation must be <= \" + DATE_LEN);\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuffer sb = new StringBuffer(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/document/DateField#timeToString(long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Converts a millisecond time to a string suitable for indexing.\n   * @throws RuntimeException if the time specified in the\n   * method argument is negative, that is, before 1970\n   */\n  public static String timeToString(long time) {\n    if (time < 0)\n      throw new RuntimeException(\"time '\" + time + \"' is too early, must be >= 0\");\n\n    String s = Long.toString(time, Character.MAX_RADIX);\n\n    if (s.length() > DATE_LEN)\n      throw new RuntimeException(\"time '\" + time + \"' is too late, length of string \" +\n          \"representation must be <= \" + DATE_LEN);\n\n    // Pad with leading zeros\n    if (s.length() < DATE_LEN) {\n      StringBuilder sb = new StringBuilder(s);\n      while (sb.length() < DATE_LEN)\n        sb.insert(0, 0);\n      s = sb.toString();\n    }\n\n    return s;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"60acbc7ec0e5ea4c6fb343937e6d323ead8978ab":["76e3331051b5738a430e970cd324e10e9a3ebf48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2ffda7a1ecb465d19f368d81bd4737bcf4fd087":["30d13828158b64cdd98dde735f0ab0291010a7c9"],"76e3331051b5738a430e970cd324e10e9a3ebf48":["e2ffda7a1ecb465d19f368d81bd4737bcf4fd087"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["aed719e16e13641c8a7fab079bd29842e50a89de"],"aed719e16e13641c8a7fab079bd29842e50a89de":["60acbc7ec0e5ea4c6fb343937e6d323ead8978ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"30d13828158b64cdd98dde735f0ab0291010a7c9":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["30d13828158b64cdd98dde735f0ab0291010a7c9"],"60acbc7ec0e5ea4c6fb343937e6d323ead8978ab":["aed719e16e13641c8a7fab079bd29842e50a89de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"e2ffda7a1ecb465d19f368d81bd4737bcf4fd087":["76e3331051b5738a430e970cd324e10e9a3ebf48"],"76e3331051b5738a430e970cd324e10e9a3ebf48":["60acbc7ec0e5ea4c6fb343937e6d323ead8978ab"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"aed719e16e13641c8a7fab079bd29842e50a89de":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"30d13828158b64cdd98dde735f0ab0291010a7c9":["e2ffda7a1ecb465d19f368d81bd4737bcf4fd087"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}