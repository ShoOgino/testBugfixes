{"path":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts(RangeFacetRequest,NamedList[Object]).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts(RangeFacetRequest,NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts\n   * for each facet range specified by the given {@link RangeFacetRequest}\n   */\n  public void getFacetRangeCounts(RangeFacetRequest rangeFacetRequest, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    final String key = rangeFacetRequest.getKey();\n    final String f = rangeFacetRequest.facetOn;\n    FacetRangeMethod method = rangeFacetRequest.getMethod();\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    if (method.equals(FacetRangeMethod.DV)) {\n      assert ft instanceof TrieField;\n      resOuter.add(key, getFacetRangeCountsDocValues(rangeFacetRequest));\n    } else {\n      resOuter.add(key, getFacetRangeCounts(rangeFacetRequest));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts(RangeFacetRequest,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts(RangeFacetRequest,NamedList[Object]).mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts\n   * for each facet range specified by the given {@link RangeFacetRequest}\n   */\n  public void getFacetRangeCounts(RangeFacetRequest rangeFacetRequest, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    final String key = rangeFacetRequest.getKey();\n    final String f = rangeFacetRequest.facetOn;\n    FacetRangeMethod method = rangeFacetRequest.getMethod();\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    if (method.equals(FacetRangeMethod.DV)) {\n      assert ft instanceof TrieField || ft.isPointField();\n      resOuter.add(key, getFacetRangeCountsDocValues(rangeFacetRequest));\n    } else {\n      resOuter.add(key, getFacetRangeCounts(rangeFacetRequest));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts\n   * for each facet range specified by the given {@link RangeFacetRequest}\n   */\n  public void getFacetRangeCounts(RangeFacetRequest rangeFacetRequest, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    final String key = rangeFacetRequest.getKey();\n    final String f = rangeFacetRequest.facetOn;\n    FacetRangeMethod method = rangeFacetRequest.getMethod();\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    if (method.equals(FacetRangeMethod.DV)) {\n      assert ft instanceof TrieField;\n      resOuter.add(key, getFacetRangeCountsDocValues(rangeFacetRequest));\n    } else {\n      resOuter.add(key, getFacetRangeCounts(rangeFacetRequest));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts(RangeFacetRequest,NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RangeFacetProcessor#getFacetRangeCounts(RangeFacetRequest,NamedList[Object]).mjava","sourceNew":"  /**\n   * Returns a list of value constraints and the associated facet counts\n   * for each facet range specified by the given {@link RangeFacetRequest}\n   */\n  public void getFacetRangeCounts(RangeFacetRequest rangeFacetRequest, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    final String key = rangeFacetRequest.getKey();\n    final String f = rangeFacetRequest.facetOn;\n    FacetRangeMethod method = rangeFacetRequest.getMethod();\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    if (method.equals(FacetRangeMethod.DV)) {\n      assert ft instanceof TrieField || ft.isPointField();\n      resOuter.add(key, getFacetRangeCountsDocValues(rangeFacetRequest));\n    } else {\n      resOuter.add(key, getFacetRangeCounts(rangeFacetRequest));\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns a list of value constraints and the associated facet counts\n   * for each facet range specified by the given {@link RangeFacetRequest}\n   */\n  public void getFacetRangeCounts(RangeFacetRequest rangeFacetRequest, NamedList<Object> resOuter)\n      throws IOException, SyntaxError {\n\n    final IndexSchema schema = searcher.getSchema();\n\n    final String key = rangeFacetRequest.getKey();\n    final String f = rangeFacetRequest.facetOn;\n    FacetRangeMethod method = rangeFacetRequest.getMethod();\n\n    final SchemaField sf = schema.getField(f);\n    final FieldType ft = sf.getType();\n\n    if (method.equals(FacetRangeMethod.DV)) {\n      assert ft instanceof TrieField;\n      resOuter.add(key, getFacetRangeCountsDocValues(rangeFacetRequest));\n    } else {\n      resOuter.add(key, getFacetRangeCounts(rangeFacetRequest));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46dc9ac8b3e748407baaef82453138ff3974480c":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["22d0a81a05eba47d5e18976f17d88306b218cc22","46dc9ac8b3e748407baaef82453138ff3974480c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46dc9ac8b3e748407baaef82453138ff3974480c"]},"commit2Childs":{"46dc9ac8b3e748407baaef82453138ff3974480c":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}