{"path":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","commits":[{"id":"b5c559c875836474bafae7243263d93b1b1965db","date":1289581659,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestIndexValues#writerConfig(boolean).mjava","sourceNew":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer());\n    MergePolicy mergePolicy = cfg.getMergePolicy();\n    if (mergePolicy instanceof LogMergePolicy) {\n      ((LogMergePolicy) mergePolicy).setUseCompoundFile(useCompoundFile);\n    } else if (useCompoundFile) {\n      LogMergePolicy policy = new LogDocMergePolicy();\n      policy.setUseCompoundFile(useCompoundFile);\n      cfg.setMergePolicy(policy);\n    }\n    cfg.setCodecProvider(provider);\n    return cfg;\n  }\n\n","sourceOld":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer());\n    MergePolicy mergePolicy = cfg.getMergePolicy();\n    if (mergePolicy instanceof LogMergePolicy) {\n      ((LogMergePolicy) mergePolicy).setUseCompoundFile(useCompoundFile);\n    } else if (useCompoundFile) {\n      LogMergePolicy policy = new LogDocMergePolicy();\n      policy.setUseCompoundFile(useCompoundFile);\n      cfg.setMergePolicy(policy);\n    }\n    cfg.setCodecProvider(provider);\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","sourceNew":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer());\n    cfg.setMergePolicy(newLogMergePolicy(random));\n    MergePolicy mergePolicy = cfg.getMergePolicy();\n    if (mergePolicy instanceof LogMergePolicy) {\n      LogMergePolicy policy = ((LogMergePolicy) mergePolicy);\n      policy.setUseCompoundFile(useCompoundFile);\n      policy.setRequireContiguousMerge(true);\n    } else if (useCompoundFile) {\n      LogMergePolicy policy = new LogDocMergePolicy();\n      policy.setUseCompoundFile(useCompoundFile);\n      policy.setRequireContiguousMerge(true);\n      cfg.setMergePolicy(policy);\n    }\n    cfg.setCodecProvider(provider);\n    return cfg;\n  }\n\n","sourceOld":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer());\n    MergePolicy mergePolicy = cfg.getMergePolicy();\n    if (mergePolicy instanceof LogMergePolicy) {\n      ((LogMergePolicy) mergePolicy).setUseCompoundFile(useCompoundFile);\n    } else if (useCompoundFile) {\n      LogMergePolicy policy = new LogDocMergePolicy();\n      policy.setUseCompoundFile(useCompoundFile);\n      cfg.setMergePolicy(policy);\n    }\n    cfg.setCodecProvider(provider);\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","sourceNew":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    cfg.setMergePolicy(newLogMergePolicy(random));\n    LogMergePolicy policy = new LogDocMergePolicy();\n    cfg.setMergePolicy(policy);\n    policy.setUseCompoundFile(useCompoundFile);\n    cfg.setCodecProvider(provider);\n    return cfg;\n  }\n\n","sourceOld":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer());\n    cfg.setMergePolicy(newLogMergePolicy(random));\n    MergePolicy mergePolicy = cfg.getMergePolicy();\n    if (mergePolicy instanceof LogMergePolicy) {\n      LogMergePolicy policy = ((LogMergePolicy) mergePolicy);\n      policy.setUseCompoundFile(useCompoundFile);\n      policy.setRequireContiguousMerge(true);\n    } else if (useCompoundFile) {\n      LogMergePolicy policy = new LogDocMergePolicy();\n      policy.setUseCompoundFile(useCompoundFile);\n      policy.setRequireContiguousMerge(true);\n      cfg.setMergePolicy(policy);\n    }\n    cfg.setCodecProvider(provider);\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d47326e0c6ce589b6962777df409aad0550940fa","date":1304584540,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","sourceNew":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    cfg.setMergePolicy(newLogMergePolicy(random));\n    LogMergePolicy policy = new LogDocMergePolicy();\n    cfg.setMergePolicy(policy);\n    policy.setUseCompoundFile(useCompoundFile);\n    return cfg;\n  }\n\n","sourceOld":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    cfg.setMergePolicy(newLogMergePolicy(random));\n    LogMergePolicy policy = new LogDocMergePolicy();\n    cfg.setMergePolicy(policy);\n    policy.setUseCompoundFile(useCompoundFile);\n    cfg.setCodecProvider(provider);\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    cfg.setMergePolicy(newLogMergePolicy(random));\n    LogMergePolicy policy = new LogDocMergePolicy();\n    cfg.setMergePolicy(policy);\n    policy.setUseCompoundFile(useCompoundFile);\n    return cfg;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    cfg.setMergePolicy(newLogMergePolicy(random));\n    LogMergePolicy policy = new LogDocMergePolicy();\n    cfg.setMergePolicy(policy);\n    policy.setUseCompoundFile(useCompoundFile);\n    return cfg;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDocValuesIndexing#writerConfig(boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestDocValuesIndexing#writerConfig(boolean).mjava","sourceNew":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    cfg.setMergePolicy(newLogMergePolicy(random));\n    LogMergePolicy policy = new LogDocMergePolicy();\n    cfg.setMergePolicy(policy);\n    policy.setUseCompoundFile(useCompoundFile);\n    return cfg;\n  }\n\n","sourceOld":"  private IndexWriterConfig writerConfig(boolean useCompoundFile) {\n    final IndexWriterConfig cfg = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    cfg.setMergePolicy(newLogMergePolicy(random));\n    LogMergePolicy policy = new LogDocMergePolicy();\n    cfg.setMergePolicy(policy);\n    policy.setUseCompoundFile(useCompoundFile);\n    return cfg;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d47326e0c6ce589b6962777df409aad0550940fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["b5c559c875836474bafae7243263d93b1b1965db","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"d47326e0c6ce589b6962777df409aad0550940fa":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"b5c559c875836474bafae7243263d93b1b1965db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","29ef99d61cda9641b6250bf9567329a6e65f901d","135621f3a0670a9394eb563224a3b76cc4dddc0f","b5c559c875836474bafae7243263d93b1b1965db"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d47326e0c6ce589b6962777df409aad0550940fa"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d47326e0c6ce589b6962777df409aad0550940fa":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"b5c559c875836474bafae7243263d93b1b1965db":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}