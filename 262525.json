{"path":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","commits":[{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl+\"/.system/blob/test\");\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd","date":1426252395,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(response);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6b2620aa1330c2e39c589ec12defb94027b2c29","date":1426608796,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \" + getAsString(m), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\",\"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \"+ getAsString(m),m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \" + getAsString(m), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \" + m.toString(), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \" + getAsString(m), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) fromJSONString(response);\n        assertFalse(\"Error in posting blob \" + m.toString(), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n        assertFalse(\"Error in posting blob \" + m.toString(), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6afb0ba86024b96e8b34cfc2e15562239dc36360","date":1579768208,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) fromJSONString(response);\n        assertFalse(\"Error in posting blob \" + m.toString(), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$: {}\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) fromJSONString(response);\n        assertFalse(\"Error in posting blob \" + m.toString(), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postData(CloudSolrClient,String,String,ByteBuffer).mjava","sourceNew":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        @SuppressWarnings({\"rawtypes\"})\n        Map m = (Map) fromJSONString(response);\n        assertFalse(\"Error in posting blob \" + m.toString(), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$: {}\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","sourceOld":"  public static void postData(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytarr) throws IOException {\n    HttpPost httpPost = null;\n    HttpEntity entity;\n    String response = null;\n    try {\n      httpPost = new HttpPost(baseUrl + \"/.system/blob/\" + blobName);\n      httpPost.setHeader(\"Content-Type\", \"application/octet-stream\");\n      httpPost.setEntity(new ByteArrayEntity(bytarr.array(), bytarr.arrayOffset(), bytarr.limit()));\n      entity = cloudClient.getLbClient().getHttpClient().execute(httpPost).getEntity();\n      try {\n        response = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n        Map m = (Map) fromJSONString(response);\n        assertFalse(\"Error in posting blob \" + m.toString(), m.containsKey(\"error\"));\n      } catch (JSONParser.ParseException e) {\n        log.error(\"$ERROR$: {}\", response, e);\n        fail();\n      }\n    } finally {\n      httpPost.releaseConnection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6b2620aa1330c2e39c589ec12defb94027b2c29"],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["e6b2620aa1330c2e39c589ec12defb94027b2c29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"e6b2620aa1330c2e39c589ec12defb94027b2c29":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"]},"commit2Childs":{"3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd":["e6b2620aa1330c2e39c589ec12defb94027b2c29"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["3ee01ed2bbdbfebcda94054cb39b4fac5f06a3bd"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"e6b2620aa1330c2e39c589ec12defb94027b2c29":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}