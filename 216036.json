{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#finishCurrentState().mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#finishCurrentState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#finishCurrentState().mjava","sourceNew":"  /** Freezes the last state, reducing and sorting its transitions. */\n  private void finishCurrentState() {\n    int numTransitions = states[2*curState+1];\n    assert numTransitions > 0;\n\n    //System.out.println(\"finish curState=\" + curState + \" numTransitions=\" + numTransitions);\n    int offset = states[2*curState];\n    int start = offset/3;\n    destMinMaxSorter.sort(start, start+numTransitions);\n\n    /*\n    for(int i=0;i<numTransitions;i++) {\n      System.out.println(\"  \" + i + \": dest=\" + transitions[offset+3*i] + \" (accept?=\" + isAccept(transitions[offset+3*i]) + \") min=\" + transitions[offset+3*i+1] + \" max=\" + transitions[offset+3*i+2]);\n    }\n    */\n\n    // Reduce any \"adjacent\" transitions:\n    int upto = 0;\n    int min = -1;\n    int max = -1;\n    int dest = -1;\n\n    for(int i=0;i<numTransitions;i++) {\n      int tDest = transitions[offset+3*i];\n      int tMin = transitions[offset+3*i+1];\n      int tMax = transitions[offset+3*i+2];\n\n      if (dest == tDest) {\n        if (tMin <= max+1) {\n          if (tMax > max) {\n            max = tMax;\n          }\n        } else {\n          if (dest != -1) {\n            transitions[offset+3*upto] = dest;\n            transitions[offset+3*upto+1] = min;\n            transitions[offset+3*upto+2] = max;\n            upto++;\n          }\n          min = tMin;\n          max = tMax;\n        }\n      } else {\n        if (dest != -1) {\n          transitions[offset+3*upto] = dest;\n          transitions[offset+3*upto+1] = min;\n          transitions[offset+3*upto+2] = max;\n          upto++;\n        }\n        dest = tDest;\n        min = tMin;\n        max = tMax;\n      }\n    }\n\n    if (dest != -1) {\n      // Last transition\n      transitions[offset+3*upto] = dest;\n      transitions[offset+3*upto+1] = min;\n      transitions[offset+3*upto+2] = max;\n      upto++;\n    }\n\n    nextTransition -= (numTransitions-upto)*3;\n    states[2*curState+1] = upto;\n\n    // Sort transitions by min/max/dest:\n    minMaxDestSorter.sort(start, start+upto);\n\n    if (deterministic && upto > 1) {\n      int lastMax = transitions[offset+2];\n      for(int i=1;i<upto;i++) {\n        min = transitions[offset + 3*i + 1];\n        if (min <= lastMax) {\n          deterministic = false;\n          break;\n        }\n        lastMax = transitions[offset + 3*i + 2];\n      }\n    }\n\n    /*\n    System.out.println(\"after finish: reduce collapsed \" + (numTransitions-upto) + \" transitions\");\n    for(int i=0;i<upto;i++) {\n      System.out.println(\"  \" + i + \": dest=\" + transitions[offset+3*i] + \" (accept?=\" + isAccept(transitions[offset+3*i]) + \") min=\" + transitions[offset+3*i+1] + \" max=\" + transitions[offset+3*i+2]);\n    }\n    */\n  }\n\n","sourceOld":"  /** Freezes the last state, reducing and sorting its transitions. */\n  private void finishCurrentState() {\n    int numTransitions = states[2*curState+1];\n    assert numTransitions > 0;\n\n    //System.out.println(\"finish curState=\" + curState + \" numTransitions=\" + numTransitions);\n    int offset = states[2*curState];\n    int start = offset/3;\n    destMinMaxSorter.sort(start, start+numTransitions);\n\n    /*\n    for(int i=0;i<numTransitions;i++) {\n      System.out.println(\"  \" + i + \": dest=\" + transitions[offset+3*i] + \" (accept?=\" + isAccept(transitions[offset+3*i]) + \") min=\" + transitions[offset+3*i+1] + \" max=\" + transitions[offset+3*i+2]);\n    }\n    */\n\n    // Reduce any \"adjacent\" transitions:\n    int upto = 0;\n    int min = -1;\n    int max = -1;\n    int dest = -1;\n\n    for(int i=0;i<numTransitions;i++) {\n      int tDest = transitions[offset+3*i];\n      int tMin = transitions[offset+3*i+1];\n      int tMax = transitions[offset+3*i+2];\n\n      if (dest == tDest) {\n        if (tMin <= max+1) {\n          if (tMax > max) {\n            max = tMax;\n          }\n        } else {\n          if (dest != -1) {\n            transitions[offset+3*upto] = dest;\n            transitions[offset+3*upto+1] = min;\n            transitions[offset+3*upto+2] = max;\n            upto++;\n          }\n          min = tMin;\n          max = tMax;\n        }\n      } else {\n        if (dest != -1) {\n          transitions[offset+3*upto] = dest;\n          transitions[offset+3*upto+1] = min;\n          transitions[offset+3*upto+2] = max;\n          upto++;\n        }\n        dest = tDest;\n        min = tMin;\n        max = tMax;\n      }\n    }\n\n    if (dest != -1) {\n      // Last transition\n      transitions[offset+3*upto] = dest;\n      transitions[offset+3*upto+1] = min;\n      transitions[offset+3*upto+2] = max;\n      upto++;\n    }\n\n    nextTransition -= (numTransitions-upto)*3;\n    states[2*curState+1] = upto;\n\n    // Sort transitions by min/max/dest:\n    minMaxDestSorter.sort(start, start+upto);\n\n    if (deterministic && upto > 1) {\n      int lastMax = transitions[offset+2];\n      for(int i=1;i<upto;i++) {\n        min = transitions[offset + 3*i + 1];\n        if (min <= lastMax) {\n          deterministic = false;\n          break;\n        }\n        lastMax = transitions[offset + 3*i + 2];\n      }\n    }\n\n    /*\n    System.out.println(\"after finish: reduce collapsed \" + (numTransitions-upto) + \" transitions\");\n    for(int i=0;i<upto;i++) {\n      System.out.println(\"  \" + i + \": dest=\" + transitions[offset+3*i] + \" (accept?=\" + isAccept(transitions[offset+3*i]) + \") min=\" + transitions[offset+3*i+1] + \" max=\" + transitions[offset+3*i+2]);\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#finishCurrentState().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#finishCurrentState().mjava","sourceNew":"  /** Freezes the last state, sorting and reducing the transitions. */\n  private void finishCurrentState() {\n    int numTransitions = states[2*curState+1];\n    assert numTransitions > 0;\n\n    int offset = states[2*curState];\n    int start = offset/3;\n    destMinMaxSorter.sort(start, start+numTransitions);\n\n    // Reduce any \"adjacent\" transitions:\n    int upto = 0;\n    int min = -1;\n    int max = -1;\n    int dest = -1;\n\n    for(int i=0;i<numTransitions;i++) {\n      int tDest = transitions[offset+3*i];\n      int tMin = transitions[offset+3*i+1];\n      int tMax = transitions[offset+3*i+2];\n\n      if (dest == tDest) {\n        if (tMin <= max+1) {\n          if (tMax > max) {\n            max = tMax;\n          }\n        } else {\n          if (dest != -1) {\n            transitions[offset+3*upto] = dest;\n            transitions[offset+3*upto+1] = min;\n            transitions[offset+3*upto+2] = max;\n            upto++;\n          }\n          min = tMin;\n          max = tMax;\n        }\n      } else {\n        if (dest != -1) {\n          transitions[offset+3*upto] = dest;\n          transitions[offset+3*upto+1] = min;\n          transitions[offset+3*upto+2] = max;\n          upto++;\n        }\n        dest = tDest;\n        min = tMin;\n        max = tMax;\n      }\n    }\n\n    if (dest != -1) {\n      // Last transition\n      transitions[offset+3*upto] = dest;\n      transitions[offset+3*upto+1] = min;\n      transitions[offset+3*upto+2] = max;\n      upto++;\n    }\n\n    nextTransition -= (numTransitions-upto)*3;\n    states[2*curState+1] = upto;\n\n    // Sort transitions by min/max/dest:\n    minMaxDestSorter.sort(start, start+upto);\n\n    if (deterministic && upto > 1) {\n      int lastMax = transitions[offset+2];\n      for(int i=1;i<upto;i++) {\n        min = transitions[offset + 3*i + 1];\n        if (min <= lastMax) {\n          deterministic = false;\n          break;\n        }\n        lastMax = transitions[offset + 3*i + 2];\n      }\n    }\n  }\n\n","sourceOld":"  /** Freezes the last state, reducing and sorting its transitions. */\n  private void finishCurrentState() {\n    int numTransitions = states[2*curState+1];\n    assert numTransitions > 0;\n\n    //System.out.println(\"finish curState=\" + curState + \" numTransitions=\" + numTransitions);\n    int offset = states[2*curState];\n    int start = offset/3;\n    destMinMaxSorter.sort(start, start+numTransitions);\n\n    /*\n    for(int i=0;i<numTransitions;i++) {\n      System.out.println(\"  \" + i + \": dest=\" + transitions[offset+3*i] + \" (accept?=\" + isAccept(transitions[offset+3*i]) + \") min=\" + transitions[offset+3*i+1] + \" max=\" + transitions[offset+3*i+2]);\n    }\n    */\n\n    // Reduce any \"adjacent\" transitions:\n    int upto = 0;\n    int min = -1;\n    int max = -1;\n    int dest = -1;\n\n    for(int i=0;i<numTransitions;i++) {\n      int tDest = transitions[offset+3*i];\n      int tMin = transitions[offset+3*i+1];\n      int tMax = transitions[offset+3*i+2];\n\n      if (dest == tDest) {\n        if (tMin <= max+1) {\n          if (tMax > max) {\n            max = tMax;\n          }\n        } else {\n          if (dest != -1) {\n            transitions[offset+3*upto] = dest;\n            transitions[offset+3*upto+1] = min;\n            transitions[offset+3*upto+2] = max;\n            upto++;\n          }\n          min = tMin;\n          max = tMax;\n        }\n      } else {\n        if (dest != -1) {\n          transitions[offset+3*upto] = dest;\n          transitions[offset+3*upto+1] = min;\n          transitions[offset+3*upto+2] = max;\n          upto++;\n        }\n        dest = tDest;\n        min = tMin;\n        max = tMax;\n      }\n    }\n\n    if (dest != -1) {\n      // Last transition\n      transitions[offset+3*upto] = dest;\n      transitions[offset+3*upto+1] = min;\n      transitions[offset+3*upto+2] = max;\n      upto++;\n    }\n\n    nextTransition -= (numTransitions-upto)*3;\n    states[2*curState+1] = upto;\n\n    // Sort transitions by min/max/dest:\n    minMaxDestSorter.sort(start, start+upto);\n\n    if (deterministic && upto > 1) {\n      int lastMax = transitions[offset+2];\n      for(int i=1;i<upto;i++) {\n        min = transitions[offset + 3*i + 1];\n        if (min <= lastMax) {\n          deterministic = false;\n          break;\n        }\n        lastMax = transitions[offset + 3*i + 2];\n      }\n    }\n\n    /*\n    System.out.println(\"after finish: reduce collapsed \" + (numTransitions-upto) + \" transitions\");\n    for(int i=0;i<upto;i++) {\n      System.out.println(\"  \" + i + \": dest=\" + transitions[offset+3*i] + \" (accept?=\" + isAccept(transitions[offset+3*i]) + \") min=\" + transitions[offset+3*i+1] + \" max=\" + transitions[offset+3*i+2]);\n    }\n    */\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#finishCurrentState().mjava","pathOld":"/dev/null","sourceNew":"  /** Freezes the last state, sorting and reducing the transitions. */\n  private void finishCurrentState() {\n    int numTransitions = states[2*curState+1];\n    assert numTransitions > 0;\n\n    int offset = states[2*curState];\n    int start = offset/3;\n    destMinMaxSorter.sort(start, start+numTransitions);\n\n    // Reduce any \"adjacent\" transitions:\n    int upto = 0;\n    int min = -1;\n    int max = -1;\n    int dest = -1;\n\n    for(int i=0;i<numTransitions;i++) {\n      int tDest = transitions[offset+3*i];\n      int tMin = transitions[offset+3*i+1];\n      int tMax = transitions[offset+3*i+2];\n\n      if (dest == tDest) {\n        if (tMin <= max+1) {\n          if (tMax > max) {\n            max = tMax;\n          }\n        } else {\n          if (dest != -1) {\n            transitions[offset+3*upto] = dest;\n            transitions[offset+3*upto+1] = min;\n            transitions[offset+3*upto+2] = max;\n            upto++;\n          }\n          min = tMin;\n          max = tMax;\n        }\n      } else {\n        if (dest != -1) {\n          transitions[offset+3*upto] = dest;\n          transitions[offset+3*upto+1] = min;\n          transitions[offset+3*upto+2] = max;\n          upto++;\n        }\n        dest = tDest;\n        min = tMin;\n        max = tMax;\n      }\n    }\n\n    if (dest != -1) {\n      // Last transition\n      transitions[offset+3*upto] = dest;\n      transitions[offset+3*upto+1] = min;\n      transitions[offset+3*upto+2] = max;\n      upto++;\n    }\n\n    nextTransition -= (numTransitions-upto)*3;\n    states[2*curState+1] = upto;\n\n    // Sort transitions by min/max/dest:\n    minMaxDestSorter.sort(start, start+upto);\n\n    if (deterministic && upto > 1) {\n      int lastMax = transitions[offset+2];\n      for(int i=1;i<upto;i++) {\n        min = transitions[offset + 3*i + 1];\n        if (min <= lastMax) {\n          deterministic = false;\n          break;\n        }\n        lastMax = transitions[offset + 3*i + 2];\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}