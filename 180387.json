{"path":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#loadSSLConfiguration().mjava","commits":[{"id":"99b97f030e743d8dd4d7685202f71718d7e5af22","date":1548957620,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#loadSSLConfiguration().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Load SSL properties from the SSL configuration.\n     */\n    private void loadSSLConfiguration() throws IOException {\n      if (sslConf == null) {\n        return;\n      }\n      needsClientAuth = sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT);\n      keyStore = sslConf.getTrimmed(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION);\n      if (keyStore == null || keyStore.isEmpty()) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_LOCATION));\n      }\n      keyStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD);\n      if (keyStorePassword == null) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD));\n      }\n      keyStoreType = sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n          SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT);\n      keyPassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD);\n      trustStore = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION);\n      trustStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD);\n      trustStoreType = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT);\n      excludeCiphers = sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b74c124d68d8e306d6ef09624f3cd053b8a2fd","date":1548981962,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#loadSSLConfiguration().mjava","sourceNew":null,"sourceOld":"    /**\n     * Load SSL properties from the SSL configuration.\n     */\n    private void loadSSLConfiguration() throws IOException {\n      if (sslConf == null) {\n        return;\n      }\n      needsClientAuth = sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT);\n      keyStore = sslConf.getTrimmed(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION);\n      if (keyStore == null || keyStore.isEmpty()) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_LOCATION));\n      }\n      keyStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD);\n      if (keyStorePassword == null) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD));\n      }\n      keyStoreType = sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n          SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT);\n      keyPassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD);\n      trustStore = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION);\n      trustStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD);\n      trustStoreType = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT);\n      excludeCiphers = sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#loadSSLConfiguration().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Load SSL properties from the SSL configuration.\n     */\n    private void loadSSLConfiguration() throws IOException {\n      if (sslConf == null) {\n        return;\n      }\n      needsClientAuth = sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT);\n      keyStore = sslConf.getTrimmed(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION);\n      if (keyStore == null || keyStore.isEmpty()) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_LOCATION));\n      }\n      keyStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD);\n      if (keyStorePassword == null) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD));\n      }\n      keyStoreType = sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n          SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT);\n      keyPassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD);\n      trustStore = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION);\n      trustStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD);\n      trustStoreType = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT);\n      excludeCiphers = sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c75093220971c1dcff7741df4a3ad2f5aa281384","date":1575374843,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#loadSSLConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#loadSSLConfiguration().mjava","sourceNew":"    /**\n     * Load SSL properties from the SSL configuration.\n     */\n    private void loadSSLConfiguration() throws IOException {\n      if (sslConf == null) {\n        return;\n      }\n      needsClientAuth = sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT);\n      keyStore = sslConf.getTrimmed(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION);\n      if (keyStore == null || keyStore.isEmpty()) {\n        throw new IOException(String.format(Locale.ROOT, \"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_LOCATION));\n      }\n      keyStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD);\n      if (keyStorePassword == null) {\n        throw new IOException(String.format(Locale.ROOT, \"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD));\n      }\n      keyStoreType = sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n          SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT);\n      keyPassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD);\n      trustStore = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION);\n      trustStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD);\n      trustStoreType = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT);\n      excludeCiphers = sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST);\n    }\n\n","sourceOld":"    /**\n     * Load SSL properties from the SSL configuration.\n     */\n    private void loadSSLConfiguration() throws IOException {\n      if (sslConf == null) {\n        return;\n      }\n      needsClientAuth = sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT);\n      keyStore = sslConf.getTrimmed(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION);\n      if (keyStore == null || keyStore.isEmpty()) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_LOCATION));\n      }\n      keyStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD);\n      if (keyStorePassword == null) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD));\n      }\n      keyStoreType = sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n          SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT);\n      keyPassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD);\n      trustStore = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION);\n      trustStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD);\n      trustStoreType = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT);\n      excludeCiphers = sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38d65ab4a8492ea7e53e4e56cf9bc9081f443a2e","date":1575379562,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#loadSSLConfiguration().mjava","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2.Builder#loadSSLConfiguration().mjava","sourceNew":"    /**\n     * Load SSL properties from the SSL configuration.\n     */\n    private void loadSSLConfiguration() throws IOException {\n      if (sslConf == null) {\n        return;\n      }\n      needsClientAuth = sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT);\n      keyStore = sslConf.getTrimmed(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION);\n      if (keyStore == null || keyStore.isEmpty()) {\n        throw new IOException(String.format(Locale.ROOT, \"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_LOCATION));\n      }\n      keyStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD);\n      if (keyStorePassword == null) {\n        throw new IOException(String.format(Locale.ROOT, \"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD));\n      }\n      keyStoreType = sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n          SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT);\n      keyPassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD);\n      trustStore = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION);\n      trustStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD);\n      trustStoreType = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT);\n      excludeCiphers = sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST);\n    }\n\n","sourceOld":"    /**\n     * Load SSL properties from the SSL configuration.\n     */\n    private void loadSSLConfiguration() throws IOException {\n      if (sslConf == null) {\n        return;\n      }\n      needsClientAuth = sslConf.getBoolean(\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH,\n          SSLFactory.SSL_SERVER_NEED_CLIENT_AUTH_DEFAULT);\n      keyStore = sslConf.getTrimmed(SSLFactory.SSL_SERVER_KEYSTORE_LOCATION);\n      if (keyStore == null || keyStore.isEmpty()) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_LOCATION));\n      }\n      keyStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD);\n      if (keyStorePassword == null) {\n        throw new IOException(String.format(\"Property %s not specified\",\n            SSLFactory.SSL_SERVER_KEYSTORE_PASSWORD));\n      }\n      keyStoreType = sslConf.get(SSLFactory.SSL_SERVER_KEYSTORE_TYPE,\n          SSLFactory.SSL_SERVER_KEYSTORE_TYPE_DEFAULT);\n      keyPassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_KEYSTORE_KEYPASSWORD);\n      trustStore = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_LOCATION);\n      trustStorePassword = getPasswordString(sslConf,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_PASSWORD);\n      trustStoreType = sslConf.get(SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE,\n          SSLFactory.SSL_SERVER_TRUSTSTORE_TYPE_DEFAULT);\n      excludeCiphers = sslConf.get(SSLFactory.SSL_SERVER_EXCLUDE_CIPHER_LIST);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38d65ab4a8492ea7e53e4e56cf9bc9081f443a2e":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"c75093220971c1dcff7741df4a3ad2f5aa281384":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c75093220971c1dcff7741df4a3ad2f5aa281384"]},"commit2Childs":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"38d65ab4a8492ea7e53e4e56cf9bc9081f443a2e":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["38d65ab4a8492ea7e53e4e56cf9bc9081f443a2e","c75093220971c1dcff7741df4a3ad2f5aa281384"],"c75093220971c1dcff7741df4a3ad2f5aa281384":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38d65ab4a8492ea7e53e4e56cf9bc9081f443a2e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}