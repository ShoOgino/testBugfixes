{"path":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#parseParams(String).mjava","commits":[{"id":"c20e2f66487155554bc2d8bc489e0ff1686ba915","date":1394942287,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#parseParams(String).mjava","pathOld":"/dev/null","sourceNew":"  protected void parseParams(String param) throws SyntaxError, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    statsField = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    statsField = localParams.get(CommonParams.VALUE);\n\n    // reset set the default key now that localParams have been removed\n    key = statsField;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      this.base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"610c97b96420e614c67797fd43822ebc1d4b7ee2","date":1410814832,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SimpleStats[StatsComponent]#parseParams(String).mjava","sourceNew":null,"sourceOld":"  protected void parseParams(String param) throws SyntaxError, IOException {\n    localParams = QueryParsing.getLocalParams(param, req.getParams());\n    base = docs;\n    statsField = param;\n    key = param;\n\n    if (localParams == null) return;\n\n    statsField = localParams.get(CommonParams.VALUE);\n\n    // reset set the default key now that localParams have been removed\n    key = statsField;\n\n    // allow explicit set of the key\n    key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n\n    // figure out if we need a new base DocSet\n    String excludeStr = localParams.get(CommonParams.EXCLUDE);\n    if (excludeStr == null) return;\n\n    Map<?,?> tagMap = (Map<?,?>)req.getContext().get(\"tags\");\n    if (tagMap != null && rb != null) {\n      List<String> excludeTagList = StrUtils.splitSmart(excludeStr,',');\n\n      IdentityHashMap<Query,Boolean> excludeSet = new IdentityHashMap<Query,Boolean>();\n      for (String excludeTag : excludeTagList) {\n        Object olst = tagMap.get(excludeTag);\n        // tagMap has entries of List<String,List<QParser>>, but subject to change in the future\n        if (!(olst instanceof Collection)) continue;\n        for (Object o : (Collection<?>)olst) {\n          if (!(o instanceof QParser)) continue;\n          QParser qp = (QParser)o;\n          excludeSet.put(qp.getQuery(), Boolean.TRUE);\n        }\n      }\n      if (excludeSet.size() == 0) return;\n\n      List<Query> qlist = new ArrayList<Query>();\n\n      // add the base query\n      if (!excludeSet.containsKey(rb.getQuery())) {\n        qlist.add(rb.getQuery());\n      }\n\n      // add the filters\n      if (rb.getFilters() != null) {\n        for (Query q : rb.getFilters()) {\n          if (!excludeSet.containsKey(q)) {\n            qlist.add(q);\n          }\n        }\n      }\n\n      // get the new base docset for this facet\n      this.base = searcher.getDocSet(qlist);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"610c97b96420e614c67797fd43822ebc1d4b7ee2":["c20e2f66487155554bc2d8bc489e0ff1686ba915"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c20e2f66487155554bc2d8bc489e0ff1686ba915":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["610c97b96420e614c67797fd43822ebc1d4b7ee2"]},"commit2Childs":{"610c97b96420e614c67797fd43822ebc1d4b7ee2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c20e2f66487155554bc2d8bc489e0ff1686ba915"],"c20e2f66487155554bc2d8bc489e0ff1686ba915":["610c97b96420e614c67797fd43822ebc1d4b7ee2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}