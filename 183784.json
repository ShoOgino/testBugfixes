{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10d98d3c84fcfdd2089a56054f4cf7186a57265d","date":1400053445,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (DocValues is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (DocValues is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (DocValues is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ae958a739da1866696f442384393ba2f13e33e5","date":1491819018,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (DocValues is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (DocValues is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"10d98d3c84fcfdd2089a56054f4cf7186a57265d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["b89678825b68eccaf09e6ab71675fc0b0af1e099","10d98d3c84fcfdd2089a56054f4cf7186a57265d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["b89678825b68eccaf09e6ab71675fc0b0af1e099","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ae958a739da1866696f442384393ba2f13e33e5"],"7ae958a739da1866696f442384393ba2f13e33e5":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["10d98d3c84fcfdd2089a56054f4cf7186a57265d","93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8"],"10d98d3c84fcfdd2089a56054f4cf7186a57265d":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","56572ec06f1407c066d6b7399413178b33176cd8","7ae958a739da1866696f442384393ba2f13e33e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ae958a739da1866696f442384393ba2f13e33e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}