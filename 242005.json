{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","commits":[{"id":"32c42b3b8d01657c1fa648ce7faafee5d9a68f07","date":1490344676,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  private void handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(\"name\");\n    String triggerName = op.getStr(\"trigger\");\n    List<String> stageNames = op.getStrs(\"stage\", Collections.emptyList());\n    String listenerClass = op.getStr(\"class\");\n    List<String> beforeActions = op.getStrs(\"beforeAction\", Collections.emptyList());\n    List<String> afterActions = op.getStrs(\"afterAction\", Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    Map<String, Object> triggerProps = (Map<String, Object>) triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        AutoScaling.TriggerStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, AutoScaling.TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) triggerProps.get(\"actions\");\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (Map<String, String> action : actions) {\n      actionNames.remove(action.get(\"name\"));\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n\n    // todo - handle races between competing set-trigger and set-listener invocations\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf","date":1496154116,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    Map<String, Object> triggerProps = (Map<String, Object>) triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        AutoScaling.TriggerStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, AutoScaling.TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) triggerProps.get(\"actions\");\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (Map<String, String> action : actions) {\n      actionNames.remove(action.get(NAME));\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n\n    // todo - handle races between competing set-trigger and set-listener invocations\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(\"name\");\n    String triggerName = op.getStr(\"trigger\");\n    List<String> stageNames = op.getStrs(\"stage\", Collections.emptyList());\n    String listenerClass = op.getStr(\"class\");\n    List<String> beforeActions = op.getStrs(\"beforeAction\", Collections.emptyList());\n    List<String> afterActions = op.getStrs(\"afterAction\", Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    Map<String, Object> triggerProps = (Map<String, Object>) triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        AutoScaling.TriggerStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, AutoScaling.TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) triggerProps.get(\"actions\");\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (Map<String, String> action : actions) {\n      actionNames.remove(action.get(\"name\"));\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n\n    // todo - handle races between competing set-trigger and set-listener invocations\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5fd294da67452cd8d116692194908de00eb5209","date":1499704155,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    Map<String, Object> triggerProps = (Map<String, Object>) triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        AutoScaling.EventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) triggerProps.get(\"actions\");\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (Map<String, String> action : actions) {\n      actionNames.remove(action.get(NAME));\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n\n    // todo - handle races between competing set-trigger and set-listener invocations\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    Map<String, Object> triggerProps = (Map<String, Object>) triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        AutoScaling.TriggerStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, AutoScaling.TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) triggerProps.get(\"actions\");\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (Map<String, String> action : actions) {\n      actionNames.remove(action.get(NAME));\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n\n    // todo - handle races between competing set-trigger and set-listener invocations\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSetListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private AutoScalingConfig handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    AutoScalingConfig.TriggerConfig triggerConfig = triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        TriggerEventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (AutoScalingConfig.ActionConfig action : triggerConfig.actions) {\n      actionNames.remove(action.name);\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n    AutoScalingConfig.TriggerListenerConfig listener = new AutoScalingConfig.TriggerListenerConfig(listenerName, op.getValuesExcluding(\"name\"));\n    // todo - handle races between competing set-trigger and set-listener invocations\n    currentConfig = currentConfig.withTriggerListenerConfig(listener);\n    return currentConfig;\n  }\n\n","sourceOld":"  private void handleSetListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n    String triggerName = op.getStr(TRIGGER);\n    List<String> stageNames = op.getStrs(STAGE, Collections.emptyList());\n    String listenerClass = op.getStr(CLASS);\n    List<String> beforeActions = op.getStrs(BEFORE_ACTION, Collections.emptyList());\n    List<String> afterActions = op.getStrs(AFTER_ACTION, Collections.emptyList());\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"A trigger with the name \" + triggerName + \" does not exist\");\n    }\n    Map<String, Object> triggerProps = (Map<String, Object>) triggers.get(triggerName);\n\n    if (stageNames.isEmpty() && beforeActions.isEmpty() && afterActions.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Either 'stage' or 'beforeAction' or 'afterAction' must be specified\");\n    }\n\n    for (String stage : stageNames) {\n      try {\n        AutoScaling.EventProcessorStage.valueOf(stage);\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid stage name: \" + stage);\n      }\n    }\n\n    if (listenerClass == null || listenerClass.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The 'class' of the listener cannot be null or empty\");\n    }\n    // validate that we can load the listener class\n    // todo nocommit -- what about MemClassLoader?\n    try {\n      container.getResourceLoader().findClass(listenerClass, TriggerListener.class);\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Listener not found: \" + listenerClass, e);\n    }\n\n    List<Map<String, String>> actions = (List<Map<String, String>>) triggerProps.get(\"actions\");\n    Set<String> actionNames = new HashSet<>();\n    actionNames.addAll(beforeActions);\n    actionNames.addAll(afterActions);\n    for (Map<String, String> action : actions) {\n      actionNames.remove(action.get(NAME));\n    }\n    if (!actionNames.isEmpty()) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger '\" + triggerName + \"' does not have actions named: \" + actionNames);\n    }\n\n    // todo - handle races between competing set-trigger and set-listener invocations\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, op.getValuesExcluding(\"name\"));\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c5fd294da67452cd8d116692194908de00eb5209":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["c5fd294da67452cd8d116692194908de00eb5209"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"32c42b3b8d01657c1fa648ce7faafee5d9a68f07":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"c5fd294da67452cd8d116692194908de00eb5209":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["32c42b3b8d01657c1fa648ce7faafee5d9a68f07","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["c5fd294da67452cd8d116692194908de00eb5209"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}