{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#compareTermVectors(Terms,Terms,String).mjava","commits":[{"id":"2eceb3be6e29e3ad7ee08d5025a431c3812aa0d9","date":1392385887,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#compareTermVectors(Terms,Terms,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"761333d77c7f29123c00c93b107b743f32f012e6","date":1411986072,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndexAgainstRAMDir#compareTermVectors(Terms,Terms,String).mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/MemoryIndexTest#compareTermVectors(Terms,Terms,String).mjava","sourceNew":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","sourceOld":"  protected void compareTermVectors(Terms terms, Terms memTerms, String field_name) throws IOException {\n\n    TermsEnum termEnum = terms.iterator(null);\n    TermsEnum memTermEnum = memTerms.iterator(null);\n\n    while (termEnum.next() != null) {\n      assertNotNull(memTermEnum.next());\n      assertThat(termEnum.totalTermFreq(), equalTo(memTermEnum.totalTermFreq()));\n\n      DocsAndPositionsEnum docsPosEnum = termEnum.docsAndPositions(null, null, 0);\n      DocsAndPositionsEnum memDocsPosEnum = memTermEnum.docsAndPositions(null, null, 0);\n      String currentTerm = termEnum.term().utf8ToString();\n\n      assertThat(\"Token mismatch for field: \" + field_name, currentTerm, equalTo(memTermEnum.term().utf8ToString()));\n\n      docsPosEnum.nextDoc();\n      memDocsPosEnum.nextDoc();\n\n      int freq = docsPosEnum.freq();\n      assertThat(freq, equalTo(memDocsPosEnum.freq()));\n      for (int i = 0; i < freq; i++) {\n        String failDesc = \" (field:\" + field_name + \" term:\" + currentTerm + \")\";\n        int memPos = memDocsPosEnum.nextPosition();\n        int pos = docsPosEnum.nextPosition();\n        assertThat(\"Position test failed\" + failDesc, memPos, equalTo(pos));\n        assertThat(\"Start offset test failed\" + failDesc, memDocsPosEnum.startOffset(), equalTo(docsPosEnum.startOffset()));\n        assertThat(\"End offset test failed\" + failDesc, memDocsPosEnum.endOffset(), equalTo(docsPosEnum.endOffset()));\n        assertThat(\"Missing payload test failed\" + failDesc, docsPosEnum.getPayload(), equalTo(null));\n      }\n    }\n    assertNull(\"Still some tokens not processed\", memTermEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["2eceb3be6e29e3ad7ee08d5025a431c3812aa0d9","761333d77c7f29123c00c93b107b743f32f012e6"],"761333d77c7f29123c00c93b107b743f32f012e6":["2eceb3be6e29e3ad7ee08d5025a431c3812aa0d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["761333d77c7f29123c00c93b107b743f32f012e6"],"2eceb3be6e29e3ad7ee08d5025a431c3812aa0d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2eceb3be6e29e3ad7ee08d5025a431c3812aa0d9"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"761333d77c7f29123c00c93b107b743f32f012e6":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2eceb3be6e29e3ad7ee08d5025a431c3812aa0d9":["d9a47902d6207303f5ed3e7aaca62ca33433af66","761333d77c7f29123c00c93b107b743f32f012e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}