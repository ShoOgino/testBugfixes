{"path":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadBasics#testSpanPayloadCheck().mjava","commits":[{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanPayloadCheck().mjava","sourceNew":"  public void testSpanPayloadCheck() throws Exception {\n    SpanQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(StandardCharsets.UTF_8));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  @Test\n  public void testSpanPayloadCheck() throws Exception {\n    SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(StandardCharsets.UTF_8));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1f341bf51e7020873fbdb7c3717c4ce09fc889d","date":1434385102,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadBasics#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadBasics#testSpanPayloadCheck().mjava","sourceNew":"  public void testSpanPayloadCheck() throws Exception {\n    SpanQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(StandardCharsets.UTF_8));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  public void testSpanPayloadCheck() throws Exception {\n    SpanQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(StandardCharsets.UTF_8));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanNearPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8dd51777c3f17c83f8aac170bd0f68a029d174","date":1442220758,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadCheckQuery#testSpanPayloadCheck().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadBasics#testSpanPayloadCheck().mjava","sourceNew":"  public void testSpanPayloadCheck() throws Exception {\n    SpanQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef(\"pos: \" + 5);\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<BytesRef> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef(\"pos: \" + 0);\n    pay2 = new BytesRef(\"pos: \" + 1);\n    list = new ArrayList<>();\n    list.add(pay);\n    list.add(pay2);\n    query = new SpanPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef(\"pos: \" + 0);\n    pay2 = new BytesRef(\"pos: \" + 1);\n    BytesRef pay3 = new BytesRef(\"pos: \" + 2);\n    list = new ArrayList<>();\n    list.add(pay);\n    list.add(pay2);\n    list.add(pay3);\n    query = new SpanPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","sourceOld":"  public void testSpanPayloadCheck() throws Exception {\n    SpanQuery term1 = new SpanTermQuery(new Term(\"field\", \"five\"));\n    BytesRef pay = new BytesRef((\"pos: \" + 5).getBytes(StandardCharsets.UTF_8));\n    SpanQuery query = new SpanPayloadCheckQuery(term1, Collections.singletonList(pay.bytes));\n    checkHits(query, new int[]\n      {1125, 1135, 1145, 1155, 1165, 1175, 1185, 1195, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1325, 1335, 1345, 1355, 1365, 1375, 1385, 1395, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1525, 1535, 1545, 1555, 1565, 1575, 1585, 1595, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1725, 1735, 1745, 1755, 1765, 1775, 1785, 1795, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1935, 1945, 1955, 1965, 1975, 1985, 1995});\n    assertTrue(searcher.explain(query, 1125).getValue() > 0.0f);\n\n    SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"hundred\"));\n    SpanNearQuery snq;\n    SpanQuery[] clauses;\n    List<byte[]> list;\n    BytesRef pay2;\n    clauses = new SpanQuery[2];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    query = new SpanPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599});\n    clauses = new SpanQuery[3];\n    clauses[0] = term1;\n    clauses[1] = term2;\n    clauses[2] = new SpanTermQuery(new Term(\"field\", \"five\"));\n    snq = new SpanNearQuery(clauses, 0, true);\n    pay = new BytesRef((\"pos: \" + 0).getBytes(StandardCharsets.UTF_8));\n    pay2 = new BytesRef((\"pos: \" + 1).getBytes(StandardCharsets.UTF_8));\n    BytesRef pay3 = new BytesRef((\"pos: \" + 2).getBytes(StandardCharsets.UTF_8));\n    list = new ArrayList<>();\n    list.add(pay.bytes);\n    list.add(pay2.bytes);\n    list.add(pay3.bytes);\n    query = new SpanPayloadCheckQuery(snq, list);\n    checkHits(query, new int[]\n      {505});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c1f341bf51e7020873fbdb7c3717c4ce09fc889d":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["c1f341bf51e7020873fbdb7c3717c4ce09fc889d"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"]},"commit2Childs":{"c1f341bf51e7020873fbdb7c3717c4ce09fc889d":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["c1f341bf51e7020873fbdb7c3717c4ce09fc889d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}