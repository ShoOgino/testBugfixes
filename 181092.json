{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int,int).mjava","commits":[{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int score(LeafCollector collector, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n    final PriorityQueue<BulkScorerAndDoc> optionalScorers = this.optionalScorers;\n\n    BulkScorerAndDoc top = optionalScorers.top();\n    for (int windowMin = Math.max(min, top.next); windowMin < max; windowMin = top.next) {\n      final int windowBase = windowMin & ~MASK; // find the window that windowMin belongs to\n      final int windowMax = Math.min(max, windowBase + SIZE);\n      top = scoreWindow(collector, windowBase, windowMin, windowMax, optionalScorers, top);\n      assert top.next >= windowMax;\n    }\n    return top.next;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n\n      final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n      final int windowMin = Math.max(min, windowBase);\n      final int windowMax = Math.min(max, windowBase + SIZE);\n\n      // general case\n      scoreWindow(collector, windowBase, windowMin, windowMax);\n      top = head.top();\n    }\n\n    return top.next;\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n    final PriorityQueue<BulkScorerAndDoc> optionalScorers = this.optionalScorers;\n\n    BulkScorerAndDoc top = optionalScorers.top();\n    for (int windowMin = Math.max(min, top.next); windowMin < max; windowMin = top.next) {\n      final int windowBase = windowMin & ~MASK; // find the window that windowMin belongs to\n      final int windowMax = Math.min(max, windowBase + SIZE);\n      top = scoreWindow(collector, windowBase, windowMin, windowMax, optionalScorers, top);\n      assert top.next >= windowMax;\n    }\n    return top.next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,Bits,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(LeafCollector,int,int).mjava","sourceNew":"  @Override\n  public int score(LeafCollector collector, Bits acceptDocs, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n\n      final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n      final int windowMin = Math.max(min, windowBase);\n      final int windowMax = Math.min(max, windowBase + SIZE);\n\n      // general case\n      scoreWindow(collector, acceptDocs, windowBase, windowMin, windowMax);\n      top = head.top();\n    }\n\n    return top.next;\n  }\n\n","sourceOld":"  @Override\n  public int score(LeafCollector collector, int min, int max) throws IOException {\n    fakeScorer.doc = -1;\n    collector.setScorer(fakeScorer);\n\n    BulkScorerAndDoc top = advance(min);\n    while (top.next < max) {\n\n      final int windowBase = top.next & ~MASK; // find the window that the next match belongs to\n      final int windowMin = Math.max(min, windowBase);\n      final int windowMax = Math.min(max, windowBase + SIZE);\n\n      // general case\n      scoreWindow(collector, windowBase, windowMin, windowMax);\n      top = head.top();\n    }\n\n    return top.next;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}