{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#putNulls(Map[String,Object]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#putNulls(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#putNulls(Map[String,Object]).mjava","sourceNew":"    /**\n     * A recursive routine that walks the Node tree from a supplied start\n     * pushing a null string onto every multiValued fieldName's List of values\n     * where a value has not been provided from the stream.\n     */\n    private void putNulls(Map<String, Object> values) {\n      if (attributes != null) {\n        for (Node n : attributes) {\n          if (n.multiValued)\n            putText(values, null, n.fieldName, true);\n        }\n      }\n      if (hasText && multiValued)\n        putText(values, null, fieldName, true);\n      if (childNodes != null) {\n        for (Node childNode : childNodes)\n          childNode.putNulls(values);\n      }\n    }\n\n","sourceOld":"    /**\n     * A recursive routine that walks the Node tree from a supplied start\n     * pushing a null string onto every multiValued fieldName's List of values\n     * where a value has not been provided from the stream.\n     */\n    private void putNulls(Map<String, Object> values) {\n      if (attributes != null) {\n        for (Node n : attributes) {\n          if (n.multiValued)\n            putText(values, null, n.fieldName, true);\n        }\n      }\n      if (hasText && multiValued)\n        putText(values, null, fieldName, true);\n      if (childNodes != null) {\n        for (Node childNode : childNodes)\n          childNode.putNulls(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#putNulls(Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#putNulls(Map[String,Object]).mjava","sourceNew":"    /**\n     * A recursive routine that walks the Node tree from a supplied start\n     * pushing a null string onto every multiValued fieldName's List of values\n     * where a value has not been provided from the stream.\n     */\n    private void putNulls(Map<String, Object> values) {\n      if (attributes != null) {\n        for (Node n : attributes) {\n          if (n.multiValued)\n            putText(values, null, n.fieldName, true);\n        }\n      }\n      if (hasText && multiValued)\n        putText(values, null, fieldName, true);\n      if (childNodes != null) {\n        for (Node childNode : childNodes)\n          childNode.putNulls(values);\n      }\n    }\n\n","sourceOld":"    /**\n     * A recursive routine that walks the Node tree from a supplied start\n     * pushing a null string onto every multiValued fieldName's List of values\n     * where a value has not been provided from the stream.\n     */\n    private void putNulls(Map<String, Object> values) {\n      if (attributes != null) {\n        for (Node n : attributes) {\n          if (n.multiValued)\n            putText(values, null, n.fieldName, true);\n        }\n      }\n      if (hasText && multiValued)\n        putText(values, null, fieldName, true);\n      if (childNodes != null) {\n        for (Node childNode : childNodes)\n          childNode.putNulls(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9","date":1387897927,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#putNulls(Map[String,Object],Set[String]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#putNulls(Map[String,Object]).mjava","sourceNew":"    /**\n     * A recursive routine that walks the Node tree from a supplied start\n     * pushing a null string onto every multiValued fieldName's List of values\n     * where a value has not been provided from the stream.\n     */\n    private void putNulls(Map<String, Object> values, Set<String> valuesAddedinThisFrame) {\n      if (attributes != null) {\n        for (Node n : attributes) {\n          if (n.multiValued) {\n            putANull(n.fieldName, values, valuesAddedinThisFrame);\n          }\n        }\n      }\n      if (hasText && multiValued) {\n        putANull(fieldName, values, valuesAddedinThisFrame);\n      }\n      if (childNodes != null) {\n        for (Node childNode : childNodes) {\n          childNode.putNulls(values, valuesAddedinThisFrame);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * A recursive routine that walks the Node tree from a supplied start\n     * pushing a null string onto every multiValued fieldName's List of values\n     * where a value has not been provided from the stream.\n     */\n    private void putNulls(Map<String, Object> values) {\n      if (attributes != null) {\n        for (Node n : attributes) {\n          if (n.multiValued)\n            putText(values, null, n.fieldName, true);\n        }\n      }\n      if (hasText && multiValued)\n        putText(values, null, fieldName, true);\n      if (childNodes != null) {\n        for (Node childNode : childNodes)\n          childNode.putNulls(values);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"3c0dbd7f9c2fb9dac33f6bd9e4d7199e309280f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}