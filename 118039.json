{"path":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","commits":[{"id":"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d","date":1187140494,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Callback for the TermVectorReader. \n   * @param term\n   * @param frequency\n   * @param offsets\n   * @param positions\n   */\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    for (int i = 0; i < positions.length; i++) {\n      Integer posVal = new Integer(positions[i]);\n      TVPositionInfo pos = (TVPositionInfo) currentPositions.get(posVal);\n      if (pos == null) {\n        pos = new TVPositionInfo(positions[i], storeOffsets);\n        currentPositions.put(posVal, pos);\n      }\n      pos.addTerm(term, offsets != null ? offsets[i] : null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"  /**\n   * Callback for the TermVectorReader. \n   * @param term\n   * @param frequency\n   * @param offsets\n   * @param positions\n   */\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    for (int i = 0; i < positions.length; i++) {\n      Integer posVal = Integer.valueOf(positions[i]);\n      TVPositionInfo pos = (TVPositionInfo) currentPositions.get(posVal);\n      if (pos == null) {\n        pos = new TVPositionInfo(positions[i], storeOffsets);\n        currentPositions.put(posVal, pos);\n      }\n      pos.addTerm(term, offsets != null ? offsets[i] : null);\n    }\n  }\n\n","sourceOld":"  /**\n   * Callback for the TermVectorReader. \n   * @param term\n   * @param frequency\n   * @param offsets\n   * @param positions\n   */\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    for (int i = 0; i < positions.length; i++) {\n      Integer posVal = new Integer(positions[i]);\n      TVPositionInfo pos = (TVPositionInfo) currentPositions.get(posVal);\n      if (pos == null) {\n        pos = new TVPositionInfo(positions[i], storeOffsets);\n        currentPositions.put(posVal, pos);\n      }\n      pos.addTerm(term, offsets != null ? offsets[i] : null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"  /**\n   * Callback for the TermVectorReader. \n   * @param term\n   * @param frequency\n   * @param offsets\n   * @param positions\n   */\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    for (int i = 0; i < positions.length; i++) {\n      Integer posVal = Integer.valueOf(positions[i]);\n      TVPositionInfo pos = currentPositions.get(posVal);\n      if (pos == null) {\n        pos = new TVPositionInfo(positions[i], storeOffsets);\n        currentPositions.put(posVal, pos);\n      }\n      pos.addTerm(term, offsets != null ? offsets[i] : null);\n    }\n  }\n\n","sourceOld":"  /**\n   * Callback for the TermVectorReader. \n   * @param term\n   * @param frequency\n   * @param offsets\n   * @param positions\n   */\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    for (int i = 0; i < positions.length; i++) {\n      Integer posVal = Integer.valueOf(positions[i]);\n      TVPositionInfo pos = (TVPositionInfo) currentPositions.get(posVal);\n      if (pos == null) {\n        pos = new TVPositionInfo(positions[i], storeOffsets);\n        currentPositions.put(posVal, pos);\n      }\n      pos.addTerm(term, offsets != null ? offsets[i] : null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"  /**\n   * Callback for the TermVectorReader. \n   * @param term\n   * @param frequency\n   * @param offsets\n   * @param positions\n   */\n  @Override\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    for (int i = 0; i < positions.length; i++) {\n      Integer posVal = Integer.valueOf(positions[i]);\n      TVPositionInfo pos = currentPositions.get(posVal);\n      if (pos == null) {\n        pos = new TVPositionInfo(positions[i], storeOffsets);\n        currentPositions.put(posVal, pos);\n      }\n      pos.addTerm(term, offsets != null ? offsets[i] : null);\n    }\n  }\n\n","sourceOld":"  /**\n   * Callback for the TermVectorReader. \n   * @param term\n   * @param frequency\n   * @param offsets\n   * @param positions\n   */\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    for (int i = 0; i < positions.length; i++) {\n      Integer posVal = Integer.valueOf(positions[i]);\n      TVPositionInfo pos = currentPositions.get(posVal);\n      if (pos == null) {\n        pos = new TVPositionInfo(positions[i], storeOffsets);\n        currentPositions.put(posVal, pos);\n      }\n      pos.addTerm(term, offsets != null ? offsets[i] : null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"src/java/org/apache/lucene/index/PositionBasedTermVectorMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"  /**\n   * Callback for the TermVectorReader. \n   * @param term\n   * @param frequency\n   * @param offsets\n   * @param positions\n   */\n  @Override\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    for (int i = 0; i < positions.length; i++) {\n      Integer posVal = Integer.valueOf(positions[i]);\n      TVPositionInfo pos = currentPositions.get(posVal);\n      if (pos == null) {\n        pos = new TVPositionInfo(positions[i], storeOffsets);\n        currentPositions.put(posVal, pos);\n      }\n      pos.addTerm(term, offsets != null ? offsets[i] : null);\n    }\n  }\n\n","sourceOld":"  /**\n   * Callback for the TermVectorReader. \n   * @param term\n   * @param frequency\n   * @param offsets\n   * @param positions\n   */\n  @Override\n  public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n    for (int i = 0; i < positions.length; i++) {\n      Integer posVal = Integer.valueOf(positions[i]);\n      TVPositionInfo pos = currentPositions.get(posVal);\n      if (pos == null) {\n        pos = new TVPositionInfo(positions[i], storeOffsets);\n        currentPositions.put(posVal, pos);\n      }\n      pos.addTerm(term, offsets != null ? offsets[i] : null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["6bcde5e3f23911110baa101ed062b544162825b5"],"8a9e385641d717e641408d8fbbc62be8fc766357":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"4e1ce9be74263e9659aad8a6ee1f213193710b71":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d"],"b4dd877b7dbaadcc3ffef1cd9d01aa6e2aab281d":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}