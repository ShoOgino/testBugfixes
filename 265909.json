{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","sourceNew":"  @Override\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","sourceNew":"  /** Expert: called to re-write queries into primitive queries.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","sourceNew":"  /** Expert: called to re-write queries into primitive queries.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","sourceNew":"  /** Expert: called to re-write queries into primitive queries.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#rewrite(Query).mjava","sourceNew":"  /** Expert: called to re-write queries into primitive queries.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","sourceOld":"  /** Expert: called to re-write queries into primitive queries.\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public Query rewrite(Query original) throws IOException {\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","3a119bbc8703c10faa329ec201c654b3a35a1e3e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}