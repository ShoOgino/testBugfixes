{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77855215e331ce146763531cb9b0c050726f6ae5","date":1338323851,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ToParentBlockJoinQuery.ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f400d1b6b61e87efe596bd64726f080f9a29f0","date":1366027276,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<Document>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161","date":1378462032,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new CachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.shutdown();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter, random().nextBoolean()), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter, random().nextBoolean()),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(new FilteredQuery(childJoinQuery, parentsFilter), 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(new FilteredQuery(childJoinQuery, new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(parentQuery)), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(new FilteredQuery(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\")))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new FilteredQuery(new ToChildBlockJoinQuery(us, parentsFilter),\n        skill(\"java\")), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new FilteredQuery(new ToChildBlockJoinQuery(us, parentsFilter),\n                                          new QueryWrapperFilter(rubyPython)), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, parentsFilter, 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(childJoinQuery, new QueryWrapperFilter(parentQuery), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter),\n        skill(\"java\"), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new ToChildBlockJoinQuery(us, parentsFilter),\n                                          new QueryWrapperFilter(rubyPython), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(new FilteredQuery(childJoinQuery, parentsFilter), 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(new FilteredQuery(childJoinQuery, new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(parentQuery)), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(new FilteredQuery(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\")))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new FilteredQuery(new ToChildBlockJoinQuery(us, parentsFilter),\n        skill(\"java\")), 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new FilteredQuery(new ToChildBlockJoinQuery(us, parentsFilter),\n                                          new QueryWrapperFilter(rubyPython.build())), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery childQuery = new BooleanQuery();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery, parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(new FilteredQuery(childJoinQuery, parentsFilter), 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(new FilteredQuery(childJoinQuery, new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(parentQuery)), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(new FilteredQuery(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\")))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new FilteredQuery(new ToChildBlockJoinQuery(us, parentsFilter),\n        skill(\"java\")), 10).totalHits );\n\n    BooleanQuery rubyPython = new BooleanQuery();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new FilteredQuery(new ToChildBlockJoinQuery(us, parentsFilter),\n                                          new QueryWrapperFilter(rubyPython)), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentsFilter, Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new QueryWrapperFilter(parentQuery), Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(new FilteredQuery(childJoinQuery, parentsFilter), 10).totalHits);\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\")))), 10).totalHits);\n      \n    // not found test\n    assertEquals(\"noone live there\", 0, s.search(new FilteredQuery(childJoinQuery, new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))))), 1).totalHits);\n    assertEquals(\"noone live there\", 0, s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    TopDocs ukOnly = s.search(new FilteredQuery(childJoinQuery, new QueryWrapperFilter(parentQuery)), 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    // looking for US candidates\n    TopDocs usThen = s.search(new FilteredQuery(childJoinQuery , new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\")))), 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    assertEquals(\"java skills in US\", 1, s.search(new FilteredQuery(new ToChildBlockJoinQuery(us, parentsFilter),\n        skill(\"java\")), 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    assertEquals(\"ruby skills in US\", 1, s.search(new FilteredQuery(new ToChildBlockJoinQuery(us, parentsFilter),\n                                          new QueryWrapperFilter(rubyPython.build())), 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitDocIdSetFilter parentsFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentsFilter, Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\")))), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"Oz\"))), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new QueryWrapperFilter(parentQuery), Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new QueryWrapperFilter(new TermQuery(new Term(\"country\", \"United States\"))), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f37df79147ed4dd608300c2336c2979db98be","date":1436271524,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(NumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a8a6e8618a812308bce0a978e52ca5c453a112","date":1457444484,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(LegacyNumericRangeQuery.newIntRange(\"year\", 2006, 2011, true, true), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","date":1457550664,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n\n    w.addDocuments(!turn ? docs:docs2);\n\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n\n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n\n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n\n\n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2,\n        s.search(new ToChildBlockJoinQuery(us,\n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n\n    w.addDocuments(!turn ? docs:docs2);\n\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n\n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n\n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n\n\n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2,\n        s.search(new ToChildBlockJoinQuery(us,\n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n    \n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n    \n    w.addDocuments(!turn ? docs:docs2);\n    \n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n      \n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n      \n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n      \n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n      \n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n    \n    \n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2, \n        s.search(new ToChildBlockJoinQuery(us, \n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"470eaac3a77cf637b62126a5408b178d7be93eb1","date":1531830722,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n\n    w.addDocuments(!turn ? docs:docs2);\n\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    assertEquals(\"no filter - both passed\", 2, s.count(childJoinQuery));\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.count(query));\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.count(query));\n\n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.count(query));\n\n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n\n\n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2,\n        s.count(new ToChildBlockJoinQuery(us,\n                          parentsFilter)) );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.count(query));\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.count(query) );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n\n    w.addDocuments(!turn ? docs:docs2);\n\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n\n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n\n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n\n\n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2,\n        s.search(new ToChildBlockJoinQuery(us,\n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n\n    w.addDocuments(!turn ? docs:docs2);\n\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    assertEquals(\"no filter - both passed\", 2, s.count(childJoinQuery));\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.count(query));\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.count(query));\n\n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.count(query));\n\n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n\n\n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2,\n        s.count(new ToChildBlockJoinQuery(us,\n                          parentsFilter)) );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.count(query));\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.count(query) );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n\n    w.addDocuments(!turn ? docs:docs2);\n\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    assertEquals(\"no filter - both passed\", 2, s.search(childJoinQuery, 10).totalHits);\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.search(query, 10).totalHits);\n\n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.search(query, 1).totalHits);\n\n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n\n\n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2,\n        s.search(new ToChildBlockJoinQuery(us,\n                          parentsFilter), 10).totalHits );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.search(query, 10).totalHits );\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.search(query, 10).totalHits );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestBlockJoin#testSimpleFilter().mjava","sourceNew":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n\n    w.addDocuments(!turn ? docs:docs2);\n\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    assertEquals(\"no filter - both passed\", 2, s.count(childJoinQuery));\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.count(query));\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.count(query));\n\n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.count(query));\n\n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits.value);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits.value);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n\n\n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2,\n        s.count(new ToChildBlockJoinQuery(us,\n                          parentsFilter)) );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.count(query));\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.count(query) );\n\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSimpleFilter() throws Exception {\n\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<>();\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    Collections.shuffle(docs, random());\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n\n    final List<Document> docs2 = new ArrayList<>();\n    docs2.add(makeJob(\"ruby\", 2005));\n    docs2.add(makeJob(\"java\", 2006));\n    Collections.shuffle(docs2, random());\n    docs2.add(makeResume(\"Frank\", \"United States\"));\n\n    addSkillless(w);\n    boolean turn = random().nextBoolean();\n    w.addDocuments(turn ? docs:docs2);\n\n    addSkillless(w);\n\n    w.addDocuments(!turn ? docs:docs2);\n\n    addSkillless(w);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r, false);\n\n    // Create a filter that defines \"parent\" documents in the index - in this case resumes\n    BitSetProducer parentsFilter = new QueryBitSetProducer(new TermQuery(new Term(\"docType\", \"resume\")));\n    CheckJoinIndex.check(r, parentsFilter);\n\n    // Define child document criteria (finds an example of relevant work experience)\n    BooleanQuery.Builder childQuery = new BooleanQuery.Builder();\n    childQuery.add(new BooleanClause(new TermQuery(new Term(\"skill\", \"java\")), Occur.MUST));\n    childQuery.add(new BooleanClause(IntPoint.newRangeQuery(\"year\", 2006, 2011), Occur.MUST));\n\n    // Define parent document criteria (find a resident in the UK)\n    Query parentQuery = new TermQuery(new Term(\"country\", \"United Kingdom\"));\n\n    // Wrap the child document query to 'join' any matches\n    // up to corresponding parent:\n    ToParentBlockJoinQuery childJoinQuery = new ToParentBlockJoinQuery(childQuery.build(), parentsFilter, ScoreMode.Avg);\n\n    assertEquals(\"no filter - both passed\", 2, s.count(childJoinQuery));\n\n    Query query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.count(query));\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"docType\", \"resume\")), Occur.FILTER)\n        .build();\n    assertEquals(\"dummy filter passes everyone \", 2, s.count(query));\n\n    // not found test\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"Oz\")), Occur.FILTER)\n        .build();\n    assertEquals(\"noone live there\", 0, s.count(query));\n\n    // apply the UK filter by the searcher\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(parentQuery, Occur.FILTER)\n        .build();\n    TopDocs ukOnly = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, ukOnly.totalHits);\n    assertEquals( \"Lisa\", r.document(ukOnly.scoreDocs[0].doc).get(\"name\"));\n\n    query = new BooleanQuery.Builder()\n        .add(childJoinQuery, Occur.MUST)\n        .add(new TermQuery(new Term(\"country\", \"United States\")), Occur.FILTER)\n        .build();\n    // looking for US candidates\n    TopDocs usThen = s.search(query, 1);\n    assertEquals(\"has filter - single passed\", 1, usThen.totalHits);\n    assertEquals(\"Frank\", r.document(usThen.scoreDocs[0].doc).get(\"name\"));\n\n\n    TermQuery us = new TermQuery(new Term(\"country\", \"United States\"));\n    assertEquals(\"@ US we have java and ruby\", 2,\n        s.count(new ToChildBlockJoinQuery(us,\n                          parentsFilter)) );\n\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(skill(\"java\"), Occur.FILTER)\n        .build();\n    assertEquals(\"java skills in US\", 1, s.count(query));\n\n    BooleanQuery.Builder rubyPython = new BooleanQuery.Builder();\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"ruby\")), Occur.SHOULD);\n    rubyPython.add(new TermQuery(new Term(\"skill\", \"python\")), Occur.SHOULD);\n    query = new BooleanQuery.Builder()\n        .add(new ToChildBlockJoinQuery(us, parentsFilter), Occur.MUST)\n        .add(rubyPython.build(), Occur.FILTER)\n        .build();\n    assertEquals(\"ruby skills in US\", 1, s.count(query) );\n\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a67f37df79147ed4dd608300c2336c2979db98be":["4b3915945926c0bf7def01b0c504977709d3aed3"],"37a8a6e8618a812308bce0a978e52ca5c453a112":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["a67f37df79147ed4dd608300c2336c2979db98be"],"4b3915945926c0bf7def01b0c504977709d3aed3":["1db68e96dd908fcd79ef809095822736aa601d08"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4","0e7bc21595222ae4f75509300fbb7726691f387f"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["77855215e331ce146763531cb9b0c050726f6ae5"],"1db68e96dd908fcd79ef809095822736aa601d08":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["0e7bc21595222ae4f75509300fbb7726691f387f","470eaac3a77cf637b62126a5408b178d7be93eb1"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"77855215e331ce146763531cb9b0c050726f6ae5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["470eaac3a77cf637b62126a5408b178d7be93eb1"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0e7bc21595222ae4f75509300fbb7726691f387f"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["fb17639909a369c1e64866842e5c213440acc17e"],"a67f37df79147ed4dd608300c2336c2979db98be":["770342641f7b505eaa8dccdc666158bff2419109"],"37a8a6e8618a812308bce0a978e52ca5c453a112":["8d3c6656a576996d73c1ac211d08e3f7a8fc02a4"],"4b3915945926c0bf7def01b0c504977709d3aed3":["a67f37df79147ed4dd608300c2336c2979db98be"],"770342641f7b505eaa8dccdc666158bff2419109":["37a8a6e8618a812308bce0a978e52ca5c453a112"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["1db68e96dd908fcd79ef809095822736aa601d08"],"19f400d1b6b61e87efe596bd64726f080f9a29f0":["49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161"],"1db68e96dd908fcd79ef809095822736aa601d08":["4b3915945926c0bf7def01b0c504977709d3aed3"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77855215e331ce146763531cb9b0c050726f6ae5"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","470eaac3a77cf637b62126a5408b178d7be93eb1"],"49a8cbd66bc94e18d7b9087e42dbc6cc0ee0c161":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"77855215e331ce146763531cb9b0c050726f6ae5":["19f400d1b6b61e87efe596bd64726f080f9a29f0"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"8d3c6656a576996d73c1ac211d08e3f7a8fc02a4":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0e7bc21595222ae4f75509300fbb7726691f387f"],"470eaac3a77cf637b62126a5408b178d7be93eb1":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}