{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setTermBuffer(inStr, oldPos, gramSize);\n    offsetAtt.setOffset(input.correctOffset(oldPos), input.correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a82fda1447250ff156ff3b862d94a99bf0a3c23c","4c807c4005aae1acaf5cebc9af40883985fb89a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"91d0e16ae1a83f5658ad4d16453fb88650460140","date":1250287302,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setTermBuffer(inStr, oldPos, gramSize);\n    offsetAtt.setOffset(input.correctOffset(oldPos), input.correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setTermBuffer(inStr, oldPos, gramSize);\n    offsetAtt.setOffset(input.correctOffset(oldPos), input.correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a82fda1447250ff156ff3b862d94a99bf0a3c23c","date":1252649533,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setTermBuffer(inStr, oldPos, gramSize);\n    offsetAtt.setOffset(correctOffset(oldPos), correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setTermBuffer(inStr, oldPos, gramSize);\n    offsetAtt.setOffset(input.correctOffset(oldPos), input.correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","bugFix":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"bugIntro":["4c807c4005aae1acaf5cebc9af40883985fb89a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setTermBuffer(inStr, oldPos, gramSize);\n    offsetAtt.setOffset(correctOffset(oldPos), correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setTermBuffer(inStr, oldPos, gramSize);\n    offsetAtt.setOffset(correctOffset(oldPos), correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/ngram/NGramTokenizer#incrementToken().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setTermBuffer(inStr, oldPos, gramSize);\n    offsetAtt.setOffset(correctOffset(oldPos), correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS. */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    clearAttributes();\n    if (!started) {\n      started = true;\n      gramSize = minGram;\n      char[] chars = new char[1024];\n      input.read(chars);\n      inStr = new String(chars).trim();  // remove any trailing empty strings \n      inLen = inStr.length();\n    }\n\n    if (pos+gramSize > inLen) {            // if we hit the end of the string\n      pos = 0;                           // reset to beginning of string\n      gramSize++;                        // increase n-gram size\n      if (gramSize > maxGram)            // we are done\n        return false;\n      if (pos+gramSize > inLen)\n        return false;\n    }\n\n    int oldPos = pos;\n    pos++;\n    termAtt.setTermBuffer(inStr, oldPos, gramSize);\n    offsetAtt.setOffset(correctOffset(oldPos), correctOffset(oldPos+gramSize));\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"91d0e16ae1a83f5658ad4d16453fb88650460140":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["91d0e16ae1a83f5658ad4d16453fb88650460140"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}