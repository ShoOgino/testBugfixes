{"path":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","commits":[{"id":"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef","date":1063245093,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * ({@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   */\n  protected Query getPrefixQuery(String field, String termStr)\n  {\n    if (lowercaseWildcardTerms) {\n        termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199fcfef6092b06089a588bf55391b8ce5aea8f5","date":1064896716,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * ({@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseWildcardTerms) {\n        termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query (similar to\n   * ({@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   */\n  protected Query getPrefixQuery(String field, String termStr)\n  {\n    if (lowercaseWildcardTerms) {\n        termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c","date":1078315633,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * ({@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseWildcardTerms) {\n  termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query (similar to\n   * ({@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseWildcardTerms) {\n        termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95f618017540c7d142945729862463ce101e0b95","date":1097869663,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseWildcardTerms) {\n  termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query (similar to\n   * ({@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseWildcardTerms) {\n  termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf","date":1103065373,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseWildcardTerms) {\n  termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df63e0c4264f6da210aa1c1c3cb609554f4f43af","date":1161929844,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (!allowLeadingWildcard && termStr.startsWith(\"*\"))\n      throw new ParseException(\"'*' not allowed as first character in PrefixQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a28fe77124a2ece3a2af0a5c1b264e07c7cae728","date":1220116339,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (!allowLeadingWildcard && termStr.startsWith(\"*\"))\n      throw new ParseException(\"'*' not allowed as first character in PrefixQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newPrefixQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (!allowLeadingWildcard && termStr.startsWith(\"*\"))\n      throw new ParseException(\"'*' not allowed as first character in PrefixQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return new PrefixQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#getPrefixQuery(String,String).mjava","sourceNew":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (!allowLeadingWildcard && termStr.startsWith(\"*\"))\n      throw new ParseException(\"'*' not allowed as first character in PrefixQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newPrefixQuery(t);\n  }\n\n","sourceOld":"  /**\n   * Factory method for generating a query (similar to\n   * {@link #getWildcardQuery}). Called when parser parses an input term\n   * token that uses prefix notation; that is, contains a single '*' wildcard\n   * character as its last character. Since this is a special case\n   * of generic wildcard term, and such a query can be optimized easily,\n   * this usually results in a different query object.\n   *<p>\n   * Depending on settings, a prefix term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with wildcard templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * wild card queries, which may be necessary due to missing analyzer calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token to use for building term for the query\n   *    (<b>without</b> trailing '*' character!)\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getPrefixQuery(String field, String termStr) throws ParseException\n  {\n    if (!allowLeadingWildcard && termStr.startsWith(\"*\"))\n      throw new ParseException(\"'*' not allowed as first character in PrefixQuery\");\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    Term t = new Term(field, termStr);\n    return newPrefixQuery(t);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95f618017540c7d142945729862463ce101e0b95":["f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c"],"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf":["95f618017540c7d142945729862463ce101e0b95"],"199fcfef6092b06089a588bf55391b8ce5aea8f5":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c":["199fcfef6092b06089a588bf55391b8ce5aea8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["df63e0c4264f6da210aa1c1c3cb609554f4f43af"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"df63e0c4264f6da210aa1c1c3cb609554f4f43af":["10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"]},"commit2Childs":{"95f618017540c7d142945729862463ce101e0b95":["10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf"],"10816cc4e1c2ee9a5cf53c07b4672ef93e1662bf":["df63e0c4264f6da210aa1c1c3cb609554f4f43af"],"199fcfef6092b06089a588bf55391b8ce5aea8f5":["f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c"],"f9eacfbe2ad1cb736606c0e0093f7f3ab4a2e13c":["95f618017540c7d142945729862463ce101e0b95"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dc3f3d3156ee3e335155b8a8f44f7e926db09ef"],"a28fe77124a2ece3a2af0a5c1b264e07c7cae728":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9dc3f3d3156ee3e335155b8a8f44f7e926db09ef":["199fcfef6092b06089a588bf55391b8ce5aea8f5"],"df63e0c4264f6da210aa1c1c3cb609554f4f43af":["a28fe77124a2ece3a2af0a5c1b264e07c7cae728"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}