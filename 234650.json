{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","commits":[{"id":"01f63edf15d2e3dbb3355d974f733b263098cb46","date":1533724999,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  private List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      if (response == null || response.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n      }\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8f5c7f5182346fe6abaab42f901d3728750aa0bc","861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","sourceNew":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  private List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      if (response == null || response.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n      }\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  private List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      if (response == null || response.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n      }\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc","date":1564743680,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","sourceNew":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  private List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      if (response == null || response.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n      }\n      if (response.size() == 1 && response.get(0).contains(\"not in the whitelist\")) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not execute \" + fourLetterWordCommand +\n            \" towards ZK host \" + zkHostPort + \". Add this line to the 'zoo.cfg' \" +\n            \"configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter \" +\n            \"'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\");\n      }\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  private List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      if (response == null || response.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n      }\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e08cb336d64c53393bb8a1b09f3af187b885f626","date":1564751020,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","sourceNew":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  protected List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  private List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      if (response == null || response.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n      }\n      if (response.size() == 1 && response.get(0).contains(\"not in the whitelist\")) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not execute \" + fourLetterWordCommand +\n            \" towards ZK host \" + zkHostPort + \". Add this line to the 'zoo.cfg' \" +\n            \"configuration file on each zookeeper node: '4lw.commands.whitelist=mntr,conf,ruok'. See also chapter \" +\n            \"'Setting Up an External ZooKeeper Ensemble' in the Solr Reference Guide.\");\n      }\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f5c7f5182346fe6abaab42f901d3728750aa0bc","date":1565161837,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","sourceNew":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  protected List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  private List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      if (response == null || response.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Empty response from Zookeeper \" + zkHostPort);\n      }\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","bugFix":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"861042e9f93a922bfb6b6b2c3d44b61fb3504894","date":1587133827,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkRawResponse(String,String).mjava","sourceNew":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  protected List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), StandardCharsets.UTF_8);\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8))) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Sends a four-letter-word command to one particular Zookeeper server and returns the response as list of strings\n   * @param zkHostPort the host:port for one zookeeper server to access\n   * @param fourLetterWordCommand the custom 4-letter command to send to Zookeeper\n   * @return a list of lines returned from Zookeeper\n   */\n  protected List<String> getZkRawResponse(String zkHostPort, String fourLetterWordCommand) {\n    String[] hostPort = zkHostPort.split(\":\");\n    String host = hostPort[0];\n    int port = ZOOKEEPER_DEFAULT_PORT;\n    if (hostPort.length > 1) {\n      port = Integer.parseInt(hostPort[1]);\n    }\n\n    try (\n        Socket socket = new Socket(host, port);\n        Writer writer = new OutputStreamWriter(socket.getOutputStream(), \"utf-8\");\n        PrintWriter out = new PrintWriter(writer, true);\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), \"utf-8\"));) {\n      out.println(fourLetterWordCommand);\n      List<String> response = in.lines().collect(Collectors.toList());\n      log.debug(\"Got response from ZK on host {} and port {}: {}\", host, port, response);\n      return response;\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Failed talking to Zookeeper \" + zkHostPort, e);\n    }\n  }\n\n","bugFix":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["1778938cb7fb298e6e07a43e2d5acaf552d61518","e08cb336d64c53393bb8a1b09f3af187b885f626"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"]},"commit2Childs":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc":["e08cb336d64c53393bb8a1b09f3af187b885f626"],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["8f5c7f5182346fe6abaab42f901d3728750aa0bc","1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}