{"path":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","commits":[{"id":"232252bc7056b698c1e1c550f4b97a9a3c00e520","date":1372943634,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","pathOld":"/dev/null","sourceNew":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong(); \n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        FieldReader current = new FieldReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        FieldReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a509b6df968a74c38a0528f5bf6ea26f503b756","date":1373188457,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","sourceNew":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong(); \n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n  }\n\n","sourceOld":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong(); \n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        FieldReader current = new FieldReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        FieldReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b","date":1373471768,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","sourceNew":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n    //tmpname = termsFileName;\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong(); \n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n  }\n\n","sourceOld":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong(); \n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"050ba1ba249733cac50c2612418b7179591d2df9","date":1374633633,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","sourceNew":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong();\n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n  }\n\n","sourceOld":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n    //tmpname = termsFileName;\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong(); \n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f8633b56150a205774ee3e2adf1452a81b0d904","date":1376926002,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","sourceNew":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong();\n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong();\n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        in.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/temp/TempFSTTermsReader#TempFSTTermsReader(SegmentReadState,TempPostingsReaderBase).mjava","sourceNew":null,"sourceOld":"  public TempFSTTermsReader(SegmentReadState state, TempPostingsReaderBase postingsReader) throws IOException {\n    final String termsFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, TempFSTTermsWriter.TERMS_EXTENSION);\n\n    this.postingsReader = postingsReader;\n    this.in = state.directory.openInput(termsFileName, state.context);\n\n    boolean success = false;\n    try {\n      readHeader(in);\n      this.postingsReader.init(in);\n      seekDir(in);\n\n      final FieldInfos fieldInfos = state.fieldInfos;\n      final int numFields = in.readVInt();\n      for (int i = 0; i < numFields; i++) {\n        int fieldNumber = in.readVInt();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n        long numTerms = in.readVLong();\n        long sumTotalTermFreq = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY ? -1 : in.readVLong();\n        long sumDocFreq = in.readVLong();\n        int docCount = in.readVInt();\n        int longsSize = in.readVInt();\n        TermsReader current = new TermsReader(fieldInfo, numTerms, sumTotalTermFreq, sumDocFreq, docCount, longsSize);\n        TermsReader previous = fields.put(fieldInfo.name, current);\n        checkFieldSummary(state.segmentInfo, current, previous);\n      }\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["4f8633b56150a205774ee3e2adf1452a81b0d904"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["232252bc7056b698c1e1c550f4b97a9a3c00e520"],"4f8633b56150a205774ee3e2adf1452a81b0d904":["050ba1ba249733cac50c2612418b7179591d2df9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"050ba1ba249733cac50c2612418b7179591d2df9":["0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b"]},"commit2Childs":{"0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b":["050ba1ba249733cac50c2612418b7179591d2df9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232252bc7056b698c1e1c550f4b97a9a3c00e520","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"232252bc7056b698c1e1c550f4b97a9a3c00e520":["3a509b6df968a74c38a0528f5bf6ea26f503b756"],"3a509b6df968a74c38a0528f5bf6ea26f503b756":["0bb367a7107f7ab6bfbb3d504d5f17f9a452e26b"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"4f8633b56150a205774ee3e2adf1452a81b0d904":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"050ba1ba249733cac50c2612418b7179591d2df9":["4f8633b56150a205774ee3e2adf1452a81b0d904"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}