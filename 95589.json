{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testSimple().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testSimple().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() {\n    FacetArrays arrays = new FacetArrays(new IntArrayAllocator(1, 1), new FloatArrayAllocator(1, 1));\n\n    int[] intArray = arrays.getIntArray();\n    // Set the element, then free\n    intArray[0] = 1;\n    arrays.free();\n\n    // We should expect a cleared array back\n    intArray = arrays.getIntArray();\n    assertEquals(\"Expected a cleared array back, but the array is still filled\", 0, intArray[0]);\n\n    float[] floatArray = arrays.getFloatArray();\n    // Set the element, then free\n    floatArray[0] = 1.0f;\n    arrays.free();\n\n    // We should expect a cleared array back\n    floatArray = arrays.getFloatArray();\n    assertEquals(\"Expected a cleared array back, but the array is still filled\", 0.0f, floatArray[0], 0.0);\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() {\n    FacetArrays arrays = new FacetArrays(new IntArrayAllocator(1, 1), new FloatArrayAllocator(1, 1));\n\n    int[] intArray = arrays.getIntArray();\n    // Set the element, then free\n    intArray[0] = 1;\n    arrays.free();\n\n    // We should expect a cleared array back\n    intArray = arrays.getIntArray();\n    assertEquals(\"Expected a cleared array back, but the array is still filled\", 0, intArray[0]);\n\n    float[] floatArray = arrays.getFloatArray();\n    // Set the element, then free\n    floatArray[0] = 1.0f;\n    arrays.free();\n\n    // We should expect a cleared array back\n    floatArray = arrays.getFloatArray();\n    assertEquals(\"Expected a cleared array back, but the array is still filled\", 0.0f, floatArray[0], 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a2548b7f050533ac9a884b31cab5fb6f0386fbb","date":1355233860,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testSimple().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSimple() {\n    FacetArrays arrays = new FacetArrays(new IntArrayAllocator(1, 1), new FloatArrayAllocator(1, 1));\n\n    int[] intArray = arrays.getIntArray();\n    // Set the element, then free\n    intArray[0] = 1;\n    arrays.free();\n\n    // We should expect a cleared array back\n    intArray = arrays.getIntArray();\n    assertEquals(\"Expected a cleared array back, but the array is still filled\", 0, intArray[0]);\n\n    float[] floatArray = arrays.getFloatArray();\n    // Set the element, then free\n    floatArray[0] = 1.0f;\n    arrays.free();\n\n    // We should expect a cleared array back\n    floatArray = arrays.getFloatArray();\n    assertEquals(\"Expected a cleared array back, but the array is still filled\", 0.0f, floatArray[0], 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/TestFacetArrays#testSimple().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testSimple() {\n    FacetArrays arrays = new FacetArrays(new IntArrayAllocator(1, 1), new FloatArrayAllocator(1, 1));\n\n    int[] intArray = arrays.getIntArray();\n    // Set the element, then free\n    intArray[0] = 1;\n    arrays.free();\n\n    // We should expect a cleared array back\n    intArray = arrays.getIntArray();\n    assertEquals(\"Expected a cleared array back, but the array is still filled\", 0, intArray[0]);\n\n    float[] floatArray = arrays.getFloatArray();\n    // Set the element, then free\n    floatArray[0] = 1.0f;\n    arrays.free();\n\n    // We should expect a cleared array back\n    floatArray = arrays.getFloatArray();\n    assertEquals(\"Expected a cleared array back, but the array is still filled\", 0.0f, floatArray[0], 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a2548b7f050533ac9a884b31cab5fb6f0386fbb"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2a2548b7f050533ac9a884b31cab5fb6f0386fbb"],"2a2548b7f050533ac9a884b31cab5fb6f0386fbb":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}