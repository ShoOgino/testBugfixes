{"path":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#updateSlice(String,DocCollection,Slice).mjava","commits":[{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#updateSlice(String,DocCollection,Slice).mjava","pathOld":"/dev/null","sourceNew":"  public static DocCollection updateSlice(String collectionName, DocCollection collection, Slice slice) {\n    DocCollection newCollection = null;\n    Map<String, Slice> slices;\n\n    if (collection == null) {\n      //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n      // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n      slices = new LinkedHashMap<>(1);\n      slices.put(slice.getName(), slice);\n      Map<String, Object> props = new HashMap<>(1);\n      props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\", ImplicitDocRouter.NAME));\n      newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n    } else {\n      slices = new LinkedHashMap<>(collection.getSlicesMap()); // make a shallow copy\n      slices.put(slice.getName(), slice);\n      newCollection = collection.copyWithSlices(slices);\n    }\n\n    return newCollection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#updateSlice(String,DocCollection,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#updateSlice(String,DocCollection,Slice).mjava","sourceNew":"  public static DocCollection updateSlice(String collectionName, DocCollection collection, Slice slice) {\n    DocCollection newCollection = null;\n    Map<String, Slice> slices;\n\n    if (collection == null) {\n      //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n      // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n      slices = new LinkedHashMap<>(1);\n      slices.put(slice.getName(), slice);\n      Map<String, Object> props = new HashMap<>(1);\n      props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(NAME, ImplicitDocRouter.NAME));\n      newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n    } else {\n      slices = new LinkedHashMap<>(collection.getSlicesMap()); // make a shallow copy\n      slices.put(slice.getName(), slice);\n      newCollection = collection.copyWithSlices(slices);\n    }\n\n    return newCollection;\n  }\n\n","sourceOld":"  public static DocCollection updateSlice(String collectionName, DocCollection collection, Slice slice) {\n    DocCollection newCollection = null;\n    Map<String, Slice> slices;\n\n    if (collection == null) {\n      //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n      // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n      slices = new LinkedHashMap<>(1);\n      slices.put(slice.getName(), slice);\n      Map<String, Object> props = new HashMap<>(1);\n      props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\", ImplicitDocRouter.NAME));\n      newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n    } else {\n      slices = new LinkedHashMap<>(collection.getSlicesMap()); // make a shallow copy\n      slices.put(slice.getName(), slice);\n      newCollection = collection.copyWithSlices(slices);\n    }\n\n    return newCollection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#updateSlice(String,DocCollection,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#updateSlice(String,DocCollection,Slice).mjava","sourceNew":"  public static DocCollection updateSlice(String collectionName, DocCollection collection, Slice slice) {\n    DocCollection newCollection = null;\n    Map<String, Slice> slices;\n\n    if (collection == null) {\n      //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n      // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n      slices = new LinkedHashMap<>(1);\n      slices.put(slice.getName(), slice);\n      Map<String, Object> props = new HashMap<>(1);\n      props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(NAME, ImplicitDocRouter.NAME));\n      newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n    } else {\n      slices = new LinkedHashMap<>(collection.getSlicesMap()); // make a shallow copy\n      slices.put(slice.getName(), slice);\n      newCollection = collection.copyWithSlices(slices);\n    }\n\n    return newCollection;\n  }\n\n","sourceOld":"  public static DocCollection updateSlice(String collectionName, DocCollection collection, Slice slice) {\n    DocCollection newCollection = null;\n    Map<String, Slice> slices;\n\n    if (collection == null) {\n      //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n      // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n      slices = new LinkedHashMap<>(1);\n      slices.put(slice.getName(), slice);\n      Map<String, Object> props = new HashMap<>(1);\n      props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(\"name\", ImplicitDocRouter.NAME));\n      newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n    } else {\n      slices = new LinkedHashMap<>(collection.getSlicesMap()); // make a shallow copy\n      slices.put(slice.getName(), slice);\n      newCollection = collection.copyWithSlices(slices);\n    }\n\n    return newCollection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#updateSlice(String,DocCollection,Slice).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/overseer/CollectionMutator#updateSlice(String,DocCollection,Slice).mjava","sourceNew":"  public static DocCollection updateSlice(String collectionName, DocCollection collection, Slice slice) {\n    DocCollection newCollection = null;\n    Map<String, Slice> slices;\n\n    if (collection == null) {\n      //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n      // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n      slices = new LinkedHashMap<>(1);\n      slices.put(slice.getName(), slice);\n      Map<String, Object> props = new HashMap<>(1);\n      props.put(DocCollection.DOC_ROUTER, Utils.makeMap(NAME, ImplicitDocRouter.NAME));\n      newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n    } else {\n      slices = new LinkedHashMap<>(collection.getSlicesMap()); // make a shallow copy\n      slices.put(slice.getName(), slice);\n      newCollection = collection.copyWithSlices(slices);\n    }\n\n    return newCollection;\n  }\n\n","sourceOld":"  public static DocCollection updateSlice(String collectionName, DocCollection collection, Slice slice) {\n    DocCollection newCollection = null;\n    Map<String, Slice> slices;\n\n    if (collection == null) {\n      //  when updateSlice is called on a collection that doesn't exist, it's currently when a core is publishing itself\n      // without explicitly creating a collection.  In this current case, we assume custom sharding with an \"implicit\" router.\n      slices = new LinkedHashMap<>(1);\n      slices.put(slice.getName(), slice);\n      Map<String, Object> props = new HashMap<>(1);\n      props.put(DocCollection.DOC_ROUTER, ZkNodeProps.makeMap(NAME, ImplicitDocRouter.NAME));\n      newCollection = new DocCollection(collectionName, slices, props, new ImplicitDocRouter());\n    } else {\n      slices = new LinkedHashMap<>(collection.getSlicesMap()); // make a shallow copy\n      slices.put(slice.getName(), slice);\n      newCollection = collection.copyWithSlices(slices);\n    }\n\n    return newCollection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a","1390137e395d2f07f9ba5b8c43d293befe84d563"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b693a83132c9e45afcd564fd65a25b60ed80388b"]},"commit2Childs":{"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["d2638f781be724518ff6c2263d14a48cf6e68017","b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}