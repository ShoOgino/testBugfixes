{"path":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","commits":[{"id":"93f558d9f0b5a234a28dcc95036e388fcbbadaf7","date":1446466934,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","pathOld":"/dev/null","sourceNew":"    private boolean pluginExists(SolrConfig.SolrPluginInfo info, ConfigOverlay overlay, String name) {\n      List<PluginInfo> l = req.getCore().getSolrConfig().getPluginInfos(info.clazz.getName());\n      for (PluginInfo pluginInfo : l) if(name.equals( pluginInfo.name)) return true;\n      return overlay.getNamedPlugins(info.getCleanTag()).containsKey(name);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","sourceNew":"    private boolean pluginExists(SolrConfig.SolrPluginInfo info, ConfigOverlay overlay, String name) {\n      List<PluginInfo> l = req.getCore().getSolrConfig().getPluginInfos(info.clazz.getName());\n      for (PluginInfo pluginInfo : l) if (name.equals(pluginInfo.name)) return true;\n      return overlay.getNamedPlugins(info.getCleanTag()).containsKey(name);\n    }\n\n","sourceOld":"    private boolean pluginExists(SolrConfig.SolrPluginInfo info, ConfigOverlay overlay, String name) {\n      List<PluginInfo> l = req.getCore().getSolrConfig().getPluginInfos(info.clazz.getName());\n      for (PluginInfo pluginInfo : l) if(name.equals( pluginInfo.name)) return true;\n      return overlay.getNamedPlugins(info.getCleanTag()).containsKey(name);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","sourceNew":"    private boolean pluginExists(SolrConfig.SolrPluginInfo info, ConfigOverlay overlay, String name) {\n      List<PluginInfo> l = req.getCore().getSolrConfig().getPluginInfos(info.clazz.getName());\n      for (PluginInfo pluginInfo : l) if(name.equals( pluginInfo.name)) return true;\n      return overlay.getNamedPlugins(info.getCleanTag()).containsKey(name);\n    }\n\n","sourceOld":"    private boolean pluginExists(SolrConfig.SolrPluginInfo info, ConfigOverlay overlay, String name) {\n      List<PluginInfo> l = req.getCore().getSolrConfig().getPluginInfos(info.clazz.getName());\n      for (PluginInfo pluginInfo : l) if (name.equals(pluginInfo.name)) return true;\n      return overlay.getNamedPlugins(info.getCleanTag()).containsKey(name);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","sourceNew":"    private boolean pluginExists(SolrConfig.SolrPluginInfo info, ConfigOverlay overlay, String name) {\n      List<PluginInfo> l = req.getCore().getSolrConfig().getPluginInfos(info.clazz.getName());\n      for (PluginInfo pluginInfo : l) if(name.equals( pluginInfo.name)) return true;\n      return overlay.getNamedPlugins(info.getCleanTag()).containsKey(name);\n    }\n\n","sourceOld":"    private boolean pluginExists(SolrConfig.SolrPluginInfo info, ConfigOverlay overlay, String name) {\n      List<PluginInfo> l = req.getCore().getSolrConfig().getPluginInfos(info.clazz.getName());\n      for (PluginInfo pluginInfo : l) if (name.equals(pluginInfo.name)) return true;\n      return overlay.getNamedPlugins(info.getCleanTag()).containsKey(name);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954ae83b7dfacaa33d48ea056448ae11f7745a93","date":1571867711,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SolrConfigHandler.Command#pluginExists(SolrConfig.SolrPluginInfo,ConfigOverlay,String).mjava","sourceNew":"    private boolean pluginExists(SolrConfig.SolrPluginInfo info, ConfigOverlay overlay, String name) {\n      List<PluginInfo> l = req.getCore().getSolrConfig().getPluginInfos(info.clazz.getName());\n      for (PluginInfo pluginInfo : l) if (name.equals(pluginInfo.name)) return true;\n      return overlay.getNamedPlugins(info.getCleanTag()).containsKey(name);\n    }\n\n","sourceOld":"    private boolean pluginExists(SolrConfig.SolrPluginInfo info, ConfigOverlay overlay, String name) {\n      List<PluginInfo> l = req.getCore().getSolrConfig().getPluginInfos(info.clazz.getName());\n      for (PluginInfo pluginInfo : l) if(name.equals( pluginInfo.name)) return true;\n      return overlay.getNamedPlugins(info.getCleanTag()).containsKey(name);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"954ae83b7dfacaa33d48ea056448ae11f7745a93":["c44cc06c26e456fe9c215072b79fce30babe3975"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["93f558d9f0b5a234a28dcc95036e388fcbbadaf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"93f558d9f0b5a234a28dcc95036e388fcbbadaf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["954ae83b7dfacaa33d48ea056448ae11f7745a93"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"954ae83b7dfacaa33d48ea056448ae11f7745a93":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93f558d9f0b5a234a28dcc95036e388fcbbadaf7"],"c44cc06c26e456fe9c215072b79fce30babe3975":["954ae83b7dfacaa33d48ea056448ae11f7745a93","b0b597c65628ca9e73913a07e81691f8229bae35"],"93f558d9f0b5a234a28dcc95036e388fcbbadaf7":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}