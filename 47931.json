{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","commits":[{"id":"68acf69be1b41192ae2278afc452bb66f6349cba","date":1357657311,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return binary.size();\n      }\n\n      @Override\n      public int size() {\n        return ordinals.size();\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    // nocommit: ugly hack to nuke size()\n    final BinaryEntry binaryEntry = binaries.get(field.number);\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return binaryEntry.count;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return binary.size();\n      }\n\n      @Override\n      public int size() {\n        return ordinals.size();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fba2a151eb3a051118cbd3b29b50049b2647580","date":1357739571,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    // nocommit: ugly hack to nuke size()\n    final BinaryEntry binaryEntry = binaries.get(field.number);\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return binaryEntry.count;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final int valueCount = binaries.get(field.number).count;\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return valueCount;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b29edfb831f9c0aeeca88ad2293b2a9cd529f6","date":1358196500,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleNormsProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    throw new AssertionError();\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f93c27491251c14ea21df71ebbf6feb9f891e6cb","date":1358211079,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader(0);\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    throw new AssertionError();\n  }\n\n","bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70d04d6fdc41a015c6f45b5b5aa3fd750182d086","date":1358214012,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader(0);\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(Util.toIntsRef(spare, scratchInts))) {\n            return 0;\n          } else {\n            return (int)-o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader(0);\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ea2628b967c08a6ead6453a19df04dcada6bb90","date":1358292213,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader(0);\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n/* nocommit: WTF ant test  -Dtestcase=TestSearchAfter -Dtests.method=testQueries -Dtests.seed=701751F140F42B9D -Dtests.slow=true -Dtests.locale=es_DO -Dtests.timezone=Asia/Sakhalin -Dtests.file.encoding=UTF-8\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(Util.toIntsRef(spare, scratchInts))) {\n            return 0;\n          } else {\n            return (int)-o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n      */\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader(0);\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(Util.toIntsRef(spare, scratchInts))) {\n            return 0;\n          } else {\n            return (int)-o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12642a697ab623c827de51d0942181f48463c931","date":1358292645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader(0);\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader(0);\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n/* nocommit: WTF ant test  -Dtestcase=TestSearchAfter -Dtests.method=testQueries -Dtests.seed=701751F140F42B9D -Dtests.slow=true -Dtests.locale=es_DO -Dtests.timezone=Asia/Sakhalin -Dtests.file.encoding=UTF-8\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(Util.toIntsRef(spare, scratchInts))) {\n            return 0;\n          } else {\n            return (int)-o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n      */\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","date":1358522034,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesProducer#getSorted(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesProducer#getSorted(FieldInfo).mjava","sourceNew":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader(0);\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final FSTEntry entry = fsts.get(field.number);\n    FST<Long> instance;\n    synchronized(this) {\n      instance = fstInstances.get(field.number);\n      if (instance == null) {\n        data.seek(entry.offset);\n        instance = new FST<Long>(data, PositiveIntOutputs.getSingleton(true));\n        fstInstances.put(field.number, instance);\n      }\n    }\n    final NumericDocValues docToOrd = getNumeric(field);\n    final FST<Long> fst = instance;\n    \n    // per-thread resources\n    final BytesReader in = fst.getBytesReader(0);\n    final Arc<Long> firstArc = new Arc<Long>();\n    final Arc<Long> scratchArc = new Arc<Long>();\n    final IntsRef scratchInts = new IntsRef();\n    final BytesRefFSTEnum<Long> fstEnum = new BytesRefFSTEnum<Long>(fst); \n    \n    return new SortedDocValues() {\n      @Override\n      public int getOrd(int docID) {\n        return (int) docToOrd.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        try {\n          in.setPosition(0);\n          fst.getFirstArc(firstArc);\n          Util.toBytesRef(Util.getByOutput(fst, ord, in, firstArc, scratchArc, scratchInts), result);\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int lookupTerm(BytesRef key, BytesRef spare) {\n        try {\n          InputOutput<Long> o = fstEnum.seekCeil(key);\n          if (o == null) {\n            return -getValueCount()-1;\n          } else if (o.input.equals(key)) {\n            return o.output.intValue();\n          } else {\n            return (int) -o.output-1;\n          }\n        } catch (IOException bogus) {\n          throw new RuntimeException(bogus);\n        }\n      }\n\n      @Override\n      public int getValueCount() {\n        return entry.numOrds;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"68acf69be1b41192ae2278afc452bb66f6349cba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12642a697ab623c827de51d0942181f48463c931":["4ea2628b967c08a6ead6453a19df04dcada6bb90"],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["12642a697ab623c827de51d0942181f48463c931"],"f93c27491251c14ea21df71ebbf6feb9f891e6cb":["96b29edfb831f9c0aeeca88ad2293b2a9cd529f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ea2628b967c08a6ead6453a19df04dcada6bb90":["70d04d6fdc41a015c6f45b5b5aa3fd750182d086"],"96b29edfb831f9c0aeeca88ad2293b2a9cd529f6":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"3fba2a151eb3a051118cbd3b29b50049b2647580":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"70d04d6fdc41a015c6f45b5b5aa3fd750182d086":["f93c27491251c14ea21df71ebbf6feb9f891e6cb"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["3fba2a151eb3a051118cbd3b29b50049b2647580"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["68acf69be1b41192ae2278afc452bb66f6349cba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"68acf69be1b41192ae2278afc452bb66f6349cba":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"12642a697ab623c827de51d0942181f48463c931":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f"],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":[],"f93c27491251c14ea21df71ebbf6feb9f891e6cb":["70d04d6fdc41a015c6f45b5b5aa3fd750182d086"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68acf69be1b41192ae2278afc452bb66f6349cba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ea2628b967c08a6ead6453a19df04dcada6bb90":["12642a697ab623c827de51d0942181f48463c931"],"96b29edfb831f9c0aeeca88ad2293b2a9cd529f6":["f93c27491251c14ea21df71ebbf6feb9f891e6cb"],"3fba2a151eb3a051118cbd3b29b50049b2647580":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"70d04d6fdc41a015c6f45b5b5aa3fd750182d086":["4ea2628b967c08a6ead6453a19df04dcada6bb90"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["96b29edfb831f9c0aeeca88ad2293b2a9cd529f6"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["3fba2a151eb3a051118cbd3b29b50049b2647580"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}