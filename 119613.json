{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","commits":[{"id":"5da0b42730b6b99b31389ef94cb97384e83b9ede","date":1337107665,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          // calling assertSaneFieldCaches here isn't as useful as having test\n          // classes call it directly from the scope where the index readers\n          // are used, because they could be gc'ed just before this tearDown\n          // method is called.\n          //\n          // But it's better then nothing.\n          //\n          // If you are testing functionality that you know for a fact\n          // \"violates\" FieldCache sanity, then you should either explicitly\n          // call purgeFieldCache at the end of your test method, or refactor\n          // your Test class so that the inconsistent FieldCache usages are\n          // isolated in distinct test methods\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdaf00a5a262eeea242f74f74de712ceaa24eedf","date":1345126478,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          // calling assertSaneFieldCaches here isn't as useful as having test\n          // classes call it directly from the scope where the index readers\n          // are used, because they could be gc'ed just before this tearDown\n          // method is called.\n          //\n          // But it's better then nothing.\n          //\n          // If you are testing functionality that you know for a fact\n          // \"violates\" FieldCache sanity, then you should either explicitly\n          // call purgeFieldCache at the end of your test method, or refactor\n          // your Test class so that the inconsistent FieldCache usages are\n          // isolated in distinct test methods\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          // calling assertSaneFieldCaches here isn't as useful as having test\n          // classes call it directly from the scope where the index readers\n          // are used, because they could be gc'ed just before this tearDown\n          // method is called.\n          //\n          // But it's better then nothing.\n          //\n          // If you are testing functionality that you know for a fact\n          // \"violates\" FieldCache sanity, then you should either explicitly\n          // call purgeFieldCache at the end of your test method, or refactor\n          // your Test class so that the inconsistent FieldCache usages are\n          // isolated in distinct test methods\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          // calling assertSaneFieldCaches here isn't as useful as having test\n          // classes call it directly from the scope where the index readers\n          // are used, because they could be gc'ed just before this tearDown\n          // method is called.\n          //\n          // But it's better then nothing.\n          //\n          // If you are testing functionality that you know for a fact\n          // \"violates\" FieldCache sanity, then you should either explicitly\n          // call purgeFieldCache at the end of your test method, or refactor\n          // your Test class so that the inconsistent FieldCache usages are\n          // isolated in distinct test methods\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","sourceNew":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        //FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9274621789ce990dbfef455dabdf026bb3184821","date":1400046684,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        //FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestRuleFieldCacheSanity#apply(Statement,Description).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Statement apply(final Statement s, final Description d) {\n    return new Statement() {\n      @Override\n      public void evaluate() throws Throwable {\n        s.evaluate();\n\n        Throwable problem = null;\n        try {\n          LuceneTestCase.assertSaneFieldCaches(d.getDisplayName());\n        } catch (Throwable t) {\n          problem = t;\n        }\n\n        FieldCache.DEFAULT.purgeAllCaches();\n\n        if (problem != null) {\n          Rethrow.rethrow(problem);\n        }\n      }\n    };\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9274621789ce990dbfef455dabdf026bb3184821":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["5da0b42730b6b99b31389ef94cb97384e83b9ede","cdaf00a5a262eeea242f74f74de712ceaa24eedf"],"cdaf00a5a262eeea242f74f74de712ceaa24eedf":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["cdaf00a5a262eeea242f74f74de712ceaa24eedf","9274621789ce990dbfef455dabdf026bb3184821"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["5da0b42730b6b99b31389ef94cb97384e83b9ede","cdaf00a5a262eeea242f74f74de712ceaa24eedf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["cdaf00a5a262eeea242f74f74de712ceaa24eedf"],"56572ec06f1407c066d6b7399413178b33176cd8":["cdaf00a5a262eeea242f74f74de712ceaa24eedf","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"9274621789ce990dbfef455dabdf026bb3184821":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"cdaf00a5a262eeea242f74f74de712ceaa24eedf":["616c1830142ff5c1ddedec1ed898733b73c8e23b","93dd449115a9247533e44bab47e8429e5dccbc6d","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"5da0b42730b6b99b31389ef94cb97384e83b9ede":["616c1830142ff5c1ddedec1ed898733b73c8e23b","cdaf00a5a262eeea242f74f74de712ceaa24eedf","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5da0b42730b6b99b31389ef94cb97384e83b9ede"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["9274621789ce990dbfef455dabdf026bb3184821"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}