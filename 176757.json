{"path":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","sourceNew":"  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","sourceOld":"  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","sourceNew":"  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","sourceOld":"  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","sourceNew":"  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","sourceOld":"  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","sourceNew":"  @Override\n  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","sourceOld":"  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","sourceNew":"  @Override\n  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","sourceOld":"  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DocSlice#subset(int,int).mjava","sourceNew":"  @Override\n  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore, matchesRelation);\n  }\n\n","sourceOld":"  @Override\n  public DocList subset(int offset, int len) {\n    if (this.offset == offset && this.len==len) return this;\n\n    // if we didn't store enough (and there was more to store)\n    // then we can't take a subset.\n    int requestedEnd = offset + len;\n    if (requestedEnd > docs.length && this.matches > docs.length) return null;\n    int realEndDoc = Math.min(requestedEnd, docs.length);\n    int realLen = Math.max(realEndDoc-offset,0);\n    if (this.offset == offset && this.len == realLen) return this;\n    return new DocSlice(offset, realLen, docs, scores, matches, maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["640ded7811e1b7d29236a5e2934ec3cd266a8199"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}