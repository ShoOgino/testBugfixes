{"path":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","commits":[{"id":"4f9e70cea495aaf83300e16f5027ed8cb2da59fd","date":1201238296,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","pathOld":"/dev/null","sourceNew":"  private CommonsHttpSolrServer(URL baseURL, HttpClient client) {\n    this._baseURL = baseURL.toExternalForm();\n    if( this._baseURL.endsWith( \"/\" ) ) {\n      this._baseURL = this._baseURL.substring( 0, this._baseURL.length()-1 );\n    }\n\n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _processor = new XMLResponseParser();\n\n    // TODO -- expose these so that people can add things like 'u' & 'p'\n    _invariantParams = new ModifiableSolrParams();\n    _invariantParams.set( CommonParams.WT, _processor.getWriterType() );\n    _invariantParams.set( CommonParams.VERSION, \"2.2\" );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a12d3c6475f1b99b086e4ca6b9ba34e65081859","date":1204263291,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client){\n    this(baseURL, client, new XMLResponseParser());\n  }\n\n","sourceOld":"  private CommonsHttpSolrServer(URL baseURL, HttpClient client) {\n    this._baseURL = baseURL.toExternalForm();\n    if( this._baseURL.endsWith( \"/\" ) ) {\n      this._baseURL = this._baseURL.substring( 0, this._baseURL.length()-1 );\n    }\n\n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    // by default use the XML one\n    _processor = new XMLResponseParser();\n\n    // TODO -- expose these so that people can add things like 'u' & 'p'\n    _invariantParams = new ModifiableSolrParams();\n    _invariantParams.set( CommonParams.WT, _processor.getWriterType() );\n    _invariantParams.set( CommonParams.VERSION, \"2.2\" );\n  }\n\n","bugFix":null,"bugIntro":["2bef851a005f4fcbbec72fcbb9bb3abaece56aa0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d45929d98d75037f1223a7c33a3c444ab8f7b9f","date":1213720173,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client){\n    this(baseURL, client, new BinaryResponseParser());\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client){\n    this(baseURL, client, new XMLResponseParser());\n  }\n\n","bugFix":null,"bugIntro":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c00763ceedfa0fc93dffe88eddf2ba67e7585de","date":1215037404,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client){\n    this(baseURL, client, new BinaryResponseParser(), false);\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client){\n    this(baseURL, client, new BinaryResponseParser());\n  }\n\n","bugFix":["4d45929d98d75037f1223a7c33a3c444ab8f7b9f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","pathOld":"client/java/solrj/src/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient).mjava","sourceNew":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client){\n    this(baseURL, client, new BinaryResponseParser(), false);\n  }\n\n","sourceOld":"  public CommonsHttpSolrServer(URL baseURL, HttpClient client){\n    this(baseURL, client, new BinaryResponseParser(), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de"],"0a12d3c6475f1b99b086e4ca6b9ba34e65081859":["4f9e70cea495aaf83300e16f5027ed8cb2da59fd"],"7c00763ceedfa0fc93dffe88eddf2ba67e7585de":["4d45929d98d75037f1223a7c33a3c444ab8f7b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4d45929d98d75037f1223a7c33a3c444ab8f7b9f":["0a12d3c6475f1b99b086e4ca6b9ba34e65081859"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f9e70cea495aaf83300e16f5027ed8cb2da59fd":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":[],"0a12d3c6475f1b99b086e4ca6b9ba34e65081859":["4d45929d98d75037f1223a7c33a3c444ab8f7b9f"],"7c00763ceedfa0fc93dffe88eddf2ba67e7585de":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4f9e70cea495aaf83300e16f5027ed8cb2da59fd"],"4d45929d98d75037f1223a7c33a3c444ab8f7b9f":["7c00763ceedfa0fc93dffe88eddf2ba67e7585de"],"4f9e70cea495aaf83300e16f5027ed8cb2da59fd":["0a12d3c6475f1b99b086e4ca6b9ba34e65081859"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e3602d5eab954caecc726ab136ad580ac1ceb917","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}