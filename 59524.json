{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) {\n    Map<String, Object> values = nodeValues.remove(node);\n    if (values != null && values.containsKey(\"nodeRole\")) {\n      saveRoles();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad60b6945c360ff89899d716d9cdec8dd674e2a0","date":1528114819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","sourceNew":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) throws InterruptedException {\n    LOG.debug(\"--removing value for \" + node);\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.remove(node);\n      if (values != null && values.containsKey(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) {\n    Map<String, Object> values = nodeValues.remove(node);\n    if (values != null && values.containsKey(\"nodeRole\")) {\n      saveRoles();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","sourceNew":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) throws InterruptedException {\n    LOG.debug(\"--removing value for \" + node);\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.remove(node);\n      if (values != null && values.containsKey(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) {\n    Map<String, Object> values = nodeValues.remove(node);\n    if (values != null && values.containsKey(\"nodeRole\")) {\n      saveRoles();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","sourceNew":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) throws InterruptedException {\n    LOG.debug(\"--removing value for \" + node);\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.remove(node);\n      if (values != null && values.containsKey(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) {\n    Map<String, Object> values = nodeValues.remove(node);\n    if (values != null && values.containsKey(\"nodeRole\")) {\n      saveRoles();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","sourceNew":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) throws InterruptedException {\n    log.debug(\"--removing value for \" + node);\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.remove(node);\n      if (values != null && values.containsKey(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) throws InterruptedException {\n    LOG.debug(\"--removing value for \" + node);\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.remove(node);\n      if (values != null && values.containsKey(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimNodeStateProvider#simRemoveNodeValues(String).mjava","sourceNew":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) throws InterruptedException {\n    log.debug(\"--removing value for \" + node);\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.remove(node);\n      if (values != null && values.containsKey(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove node values. If values contained a 'nodeRole' key then\n   * /roles.json is updated.\n   * @param node node id\n   */\n  public void simRemoveNodeValues(String node) throws InterruptedException {\n    log.debug(\"--removing value for \" + node);\n    lock.lockInterruptibly();\n    try {\n      Map<String, Object> values = nodeValues.remove(node);\n      if (values != null && values.containsKey(\"nodeRole\")) {\n        saveRoles();\n      }\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"f592209545c71895260367152601e9200399776d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","ad60b6945c360ff89899d716d9cdec8dd674e2a0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["ad60b6945c360ff89899d716d9cdec8dd674e2a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b70042a8a492f7054d480ccdd2be9796510d4327","ad60b6945c360ff89899d716d9cdec8dd674e2a0","f592209545c71895260367152601e9200399776d"],"ad60b6945c360ff89899d716d9cdec8dd674e2a0":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"f592209545c71895260367152601e9200399776d":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}