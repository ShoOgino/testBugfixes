{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b832cbed6eb3d54a8bb9339296bdda8eeb53014","date":1279708040,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":null,"sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"334c1175813aea771a71728cd2c4ee4754fd0603","date":1279710173,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","pathOld":"/dev/null","sourceNew":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fe956d65251358d755c56f14fe8380644790e47","date":1279711318,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":null,"sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else {\n            break;\n          }\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else {\n            break;\n          }\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length) {\n          loc -= waiting.length;\n        }\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else {\n            break;\n          }\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else {\n            break;\n          }\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length) {\n          loc -= waiting.length;\n        }\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else\n            break;\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length)\n          loc -= waiting.length;\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":null,"sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else {\n            break;\n          }\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length) {\n          loc -= waiting.length;\n        }\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":null,"sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else {\n            break;\n          }\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length) {\n          loc -= waiting.length;\n        }\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriter.WaitQueue#add(DocWriter).mjava","sourceNew":null,"sourceOld":"    synchronized public boolean add(DocWriter doc) throws IOException {\n\n      assert doc.docID >= nextWriteDocID;\n\n      if (doc.docID == nextWriteDocID) {\n        writeDocument(doc);\n        while(true) {\n          doc = waiting[nextWriteLoc];\n          if (doc != null) {\n            numWaiting--;\n            waiting[nextWriteLoc] = null;\n            waitingBytes -= doc.sizeInBytes();\n            writeDocument(doc);\n          } else {\n            break;\n          }\n        }\n      } else {\n\n        // I finished before documents that were added\n        // before me.  This can easily happen when I am a\n        // small doc and the docs before me were large, or,\n        // just due to luck in the thread scheduling.  Just\n        // add myself to the queue and when that large doc\n        // finishes, it will flush me:\n        int gap = doc.docID - nextWriteDocID;\n        if (gap >= waiting.length) {\n          // Grow queue\n          DocWriter[] newArray = new DocWriter[ArrayUtil.oversize(gap, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n          assert nextWriteLoc >= 0;\n          System.arraycopy(waiting, nextWriteLoc, newArray, 0, waiting.length-nextWriteLoc);\n          System.arraycopy(waiting, 0, newArray, waiting.length-nextWriteLoc, nextWriteLoc);\n          nextWriteLoc = 0;\n          waiting = newArray;\n          gap = doc.docID - nextWriteDocID;\n        }\n\n        int loc = nextWriteLoc + gap;\n        if (loc >= waiting.length) {\n          loc -= waiting.length;\n        }\n\n        // We should only wrap one time\n        assert loc < waiting.length;\n\n        // Nobody should be in my spot!\n        assert waiting[loc] == null;\n        waiting[loc] = doc;\n        numWaiting++;\n        waitingBytes += doc.sizeInBytes();\n      }\n      \n      return doPause();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["334c1175813aea771a71728cd2c4ee4754fd0603"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"8fe956d65251358d755c56f14fe8380644790e47":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","8fe956d65251358d755c56f14fe8380644790e47"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["334c1175813aea771a71728cd2c4ee4754fd0603","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"334c1175813aea771a71728cd2c4ee4754fd0603":["9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"8fe956d65251358d755c56f14fe8380644790e47":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"334c1175813aea771a71728cd2c4ee4754fd0603":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["a3776dccca01c11e7046323cfad46a3b4a471233","b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"9b832cbed6eb3d54a8bb9339296bdda8eeb53014":["334c1175813aea771a71728cd2c4ee4754fd0603"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8fe956d65251358d755c56f14fe8380644790e47","9b832cbed6eb3d54a8bb9339296bdda8eeb53014"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}