{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","commits":[{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws Exception{\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["868fb6041909a8d5489cea7921c11da9abdd7241","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba","date":1502263912,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception{\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception{\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 30000));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0cbc51bc0d0893017a12a225a05146a890ece851","date":1502333632,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception{\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    // todo remove this workaround after SOLR-9440 is fixed\n    zkStateReader.registerCore(\"testSimple1\");\n    zkStateReader.registerCore(\"testSimple2\");\n    zkStateReader.registerCore(\"testSimple3\");\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9d05e3fc85c762569e98084ea8e10dcf0a64c4e","date":1509437194,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    // todo remove this workaround after SOLR-9440 is fixed\n    zkStateReader.registerCore(\"testSimple1\");\n    zkStateReader.registerCore(\"testSimple2\");\n    zkStateReader.registerCore(\"testSimple3\");\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    // todo remove this workaround after SOLR-9440 is fixed\n    zkStateReader.registerCore(\"testSimple1\");\n    zkStateReader.registerCore(\"testSimple2\");\n    zkStateReader.registerCore(\"testSimple3\");\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","date":1509452916,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    // todo remove this workaround after SOLR-9440 is fixed\n    zkStateReader.registerCore(\"testSimple1\");\n    zkStateReader.registerCore(\"testSimple2\");\n    zkStateReader.registerCore(\"testSimple3\");\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868fb6041909a8d5489cea7921c11da9abdd7241","date":1509545880,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  // This apparently fails in both subclasses.\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1c374690db69470f6aa4bffc43dcacf1f4e3e49","date":1529007399,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  // This apparently fails in both subclasses.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  // This apparently fails in both subclasses.\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  // This apparently fails in both subclasses.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  // This apparently fails in both subclasses.\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  // This apparently fails in both subclasses.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  // This apparently fails in both subclasses.\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","date":1533256859,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  // This apparently fails in both subclasses.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  // This apparently fails in both subclasses.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14076e7b40405aa1f08702d8df762d08b5d44f70","date":1537071979,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  // This apparently fails in both subclasses.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  // This apparently fails in both subclasses.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  // This apparently fails in both subclasses.\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 4).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4, 90, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    \n    cluster.waitForAllNodes(30);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    \n    cluster.waitForJettyToStop(jetty3);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    \n    jetty2.stop();\n    \n    cluster.waitForJettyToStop(jetty2);\n    \n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  // This apparently fails in both subclasses.\n  // 12-Jun-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  // commented 15-Sep-2018 @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 2-Aug-2018\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    waitForNodeLeave(lostNodeName);\n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 2).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 1));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    jetty2.stop();\n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 2));\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":["14076e7b40405aa1f08702d8df762d08b5d44f70","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","0cbc51bc0d0893017a12a225a05146a890ece851","868fb6041909a8d5489cea7921c11da9abdd7241"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84bf32046cbf51c4db08d3a246bafa194ec3763f","date":1543673343,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION1, 2, 4);\n    \n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION2, 2, 4);\n    \n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 4).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4, 90, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    \n    cluster.waitForAllNodes(30);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    \n    cluster.waitForJettyToStop(jetty3);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    \n    jetty2.stop();\n    \n    cluster.waitForJettyToStop(jetty2);\n    \n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","sourceOld":"  @Test\n  // This apparently fails in both subclasses.\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 4).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4, 90, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    \n    cluster.waitForAllNodes(30);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    \n    cluster.waitForJettyToStop(jetty3);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    \n    jetty2.stop();\n    \n    cluster.waitForJettyToStop(jetty2);\n    \n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a7f628d78d532de820bc8af06bb870f1cb5eafb","date":1570036413,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  /**\n   * Test that basic autoAddReplicaLogic kicks in when a node is lost \n   */\n  @Test\n  public void testSimple() throws Exception {\n    final String COLLECTION = \"test_simple\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n    log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n             jetty1.getNodeName(), jetty1.getLocalPort(),\n             jetty2.getNodeName(), jetty2.getLocalPort());\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n    \n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n                 \n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION);\n    \n    log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION1, 2, 4);\n    \n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION2, 2, 4);\n    \n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 4).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4, 90, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    \n    cluster.waitForAllNodes(30);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    \n    cluster.waitForJettyToStop(jetty3);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    \n    jetty2.stop();\n    \n    cluster.waitForJettyToStop(jetty2);\n    \n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  /**\n   * Test that basic autoAddReplicaLogic kicks in when a node is lost \n   */\n  @Test\n  public void testSimple() throws Exception {\n    final String COLLECTION = \"test_simple\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n    log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n             jetty1.getNodeName(), jetty1.getLocalPort(),\n             jetty2.getNodeName(), jetty2.getLocalPort());\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n    \n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n                 \n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION);\n    \n    log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n\n  }\n\n","sourceOld":"  @Test\n  public void testSimple() throws Exception {\n    JettySolrRunner jetty1 = cluster.getJettySolrRunner(0);\n    JettySolrRunner jetty2 = cluster.getJettySolrRunner(1);\n    JettySolrRunner jetty3 = cluster.getJettySolrRunner(2);\n    CollectionAdminRequest.createCollection(COLLECTION1, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n        .setAutoAddReplicas(true)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION1, 2, 4);\n    \n    CollectionAdminRequest.createCollection(COLLECTION2, \"conf\", 2, 2)\n        .setCreateNodeSet(jetty2.getNodeName()+\",\"+jetty3.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(2)\n        .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION2, 2, 4);\n    \n    // the number of cores in jetty1 (5) will be larger than jetty3 (1)\n    CollectionAdminRequest.createCollection(\"testSimple3\", \"conf\", 3, 1)\n        .setCreateNodeSet(jetty1.getNodeName())\n        .setAutoAddReplicas(false)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(\"testSimple3\", 3, 3);\n    \n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n\n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? cluster.getJettySolrRunner(0) : cluster.getJettySolrRunner(1);\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION1, zkStateReader, lostNodeName);\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    // ensure that 2 shards have 2 active replicas and only 4 replicas in total\n    // i.e. old replicas have been deleted.\n    // todo remove the condition for total replicas == 4 after SOLR-11591 is fixed\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, (liveNodes, collectionState) -> clusterShape(2, 4).matches(liveNodes, collectionState)\n        && collectionState.getReplicas().size() == 4, 90, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION1);\n    lostJetty.start();\n    \n    cluster.waitForAllNodes(30);\n    \n    assertTrue(\"Timeout waiting for all live and active\", ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 90000));\n\n    // check cluster property is considered\n    disableAutoAddReplicasInCluster();\n    lostNodeName = jetty3.getNodeName();\n    jetty3.stop();\n    \n    cluster.waitForJettyToStop(jetty3);\n    \n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 2));\n    jetty3.start();\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4));\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4));\n    enableAutoAddReplicasInCluster();\n\n\n    // test for multiple collections\n    new CollectionAdminRequest.AsyncCollectionAdminRequest(CollectionParams.CollectionAction.MODIFYCOLLECTION) {\n      @Override\n      public SolrParams getParams() {\n        ModifiableSolrParams params = (ModifiableSolrParams) super.getParams();\n        params.set(\"collection\", COLLECTION2);\n        params.set(\"autoAddReplicas\", true);\n        return params;\n      }\n    }.process(cluster.getSolrClient());\n\n    lostNodeName = jetty2.getNodeName();\n    replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION2, zkStateReader, lostNodeName);\n    \n    jetty2.stop();\n    \n    cluster.waitForJettyToStop(jetty2);\n    \n    waitForNodeLeave(lostNodeName);\n    waitForState(\"Waiting for collection \" + COLLECTION1, COLLECTION1, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    waitForState(\"Waiting for collection \" + COLLECTION2, COLLECTION2, clusterShape(2, 4), 45, TimeUnit.SECONDS);\n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION2);\n\n    // overseer failover test..\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  /**\n   * Test that basic autoAddReplicaLogic kicks in when a node is lost \n   */\n  @Test\n  public void testSimple() throws Exception {\n    final String COLLECTION = \"test_simple\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n          jetty1.getNodeName(), jetty1.getLocalPort(),\n          jetty2.getNodeName(), jetty2.getLocalPort());\n    }\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n    \n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n                 \n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n\n  }\n\n","sourceOld":"  /**\n   * Test that basic autoAddReplicaLogic kicks in when a node is lost \n   */\n  @Test\n  public void testSimple() throws Exception {\n    final String COLLECTION = \"test_simple\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n    log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n             jetty1.getNodeName(), jetty1.getLocalPort(),\n             jetty2.getNodeName(), jetty2.getLocalPort());\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n    \n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n                 \n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION);\n    \n    log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":"  /**\n   * Test that basic autoAddReplicaLogic kicks in when a node is lost \n   */\n  @Test\n  public void testSimple() throws Exception {\n    final String COLLECTION = \"test_simple\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n          jetty1.getNodeName(), jetty1.getLocalPort(),\n          jetty2.getNodeName(), jetty2.getLocalPort());\n    }\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n    \n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n                 \n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n\n  }\n\n","sourceOld":"  /**\n   * Test that basic autoAddReplicaLogic kicks in when a node is lost \n   */\n  @Test\n  public void testSimple() throws Exception {\n    final String COLLECTION = \"test_simple\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n          jetty1.getNodeName(), jetty1.getLocalPort(),\n          jetty2.getNodeName(), jetty2.getLocalPort());\n    }\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .setMaxShardsPerNode(2)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n    \n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n                 \n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoAddReplicasIntegrationTest#testSimple().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test that basic autoAddReplicaLogic kicks in when a node is lost \n   */\n  @Test\n  public void testSimple() throws Exception {\n    final String COLLECTION = \"test_simple\";\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    final JettySolrRunner jetty1 = cluster.getJettySolrRunner(1);\n    final JettySolrRunner jetty2 = cluster.getJettySolrRunner(2);\n    if (log.isInfoEnabled()) {\n      log.info(\"Creating {} using jetty1:{}/{} and jetty2:{}/{}\", COLLECTION,\n          jetty1.getNodeName(), jetty1.getLocalPort(),\n          jetty2.getNodeName(), jetty2.getLocalPort());\n    }\n             \n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 2)\n      .setCreateNodeSet(jetty1.getNodeName()+\",\"+jetty2.getNodeName())\n      .setAutoAddReplicas(true)\n      .process(cluster.getSolrClient());\n    \n    cluster.waitForActiveCollection(COLLECTION, 2, 4);\n    \n    // start the tests\n    JettySolrRunner lostJetty = random().nextBoolean() ? jetty1 : jetty2;\n    String lostNodeName = lostJetty.getNodeName();\n    List<Replica> replacedHdfsReplicas = getReplacedSharedFsReplicas(COLLECTION, zkStateReader, lostNodeName);\n    if (log.isInfoEnabled()) {\n      log.info(\"Stopping random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.stop();\n    \n    cluster.waitForJettyToStop(lostJetty);\n    waitForNodeLeave(lostNodeName);\n    \n    waitForState(COLLECTION + \"=(2,4) w/o down replicas\",\n                 COLLECTION, clusterShapeNoDownReplicas(2,4), 90, TimeUnit.SECONDS);\n                 \n    checkSharedFsReplicasMovedCorrectly(replacedHdfsReplicas, zkStateReader, COLLECTION);\n\n    if (log.isInfoEnabled()) {\n      log.info(\"Re-starting (same) random node: {} / {}\", lostNodeName, lostJetty.getLocalPort());\n    }\n    lostJetty.start();\n    \n    waitForNodeLive(lostJetty);\n    \n    assertTrue(\"Timeout waiting for all live and active\",\n               ClusterStateUtil.waitForAllActiveAndLiveReplicas(zkStateReader, 90000));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0cbc51bc0d0893017a12a225a05146a890ece851"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["868fb6041909a8d5489cea7921c11da9abdd7241"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba":["717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"f9d05e3fc85c762569e98084ea8e10dcf0a64c4e":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108"],"84bf32046cbf51c4db08d3a246bafa194ec3763f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"0cbc51bc0d0893017a12a225a05146a890ece851":["c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"],"868fb6041909a8d5489cea7921c11da9abdd7241":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["560c18d71dad43d675158783c3840f8c80d6d39c"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["8a7f628d78d532de820bc8af06bb870f1cb5eafb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a7f628d78d532de820bc8af06bb870f1cb5eafb":["84bf32046cbf51c4db08d3a246bafa194ec3763f"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["f9d05e3fc85c762569e98084ea8e10dcf0a64c4e"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"b0b597c65628ca9e73913a07e81691f8229bae35":["84bf32046cbf51c4db08d3a246bafa194ec3763f","8a7f628d78d532de820bc8af06bb870f1cb5eafb"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["ff5e25fb60ccc8574bcbd65396786ae9163f0149","a1c374690db69470f6aa4bffc43dcacf1f4e3e49"]},"commit2Childs":{"05a3c9b5f1dfb39879069eb1dac3ca104d3e4108":["14076e7b40405aa1f08702d8df762d08b5d44f70"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a1c374690db69470f6aa4bffc43dcacf1f4e3e49","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["84bf32046cbf51c4db08d3a246bafa194ec3763f"],"c8ca8aa92971b9e277a8b6dbfa9df6fc26ebb8ba":["0cbc51bc0d0893017a12a225a05146a890ece851"],"f9d05e3fc85c762569e98084ea8e10dcf0a64c4e":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"14076e7b40405aa1f08702d8df762d08b5d44f70":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"84bf32046cbf51c4db08d3a246bafa194ec3763f":["8a7f628d78d532de820bc8af06bb870f1cb5eafb","b0b597c65628ca9e73913a07e81691f8229bae35"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"0cbc51bc0d0893017a12a225a05146a890ece851":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"868fb6041909a8d5489cea7921c11da9abdd7241":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["f9d05e3fc85c762569e98084ea8e10dcf0a64c4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"8a7f628d78d532de820bc8af06bb870f1cb5eafb":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","b0b597c65628ca9e73913a07e81691f8229bae35"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["868fb6041909a8d5489cea7921c11da9abdd7241"],"560c18d71dad43d675158783c3840f8c80d6d39c":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"a1c374690db69470f6aa4bffc43dcacf1f4e3e49":["05a3c9b5f1dfb39879069eb1dac3ca104d3e4108","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}