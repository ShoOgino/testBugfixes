{"path":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","commits":[{"id":"78a6940133670e0174590da7b3d490e837698176","date":1335202499,"type":0,"author":"Stefan Matheis","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEnablingServer() throws Exception {\n    \n        \n    handler.handleEnable(healthcheck, true);\n    \n    assertTrue(healthcheckFile.exists());\n    \n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n\n    handler.handlePing(req, rsp);\n    String status = (String) rsp.getValues().get(\"status\");\n    assertEquals(\"OK\", status);\n    req.close();\n    \n    FileReader fr = new FileReader(healthcheckFile);\n  \n    BufferedReader br = new BufferedReader(fr); \n    String s = br.readLine();\n    assertNotNull(s);\n     \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad826eef7abbe5ff5f62d508c87065b81010c4c6","date":1336074973,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","sourceNew":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n\n    try {\n      makeRequest(handler, req());\n      fail(\"Should have thrown a SolrException because not enabled yet\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code,se.code());\n    }\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile), \"UTF-8\");\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","sourceOld":"  @Test\n  public void testEnablingServer() throws Exception {\n    \n        \n    handler.handleEnable(healthcheck, true);\n    \n    assertTrue(healthcheckFile.exists());\n    \n    SolrQueryRequest req = req();\n    SolrQueryResponse rsp = new SolrQueryResponse();\n\n    handler.handlePing(req, rsp);\n    String status = (String) rsp.getValues().get(\"status\");\n    assertEquals(\"OK\", status);\n    req.close();\n    \n    FileReader fr = new FileReader(healthcheckFile);\n  \n    BufferedReader br = new BufferedReader(fr); \n    String s = br.readLine();\n    assertNotNull(s);\n     \n  }\n\n","bugFix":null,"bugIntro":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","03921e13f17e0e7ebdcddd51033044f34076348d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"31d1dc893fd6ef4249e83e0a62759475b0e03e5c","date":1352140863,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","sourceNew":"  @Ignore\n  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n\n    try {\n      makeRequest(handler, req());\n      fail(\"Should have thrown a SolrException because not enabled yet\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code,se.code());\n    }\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile), \"UTF-8\");\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","sourceOld":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n\n    try {\n      makeRequest(handler, req());\n      fail(\"Should have thrown a SolrException because not enabled yet\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code,se.code());\n    }\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile), \"UTF-8\");\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","bugFix":null,"bugIntro":["03921e13f17e0e7ebdcddd51033044f34076348d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03921e13f17e0e7ebdcddd51033044f34076348d","date":1352141460,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","sourceNew":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile), \"UTF-8\");\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","sourceOld":"  @Ignore\n  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n\n    try {\n      makeRequest(handler, req());\n      fail(\"Should have thrown a SolrException because not enabled yet\");\n    } catch (SolrException se){\n      assertEquals(SolrException.ErrorCode.SERVICE_UNAVAILABLE.code,se.code());\n    }\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile), \"UTF-8\");\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","bugFix":["31d1dc893fd6ef4249e83e0a62759475b0e03e5c","ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","date":1385076439,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","sourceNew":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile, \"UTF-8\"));\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","sourceOld":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile), \"UTF-8\");\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","bugFix":["ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","sourceNew":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile, \"UTF-8\"));\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","sourceOld":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile), \"UTF-8\");\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","sourceNew":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(!healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile, \"UTF-8\"));\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","sourceOld":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile, \"UTF-8\"));\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testEnablingServer().mjava","sourceNew":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(!healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile, \"UTF-8\"));\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","sourceOld":"  public void testEnablingServer() throws Exception {\n\n    assertTrue(! healthcheckFile.exists());\n\n    // first make sure that ping responds back that the service is disabled\n    SolrQueryResponse sqr = makeRequest(handler, req());\n    SolrException se = (SolrException) sqr.getException();\n    assertEquals(\n      \"Response should have been replaced with a 503 SolrException.\",\n      se.code(), SolrException.ErrorCode.SERVICE_UNAVAILABLE.code);\n\n    // now enable\n\n    makeRequest(handler, req(\"action\", \"enable\"));\n\n    assertTrue(healthcheckFile.exists());\n    assertNotNull(FileUtils.readFileToString(healthcheckFile, \"UTF-8\"));\n\n    // now verify that the handler response with success\n\n    SolrQueryResponse rsp = makeRequest(handler, req());\n    assertEquals(\"OK\", rsp.getValues().get(\"status\"));\n\n    // enable when already enabled shouldn't cause any problems\n    makeRequest(handler, req(\"action\", \"enable\"));\n    assertTrue(healthcheckFile.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"ad826eef7abbe5ff5f62d508c87065b81010c4c6":["78a6940133670e0174590da7b3d490e837698176"],"78a6940133670e0174590da7b3d490e837698176":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"31d1dc893fd6ef4249e83e0a62759475b0e03e5c":["ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3":["03921e13f17e0e7ebdcddd51033044f34076348d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["03921e13f17e0e7ebdcddd51033044f34076348d","acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3"],"03921e13f17e0e7ebdcddd51033044f34076348d":["31d1dc893fd6ef4249e83e0a62759475b0e03e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"]},"commit2Childs":{"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad826eef7abbe5ff5f62d508c87065b81010c4c6":["31d1dc893fd6ef4249e83e0a62759475b0e03e5c"],"78a6940133670e0174590da7b3d490e837698176":["ad826eef7abbe5ff5f62d508c87065b81010c4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78a6940133670e0174590da7b3d490e837698176"],"31d1dc893fd6ef4249e83e0a62759475b0e03e5c":["03921e13f17e0e7ebdcddd51033044f34076348d"],"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3":["bb1f22cfa77230b5f05b7784feae5367f6bbb488","2a0f5bb79c600763ffe7b8141df59a3169d31e48","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"03921e13f17e0e7ebdcddd51033044f34076348d":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}