{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(IndexableField,IndexableField).mjava","commits":[{"id":"0445bcd8433e331f296f5502fc089b336cbac3a6","date":1322630375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(IndexableField,IndexableField).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(IndexableField leftField, IndexableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    assertEquals(info, leftField.numeric(), rightField.numeric());\n    assertEquals(info, leftField.numericDataType(), rightField.numericDataType());\n    // TODO: should we check the FT at all?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(IndexableField,IndexableField).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(IndexableField,IndexableField).mjava","sourceNew":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(IndexableField leftField, IndexableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","sourceOld":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(IndexableField leftField, IndexableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    assertEquals(info, leftField.numeric(), rightField.numeric());\n    assertEquals(info, leftField.numericDataType(), rightField.numericDataType());\n    // TODO: should we check the FT at all?\n  }\n\n","bugFix":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(IndexableField,IndexableField).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertStoredField(IndexableField,IndexableField).mjava","sourceNew":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(IndexableField leftField, IndexableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","sourceOld":"  /** \n   * checks that two stored fields are equivalent \n   */\n  public void assertStoredField(IndexableField leftField, IndexableField rightField) {\n    assertEquals(info, leftField.name(), rightField.name());\n    assertEquals(info, leftField.binaryValue(), rightField.binaryValue());\n    assertEquals(info, leftField.stringValue(), rightField.stringValue());\n    assertEquals(info, leftField.numericValue(), rightField.numericValue());\n    // TODO: should we check the FT at all?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"0445bcd8433e331f296f5502fc089b336cbac3a6":["fa0f44f887719e97183771e977cfc4bfb485b766"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0445bcd8433e331f296f5502fc089b336cbac3a6"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}