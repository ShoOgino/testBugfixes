{"path":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","commits":[{"id":"500052b00ecd22d5bd8b0efd25666d035ef55f85","date":1340322005,"type":1,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int).mjava","sourceNew":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<FieldParams>();\n    }\n    List<FieldParams> out = new ArrayList<FieldParams>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<FieldParams>();\n    }\n    List<FieldParams> out = new ArrayList<FieldParams>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : 0;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<FieldParams>();\n    }\n    List<FieldParams> out = new ArrayList<FieldParams>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","sourceNew":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<FieldParams>();\n    }\n    List<FieldParams> out = new ArrayList<FieldParams>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5991832ae4bac45cecfff0fc33125aeac823d3d","date":1456229449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","sourceNew":"  /**\n\n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","sourceNew":"  /**\n\n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n  \n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","date":1489572490,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","sourceNew":"  /**\n\n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.parseInt(fieldVsSlop[1]) : defaultSlop;\n        float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.parseFloat(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n\n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55e0b3830b94d1abce4e32e98cfc875d5b14e76f","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","sourceNew":"  /**\n\n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.parseInt(fieldVsSlop[1]) : defaultSlop;\n        float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.parseFloat(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n\n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrPluginUtils#parseFieldBoostsAndSlop(String[],int,int).mjava","sourceNew":"  /**\n\n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.parseInt(fieldVsSlop[1]) : defaultSlop;\n        float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.parseFloat(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n\n  /**\n   * Like {@link #parseFieldBoosts}, but allows for an optional slop value prefixed by \"~\".\n   *\n   * @param fieldLists - an array of Strings eg. <code>{\"fieldOne^2.3\", \"fieldTwo\", fieldThree~5^-0.4}</code>\n   * @param wordGrams - (0=all words, 2,3 = shingle size)\n   * @param defaultSlop - the default slop for this param\n   * @return - FieldParams containing the fieldname,boost,slop,and shingle size\n   */\n  public static List<FieldParams> parseFieldBoostsAndSlop(String[] fieldLists,int wordGrams,int defaultSlop) {\n    if (null == fieldLists || 0 == fieldLists.length) {\n        return new ArrayList<>();\n    }\n    List<FieldParams> out = new ArrayList<>();\n    for (String in : fieldLists) {\n      if (null == in) {\n        continue;\n      }\n      in = in.trim();\n      if(in.length()==0) {\n        continue;\n      }\n      String[] fieldConfigs = whitespacePattern.split(in);\n      for (String s : fieldConfigs) {\n        String[] fieldAndSlopVsBoost = caratPattern.split(s);\n        String[] fieldVsSlop = tildePattern.split(fieldAndSlopVsBoost[0]);\n        String field = fieldVsSlop[0];\n        int slop  = (2 == fieldVsSlop.length) ? Integer.valueOf(fieldVsSlop[1]) : defaultSlop;\n        Float boost = (1 == fieldAndSlopVsBoost.length) ? 1  : Float.valueOf(fieldAndSlopVsBoost[1]);\n        FieldParams fp = new FieldParams(field,wordGrams,slop,boost);\n        out.add(fp);\n      }\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["500052b00ecd22d5bd8b0efd25666d035ef55f85"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["b5991832ae4bac45cecfff0fc33125aeac823d3d"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","500052b00ecd22d5bd8b0efd25666d035ef55f85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5296efc4b319f5647b606629c093a94b23692c6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"500052b00ecd22d5bd8b0efd25666d035ef55f85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab68488225b6a6c357dda72ed11dedca9914a192":["b5991832ae4bac45cecfff0fc33125aeac823d3d","55e0b3830b94d1abce4e32e98cfc875d5b14e76f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a5296efc4b319f5647b606629c093a94b23692c6","b5991832ae4bac45cecfff0fc33125aeac823d3d"],"6c72a3aa9309c1f5ade9265cf083e565ae8d35b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55e0b3830b94d1abce4e32e98cfc875d5b14e76f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe33227f6805edab2036cbb80645cc4e2d1fa424","500052b00ecd22d5bd8b0efd25666d035ef55f85"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"500052b00ecd22d5bd8b0efd25666d035ef55f85":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"b5991832ae4bac45cecfff0fc33125aeac823d3d":["6c72a3aa9309c1f5ade9265cf083e565ae8d35b8","55e0b3830b94d1abce4e32e98cfc875d5b14e76f","a5296efc4b319f5647b606629c093a94b23692c6","ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a5296efc4b319f5647b606629c093a94b23692c6","ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}