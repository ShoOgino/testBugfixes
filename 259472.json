{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","sourceNew":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeShort((short) v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","sourceOld":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeShort((short) v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeLabel(DataOutput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","sourceNew":"  private void writeLabel(DataOutput out, int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      out.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      out.writeShort((short) v);\n    } else {\n      out.writeVInt(v);\n    }\n  }\n\n","sourceOld":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeShort((short) v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeLabel(DataOutput,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#writeLabel(int).mjava","sourceNew":"  private void writeLabel(DataOutput out, int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      out.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      out.writeShort((short) v);\n    } else {\n      out.writeVInt(v);\n    }\n  }\n\n","sourceOld":"  private void writeLabel(int v) throws IOException {\n    assert v >= 0: \"v=\" + v;\n    if (inputType == INPUT_TYPE.BYTE1) {\n      assert v <= 255: \"v=\" + v;\n      writer.writeByte((byte) v);\n    } else if (inputType == INPUT_TYPE.BYTE2) {\n      assert v <= 65535: \"v=\" + v;\n      writer.writeShort((short) v);\n    } else {\n      //writeInt(v);\n      writer.writeVInt(v);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}