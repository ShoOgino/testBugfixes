{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","sourceNew":"  /**\n   * Loads one column from the token stream.\n   *\n   * When the last token is read from the token stream it will column.setLast(true);\n   *\n   * @return true if it manage to read one more column from the input token stream\n   * @throws IOException if the matrix source input stream throws an exception\n   */\n  private boolean readColumn() throws IOException {\n\n    Token token;\n    if (readColumnBuf != null) {\n      token = readColumnBuf;\n      readColumnBuf = null;\n    } else {\n      token = getNextInputToken(new Token());\n    }\n\n    if (token == null) {\n      return false;\n    }\n\n    Matrix.Column currentReaderColumn = matrix.new Column();\n    Matrix.Column.Row currentReaderRow = currentReaderColumn.new Row();\n\n    currentReaderRow.getTokens().add(token);\n    TokenPositioner tokenPositioner;\n    while ((readColumnBuf = getNextInputToken(new Token())) != null\n        && (tokenPositioner = settingsCodec.getTokenPositioner(readColumnBuf)) != TokenPositioner.newColumn) {\n\n      if (tokenPositioner == TokenPositioner.sameRow) {\n        currentReaderRow.getTokens().add(readColumnBuf);\n      } else /*if (tokenPositioner == TokenPositioner.newRow)*/ {\n        currentReaderRow = currentReaderColumn.new Row();\n        currentReaderRow.getTokens().add(readColumnBuf);\n      }\n      readColumnBuf = null;\n\n    }\n\n    if (readColumnBuf == null) {\n      readColumnBuf = getNextInputToken(new Token());\n      if (readColumnBuf == null) {\n        currentReaderColumn.setLast(true);\n      }\n    }\n\n\n    return true;\n\n  }\n\n","sourceOld":"  /**\n   * Loads one column from the token stream.\n   *\n   * When the last token is read from the token stream it will column.setLast(true);\n   *\n   * @return true if it manage to read one more column from the input token stream\n   * @throws IOException if the matrix source input stream throws an exception\n   */\n  private boolean readColumn() throws IOException {\n\n    Token token;\n    if (readColumnBuf != null) {\n      token = readColumnBuf;\n      readColumnBuf = null;\n    } else {\n      token = getNextInputToken(new Token());\n    }\n\n    if (token == null) {\n      return false;\n    }\n\n    Matrix.Column currentReaderColumn = matrix.new Column();\n    Matrix.Column.Row currentReaderRow = currentReaderColumn.new Row();\n\n    currentReaderRow.getTokens().add(token);\n    TokenPositioner tokenPositioner;\n    while ((readColumnBuf = getNextInputToken(new Token())) != null\n        && (tokenPositioner = settingsCodec.getTokenPositioner(readColumnBuf)) != TokenPositioner.newColumn) {\n\n      if (tokenPositioner == TokenPositioner.sameRow) {\n        currentReaderRow.getTokens().add(readColumnBuf);\n      } else /*if (tokenPositioner == TokenPositioner.newRow)*/ {\n        currentReaderRow = currentReaderColumn.new Row();\n        currentReaderRow.getTokens().add(readColumnBuf);\n      }\n      readColumnBuf = null;\n\n    }\n\n    if (readColumnBuf == null) {\n      readColumnBuf = getNextInputToken(new Token());\n      if (readColumnBuf == null) {\n        currentReaderColumn.setLast(true);\n      }\n    }\n\n\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aacf7f8a9f6ea920c7ca39f86371d4e25397121b","date":1297761846,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads one column from the token stream.\n   *\n   * When the last token is read from the token stream it will column.setLast(true);\n   *\n   * @return true if it manage to read one more column from the input token stream\n   * @throws IOException if the matrix source input stream throws an exception\n   */\n  private boolean readColumn() throws IOException {\n\n    Token token;\n    if (readColumnBuf != null) {\n      token = readColumnBuf;\n      readColumnBuf = null;\n    } else {\n      token = getNextInputToken(new Token());\n    }\n\n    if (token == null) {\n      return false;\n    }\n\n    Matrix.Column currentReaderColumn = matrix.new Column();\n    Matrix.Column.Row currentReaderRow = currentReaderColumn.new Row();\n\n    currentReaderRow.getTokens().add(token);\n    TokenPositioner tokenPositioner;\n    while ((readColumnBuf = getNextInputToken(new Token())) != null\n        && (tokenPositioner = settingsCodec.getTokenPositioner(readColumnBuf)) != TokenPositioner.newColumn) {\n\n      if (tokenPositioner == TokenPositioner.sameRow) {\n        currentReaderRow.getTokens().add(readColumnBuf);\n      } else /*if (tokenPositioner == TokenPositioner.newRow)*/ {\n        currentReaderRow = currentReaderColumn.new Row();\n        currentReaderRow.getTokens().add(readColumnBuf);\n      }\n      readColumnBuf = null;\n\n    }\n\n    if (readColumnBuf == null) {\n      readColumnBuf = getNextInputToken(new Token());\n      if (readColumnBuf == null) {\n        currentReaderColumn.setLast(true);\n      }\n    }\n\n\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads one column from the token stream.\n   *\n   * When the last token is read from the token stream it will column.setLast(true);\n   *\n   * @return true if it manage to read one more column from the input token stream\n   * @throws IOException if the matrix source input stream throws an exception\n   */\n  private boolean readColumn() throws IOException {\n\n    Token token;\n    if (readColumnBuf != null) {\n      token = readColumnBuf;\n      readColumnBuf = null;\n    } else {\n      token = getNextInputToken(new Token());\n    }\n\n    if (token == null) {\n      return false;\n    }\n\n    Matrix.Column currentReaderColumn = matrix.new Column();\n    Matrix.Column.Row currentReaderRow = currentReaderColumn.new Row();\n\n    currentReaderRow.getTokens().add(token);\n    TokenPositioner tokenPositioner;\n    while ((readColumnBuf = getNextInputToken(new Token())) != null\n        && (tokenPositioner = settingsCodec.getTokenPositioner(readColumnBuf)) != TokenPositioner.newColumn) {\n\n      if (tokenPositioner == TokenPositioner.sameRow) {\n        currentReaderRow.getTokens().add(readColumnBuf);\n      } else /*if (tokenPositioner == TokenPositioner.newRow)*/ {\n        currentReaderRow = currentReaderColumn.new Row();\n        currentReaderRow.getTokens().add(readColumnBuf);\n      }\n      readColumnBuf = null;\n\n    }\n\n    if (readColumnBuf == null) {\n      readColumnBuf = getNextInputToken(new Token());\n      if (readColumnBuf == null) {\n        currentReaderColumn.setLast(true);\n      }\n    }\n\n\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#readColumn().mjava","sourceNew":null,"sourceOld":"  /**\n   * Loads one column from the token stream.\n   *\n   * When the last token is read from the token stream it will column.setLast(true);\n   *\n   * @return true if it manage to read one more column from the input token stream\n   * @throws IOException if the matrix source input stream throws an exception\n   */\n  private boolean readColumn() throws IOException {\n\n    Token token;\n    if (readColumnBuf != null) {\n      token = readColumnBuf;\n      readColumnBuf = null;\n    } else {\n      token = getNextInputToken(new Token());\n    }\n\n    if (token == null) {\n      return false;\n    }\n\n    Matrix.Column currentReaderColumn = matrix.new Column();\n    Matrix.Column.Row currentReaderRow = currentReaderColumn.new Row();\n\n    currentReaderRow.getTokens().add(token);\n    TokenPositioner tokenPositioner;\n    while ((readColumnBuf = getNextInputToken(new Token())) != null\n        && (tokenPositioner = settingsCodec.getTokenPositioner(readColumnBuf)) != TokenPositioner.newColumn) {\n\n      if (tokenPositioner == TokenPositioner.sameRow) {\n        currentReaderRow.getTokens().add(readColumnBuf);\n      } else /*if (tokenPositioner == TokenPositioner.newRow)*/ {\n        currentReaderRow = currentReaderColumn.new Row();\n        currentReaderRow.getTokens().add(readColumnBuf);\n      }\n      readColumnBuf = null;\n\n    }\n\n    if (readColumnBuf == null) {\n      readColumnBuf = getNextInputToken(new Token());\n      if (readColumnBuf == null) {\n        currentReaderColumn.setLast(true);\n      }\n    }\n\n\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce","aacf7f8a9f6ea920c7ca39f86371d4e25397121b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aacf7f8a9f6ea920c7ca39f86371d4e25397121b"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["f1bdbf92da222965b46c0a942c3857ba56e5c638","aacf7f8a9f6ea920c7ca39f86371d4e25397121b","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"aacf7f8a9f6ea920c7ca39f86371d4e25397121b":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}