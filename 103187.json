{"path":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","commits":[{"id":"0bcbf4ed0baed877c8b36d024e17a99bedfdd904","date":1075500600,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"/dev/null","sourceNew":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    Explanation result = new Explanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(searcher.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n      \n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n      \n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n      \n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n     \n    // explain field weight\n    Explanation fieldExpl = new Explanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n      \n    result.addDetail(fieldExpl);\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8da75c64a26663199511eef8db650621ed89107","f8da75c64a26663199511eef8db650621ed89107","f4e4ac061c7cb668bd0651cb565ebbad1157cadc","f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5af54d2e9e95d08aae526fa69cdd34b66a49b763","date":1075728472,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    Explanation result = new Explanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(searcher.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    Explanation fieldExpl = new Explanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    Explanation result = new Explanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(searcher.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n      \n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n      \n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n      \n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n     \n    // explain field weight\n    Explanation fieldExpl = new Explanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n      \n    result.addDetail(fieldExpl);\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    Explanation result = new Explanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    Explanation fieldExpl = new Explanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    Explanation result = new Explanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(searcher.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    Explanation fieldExpl = new Explanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["f8da75c64a26663199511eef8db650621ed89107","f8da75c64a26663199511eef8db650621ed89107"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4e4ac061c7cb668bd0651cb565ebbad1157cadc","date":1151347127,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    Explanation result = new Explanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    Explanation fieldExpl = new Explanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a","date":1240951127,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 0.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader, true, false).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe941135bdfc28c81e20b4d21422f8726af34925","date":1250040150,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(Searcher,IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  public Explanation explain(Searcher searcher, IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader, true, false).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader, true, false).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"231941d2cb96b9752e839c311391096d90470db8","date":1251116803,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(Searcher,IndexReader,int).mjava","sourceNew":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader, true, false).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  public Explanation explain(Searcher searcher, IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader, true, false).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8da75c64a26663199511eef8db650621ed89107","date":1251204606,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader, true, false).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    StringBuffer docFreqs = new StringBuffer();\n    Iterator i = terms.iterator();\n    while (i.hasNext()) {\n      Term term = (Term)i.next();\n      docFreqs.append(term.text());\n      docFreqs.append(\"=\");\n      docFreqs.append(reader.docFreq(term));\n\n      if (i.hasNext()) {\n        docFreqs.append(\" \");\n      }\n    }\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + docFreqs + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader, true, false).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":["402061809f3a4629ea0c449e33e9f94a9772f3c3","0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(reader, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = scorer(reader, true, false).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(reader, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(reader, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? Similarity.decodeNorm(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanWeight#explain(IndexReader,int).mjava","sourceNew":"  @Override\n  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(reader, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Explanation explain(IndexReader reader, int doc)\n    throws IOException {\n\n    ComplexExplanation result = new ComplexExplanation();\n    result.setDescription(\"weight(\"+getQuery()+\" in \"+doc+\"), product of:\");\n    String field = ((SpanQuery)getQuery()).getField();\n\n    Explanation idfExpl =\n      new Explanation(idf, \"idf(\" + field + \": \" + idfExp.explain() + \")\");\n\n    // explain query weight\n    Explanation queryExpl = new Explanation();\n    queryExpl.setDescription(\"queryWeight(\" + getQuery() + \"), product of:\");\n\n    Explanation boostExpl = new Explanation(getQuery().getBoost(), \"boost\");\n    if (getQuery().getBoost() != 1.0f)\n      queryExpl.addDetail(boostExpl);\n    queryExpl.addDetail(idfExpl);\n\n    Explanation queryNormExpl = new Explanation(queryNorm,\"queryNorm\");\n    queryExpl.addDetail(queryNormExpl);\n\n    queryExpl.setValue(boostExpl.getValue() *\n                       idfExpl.getValue() *\n                       queryNormExpl.getValue());\n\n    result.addDetail(queryExpl);\n\n    // explain field weight\n    ComplexExplanation fieldExpl = new ComplexExplanation();\n    fieldExpl.setDescription(\"fieldWeight(\"+field+\":\"+query.toString(field)+\n                             \" in \"+doc+\"), product of:\");\n\n    Explanation tfExpl = ((SpanScorer)scorer(reader, true, false)).explain(doc);\n    fieldExpl.addDetail(tfExpl);\n    fieldExpl.addDetail(idfExpl);\n\n    Explanation fieldNormExpl = new Explanation();\n    byte[] fieldNorms = reader.norms(field);\n    float fieldNorm =\n      fieldNorms!=null ? similarity.decodeNormValue(fieldNorms[doc]) : 1.0f;\n    fieldNormExpl.setValue(fieldNorm);\n    fieldNormExpl.setDescription(\"fieldNorm(field=\"+field+\", doc=\"+doc+\")\");\n    fieldExpl.addDetail(fieldNormExpl);\n\n    fieldExpl.setMatch(Boolean.valueOf(tfExpl.isMatch()));\n    fieldExpl.setValue(tfExpl.getValue() *\n                       idfExpl.getValue() *\n                       fieldNormExpl.getValue());\n\n    result.addDetail(fieldExpl);\n    result.setMatch(fieldExpl.getMatch());\n\n    // combine them\n    result.setValue(queryExpl.getValue() * fieldExpl.getValue());\n\n    if (queryExpl.getValue() == 1.0f)\n      return fieldExpl;\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"231941d2cb96b9752e839c311391096d90470db8":["fe941135bdfc28c81e20b4d21422f8726af34925"],"fe941135bdfc28c81e20b4d21422f8726af34925":["052fac7830290bd38a04cddee1a121ee07656b56"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"486cfd5a3f7481938475c113415d896f7a74a4a9":["f8da75c64a26663199511eef8db650621ed89107"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"f8da75c64a26663199511eef8db650621ed89107":["231941d2cb96b9752e839c311391096d90470db8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"052fac7830290bd38a04cddee1a121ee07656b56":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"]},"commit2Childs":{"20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a":["052fac7830290bd38a04cddee1a121ee07656b56"],"231941d2cb96b9752e839c311391096d90470db8":["f8da75c64a26663199511eef8db650621ed89107"],"fe941135bdfc28c81e20b4d21422f8726af34925":["231941d2cb96b9752e839c311391096d90470db8"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"486cfd5a3f7481938475c113415d896f7a74a4a9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["f4e4ac061c7cb668bd0651cb565ebbad1157cadc"],"f8da75c64a26663199511eef8db650621ed89107":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"f4e4ac061c7cb668bd0651cb565ebbad1157cadc":["20a9b2ec0ed5b7e0156b6707e34eb285cb86eb7a"],"0bcbf4ed0baed877c8b36d024e17a99bedfdd904":["5af54d2e9e95d08aae526fa69cdd34b66a49b763"],"052fac7830290bd38a04cddee1a121ee07656b56":["fe941135bdfc28c81e20b4d21422f8726af34925"],"5af54d2e9e95d08aae526fa69cdd34b66a49b763":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}