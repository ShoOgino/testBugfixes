{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","sourceNew":"    private int sharedPrefix(BytesRef term1, BytesRef term2) {\n      assert term1.offset == 0;\n      assert term2.offset == 0;\n      int pos1 = 0;\n      int pos1End = pos1 + Math.min(term1.length, term2.length);\n      int pos2 = 0;\n      while(pos1 < pos1End) {\n        if (term1.bytes[pos1] != term2.bytes[pos2]) {\n          return pos1;\n        }\n        pos1++;\n        pos2++;\n      }\n      return pos1;\n    }\n\n","sourceOld":"    private int sharedPrefix(BytesRef term1, BytesRef term2) {\n      assert term1.offset == 0;\n      assert term2.offset == 0;\n      int pos1 = 0;\n      int pos1End = pos1 + Math.min(term1.length, term2.length);\n      int pos2 = 0;\n      while(pos1 < pos1End) {\n        if (term1.bytes[pos1] != term2.bytes[pos2]) {\n          return pos1;\n        }\n        pos1++;\n        pos2++;\n      }\n      return pos1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#sharedPrefix(BytesRef,BytesRef).mjava","sourceNew":"    private int sharedPrefix(BytesRef term1, BytesRef term2) {\n      assert term1.offset == 0;\n      assert term2.offset == 0;\n      int pos1 = 0;\n      int pos1End = pos1 + Math.min(term1.length, term2.length);\n      int pos2 = 0;\n      while(pos1 < pos1End) {\n        if (term1.bytes[pos1] != term2.bytes[pos2]) {\n          return pos1;\n        }\n        pos1++;\n        pos2++;\n      }\n      return pos1;\n    }\n\n","sourceOld":"    private int sharedPrefix(BytesRef term1, BytesRef term2) {\n      assert term1.offset == 0;\n      assert term2.offset == 0;\n      int pos1 = 0;\n      int pos1End = pos1 + Math.min(term1.length, term2.length);\n      int pos2 = 0;\n      while(pos1 < pos1End) {\n        if (term1.bytes[pos1] != term2.bytes[pos2]) {\n          return pos1;\n        }\n        pos1++;\n        pos2++;\n      }\n      return pos1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}