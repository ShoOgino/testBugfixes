{"path":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","commits":[{"id":"e3fd53e9969a60409c90fe264ff605778ba323f6","date":1168218319,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = Similarity.decodeNorm(b[j]);\n        float norm1 = ((Float)storedNorms.get(j)).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = Similarity.decodeNorm(b[j]);\n        float norm1 = ((Float)storedNorms.get(j)).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = Similarity.decodeNorm(b[j]);\n        float norm1 = ((Float)storedNorms.get(j)).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = Similarity.decodeNorm(b[j]);\n        float norm1 = ((Float)storedNorms.get(j)).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = Similarity.decodeNorm(b[j]);\n        float norm1 = ((Float)storedNorms.get(j)).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = ((Float)storedNorms.get(j)).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = Similarity.decodeNorm(b[j]);\n        float norm1 = ((Float)storedNorms.get(j)).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = ((Float)storedNorms.get(j)).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#verifyIndex(Directory).mjava","sourceNew":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyIndex(Directory dir) throws IOException {\n    IndexReader ir = IndexReader.open(dir, false);\n    for (int i = 0; i < NUM_FIELDS; i++) {\n      String field = \"f\"+i;\n      byte b[] = ir.norms(field);\n      assertEquals(\"number of norms mismatches\",numDocNorms,b.length);\n      ArrayList<Float> storedNorms = (i==1 ? modifiedNorms : norms);\n      for (int j = 0; j < b.length; j++) {\n        float norm = similarityOne.decodeNormValue(b[j]);\n        float norm1 = storedNorms.get(j).floatValue();\n        assertEquals(\"stored norm value of \"+field+\" for doc \"+j+\" is \"+norm+\" - a mismatch!\", norm, norm1, 0.000001);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e3fd53e9969a60409c90fe264ff605778ba323f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["e3fd53e9969a60409c90fe264ff605778ba323f6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["e3fd53e9969a60409c90fe264ff605778ba323f6","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"e3fd53e9969a60409c90fe264ff605778ba323f6":["e8d1458a2543cbd30cbfe7929be4dcb5c5251659","0a046c0c310bc77931fc8441bd920053b607dd14"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3fd53e9969a60409c90fe264ff605778ba323f6"],"0a046c0c310bc77931fc8441bd920053b607dd14":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}