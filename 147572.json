{"path":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfoPerCommit> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfoPerCommit> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws IOException {\n    final List<SegmentInfoPerCommit> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfoPerCommit> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":["13eaef7d286f35b5c850a1c2eb7b337679aa6453"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws IOException {\n    final List<SegmentInfoPerCommit> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws CorruptIndexException, IOException {\n    final List<SegmentInfoPerCommit> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws IOException {\n    final List<SegmentInfoPerCommit> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentInfoPerCommit info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos,IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#findForcedDeletesMerges(SegmentInfos).mjava","sourceNew":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos, IndexWriter writer)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose(writer)) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\", writer);\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    assert writer != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = writer.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose(writer)) {\n          message(\"  segment \" + info.info.name + \" has deletions\", writer);\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose(writer)) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose(writer)) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\", writer);\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose(writer)) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\", writer);\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","sourceOld":"  /**\n   * Finds merges necessary to force-merge all deletes from the\n   * index.  We simply merge adjacent segments that have\n   * deletes, up to mergeFactor at a time.\n   */ \n  @Override\n  public MergeSpecification findForcedDeletesMerges(SegmentInfos segmentInfos)\n      throws IOException {\n    final List<SegmentCommitInfo> segments = segmentInfos.asList();\n    final int numSegments = segments.size();\n\n    if (verbose()) {\n      message(\"findForcedDeleteMerges: \" + numSegments + \" segments\");\n    }\n\n    MergeSpecification spec = new MergeSpecification();\n    int firstSegmentWithDeletions = -1;\n    IndexWriter w = writer.get();\n    assert w != null;\n    for(int i=0;i<numSegments;i++) {\n      final SegmentCommitInfo info = segmentInfos.info(i);\n      int delCount = w.numDeletedDocs(info);\n      if (delCount > 0) {\n        if (verbose()) {\n          message(\"  segment \" + info.info.name + \" has deletions\");\n        }\n        if (firstSegmentWithDeletions == -1)\n          firstSegmentWithDeletions = i;\n        else if (i - firstSegmentWithDeletions == mergeFactor) {\n          // We've seen mergeFactor segments in a row with\n          // deletions, so force a merge now:\n          if (verbose()) {\n            message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n          }\n          spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n          firstSegmentWithDeletions = i;\n        }\n      } else if (firstSegmentWithDeletions != -1) {\n        // End of a sequence of segments with deletions, so,\n        // merge those past segments even if it's fewer than\n        // mergeFactor segments\n        if (verbose()) {\n          message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (i-1) + \" inclusive\");\n        }\n        spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, i)));\n        firstSegmentWithDeletions = -1;\n      }\n    }\n\n    if (firstSegmentWithDeletions != -1) {\n      if (verbose()) {\n        message(\"  add merge \" + firstSegmentWithDeletions + \" to \" + (numSegments-1) + \" inclusive\");\n      }\n      spec.add(new OneMerge(segments.subList(firstSegmentWithDeletions, numSegments)));\n    }\n\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"027bee21e09164c9ee230395405076d1e0034b30":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["027bee21e09164c9ee230395405076d1e0034b30"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["027bee21e09164c9ee230395405076d1e0034b30"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"027bee21e09164c9ee230395405076d1e0034b30":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}