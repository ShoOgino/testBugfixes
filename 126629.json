{"path":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","commits":[{"id":"8ced52befdc8d88d90766aadbaac496f3fd0e4ee","date":1421070034,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectOpenHashMap<LeafCollector> leafCollectors = new LongObjectOpenHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value = docValues.get(docId);\n          if (value != nullValue && leafCollectors.containsKey(value) && !collapsedSet.contains(docId + docBase)) {\n            LeafCollector c = leafCollectors.lget();\n            c.collect(docId);\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectOpenHashMap<LeafCollector> leafCollectors = new LongObjectOpenHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value = docValues.get(docId);\n          if (value != nullValue && leafCollectors.containsKey(value) && !collapsedSet.contains(docId + docBase)) {\n            LeafCollector c = leafCollectors.lget();\n            c.collect(docId);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectOpenHashMap<LeafCollector> leafCollectors = new LongObjectOpenHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value = docValues.get(docId);\n          if (value != nullValue && leafCollectors.containsKey(value) && !collapsedSet.contains(docId + docBase)) {\n            LeafCollector c = leafCollectors.lget();\n            c.collect(docId);\n          }\n        }\n\n        @Override\n        public boolean acceptsDocsOutOfOrder() {\n          return false;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","date":1440409984,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value = docValues.get(docId);\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectOpenHashMap<LeafCollector> leafCollectors = new LongObjectOpenHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value = docValues.get(docId);\n          if (value != nullValue && leafCollectors.containsKey(value) && !collapsedSet.contains(docId + docBase)) {\n            LeafCollector c = leafCollectors.lget();\n            c.collect(docId);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          int valuesDocID = docValues.docID();\n          if (valuesDocID < docId) {\n            valuesDocID = docValues.advance(docId);\n          }\n          long value;\n          if (valuesDocID == docId) {\n            value = docValues.longValue();\n          } else {\n            value = 0;\n          }\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value = docValues.get(docId);\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          int valuesDocID = docValues.docID();\n          if (valuesDocID < docId) {\n            valuesDocID = docValues.advance(docId);\n          }\n          long value;\n          if (valuesDocID == docId) {\n            value = docValues.longValue();\n          } else {\n            value = 0;\n          }\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value = docValues.get(docId);\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          int valuesDocID = docValues.docID();\n          if (valuesDocID < docId) {\n            valuesDocID = docValues.advance(docId);\n          }\n          long value;\n          if (valuesDocID == docId) {\n            value = docValues.longValue();\n          } else {\n            value = 0;\n          }\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value = docValues.get(docId);\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","date":1518443389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value;\n          if (docValues.advanceExact(docId)) {\n            value = docValues.longValue();\n          } else {\n            value = 0;\n          }\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          int valuesDocID = docValues.docID();\n          if (valuesDocID < docId) {\n            valuesDocID = docValues.advance(docId);\n          }\n          long value;\n          if (valuesDocID == docId) {\n            value = docValues.longValue();\n          } else {\n            value = 0;\n          }\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value;\n          if (docValues.advanceExact(docId)) {\n            value = docValues.longValue();\n          } else {\n            value = 0;\n          }\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          int valuesDocID = docValues.docID();\n          if (valuesDocID < docId) {\n            valuesDocID = docValues.advance(docId);\n          }\n          long value;\n          if (valuesDocID == docId) {\n            value = docValues.longValue();\n          } else {\n            value = 0;\n          }\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.NumericGroupExpandCollector#getLeafCollector(LeafReaderContext).mjava","sourceNew":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorable scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value;\n          if (docValues.advanceExact(docId)) {\n            value = docValues.longValue();\n          } else {\n            value = 0;\n          }\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n      final int docBase = context.docBase;\n      this.docValues = context.reader().getNumericDocValues(this.field);\n\n      final LongObjectHashMap<LeafCollector> leafCollectors = new LongObjectHashMap<>();\n\n      for (LongObjectCursor<Collector> entry : groups) {\n        leafCollectors.put(entry.key, entry.value.getLeafCollector(context));\n      }\n\n      return new LeafCollector() {\n\n        @Override\n        public void setScorer(Scorer scorer) throws IOException {\n          for (ObjectCursor<LeafCollector> c : leafCollectors.values()) {\n            c.value.setScorer(scorer);\n          }\n        }\n\n        @Override\n        public void collect(int docId) throws IOException {\n          long value;\n          if (docValues.advanceExact(docId)) {\n            value = docValues.longValue();\n          } else {\n            value = 0;\n          }\n          final int index;\n          if (value != nullValue && \n              (index = leafCollectors.indexOf(value)) >= 0 && \n              !collapsedSet.contains(docId + docBase)) {\n            leafCollectors.indexGet(index).collect(docId);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","81f64a6570bc5d216c5d575c3b29ecb106fa0e6b"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"8ced52befdc8d88d90766aadbaac496f3fd0e4ee":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ced52befdc8d88d90766aadbaac496f3fd0e4ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","bfcdec9fcf0409223f35c5ec3bc14094314941b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"1fcee2c3acd9aa64a73a3b441b3f6cb492af0b87":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}