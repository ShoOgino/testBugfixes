{"path":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexWriter,SegmentInfos,AtomicReader[],int).mjava","commits":[{"id":"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3","date":1328092914,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexWriter,SegmentInfos,AtomicReader[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DirectoryReader#open(Directory,IndexWriter,SegmentInfos,SegmentReader[],int).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  private static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, AtomicReader[] oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(((SegmentReader) oldReaders[i]).getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      IOException prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).dir == newReaders[i].getSegmentInfo().dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ex) {\n                if (prior == null) prior = ex;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) throw prior;\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, writer, infos, termInfosIndexDivisor, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  private static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, SegmentReader[] oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(oldReaders[i].getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      IOException prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).dir == newReaders[i].getSegmentInfo().dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ex) {\n                if (prior == null) prior = ex;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) throw prior;\n      }\n    }    \n    return new DirectoryReader(newReaders, directory, writer, \n        infos, termInfosIndexDivisor, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexWriter,SegmentInfos,AtomicReader[],int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/StandardDirectoryReader#open(Directory,IndexWriter,SegmentInfos,AtomicReader[],int).mjava","sourceNew":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  private static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, AtomicReader[] oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(((SegmentReader) oldReaders[i]).getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      IOException prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).dir == newReaders[i].getSegmentInfo().dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ex) {\n                if (prior == null) prior = ex;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) throw prior;\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, writer, infos, termInfosIndexDivisor, false);\n  }\n\n","sourceOld":"  /** This constructor is only used for {@link #doOpenIfChanged()} */\n  private static DirectoryReader open(Directory directory, IndexWriter writer, SegmentInfos infos, AtomicReader[] oldReaders,\n    int termInfosIndexDivisor) throws IOException {\n    // we put the old SegmentReaders in a map, that allows us\n    // to lookup a reader using its segment name\n    final Map<String,Integer> segmentReaders = new HashMap<String,Integer>();\n\n    if (oldReaders != null) {\n      // create a Map SegmentName->SegmentReader\n      for (int i = 0; i < oldReaders.length; i++) {\n        segmentReaders.put(((SegmentReader) oldReaders[i]).getSegmentName(), Integer.valueOf(i));\n      }\n    }\n    \n    SegmentReader[] newReaders = new SegmentReader[infos.size()];\n    \n    // remember which readers are shared between the old and the re-opened\n    // DirectoryReader - we have to incRef those readers\n    boolean[] readerShared = new boolean[infos.size()];\n    \n    for (int i = infos.size() - 1; i>=0; i--) {\n      // find SegmentReader for this segment\n      Integer oldReaderIndex = segmentReaders.get(infos.info(i).name);\n      if (oldReaderIndex == null) {\n        // this is a new segment, no old SegmentReader can be reused\n        newReaders[i] = null;\n      } else {\n        // there is an old reader for this segment - we'll try to reopen it\n        newReaders[i] = (SegmentReader) oldReaders[oldReaderIndex.intValue()];\n      }\n\n      boolean success = false;\n      IOException prior = null;\n      try {\n        SegmentReader newReader;\n        if (newReaders[i] == null || infos.info(i).getUseCompoundFile() != newReaders[i].getSegmentInfo().getUseCompoundFile()) {\n\n          // this is a new reader; in case we hit an exception we can close it safely\n          newReader = new SegmentReader(infos.info(i), termInfosIndexDivisor, IOContext.READ);\n          readerShared[i] = false;\n          newReaders[i] = newReader;\n        } else {\n          if (newReaders[i].getSegmentInfo().getDelGen() == infos.info(i).getDelGen()) {\n            // No change; this reader will be shared between\n            // the old and the new one, so we must incRef\n            // it:\n            readerShared[i] = true;\n            newReaders[i].incRef();\n          } else {\n            readerShared[i] = false;\n            // Steal the ref returned by SegmentReader ctor:\n            assert infos.info(i).dir == newReaders[i].getSegmentInfo().dir;\n            assert infos.info(i).hasDeletions();\n            newReaders[i] = new SegmentReader(infos.info(i), newReaders[i].core, IOContext.READ);\n          }\n        }\n        success = true;\n      } catch (IOException ex) {\n        prior = ex;\n      } finally {\n        if (!success) {\n          for (i++; i < infos.size(); i++) {\n            if (newReaders[i] != null) {\n              try {\n                if (!readerShared[i]) {\n                  // this is a new subReader that is not used by the old one,\n                  // we can close it\n                  newReaders[i].close();\n                } else {\n                  // this subReader is also used by the old reader, so instead\n                  // closing we must decRef it\n                  newReaders[i].decRef();\n                }\n              } catch (IOException ex) {\n                if (prior == null) prior = ex;\n              }\n            }\n          }\n        }\n        // throw the first exception\n        if (prior != null) throw prior;\n      }\n    }    \n    return new StandardDirectoryReader(directory, newReaders, writer, infos, termInfosIndexDivisor, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7bbf8cffd2321f26cf9f6487f1571d325f20bc3"],"d7bbf8cffd2321f26cf9f6487f1571d325f20bc3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}