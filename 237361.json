{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,Predicate[CharSequence],boolean,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","commits":[{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,Predicate[CharSequence],boolean,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Provides a representation of the given metric registry as {@link SolrInputDocument}-s.\n   Only those metrics\n   * are converted which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param metadata optional metadata. If not null and not empty then this map will be added under a\n   *                 {@code _metadata_} key.\n   * @param consumer consumer that accepts produced {@link SolrInputDocument}-s\n   */\n  public static void toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                          MetricFilter mustMatchFilter, Predicate<CharSequence> propertyFilter, boolean skipHistograms,\n                                          boolean skipAggregateValues, boolean compact,\n                                          Map<String, Object> metadata, Consumer<SolrInputDocument> consumer) {\n    boolean addMetadata = metadata != null && !metadata.isEmpty();\n    toMaps(registry, shouldMatchFilters, mustMatchFilter, propertyFilter, skipHistograms, skipAggregateValues, compact, false, (k, v) -> {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(METRIC_NAME, k);\n      toSolrInputDocument(null, doc, v);\n      if (addMetadata) {\n        toSolrInputDocument(null, doc, metadata);\n      }\n      consumer.accept(doc);\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}