{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreq tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreq tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<TermFreqPayload> keys = new ArrayList<TermFreqPayload>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreqPayload(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqPayloadArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreqPayload tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<TermFreq> keys = new ArrayList<TermFreq>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreq(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreq tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<Input> keys = new ArrayList<Input>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new Input(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new InputArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (Input tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<TermFreqPayload> keys = new ArrayList<TermFreqPayload>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new TermFreqPayload(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new TermFreqPayloadArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (TermFreqPayload tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<Input> keys = new ArrayList<Input>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new Input(TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new InputArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (Input tf : keys) {\n      Long current = ((Number)lookup.get(TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<Input> keys = new ArrayList<Input>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new Input(_TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new InputArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (Input tf : keys) {\n      Long current = ((Number)lookup.get(_TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<Input> keys = new ArrayList<>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new Input(TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new InputArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (Input tf : keys) {\n      Long current = ((Number)lookup.get(TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<Input> keys = new ArrayList<Input>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new Input(TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new InputArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (Input tf : keys) {\n      Long current = ((Number)lookup.get(TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testLargeInputConstantWeights().mjava","sourceNew":"  public void testLargeInputConstantWeights() throws Exception {\n    Directory tempDir = getDirectory();\n    FSTCompletionLookup lookup = new FSTCompletionLookup(tempDir, \"fst\", 10, true);\n    \n    Random r = random();\n    List<Input> keys = new ArrayList<>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new Input(TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new InputArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (Input tf : keys) {\n      Long current = ((Number)lookup.get(TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n    tempDir.close();\n  }  \n\n","sourceOld":"  public void testLargeInputConstantWeights() throws Exception {\n    FSTCompletionLookup lookup = new FSTCompletionLookup(10, true);\n    \n    Random r = random();\n    List<Input> keys = new ArrayList<>();\n    for (int i = 0; i < 5000; i++) {\n      keys.add(new Input(TestUtil.randomSimpleString(r), -1));\n    }\n\n    lookup.build(new InputArrayIterator(keys));\n\n    // All the weights were constant, so all returned buckets must be constant, whatever they\n    // are.\n    Long previous = null; \n    for (Input tf : keys) {\n      Long current = ((Number)lookup.get(TestUtil.bytesToCharSequence(tf.term, random()))).longValue();\n      if (previous != null) {\n        assertEquals(previous, current);\n      }\n      previous = current;\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"6613659748fe4411a7dcf85266e55db1f95f7315":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}