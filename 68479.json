{"path":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","commits":[{"id":"8af63063406a531a215fa9c65fae3eee06bc7ab3","date":1362428737,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","pathOld":"/dev/null","sourceNew":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default curency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz KrasiÅ„ski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default curency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default curency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default curency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testFunctionUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":"  public void testFunctionUsage() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider\",\n        expectedProviderClass.equals(FileExchangeRateProvider.class));\n\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, fieldName, (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange u=500}\"+fieldName)\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange l=500 u=1000}\"+fieldName)\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testFunctionUsage().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":"  public void testFunctionUsage() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider\",\n        expectedProviderClass.equals(FileExchangeRateProvider.class));\n\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, fieldName, (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, fieldName, i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange u=500}\"+fieldName)\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+fieldName, \n                \"q\", \"{!frange l=500 u=1000}\"+fieldName)\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", fieldName,\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+fieldName, \n                \"f\", fieldName,\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//str[@name='id']='1'\"\n            ,\"//str[@name='id']='2'\"\n            ,\"//str[@name='id']='3'\"\n            ,\"//str[@name='id']='4'\"\n            ,\"//str[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//str[@name='id']='5'\"\n            ,\"//str[@name='id']='6'\"\n            ,\"//str[@name='id']='7'\"\n            ,\"//str[@name='id']='8'\"\n            ,\"//str[@name='id']='9'\"\n            ,\"//str[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/AbstractCurrencyFieldTest#testFunctionUsage().mjava","sourceNew":null,"sourceOld":"  public void testFunctionUsage() throws Exception {\n    clearIndex();\n    for (int i = 1; i <= 8; i++) {\n      // \"GBP\" currency code is 1/2 of a USD dollar, for testing.\n      assertU(adoc(\"id\", \"\" + i, field(), (((float)i)/2) + \",GBP\"));\n    }\n    for (int i = 9; i <= 11; i++) {\n      assertU(adoc(\"id\", \"\" + i, field(), i + \",USD\"));\n    }\n\n    assertU(commit());\n\n    // direct value source usage, gets \"raw\" form od default currency\n    // default==USD, so raw==penies\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=500]\");\n    assertQ(req(\"fl\", \"id,func:field($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=1000]\");\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange u=500}\"+field())\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score,\"+field(), \n                \"q\", \"{!frange l=500 u=1000}\"+field())\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n    // use the currency function to convert to default (USD)\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=5]\");\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=5}currency($f)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"id,score\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=5 u=10}currency($f)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n    \n    // use the currency function to convert to MXN\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:5\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=10]\");\n    assertQ(req(\"fl\", \"id,func:currency($f,MXN)\",\n                \"f\", field(),\n                \"q\", \"id:10\"),\n            \"//*[@numFound='1']\",\n            \"//doc/float[@name='func' and .=20]\");\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange u=10}currency($f,MXN)\")\n            ,\"//*[@numFound='5']\"\n            ,\"//int[@name='id']='1'\"\n            ,\"//int[@name='id']='2'\"\n            ,\"//int[@name='id']='3'\"\n            ,\"//int[@name='id']='4'\"\n            ,\"//int[@name='id']='5'\"\n            );\n    assertQ(req(\"fl\", \"*,score,\"+field(), \n                \"f\", field(),\n                \"q\", \"{!frange l=10 u=20}currency($f,MXN)\")\n            ,\"//*[@numFound='6']\"\n            ,\"//int[@name='id']='5'\"\n            ,\"//int[@name='id']='6'\"\n            ,\"//int[@name='id']='7'\"\n            ,\"//int[@name='id']='8'\"\n            ,\"//int[@name='id']='9'\"\n            ,\"//int[@name='id']='10'\"\n            );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8af63063406a531a215fa9c65fae3eee06bc7ab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["d470c8182e92b264680e34081b75e70a9f2b3c89","f107636c2cc82350a2607d774c092da5b73152e5"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["d470c8182e92b264680e34081b75e70a9f2b3c89","a71f63026529f3c1f03cfdd664910873ab2369ae"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8af63063406a531a215fa9c65fae3eee06bc7ab3","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["8af63063406a531a215fa9c65fae3eee06bc7ab3","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["8af63063406a531a215fa9c65fae3eee06bc7ab3"],"f107636c2cc82350a2607d774c092da5b73152e5":["a71f63026529f3c1f03cfdd664910873ab2369ae"]},"commit2Childs":{"8af63063406a531a215fa9c65fae3eee06bc7ab3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8af63063406a531a215fa9c65fae3eee06bc7ab3"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}