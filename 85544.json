{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testReverseOrderSpanCollection().mjava","commits":[{"id":"50757fe5d1709a826029f328f2ee33c97f170d84","date":1529506189,"type":0,"author":"Marc-Andre Morissette","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testReverseOrderSpanCollection().mjava","pathOld":"/dev/null","sourceNew":"  // Tests that terms collected out of order due to being present in multiple Spans are handled correctly\n  // See LUCENE-8365\n  public void testReverseOrderSpanCollection() throws IOException {\n    // Processing order may depend on various optimizations or other weird factor.\n    indexWriter.addDocument(newDoc(\"alpha bravo - alpha charlie\"));\n    indexWriter.addDocument(newDoc(\"alpha charlie - alpha bravo\"));\n    initReaderSearcherHighlighter();\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[]{\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"alpha\")),\n            new SpanTermQuery(new Term(\"body\", \"bravo\"))\n        }, 0, true),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"alpha\")),\n            new SpanTermQuery(new Term(\"body\", \"charlie\"))\n        }, 0, true)\n    }, 10, false);\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\n            \"<b>alpha</b> <b>bravo</b> - <b>alpha</b> <b>charlie</b>\",\n            \"<b>alpha</b> <b>charlie</b> - <b>alpha</b> <b>bravo</b>\",\n        },\n        snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testReverseOrderSpanCollection().mjava","pathOld":"/dev/null","sourceNew":"  // Tests that terms collected out of order due to being present in multiple Spans are handled correctly\n  // See LUCENE-8365\n  public void testReverseOrderSpanCollection() throws IOException {\n    // Processing order may depend on various optimizations or other weird factor.\n    indexWriter.addDocument(newDoc(\"alpha bravo - alpha charlie\"));\n    indexWriter.addDocument(newDoc(\"alpha charlie - alpha bravo\"));\n    initReaderSearcherHighlighter();\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[]{\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"alpha\")),\n            new SpanTermQuery(new Term(\"body\", \"bravo\"))\n        }, 0, true),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"alpha\")),\n            new SpanTermQuery(new Term(\"body\", \"charlie\"))\n        }, 0, true)\n    }, 10, false);\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\n            \"<b>alpha</b> <b>bravo</b> - <b>alpha</b> <b>charlie</b>\",\n            \"<b>alpha</b> <b>charlie</b> - <b>alpha</b> <b>bravo</b>\",\n        },\n        snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testReverseOrderSpanCollection().mjava","pathOld":"/dev/null","sourceNew":"  // Tests that terms collected out of order due to being present in multiple Spans are handled correctly\n  // See LUCENE-8365\n  public void testReverseOrderSpanCollection() throws IOException {\n    // Processing order may depend on various optimizations or other weird factor.\n    indexWriter.addDocument(newDoc(\"alpha bravo - alpha charlie\"));\n    indexWriter.addDocument(newDoc(\"alpha charlie - alpha bravo\"));\n    initReaderSearcherHighlighter();\n\n    SpanNearQuery query = new SpanNearQuery(new SpanQuery[]{\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"alpha\")),\n            new SpanTermQuery(new Term(\"body\", \"bravo\"))\n        }, 0, true),\n        new SpanNearQuery(new SpanQuery[]{\n            new SpanTermQuery(new Term(\"body\", \"alpha\")),\n            new SpanTermQuery(new Term(\"body\", \"charlie\"))\n        }, 0, true)\n    }, 10, false);\n\n    TopDocs topDocs = searcher.search(query, 10, Sort.INDEXORDER);\n    String[] snippets = highlighter.highlight(\"body\", query, topDocs);\n\n    assertArrayEquals(new String[]{\n            \"<b>alpha</b> <b>bravo</b> - <b>alpha</b> <b>charlie</b>\",\n            \"<b>alpha</b> <b>charlie</b> - <b>alpha</b> <b>bravo</b>\",\n        },\n        snippets);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","50757fe5d1709a826029f328f2ee33c97f170d84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"50757fe5d1709a826029f328f2ee33c97f170d84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["50757fe5d1709a826029f328f2ee33c97f170d84"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","50757fe5d1709a826029f328f2ee33c97f170d84"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","50757fe5d1709a826029f328f2ee33c97f170d84","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"50757fe5d1709a826029f328f2ee33c97f170d84":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}