{"path":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","date":1316619234,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Checks recursively if all subreaders are up to date. \n   */\n  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (int i = 0; i < subReaders.length; i++) {\n      final IndexReader r = subReaders[i];\n      if (r instanceof CompositeIndexReader && !((CompositeIndexReader) r).isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"893d07555f01912f57b453a320e4d46363a31b50","date":1327312526,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (int i = 0; i < subReaders.length; i++) {\n      final IndexReader r = subReaders[i];\n      if (r instanceof CompositeIndexReader && !((CompositeIndexReader) r).isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#isCurrent().mjava","sourceNew":null,"sourceOld":"  @Override\n  public boolean isCurrent() throws CorruptIndexException, IOException {\n    ensureOpen();\n    for (int i = 0; i < subReaders.length; i++) {\n      if (!subReaders[i].isCurrent()) {\n        return false;\n      }\n    }\n    \n    // all subreaders are up to date\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b","6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"893d07555f01912f57b453a320e4d46363a31b50":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"]},"commit2Childs":{"0ddeeafb97cacc0f0e449e34a246cb6dda2c712b":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"893d07555f01912f57b453a320e4d46363a31b50":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0ddeeafb97cacc0f0e449e34a246cb6dda2c712b"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["893d07555f01912f57b453a320e4d46363a31b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}