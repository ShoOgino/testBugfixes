{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","commits":[{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,CollectionRef> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version, znode);\n      collections.put(collectionName, new CollectionRef(coll));\n    }\n\n    return new ClusterState( liveNodes, collections,version);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    Map<String,CollectionRef> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version, znode);\n      collections.put(collectionName, new CollectionRef(coll));\n    }\n\n    return new ClusterState( liveNodes, collections,version);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) ZkStateReader.fromJSON(bytes);\n    Map<String,CollectionRef> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version, znode);\n      collections.put(collectionName, new CollectionRef(coll));\n    }\n\n    return new ClusterState( liveNodes, collections,version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a64b273d51a6540272668680ece9f8b686ff0004","date":1492404078,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    return load(version, stateMap, liveNodes, znode);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    Map<String,CollectionRef> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version, znode);\n      collections.put(collectionName, new CollectionRef(coll));\n    }\n\n    return new ClusterState( liveNodes, collections,version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    return load(version, stateMap, liveNodes, znode);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    Map<String,CollectionRef> collections = new LinkedHashMap<>(stateMap.size());\n    for (Entry<String, Object> entry : stateMap.entrySet()) {\n      String collectionName = entry.getKey();\n      DocCollection coll = collectionFromObjects(collectionName, (Map<String,Object>)entry.getValue(), version, znode);\n      collections.put(collectionName, new CollectionRef(coll));\n    }\n\n    return new ClusterState( liveNodes, collections,version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    return load(version, stateMap, liveNodes, znode);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    return load(version, stateMap, liveNodes, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","sourceNew":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    return load(version, stateMap, liveNodes, znode);\n  }\n\n","sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    return load(version, stateMap, liveNodes, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":4,"author":"murblanc","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#load(Integer,byte[],Set[String],String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create ClusterState from json string that is typically stored in zookeeper.\n   * \n   * @param version zk version of the clusterstate.json file (bytes)\n   * @param bytes clusterstate.json as a byte array\n   * @param liveNodes list of live nodes\n   * @return the ClusterState\n   */\n  public static ClusterState load(Integer version, byte[] bytes, Set<String> liveNodes, String znode) {\n    // System.out.println(\"######## ClusterState.load:\" + (bytes==null ? null : new String(bytes)));\n    if (bytes == null || bytes.length == 0) {\n      return new ClusterState(version, liveNodes, Collections.<String, DocCollection>emptyMap());\n    }\n    Map<String, Object> stateMap = (Map<String, Object>) Utils.fromJSON(bytes);\n    return load(version, stateMap, liveNodes, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["a64b273d51a6540272668680ece9f8b686ff0004"],"a64b273d51a6540272668680ece9f8b686ff0004":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["9279b175e5e66258442d2123a50f052219a9cc1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"9279b175e5e66258442d2123a50f052219a9cc1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a64b273d51a6540272668680ece9f8b686ff0004":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a64b273d51a6540272668680ece9f8b686ff0004"],"9279b175e5e66258442d2123a50f052219a9cc1b":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}