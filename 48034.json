{"path":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery#getDenseVisitor(ShapeQuery,FixedBitSet,FixedBitSet,long[]).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery#getDenseVisitor(ShapeQuery,FixedBitSet,FixedBitSet,long[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery#getDenseVisitor(ShapeQuery,FixedBitSet,FixedBitSet,long[]).mjava","sourceNew":"  /** create a visitor that adds documents that match the query using a dense bitset; used with WITHIN & DISJOINT */\n  private static IntersectVisitor getDenseVisitor(final ShapeQuery query, final FixedBitSet result, final FixedBitSet excluded, final long[] cost) {\n    return new IntersectVisitor() {\n      final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n\n      @Override\n      public void visit(int docID) {\n        result.set(docID);\n        cost[0]++;\n      }\n\n      @Override\n      public void visit(int docID, byte[] t) {\n        if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n          visit(docID);\n        } else {\n          excluded.set(docID);\n        }\n      }\n\n      @Override\n      public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n        boolean matches = query.queryMatches(t, scratchTriangle, query.getQueryRelation());\n        int docID;\n        while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (matches) {\n            visit(docID);\n          } else {\n            excluded.set(docID);\n          }\n        }\n      }\n\n      @Override\n      public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n        return query.relateRangeToQuery(minTriangle, maxTriangle, query.getQueryRelation());\n      }\n    };\n  }\n\n","sourceOld":"  /** create a visitor that adds documents that match the query using a dense bitset; used with WITHIN & DISJOINT */\n  private static IntersectVisitor getDenseVisitor(final ShapeQuery query, final FixedBitSet result, final FixedBitSet excluded, final long[] cost) {\n    return new IntersectVisitor() {\n      final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n\n      @Override\n      public void visit(int docID) {\n        result.set(docID);\n        cost[0]++;\n      }\n\n      @Override\n      public void visit(int docID, byte[] t) {\n        if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n          visit(docID);\n        } else {\n          excluded.set(docID);\n        }\n      }\n\n      @Override\n      public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n        boolean matches = query.queryMatches(t, scratchTriangle, query.getQueryRelation());\n        int docID;\n        while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (matches) {\n            visit(docID);\n          } else {\n            excluded.set(docID);\n          }\n        }\n      }\n\n      @Override\n      public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n        return query.relateRangeToQuery(minTriangle, maxTriangle, query.getQueryRelation());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73bb33f7f48bf40ff978c9494feddc80c8701678","date":1600408258,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery#getDenseVisitor(ShapeQuery,FixedBitSet,FixedBitSet,long[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery#getDenseVisitor(ShapeQuery,FixedBitSet,FixedBitSet,long[]).mjava","sourceNew":"  /** create a visitor that adds documents that match the query using a dense bitset; used with WITHIN & DISJOINT */\n  private static IntersectVisitor getDenseVisitor(final ShapeQuery query, final FixedBitSet result, final FixedBitSet excluded, final long[] cost) {\n    return new IntersectVisitor() {\n      final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n\n      @Override\n      public void visit(int docID) {\n        result.set(docID);\n        cost[0]++;\n      }\n\n      @Override\n      public void visit(int docID, byte[] t) {\n        if (excluded.get(docID) == false) {\n          if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n            visit(docID);\n          } else {\n            excluded.set(docID);\n          }\n        }\n      }\n\n      @Override\n      public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n        boolean matches = query.queryMatches(t, scratchTriangle, query.getQueryRelation());\n        int docID;\n        while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (matches) {\n            visit(docID);\n          } else {\n            excluded.set(docID);\n          }\n        }\n      }\n\n      @Override\n      public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n        return query.relateRangeToQuery(minTriangle, maxTriangle, query.getQueryRelation());\n      }\n    };\n  }\n\n","sourceOld":"  /** create a visitor that adds documents that match the query using a dense bitset; used with WITHIN & DISJOINT */\n  private static IntersectVisitor getDenseVisitor(final ShapeQuery query, final FixedBitSet result, final FixedBitSet excluded, final long[] cost) {\n    return new IntersectVisitor() {\n      final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n\n      @Override\n      public void visit(int docID) {\n        result.set(docID);\n        cost[0]++;\n      }\n\n      @Override\n      public void visit(int docID, byte[] t) {\n        if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n          visit(docID);\n        } else {\n          excluded.set(docID);\n        }\n      }\n\n      @Override\n      public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n        boolean matches = query.queryMatches(t, scratchTriangle, query.getQueryRelation());\n        int docID;\n        while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n          if (matches) {\n            visit(docID);\n          } else {\n            excluded.set(docID);\n          }\n        }\n      }\n\n      @Override\n      public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n        return query.relateRangeToQuery(minTriangle, maxTriangle, query.getQueryRelation());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73bb33f7f48bf40ff978c9494feddc80c8701678":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73bb33f7f48bf40ff978c9494feddc80c8701678"]},"commit2Childs":{"73bb33f7f48bf40ff978c9494feddc80c8701678":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["73bb33f7f48bf40ff978c9494feddc80c8701678"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}