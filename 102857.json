{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","commits":[{"id":"b799defcfda6d303cbb180917bf1e749089adf42","date":1370695356,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SloppySimScorer#explain(int,Explanation).mjava","sourceNew":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) {\n      Explanation result = new Explanation(score(doc, freq.getValue()), \n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\");\n      result.addDetail(freq);\n      return result;\n    }\n\n","sourceOld":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) {\n      Explanation result = new Explanation(score(doc, freq.getValue()), \n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\");\n      result.addDetail(freq);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","date":1429620941,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","sourceNew":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) {\n      return Explanation.match(\n          score(doc, freq.getValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","sourceOld":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) {\n      Explanation result = new Explanation(score(doc, freq.getValue()), \n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\");\n      result.addDetail(freq);\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","sourceNew":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) throws IOException {\n      return Explanation.match(\n          score(doc, freq.getValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","sourceOld":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) {\n      return Explanation.match(\n          score(doc, freq.getValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","sourceNew":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) throws IOException {\n      return Explanation.match(\n          score(doc, freq.getValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","sourceOld":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) {\n      return Explanation.match(\n          score(doc, freq.getValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","sourceNew":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) throws IOException {\n      return Explanation.match(\n          score(doc, freq.getValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","sourceOld":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) {\n      return Explanation.match(\n          score(doc, freq.getValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","sourceNew":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) throws IOException {\n      return Explanation.match(\n          score(doc, freq.getValue().floatValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","sourceOld":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) throws IOException {\n      return Explanation.match(\n          score(doc, freq.getValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(Explanation,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","sourceNew":"    /**\n     * Explain the score for a single document\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @param norm encoded normalization factor, as returned by {@link Similarity#computeNorm}, or {@code 1} if norms are disabled\n     * @return document's score\n     */\n    public Explanation explain(Explanation freq, long norm) throws IOException {\n      return Explanation.match(\n          score(freq.getValue().floatValue(), norm),\n          \"score(freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","sourceOld":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) throws IOException {\n      return Explanation.match(\n          score(doc, freq.getValue().floatValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/Similarity.SimScorer#explain(int,Explanation).mjava","sourceNew":null,"sourceOld":"    /**\n     * Explain the score for a single document\n     * @param doc document id within the inverted index segment\n     * @param freq Explanation of how the sloppy term frequency was computed\n     * @return document's score\n     */\n    public Explanation explain(int doc, Explanation freq) throws IOException {\n      return Explanation.match(\n          score(doc, freq.getValue().floatValue()),\n          \"score(doc=\" + doc + \",freq=\" + freq.getValue() +\"), with freq of:\",\n          Collections.singleton(freq));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b799defcfda6d303cbb180917bf1e749089adf42":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["b799defcfda6d303cbb180917bf1e749089adf42"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b799defcfda6d303cbb180917bf1e749089adf42":["ff3285c7b2387faedef0ffb24db20c4cbbd9fd91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b799defcfda6d303cbb180917bf1e749089adf42"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ff3285c7b2387faedef0ffb24db20c4cbbd9fd91":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}