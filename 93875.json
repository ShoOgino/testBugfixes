{"path":"lucene/core/src/java/org/apache/lucene/util/DoubleBarrelLRUCache#put(K,V).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/DoubleBarrelLRUCache#put(K,V).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/DoubleBarrelLRUCache#put(K,V).mjava","sourceNew":"  public void put(K key, V value) {\n    final Map<K,V> primary;\n    final Map<K,V> secondary;\n    if (swapped) {\n      primary = cache2;\n      secondary = cache1;\n    } else {\n      primary = cache1;\n      secondary = cache2;\n    }\n    primary.put(key, value);\n\n    if (countdown.decrementAndGet() == 0) {\n      // Time to swap\n\n      // NOTE: there is saturation risk here, that the\n      // thread that's doing the clear() takes too long to\n      // do so, while other threads continue to add to\n      // primary, but in practice this seems not to be an\n      // issue (see LUCENE-2075 for benchmark & details)\n\n      // First, clear secondary\n      secondary.clear();\n\n      // Second, swap\n      swapped = !swapped;\n\n      // Third, reset countdown\n      countdown.set(maxSize);\n    }\n  }\n\n","sourceOld":"  public void put(K key, V value) {\n    final Map<K,V> primary;\n    final Map<K,V> secondary;\n    if (swapped) {\n      primary = cache2;\n      secondary = cache1;\n    } else {\n      primary = cache1;\n      secondary = cache2;\n    }\n    primary.put(key, value);\n\n    if (countdown.decrementAndGet() == 0) {\n      // Time to swap\n\n      // NOTE: there is saturation risk here, that the\n      // thread that's doing the clear() takes too long to\n      // do so, while other threads continue to add to\n      // primary, but in practice this seems not to be an\n      // issue (see LUCENE-2075 for benchmark & details)\n\n      // First, clear secondary\n      secondary.clear();\n\n      // Second, swap\n      swapped = !swapped;\n\n      // Third, reset countdown\n      countdown.set(maxSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/DoubleBarrelLRUCache#put(K,V).mjava","sourceNew":null,"sourceOld":"  public void put(K key, V value) {\n    final Map<K,V> primary;\n    final Map<K,V> secondary;\n    if (swapped) {\n      primary = cache2;\n      secondary = cache1;\n    } else {\n      primary = cache1;\n      secondary = cache2;\n    }\n    primary.put(key, value);\n\n    if (countdown.decrementAndGet() == 0) {\n      // Time to swap\n\n      // NOTE: there is saturation risk here, that the\n      // thread that's doing the clear() takes too long to\n      // do so, while other threads continue to add to\n      // primary, but in practice this seems not to be an\n      // issue (see LUCENE-2075 for benchmark & details)\n\n      // First, clear secondary\n      secondary.clear();\n\n      // Second, swap\n      swapped = !swapped;\n\n      // Third, reset countdown\n      countdown.set(maxSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/DoubleBarrelLRUCache#put(K,V).mjava","sourceNew":null,"sourceOld":"  public void put(K key, V value) {\n    final Map<K,V> primary;\n    final Map<K,V> secondary;\n    if (swapped) {\n      primary = cache2;\n      secondary = cache1;\n    } else {\n      primary = cache1;\n      secondary = cache2;\n    }\n    primary.put(key, value);\n\n    if (countdown.decrementAndGet() == 0) {\n      // Time to swap\n\n      // NOTE: there is saturation risk here, that the\n      // thread that's doing the clear() takes too long to\n      // do so, while other threads continue to add to\n      // primary, but in practice this seems not to be an\n      // issue (see LUCENE-2075 for benchmark & details)\n\n      // First, clear secondary\n      secondary.clear();\n\n      // Second, swap\n      swapped = !swapped;\n\n      // Third, reset countdown\n      countdown.set(maxSize);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}