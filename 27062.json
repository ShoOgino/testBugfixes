{"path":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","sourceNew":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, UnsupportedEncodingException,\n      IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","sourceOld":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, UnsupportedEncodingException,\n      IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","sourceNew":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, UnsupportedEncodingException,\n      IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","sourceOld":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, UnsupportedEncodingException,\n      IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","pathOld":"solr/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","sourceNew":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, UnsupportedEncodingException,\n      IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","sourceOld":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, UnsupportedEncodingException,\n      IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","sourceNew":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","sourceOld":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, UnsupportedEncodingException,\n      IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","bugFix":["8d2901bdb2faeb41d619d969ce5655adf783746d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","sourceNew":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","sourceOld":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, UnsupportedEncodingException,\n      IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"862bf0de4075dc8febeba1ba433bcf74c78d356e","date":1407456501,"type":4,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestSolrXMLSerializer#assertResults(byte[]).mjava","sourceNew":null,"sourceOld":"  private void assertResults(byte[] bytes)\n      throws ParserConfigurationException, IOException, SAXException, XPathExpressionException {\n    DocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n    BufferedInputStream is = new BufferedInputStream(new ByteArrayInputStream(bytes));\n    Document document;\n    try {\n//      is.mark(0);\n//      System.out.println(\"SolrXML:\" + IOUtils.toString(is, \"UTF-8\"));\n//      is.reset();\n      document = builder.parse(is);\n    } finally {\n      is.close();\n    }\n    \n    assertTrue(exists(\"/solr[@\" + peristentKey + \"='\" + persistentVal + \"']\", document));\n    assertTrue(exists(\"/solr[@\" + sharedLibKey + \"='\" + sharedLibVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + defaultCoreNameKey + \"='\" + defaultCoreNameVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores[@\" + adminPathKey + \"='\" + adminPathVal + \"']\", document));\n    assertTrue(exists(\"/solr/cores/core[@\" + instanceDirKey + \"='\" + instanceDirVal + \"']\", document));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"862bf0de4075dc8febeba1ba433bcf74c78d356e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["c26f00b574427b55127e869b935845554afde1fa","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["862bf0de4075dc8febeba1ba433bcf74c78d356e"]},"commit2Childs":{"862bf0de4075dc8febeba1ba433bcf74c78d356e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["862bf0de4075dc8febeba1ba433bcf74c78d356e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}