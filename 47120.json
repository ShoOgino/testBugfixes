{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"68acf69be1b41192ae2278afc452bb66f6349cba","date":1357657311,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n    meta.writeLong(minValue);\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n    }\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);\n    \n    // nocommit: refactor this crap in PackedInts.java\n    // e.g. Header.load()/save() or something rather than how it works now.\n    CodecUtil.writeHeader(meta, PackedInts.CODEC_NAME, PackedInts.VERSION_CURRENT);\n    meta.writeVInt(bitsPerValue);\n    meta.writeVInt(count);\n    meta.writeVInt(formatAndBits.format.getId());\n    \n    meta.writeLong(data.getFilePointer());\n    \n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7a738ebbf9537051521dcc7e49f69208f91e2fc","date":1358194026,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n    meta.writeLong(minValue);\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n    }\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);\n    \n    // nocommit: refactor this crap in PackedInts.java\n    // e.g. Header.load()/save() or something rather than how it works now.\n    CodecUtil.writeHeader(meta, PackedInts.CODEC_NAME, PackedInts.VERSION_CURRENT);\n    meta.writeVInt(bitsPerValue);\n    meta.writeVInt(count);\n    meta.writeVInt(formatAndBits.format.getId());\n    \n    meta.writeLong(data.getFilePointer());\n    \n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n    }\n    meta.writeLong(minValue);\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n    }\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);\n    \n    // nocommit: refactor this crap in PackedInts.java\n    // e.g. Header.load()/save() or something rather than how it works now.\n    CodecUtil.writeHeader(meta, PackedInts.CODEC_NAME, PackedInts.VERSION_CURRENT);\n    meta.writeVInt(bitsPerValue);\n    meta.writeVInt(count);\n    meta.writeVInt(formatAndBits.format.getId());\n    \n    meta.writeLong(data.getFilePointer());\n    \n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(data, formatAndBits.format, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b29edfb831f9c0aeeca88ad2293b2a9cd529f6","date":1358196500,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleNormsConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b70b267afb5dd221d0389bd4ac1f148661fb827","date":1358203204,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","date":1358522034,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(NUMBER);\n    meta.writeLong(data.getFilePointer());\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    int count = 0;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = new HashSet<Long>();\n    for(Number nv : values) {\n      long v = nv.longValue();\n      minValue = Math.min(minValue, v);\n      maxValue = Math.max(maxValue, v);\n      count++;\n      if (uniqueValues != null) {\n        if (uniqueValues.add(v)) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n\n    long delta = maxValue - minValue;\n    final int bitsPerValue;\n    if (delta < 0) {\n      bitsPerValue = 64;\n      meta.writeByte((byte)0); // delta-compressed\n    } else if (uniqueValues != null && PackedInts.bitsRequired(uniqueValues.size()-1) < PackedInts.bitsRequired(delta)) {\n      // smaller to tableize\n      bitsPerValue = PackedInts.bitsRequired(uniqueValues.size()-1);\n      minValue = 0; // we will write indexes into the table instead of values\n      meta.writeByte((byte)1); // table-compressed\n      Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n      final HashMap<Long,Integer> encode = new HashMap<Long,Integer>();\n      data.writeVInt(decode.length);\n      for (int i = 0; i < decode.length; i++) {\n        data.writeLong(decode[i]);\n        encode.put(decode[i], i);\n      }\n      final Iterable<Number> original = values;\n      values = new Iterable<Number>() {\n        @Override\n        public Iterator<Number> iterator() {\n          final Iterator<Number> inner = original.iterator();\n          return new Iterator<Number>() {\n            @Override\n            public boolean hasNext() {\n              return inner.hasNext();\n            }\n\n            @Override\n            public Number next() {\n              return encode.get(inner.next());\n            }\n\n            @Override\n            public void remove() { throw new UnsupportedOperationException(); }\n          };\n        }\n      };\n    } else {\n      bitsPerValue = PackedInts.bitsRequired(delta);\n      meta.writeByte((byte)0); // delta-compressed\n    }\n\n    data.writeLong(minValue);\n\n    FormatAndBits formatAndBits = PackedInts.fastestFormatAndBits(count, bitsPerValue, PackedInts.COMPACT);   \n    final PackedInts.Writer writer = PackedInts.getWriter(data, count, formatAndBits.bitsPerValue, 0);\n    for(Number nv : values) {\n      writer.add(nv.longValue() - minValue);\n    }\n    writer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68acf69be1b41192ae2278afc452bb66f6349cba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5b70b267afb5dd221d0389bd4ac1f148661fb827":["96b29edfb831f9c0aeeca88ad2293b2a9cd529f6"],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":["5b70b267afb5dd221d0389bd4ac1f148661fb827"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"96b29edfb831f9c0aeeca88ad2293b2a9cd529f6":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["68acf69be1b41192ae2278afc452bb66f6349cba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"68acf69be1b41192ae2278afc452bb66f6349cba":["d7a738ebbf9537051521dcc7e49f69208f91e2fc"],"5b70b267afb5dd221d0389bd4ac1f148661fb827":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f"],"d7bf953a8ab9ae7d92835bdf9cbe5a268448868f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68acf69be1b41192ae2278afc452bb66f6349cba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96b29edfb831f9c0aeeca88ad2293b2a9cd529f6":["5b70b267afb5dd221d0389bd4ac1f148661fb827"],"d7a738ebbf9537051521dcc7e49f69208f91e2fc":["96b29edfb831f9c0aeeca88ad2293b2a9cd529f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d7bf953a8ab9ae7d92835bdf9cbe5a268448868f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}