{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","commits":[{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseDocIdSetIterator]).mjava","sourceNew":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      approximation = new ConjunctionDISI(iterators);\n      assert twoPhaseIterators.size() > 0;\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[0]);\n    }\n\n","sourceOld":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseDocIdSetIterator> twoPhaseIterators) {\n      approximation = new ConjunctionDISI(iterators);\n      assert twoPhaseIterators.size() > 0;\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseDocIdSetIterator[0]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6b1be5d2b36d6a30913778ef61374103d55e33","date":1427303640,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      super(new ConjunctionDISI(iterators));\n      assert twoPhaseIterators.size() > 0;\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n    }\n\n","sourceOld":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      approximation = new ConjunctionDISI(iterators);\n      assert twoPhaseIterators.size() > 0;\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[0]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"/dev/null","sourceNew":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      super(new ConjunctionDISI(iterators));\n      assert twoPhaseIterators.size() > 0;\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      super(new ConjunctionDISI(iterators));\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","sourceOld":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      super(new ConjunctionDISI(iterators));\n      assert twoPhaseIterators.size() > 0;\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","date":1465831664,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.ConjunctionTwoPhaseIterator#ConjunctionTwoPhaseIterator(DocIdSetIterator,List[#-extends-TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"    private ConjunctionTwoPhaseIterator(DocIdSetIterator approximation,\n        List<? extends TwoPhaseIterator> twoPhaseIterators) {\n      super(approximation);\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","sourceOld":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      super(new ConjunctionDISI(iterators));\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.ConjunctionTwoPhaseIterator#ConjunctionTwoPhaseIterator(DocIdSetIterator,List[#-extends-TwoPhaseIterator]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":"    private ConjunctionTwoPhaseIterator(DocIdSetIterator approximation,\n        List<? extends TwoPhaseIterator> twoPhaseIterators) {\n      super(approximation);\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","sourceOld":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      super(new ConjunctionDISI(iterators));\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI.TwoPhaseConjunctionDISI#TwoPhaseConjunctionDISI(List[#-extends-DocIdSetIterator],List[TwoPhaseIterator]).mjava","sourceNew":null,"sourceOld":"    private TwoPhaseConjunctionDISI(List<? extends DocIdSetIterator> iterators, List<TwoPhaseIterator> twoPhaseIterators) {\n      super(new ConjunctionDISI(iterators));\n      assert twoPhaseIterators.size() > 0;\n\n      CollectionUtil.timSort(twoPhaseIterators, new Comparator<TwoPhaseIterator>() {\n        @Override\n        public int compare(TwoPhaseIterator o1, TwoPhaseIterator o2) {\n          return Float.compare(o1.matchCost(), o2.matchCost());\n        }\n      });\n\n      this.twoPhaseIterators = twoPhaseIterators.toArray(new TwoPhaseIterator[twoPhaseIterators.size()]);\n\n      // Compute the matchCost as the total matchCost of the sub iterators.\n      // TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.\n      float totalMatchCost = 0;\n      for (TwoPhaseIterator tpi : twoPhaseIterators) {\n        totalMatchCost += tpi.matchCost();\n      }\n      matchCost = totalMatchCost;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["a3d6eb0072094d94624002318ba2d4c840946833"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a6b1be5d2b36d6a30913778ef61374103d55e33"],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d6eb0072094d94624002318ba2d4c840946833":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["d277693481ea6007c1d83cd503d0859bb3b64d20","a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d277693481ea6007c1d83cd503d0859bb3b64d20","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["d277693481ea6007c1d83cd503d0859bb3b64d20","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a8d33e6fc46a3a39568a7ff52b52c3b6bd4e9b83":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3d6eb0072094d94624002318ba2d4c840946833"],"a3d6eb0072094d94624002318ba2d4c840946833":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}