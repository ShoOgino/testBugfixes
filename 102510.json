{"path":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","commits":[{"id":"e4946500259641951dbd7f8a61956bf14bef3f60","date":1283284212,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@link Scorer} subclasses should implement this method if the subclass\n   * itself contains multiple scorers to support gathering details for\n   * sub-scorers via {@link ScorerVisitor}\n   * <p>\n   * Note: this method will throw {@link UnsupportedOperationException} if no\n   * associated {@link Weight} instance is provided to\n   * {@link #Scorer(Similarity, Weight)}\n   * </p>\n   * \n   * @lucene.experimental\n   */\n  protected void visitSubScorers(Query parent, Occur relationship,\n      ScorerVisitor<Query, Query, Scorer> visitor) {\n    if (weight == null)\n      throw new UnsupportedOperationException();\n\n    final Query q = weight.getQuery();\n    switch (relationship) {\n    case MUST:\n      visitor.visitRequired(parent, q, this);\n      break;\n    case MUST_NOT:\n      visitor.visitProhibited(parent, q, this);\n      break;\n    case SHOULD:\n      visitor.visitOptional(parent, q, this);\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@link Scorer} subclasses should implement this method if the subclass\n   * itself contains multiple scorers to support gathering details for\n   * sub-scorers via {@link ScorerVisitor}\n   * <p>\n   * Note: this method will throw {@link UnsupportedOperationException} if no\n   * associated {@link Weight} instance is provided to\n   * {@link #Scorer(Similarity, Weight)}\n   * </p>\n   * \n   * @lucene.experimental\n   */\n  protected void visitSubScorers(Query parent, Occur relationship,\n      ScorerVisitor<Query, Query, Scorer> visitor) {\n    if (weight == null)\n      throw new UnsupportedOperationException();\n\n    final Query q = weight.getQuery();\n    switch (relationship) {\n    case MUST:\n      visitor.visitRequired(parent, q, this);\n      break;\n    case MUST_NOT:\n      visitor.visitProhibited(parent, q, this);\n      break;\n    case SHOULD:\n      visitor.visitOptional(parent, q, this);\n      break;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","sourceNew":"  /**\n   * {@link Scorer} subclasses should implement this method if the subclass\n   * itself contains multiple scorers to support gathering details for\n   * sub-scorers via {@link ScorerVisitor}\n   * <p>\n   * Note: this method will throw {@link UnsupportedOperationException} if no\n   * associated {@link Weight} instance is provided to\n   * {@link #Scorer(Weight)}\n   * </p>\n   * \n   * @lucene.experimental\n   */\n  protected void visitSubScorers(Query parent, Occur relationship,\n      ScorerVisitor<Query, Query, Scorer> visitor) {\n    if (weight == null)\n      throw new UnsupportedOperationException();\n\n    final Query q = weight.getQuery();\n    switch (relationship) {\n    case MUST:\n      visitor.visitRequired(parent, q, this);\n      break;\n    case MUST_NOT:\n      visitor.visitProhibited(parent, q, this);\n      break;\n    case SHOULD:\n      visitor.visitOptional(parent, q, this);\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link Scorer} subclasses should implement this method if the subclass\n   * itself contains multiple scorers to support gathering details for\n   * sub-scorers via {@link ScorerVisitor}\n   * <p>\n   * Note: this method will throw {@link UnsupportedOperationException} if no\n   * associated {@link Weight} instance is provided to\n   * {@link #Scorer(Similarity, Weight)}\n   * </p>\n   * \n   * @lucene.experimental\n   */\n  protected void visitSubScorers(Query parent, Occur relationship,\n      ScorerVisitor<Query, Query, Scorer> visitor) {\n    if (weight == null)\n      throw new UnsupportedOperationException();\n\n    final Query q = weight.getQuery();\n    switch (relationship) {\n    case MUST:\n      visitor.visitRequired(parent, q, this);\n      break;\n    case MUST_NOT:\n      visitor.visitProhibited(parent, q, this);\n      break;\n    case SHOULD:\n      visitor.visitOptional(parent, q, this);\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","sourceNew":"  /**\n   * {@link Scorer} subclasses should implement this method if the subclass\n   * itself contains multiple scorers to support gathering details for\n   * sub-scorers via {@link ScorerVisitor}\n   * <p>\n   * Note: this method will throw {@link UnsupportedOperationException} if no\n   * associated {@link Weight} instance is provided to\n   * {@link #Scorer(Weight)}\n   * </p>\n   * \n   * @lucene.experimental\n   */\n  protected void visitSubScorers(Query parent, Occur relationship,\n      ScorerVisitor<Query, Query, Scorer> visitor) {\n    if (weight == null)\n      throw new UnsupportedOperationException();\n\n    final Query q = weight.getQuery();\n    switch (relationship) {\n    case MUST:\n      visitor.visitRequired(parent, q, this);\n      break;\n    case MUST_NOT:\n      visitor.visitProhibited(parent, q, this);\n      break;\n    case SHOULD:\n      visitor.visitOptional(parent, q, this);\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link Scorer} subclasses should implement this method if the subclass\n   * itself contains multiple scorers to support gathering details for\n   * sub-scorers via {@link ScorerVisitor}\n   * <p>\n   * Note: this method will throw {@link UnsupportedOperationException} if no\n   * associated {@link Weight} instance is provided to\n   * {@link #Scorer(Similarity, Weight)}\n   * </p>\n   * \n   * @lucene.experimental\n   */\n  protected void visitSubScorers(Query parent, Occur relationship,\n      ScorerVisitor<Query, Query, Scorer> visitor) {\n    if (weight == null)\n      throw new UnsupportedOperationException();\n\n    final Query q = weight.getQuery();\n    switch (relationship) {\n    case MUST:\n      visitor.visitRequired(parent, q, this);\n      break;\n    case MUST_NOT:\n      visitor.visitProhibited(parent, q, this);\n      break;\n    case SHOULD:\n      visitor.visitOptional(parent, q, this);\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","sourceNew":"  /**\n   * {@link Scorer} subclasses should implement this method if the subclass\n   * itself contains multiple scorers to support gathering details for\n   * sub-scorers via {@link ScorerVisitor}\n   * <p>\n   * Note: this method will throw {@link UnsupportedOperationException} if no\n   * associated {@link Weight} instance is provided to\n   * {@link #Scorer(Weight)}\n   * </p>\n   * \n   * @lucene.experimental\n   */\n  protected void visitSubScorers(Query parent, Occur relationship,\n      ScorerVisitor<Query, Query, Scorer> visitor) {\n    if (weight == null)\n      throw new UnsupportedOperationException();\n\n    final Query q = weight.getQuery();\n    switch (relationship) {\n    case MUST:\n      visitor.visitRequired(parent, q, this);\n      break;\n    case MUST_NOT:\n      visitor.visitProhibited(parent, q, this);\n      break;\n    case SHOULD:\n      visitor.visitOptional(parent, q, this);\n      break;\n    }\n  }\n\n","sourceOld":"  /**\n   * {@link Scorer} subclasses should implement this method if the subclass\n   * itself contains multiple scorers to support gathering details for\n   * sub-scorers via {@link ScorerVisitor}\n   * <p>\n   * Note: this method will throw {@link UnsupportedOperationException} if no\n   * associated {@link Weight} instance is provided to\n   * {@link #Scorer(Similarity, Weight)}\n   * </p>\n   * \n   * @lucene.experimental\n   */\n  protected void visitSubScorers(Query parent, Occur relationship,\n      ScorerVisitor<Query, Query, Scorer> visitor) {\n    if (weight == null)\n      throw new UnsupportedOperationException();\n\n    final Query q = weight.getQuery();\n    switch (relationship) {\n    case MUST:\n      visitor.visitRequired(parent, q, this);\n      break;\n    case MUST_NOT:\n      visitor.visitProhibited(parent, q, this);\n      break;\n    case SHOULD:\n      visitor.visitOptional(parent, q, this);\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c5555e75149b469a7756e82bd740777cfb584a","date":1313615559,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/Scorer#visitSubScorers(Query,Occur,ScorerVisitor[Query,Query,Scorer]).mjava","sourceNew":null,"sourceOld":"  /**\n   * {@link Scorer} subclasses should implement this method if the subclass\n   * itself contains multiple scorers to support gathering details for\n   * sub-scorers via {@link ScorerVisitor}\n   * <p>\n   * Note: this method will throw {@link UnsupportedOperationException} if no\n   * associated {@link Weight} instance is provided to\n   * {@link #Scorer(Weight)}\n   * </p>\n   * \n   * @lucene.experimental\n   */\n  protected void visitSubScorers(Query parent, Occur relationship,\n      ScorerVisitor<Query, Query, Scorer> visitor) {\n    if (weight == null)\n      throw new UnsupportedOperationException();\n\n    final Query q = weight.getQuery();\n    switch (relationship) {\n    case MUST:\n      visitor.visitRequired(parent, q, this);\n      break;\n    case MUST_NOT:\n      visitor.visitProhibited(parent, q, this);\n      break;\n    case SHOULD:\n      visitor.visitOptional(parent, q, this);\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["e4946500259641951dbd7f8a61956bf14bef3f60","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4946500259641951dbd7f8a61956bf14bef3f60"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["e4946500259641951dbd7f8a61956bf14bef3f60"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e5e679b9c5f68f1f331de920ae8366af75b44060"],"89c5555e75149b469a7756e82bd740777cfb584a":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c5555e75149b469a7756e82bd740777cfb584a"],"e4946500259641951dbd7f8a61956bf14bef3f60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e4946500259641951dbd7f8a61956bf14bef3f60"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","89c5555e75149b469a7756e82bd740777cfb584a"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"89c5555e75149b469a7756e82bd740777cfb584a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e4946500259641951dbd7f8a61956bf14bef3f60":["29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}