{"path":"lucene/core/src/java/org/apache/lucene/util/IOUtils#spinsLinux(Path).mjava","commits":[{"id":"f1db7bd2068060be0b68fcca95c8270c7cb60f6c","date":1419003415,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#spinsLinux(Path).mjava","pathOld":"/dev/null","sourceNew":"  // note: requires a real or fake linux filesystem!\n  static boolean spinsLinux(Path path) throws IOException {\n    FileStore store = getFileStore(path);\n    \n    // if fs type is tmpfs, it doesn't spin.\n    // this won't have a corresponding block device\n    if (\"tmpfs\".equals(store.type())) {\n      return false;\n    }\n    \n    // get block device name\n    String devName = getBlockDevice(store);\n    // not a device (e.g. NFS server)\n    if (!devName.startsWith(\"/\")) {\n      return true;\n    }\n    \n    // resolve any symlinks to real block device (e.g. LVM)\n    // /dev/sda0 -> sda0\n    // /devices/XXX -> sda0\n    devName = path.getRoot().resolve(devName).toRealPath().getFileName().toString();\n  \n    // now read:\n    Path sysinfo = path.getRoot().resolve(\"sys/block\");\n    Path devinfo = sysinfo.resolve(devName);\n    \n    // tear away partition numbers until we find it.\n    while (!Files.exists(devinfo)) {\n      if (!devName.isEmpty() && Character.isDigit(devName.charAt(devName.length()-1))) {\n        devName = devName.substring(0, devName.length()-1);\n      } else {\n        break; // give up\n      }\n      devinfo = sysinfo.resolve(devName);\n    }\n    \n    // read first byte from rotational, its a 1 if it spins.\n    Path info = devinfo.resolve(\"queue/rotational\");\n    try (InputStream stream = Files.newInputStream(info)) {\n      return stream.read() == '1'; \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0e2f3ed17863d309622d34015331954e61c4f8bf","685c242a4f1bc78f1fa61c131bd557355edad6c7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#spinsLinux(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#spinsLinux(Path).mjava","sourceNew":"  // note: requires a real or fake linux filesystem!\n  static boolean spinsLinux(Path path) throws IOException {\n    FileStore store = getFileStore(path);\n    \n    // if fs type is tmpfs, it doesn't spin.\n    // this won't have a corresponding block device\n    if (\"tmpfs\".equals(store.type())) {\n      return false;\n    }\n    \n    // get block device name\n    String devName = getBlockDevice(store);\n    // not a device (e.g. NFS server)\n    if (!devName.startsWith(\"/\")) {\n      return true;\n    }\n    \n    // resolve any symlinks to real block device (e.g. LVM)\n    // /dev/sda0 -> sda0\n    // /devices/XXX -> sda0\n    devName = path.getRoot().resolve(devName).toRealPath().getFileName().toString();\n  \n    // now read:\n    Path sysinfo = path.getRoot().resolve(\"sys/block\");\n    Path devinfo = sysinfo.resolve(devName);\n    \n    // tear away partition numbers until we find it.\n    while (!Files.exists(devinfo)) {\n      if (!devName.isEmpty() && Character.isDigit(devName.charAt(devName.length()-1))) {\n        devName = devName.substring(0, devName.length()-1);\n      } else {\n        break; // give up\n      }\n      devinfo = sysinfo.resolve(devName);\n    }\n    \n    // read first byte from rotational, it's a 1 if it spins.\n    Path info = devinfo.resolve(\"queue/rotational\");\n    try (InputStream stream = Files.newInputStream(info)) {\n      return stream.read() == '1'; \n    }\n  }\n\n","sourceOld":"  // note: requires a real or fake linux filesystem!\n  static boolean spinsLinux(Path path) throws IOException {\n    FileStore store = getFileStore(path);\n    \n    // if fs type is tmpfs, it doesn't spin.\n    // this won't have a corresponding block device\n    if (\"tmpfs\".equals(store.type())) {\n      return false;\n    }\n    \n    // get block device name\n    String devName = getBlockDevice(store);\n    // not a device (e.g. NFS server)\n    if (!devName.startsWith(\"/\")) {\n      return true;\n    }\n    \n    // resolve any symlinks to real block device (e.g. LVM)\n    // /dev/sda0 -> sda0\n    // /devices/XXX -> sda0\n    devName = path.getRoot().resolve(devName).toRealPath().getFileName().toString();\n  \n    // now read:\n    Path sysinfo = path.getRoot().resolve(\"sys/block\");\n    Path devinfo = sysinfo.resolve(devName);\n    \n    // tear away partition numbers until we find it.\n    while (!Files.exists(devinfo)) {\n      if (!devName.isEmpty() && Character.isDigit(devName.charAt(devName.length()-1))) {\n        devName = devName.substring(0, devName.length()-1);\n      } else {\n        break; // give up\n      }\n      devinfo = sysinfo.resolve(devName);\n    }\n    \n    // read first byte from rotational, its a 1 if it spins.\n    Path info = devinfo.resolve(\"queue/rotational\");\n    try (InputStream stream = Files.newInputStream(info)) {\n      return stream.read() == '1'; \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"685c242a4f1bc78f1fa61c131bd557355edad6c7","date":1429208182,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#spinsLinux(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#spinsLinux(Path).mjava","sourceNew":"  // note: requires a real or fake linux filesystem!\n  static boolean spinsLinux(Path path) throws IOException {\n    FileStore store = getFileStore(path);\n    \n    // if fs type is tmpfs, it doesn't spin.\n    // this won't have a corresponding block device\n    if (\"tmpfs\".equals(store.type())) {\n      return false;\n    }\n    \n    // get block device name\n    String devName = store.name();\n\n    // not a device (e.g. NFS server)\n    if (!devName.startsWith(\"/\")) {\n      return true;\n    }\n    \n    // resolve any symlinks to real block device (e.g. LVM)\n    // /dev/sda0 -> sda0\n    // /devices/XXX -> sda0\n    devName = path.getRoot().resolve(devName).toRealPath().getFileName().toString();\n  \n    // now read:\n    Path sysinfo = path.getRoot().resolve(\"sys/block\");\n    Path devinfo = sysinfo.resolve(devName);\n    \n    // tear away partition numbers until we find it.\n    while (!Files.exists(devinfo)) {\n      if (!devName.isEmpty() && Character.isDigit(devName.charAt(devName.length()-1))) {\n        devName = devName.substring(0, devName.length()-1);\n      } else {\n        break; // give up\n      }\n      devinfo = sysinfo.resolve(devName);\n    }\n    \n    // read first byte from rotational, it's a 1 if it spins.\n    Path info = devinfo.resolve(\"queue/rotational\");\n    try (InputStream stream = Files.newInputStream(info)) {\n      return stream.read() == '1'; \n    }\n  }\n\n","sourceOld":"  // note: requires a real or fake linux filesystem!\n  static boolean spinsLinux(Path path) throws IOException {\n    FileStore store = getFileStore(path);\n    \n    // if fs type is tmpfs, it doesn't spin.\n    // this won't have a corresponding block device\n    if (\"tmpfs\".equals(store.type())) {\n      return false;\n    }\n    \n    // get block device name\n    String devName = getBlockDevice(store);\n    // not a device (e.g. NFS server)\n    if (!devName.startsWith(\"/\")) {\n      return true;\n    }\n    \n    // resolve any symlinks to real block device (e.g. LVM)\n    // /dev/sda0 -> sda0\n    // /devices/XXX -> sda0\n    devName = path.getRoot().resolve(devName).toRealPath().getFileName().toString();\n  \n    // now read:\n    Path sysinfo = path.getRoot().resolve(\"sys/block\");\n    Path devinfo = sysinfo.resolve(devName);\n    \n    // tear away partition numbers until we find it.\n    while (!Files.exists(devinfo)) {\n      if (!devName.isEmpty() && Character.isDigit(devName.charAt(devName.length()-1))) {\n        devName = devName.substring(0, devName.length()-1);\n      } else {\n        break; // give up\n      }\n      devinfo = sysinfo.resolve(devName);\n    }\n    \n    // read first byte from rotational, it's a 1 if it spins.\n    Path info = devinfo.resolve(\"queue/rotational\");\n    try (InputStream stream = Files.newInputStream(info)) {\n      return stream.read() == '1'; \n    }\n  }\n\n","bugFix":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e2f3ed17863d309622d34015331954e61c4f8bf","date":1435376100,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/IOUtils#spinsLinux(Path).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/IOUtils#spinsLinux(Path).mjava","sourceNew":"  // note: requires a real or fake linux filesystem!\n  static boolean spinsLinux(Path path) throws IOException {\n    FileStore store = getFileStore(path);\n    \n    // if fs type is tmpfs, it doesn't spin.\n    // this won't have a corresponding block device\n    if (\"tmpfs\".equals(store.type())) {\n      return false;\n    }\n    \n    // get block device name\n    String devName = store.name();\n\n    // not a device (e.g. NFS server)\n    if (!devName.startsWith(\"/\")) {\n      return true;\n    }\n    \n    // resolve any symlinks to real block device (e.g. LVM)\n    // /dev/sda0 -> sda0\n    // /devices/XXX -> sda0\n    devName = path.getRoot().resolve(devName).toRealPath().getFileName().toString();\n  \n    // now try to find the longest matching device folder in /sys/block\n    // (that starts with our dev name):\n    Path sysinfo = path.getRoot().resolve(\"sys\").resolve(\"block\");\n    Path devsysinfo = null;\n    int matchlen = 0;\n    try (DirectoryStream<Path> stream = Files.newDirectoryStream(sysinfo)) {\n      for (Path device : stream) {\n        String name = device.getFileName().toString();\n        if (name.length() > matchlen && devName.startsWith(name)) {\n          devsysinfo = device;\n          matchlen = name.length();\n        }\n      }\n    }\n    \n    if (devsysinfo == null) {\n      return true; // give up\n    }\n    \n    // read first byte from rotational, it's a 1 if it spins.\n    Path rotational = devsysinfo.resolve(\"queue\").resolve(\"rotational\");\n    try (InputStream stream = Files.newInputStream(rotational)) {\n      return stream.read() == '1'; \n    }\n  }\n\n","sourceOld":"  // note: requires a real or fake linux filesystem!\n  static boolean spinsLinux(Path path) throws IOException {\n    FileStore store = getFileStore(path);\n    \n    // if fs type is tmpfs, it doesn't spin.\n    // this won't have a corresponding block device\n    if (\"tmpfs\".equals(store.type())) {\n      return false;\n    }\n    \n    // get block device name\n    String devName = store.name();\n\n    // not a device (e.g. NFS server)\n    if (!devName.startsWith(\"/\")) {\n      return true;\n    }\n    \n    // resolve any symlinks to real block device (e.g. LVM)\n    // /dev/sda0 -> sda0\n    // /devices/XXX -> sda0\n    devName = path.getRoot().resolve(devName).toRealPath().getFileName().toString();\n  \n    // now read:\n    Path sysinfo = path.getRoot().resolve(\"sys/block\");\n    Path devinfo = sysinfo.resolve(devName);\n    \n    // tear away partition numbers until we find it.\n    while (!Files.exists(devinfo)) {\n      if (!devName.isEmpty() && Character.isDigit(devName.charAt(devName.length()-1))) {\n        devName = devName.substring(0, devName.length()-1);\n      } else {\n        break; // give up\n      }\n      devinfo = sysinfo.resolve(devName);\n    }\n    \n    // read first byte from rotational, it's a 1 if it spins.\n    Path info = devinfo.resolve(\"queue/rotational\");\n    try (InputStream stream = Files.newInputStream(info)) {\n      return stream.read() == '1'; \n    }\n  }\n\n","bugFix":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e2f3ed17863d309622d34015331954e61c4f8bf":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e2f3ed17863d309622d34015331954e61c4f8bf"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["685c242a4f1bc78f1fa61c131bd557355edad6c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"0e2f3ed17863d309622d34015331954e61c4f8bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"685c242a4f1bc78f1fa61c131bd557355edad6c7":["0e2f3ed17863d309622d34015331954e61c4f8bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}