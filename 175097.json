{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","commits":[{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,CachingTokenFilter,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return\n   * @throws IOException\n   */\n  public Map getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName.intern();\n    }\n\n    Map terms = new PositionCheckingMap();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return\n   * @throws IOException\n   */\n  public Map getWeightedSpanTerms(Query query, CachingTokenFilter cachingTokenFilter,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName.intern();\n    }\n\n    Map terms = new PositionCheckingMap();\n    this.cachedTokenFilter = cachingTokenFilter;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf93f7a278746d4746fa3ebb3d53267b22fd040f","date":1249495506,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return\n   * @throws IOException\n   */\n  public Map getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = StringHelper.intern(fieldName);\n    }\n\n    Map terms = new PositionCheckingMap();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return\n   * @throws IOException\n   */\n  public Map getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = fieldName.intern();\n    }\n\n    Map terms = new PositionCheckingMap();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"edae6ef134f154e25cf2b430b07b84f9c831dd12","date":1250644583,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException\n   */\n  public Map getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = StringHelper.intern(fieldName);\n    } else {\n      this.fieldName = null;\n    }\n\n    Map terms = new PositionCheckingMap();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return\n   * @throws IOException\n   */\n  public Map getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = StringHelper.intern(fieldName);\n    }\n\n    Map terms = new PositionCheckingMap();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":["203cbba17e28e65424501a76bf0ff5471c8eef06"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = StringHelper.intern(fieldName);\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException\n   */\n  public Map getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = StringHelper.intern(fieldName);\n    } else {\n      this.fieldName = null;\n    }\n\n    Map terms = new PositionCheckingMap();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/WeightedSpanTermExtractor#getWeightedSpanTerms(Query,TokenStream,String).mjava","sourceNew":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = StringHelper.intern(fieldName);\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","sourceOld":"  /**\n   * Creates a Map of <code>WeightedSpanTerms</code> from the given <code>Query</code> and <code>TokenStream</code>.\n   * \n   * <p>\n   * \n   * @param query\n   *          that caused hit\n   * @param tokenStream\n   *          of text to be highlighted\n   * @param fieldName\n   *          restricts Term's used based on field name\n   * @return Map containing WeightedSpanTerms\n   * @throws IOException\n   */\n  public Map<String,WeightedSpanTerm> getWeightedSpanTerms(Query query, TokenStream tokenStream,\n      String fieldName) throws IOException {\n    if (fieldName != null) {\n      this.fieldName = StringHelper.intern(fieldName);\n    } else {\n      this.fieldName = null;\n    }\n\n    Map<String,WeightedSpanTerm> terms = new PositionCheckingMap<String>();\n    this.tokenStream = tokenStream;\n    try {\n      extract(query, terms);\n    } finally {\n      closeReaders();\n    }\n\n    return terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["edae6ef134f154e25cf2b430b07b84f9c831dd12"],"edae6ef134f154e25cf2b430b07b84f9c831dd12":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"943c3f9cf96b8df37f4273d66a66182e2a669467":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"]},"commit2Childs":{"cf93f7a278746d4746fa3ebb3d53267b22fd040f":["edae6ef134f154e25cf2b430b07b84f9c831dd12"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"edae6ef134f154e25cf2b430b07b84f9c831dd12":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["cf93f7a278746d4746fa3ebb3d53267b22fd040f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}