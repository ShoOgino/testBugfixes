{"path":"solr/core/src/java/org/apache/solr/util/hll/SerializationUtil#packCutoffByte(int,boolean).mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/SerializationUtil#packCutoffByte(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Generates a byte that encodes the log-base-2 of the explicit cutoff\n     * or sentinel values for 'explicit-disabled' or 'auto', as well as the\n     * boolean indicating whether to use {@link HLLType#SPARSE}\n     * in the promotion hierarchy.\n     *\n     * The top bit is always padding, the second highest bit indicates the\n     * 'sparse-enabled' boolean, and the lowest six bits encode the explicit\n     * cutoff value.\n     *\n     * @param  explicitCutoff the explicit cutoff value to encode.\n     *         <ul>\n     *           <li>\n     *             If 'explicit-disabled' is chosen, this value should be <code>0</code>.\n     *           </li>\n     *           <li>\n     *             If 'auto' is chosen, this value should be <code>63</code>.\n     *           </li>\n     *           <li>\n     *             If a cutoff of 2<sup>n</sup> is desired, for <code>0 <= n < 31</code>,\n     *             this value should be <code>n + 1</code>.\n     *           </li>\n     *         </ul>\n     * @param  sparseEnabled whether {@link HLLType#SPARSE}\n     *         should be used in the promotion hierarchy to improve HLL\n     *         storage.\n     *\n     * @return the packed cutoff byte\n     */\n    public static byte packCutoffByte(final int explicitCutoff, final boolean sparseEnabled) {\n        final int sparseBit = (sparseEnabled ? (1 << EXPLICIT_CUTOFF_BITS) : 0);\n        return (byte)(sparseBit | (EXPLICIT_CUTOFF_MASK & explicitCutoff));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/SerializationUtil#packCutoffByte(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Generates a byte that encodes the log-base-2 of the explicit cutoff\n     * or sentinel values for 'explicit-disabled' or 'auto', as well as the\n     * boolean indicating whether to use {@link HLLType#SPARSE}\n     * in the promotion hierarchy.\n     *\n     * The top bit is always padding, the second highest bit indicates the\n     * 'sparse-enabled' boolean, and the lowest six bits encode the explicit\n     * cutoff value.\n     *\n     * @param  explicitCutoff the explicit cutoff value to encode.\n     *         <ul>\n     *           <li>\n     *             If 'explicit-disabled' is chosen, this value should be <code>0</code>.\n     *           </li>\n     *           <li>\n     *             If 'auto' is chosen, this value should be <code>63</code>.\n     *           </li>\n     *           <li>\n     *             If a cutoff of 2<sup>n</sup> is desired, for <code>0 <= n < 31</code>,\n     *             this value should be <code>n + 1</code>.\n     *           </li>\n     *         </ul>\n     * @param  sparseEnabled whether {@link HLLType#SPARSE}\n     *         should be used in the promotion hierarchy to improve HLL\n     *         storage.\n     *\n     * @return the packed cutoff byte\n     */\n    public static byte packCutoffByte(final int explicitCutoff, final boolean sparseEnabled) {\n        final int sparseBit = (sparseEnabled ? (1 << EXPLICIT_CUTOFF_BITS) : 0);\n        return (byte)(sparseBit | (EXPLICIT_CUTOFF_MASK & explicitCutoff));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}