{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","commits":[{"id":"f5c96ee46366b5feece8b0b328368c6237fc087a","date":1400184255,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","pathOld":"/dev/null","sourceNew":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transitions[transitionIndex].getMin());\n\n    load(null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","pathOld":"/dev/null","sourceNew":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transitions[transitionIndex].getMin());\n\n    load(null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","sourceNew":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    load(null);\n  }\n\n","sourceOld":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transitions[transitionIndex].getMin());\n\n    load(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","sourceNew":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    load(null);\n  }\n\n","sourceOld":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transitions[transitionIndex].getMin());\n\n    load(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","sourceNew":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFloorBlock transition.min=\" + transition.min);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      //if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      //if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    //if (DEBUG) System.out.println(\"      done loadNextFloorBlock\");\n\n    load(null);\n  }\n\n","sourceOld":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    load(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","sourceNew":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFloorBlock transition.min=\" + transition.min);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      //if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      //if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    //if (DEBUG) System.out.println(\"      done loadNextFloorBlock\");\n\n    load(null);\n  }\n\n","sourceOld":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFoorBlock trans=\" + transitions[transitionIndex]);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      // if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" vs target=\" + (char) transitions[transitionIndex].getMin() + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      // if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    load(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d36b496b747a10405f5d42dfea257bbe0cf3399","date":1428484752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","sourceNew":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0: \"nextFloorLabel=\" + nextFloorLabel;\n    //if (DEBUG) System.out.println(\"    loadNextFloorBlock transition.min=\" + transition.min);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      //if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      //if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    //if (DEBUG) System.out.println(\"      done loadNextFloorBlock\");\n\n    load(null);\n  }\n\n","sourceOld":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0;\n    //if (DEBUG) System.out.println(\"    loadNextFloorBlock transition.min=\" + transition.min);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      //if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      //if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    //if (DEBUG) System.out.println(\"      done loadNextFloorBlock\");\n\n    load(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59db5e5f780185e0155d296a323e440a6ecfd3b6","date":1435089559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#loadNextFloorBlock().mjava","sourceNew":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0: \"nextFloorLabel=\" + nextFloorLabel;\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    load(null);\n  }\n\n","sourceOld":"  void loadNextFloorBlock() throws IOException {\n    assert numFollowFloorBlocks > 0: \"nextFloorLabel=\" + nextFloorLabel;\n    //if (DEBUG) System.out.println(\"    loadNextFloorBlock transition.min=\" + transition.min);\n\n    do {\n      fp = fpOrig + (floorDataReader.readVLong() >>> 1);\n      numFollowFloorBlocks--;\n      //if (DEBUG) System.out.println(\"    skip floor block2!  nextFloorLabel=\" + (char) nextFloorLabel + \" newFP=\" + fp + \" numFollowFloorBlocks=\" + numFollowFloorBlocks);\n      if (numFollowFloorBlocks != 0) {\n        nextFloorLabel = floorDataReader.readByte() & 0xff;\n      } else {\n        nextFloorLabel = 256;\n      }\n      //if (DEBUG) System.out.println(\"    nextFloorLabel=\" + (char) nextFloorLabel);\n    } while (numFollowFloorBlocks != 0 && nextFloorLabel <= transition.min);\n\n    //if (DEBUG) System.out.println(\"      done loadNextFloorBlock\");\n\n    load(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5c96ee46366b5feece8b0b328368c6237fc087a"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["5d36b496b747a10405f5d42dfea257bbe0cf3399"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["5c84485629d80d203608e8975a1139de9933cc38","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["5c84485629d80d203608e8975a1139de9933cc38"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["4d637064d608752565d4f9f41b2497dfdfdde50e","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"5d36b496b747a10405f5d42dfea257bbe0cf3399":["3e8715d826e588419327562287d5d6a8040d63d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59db5e5f780185e0155d296a323e440a6ecfd3b6"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","f5c96ee46366b5feece8b0b328368c6237fc087a"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"f5c96ee46366b5feece8b0b328368c6237fc087a":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"5c84485629d80d203608e8975a1139de9933cc38":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["d2638f781be724518ff6c2263d14a48cf6e68017","5d36b496b747a10405f5d42dfea257bbe0cf3399"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["5c84485629d80d203608e8975a1139de9933cc38"],"5d36b496b747a10405f5d42dfea257bbe0cf3399":["59db5e5f780185e0155d296a323e440a6ecfd3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}