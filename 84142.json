{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","sourceNew":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"558d0b2765fb22e5c20304b1e85c6cc7b9bba359","date":1342503992,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","sourceNew":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","sourceNew":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","sourceNew":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c011b4031a2ac8357f86f6998552baf0c74ea214","date":1372811779,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","sourceNew":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    assertEquals(\"Wrong number of flags for lucen\", 1, dictionary.lookupWord(new char[]{'l', 'u', 'c', 'e', 'n'}, 0, 5).get(0).getFlags().length);\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","sourceNew":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    assertEquals(\"Wrong number of flags for lucen\", 1, dictionary.lookupWord(new char[]{'l', 'u', 'c', 'e', 'n'}, 0, 5).get(0).getFlags().length);\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    \n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    assertEquals(\"Wrong number of flags for lucen\", 1, dictionary.lookupWord(new char[]{'l', 'u', 'c', 'e', 'n'}, 0, 5).get(0).getFlags().length);\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/TestDictionary#testSimpleDictionary().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/hunspell/HunspellDictionaryTest#testHunspellDictionary_loadDicAff().mjava","sourceNew":"  public void testSimpleDictionary() throws Exception {\n    InputStream affixStream = getClass().getResourceAsStream(\"simple.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"simple.dic\");\n\n    Dictionary dictionary = new Dictionary(affixStream, dictStream);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).length);\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).length);\n    char flags[] = dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3, new BytesRef());\n    assertNotNull(flags);\n    assertEquals(1, flags.length);\n    assertEquals(\"Wrong number of flags for lucen\", 1, dictionary.lookupWord(new char[]{'l', 'u', 'c', 'e', 'n'}, 0, 5, new BytesRef()).length);\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","sourceOld":"  @Test\n  public void testHunspellDictionary_loadDicAff() throws IOException, ParseException {\n    InputStream affixStream = getClass().getResourceAsStream(\"test.aff\");\n    InputStream dictStream = getClass().getResourceAsStream(\"test.dic\");\n\n    HunspellDictionary dictionary = new HunspellDictionary(affixStream, dictStream, TEST_VERSION_CURRENT);\n    assertEquals(3, dictionary.lookupSuffix(new char[]{'e'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupPrefix(new char[]{'s'}, 0, 1).size());\n    assertEquals(1, dictionary.lookupWord(new char[]{'o', 'l', 'r'}, 0, 3).size());\n    assertEquals(\"Wrong number of flags for lucen\", 1, dictionary.lookupWord(new char[]{'l', 'u', 'c', 'e', 'n'}, 0, 5).get(0).getFlags().length);\n\n    affixStream.close();\n    dictStream.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["c011b4031a2ac8357f86f6998552baf0c74ea214","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359","c011b4031a2ac8357f86f6998552baf0c74ea214"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["c011b4031a2ac8357f86f6998552baf0c74ea214"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c011b4031a2ac8357f86f6998552baf0c74ea214":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c011b4031a2ac8357f86f6998552baf0c74ea214":["ba791bce8103c79e38f957e9c5a53a75871bd918","37a0f60745e53927c4c876cfe5b5a58170f0646c","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["aba371508186796cc6151d8223a5b4e16d02e26e","37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","c011b4031a2ac8357f86f6998552baf0c74ea214"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}