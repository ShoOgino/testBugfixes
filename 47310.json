{"path":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws ParseException {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws ParseException {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62f3efc82b1ead830448bb27e2af9f89417401ea","date":1513619223,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return boostQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return new BoostedQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d4a607d2b3ec6943d58f8ed873827c2552aee80","date":1515405666,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource());\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return boostQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/BoostQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return FunctionScoreQuery.boostByValue(q, vs.asDoubleValuesSource());\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      QParser baseParser;\n      ValueSource vs;\n      String b;\n\n      @Override\n      public Query parse() throws SyntaxError {\n        b = localParams.get(BOOSTFUNC);\n        baseParser = subQuery(localParams.get(QueryParsing.V), null);\n        Query q = baseParser.getQuery();\n\n        if (b == null) return q;\n        Query bq = subQuery(b, FunctionQParserPlugin.NAME).getQuery();\n        if (bq instanceof FunctionQuery) {\n          vs = ((FunctionQuery)bq).getValueSource();\n        } else {\n          vs = new QueryValueSource(bq, 0.0f);\n        }\n        return boostQuery(q, vs);\n      }\n\n\n      @Override\n      public String[] getDefaultHighlightFields() {\n        return baseParser.getDefaultHighlightFields();\n      }\n                                           \n      @Override\n      public Query getHighlightQuery() throws SyntaxError {\n        return baseParser.getHighlightQuery();\n      }\n\n      @Override\n      public void addDebugInfo(NamedList<Object> debugInfo) {\n        // encapsulate base debug info in a sub-list?\n        baseParser.addDebugInfo(debugInfo);\n        debugInfo.add(\"boost_str\",b);\n        debugInfo.add(\"boost_parsed\",vs);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["62f3efc82b1ead830448bb27e2af9f89417401ea","2d4a607d2b3ec6943d58f8ed873827c2552aee80"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3cdb67100dc016748799a77218aa409478372d79","19275ba31e621f6da1b83bf13af75233876fd3d4"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d4a607d2b3ec6943d58f8ed873827c2552aee80":["62f3efc82b1ead830448bb27e2af9f89417401ea"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62f3efc82b1ead830448bb27e2af9f89417401ea":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"2d4a607d2b3ec6943d58f8ed873827c2552aee80":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3cdb67100dc016748799a77218aa409478372d79":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","62f3efc82b1ead830448bb27e2af9f89417401ea"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"62f3efc82b1ead830448bb27e2af9f89417401ea":["b94236357aaa22b76c10629851fe4e376e0cea82","2d4a607d2b3ec6943d58f8ed873827c2552aee80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}