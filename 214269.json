{"path":"src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String).mjava","commits":[{"id":"e5a95ce1d7a3779af6db59b6b39d3b89172d7445","date":1228620032,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String).mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,boolean,String).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    IndexSchema schema = searcher.getSchema();\n    IndexReader r = searcher.getReader();\n    FieldType ft = schema.getFieldType(field);\n\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;    \n    final BoundedTreeSet<CountPair<String,Integer>> queue = (sort.equals(\"count\") || sort.equals(\"true\")) ? new BoundedTreeSet<CountPair<String,Integer>>(maxsize) : null;\n    final NamedList res = new NamedList();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    String startTerm = prefix==null ? \"\" : ft.toInternal(prefix);\n    TermEnum te = r.terms(new Term(field,startTerm));\n    TermDocs td = r.termDocs();\n\n    if (docs.size() >= mincount) { \n    do {\n      Term t = te.term();\n\n      if (null == t || ! t.field().equals(field))\n        break;\n\n      if (prefix!=null && !t.text().startsWith(prefix)) break;\n\n      int df = te.docFreq();\n\n      // If we are sorting, we can use df>min (rather than >=) since we\n      // are going in index order.  For certain term distributions this can\n      // make a large difference (for example, many terms with df=1).\n      if (df>0 && df>min) {\n        int c;\n\n        if (df >= minDfFilterCache) {\n          // use the filter cache\n          c = searcher.numDocs(new TermQuery(t), docs);\n        } else {\n          // iterate over TermDocs to calculate the intersection\n          td.seek(te);\n          c=0;\n          while (td.next()) {\n            if (docs.exists(td.doc())) c++;\n          }\n        }\n\n        if (sort.equals(\"count\") || sort.equals(\"true\")) {\n          if (c>min) {\n            queue.add(new CountPair<String,Integer>(t.text(), c));\n            if (queue.size()>=maxsize) min=queue.last().val;\n          }\n        } else {\n          if (c >= mincount && --off<0) {\n            if (--lim<0) break;\n            res.add(ft.indexedToReadable(t.text()), c);\n          }\n        }\n      }\n    } while (te.next());\n    }\n\n    if (sort.equals(\"count\") || sort.equals(\"true\")) {\n      for (CountPair<String,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        res.add(ft.indexedToReadable(p.key), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    te.close();\n    td.close();    \n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, boolean sort, String prefix)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    IndexSchema schema = searcher.getSchema();\n    IndexReader r = searcher.getReader();\n    FieldType ft = schema.getFieldType(field);\n\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;    \n    final BoundedTreeSet<CountPair<String,Integer>> queue = sort ? new BoundedTreeSet<CountPair<String,Integer>>(maxsize) : null;\n    final NamedList res = new NamedList();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    String startTerm = prefix==null ? \"\" : ft.toInternal(prefix);\n    TermEnum te = r.terms(new Term(field,startTerm));\n    TermDocs td = r.termDocs();\n\n    if (docs.size() >= mincount) { \n    do {\n      Term t = te.term();\n\n      if (null == t || ! t.field().equals(field))\n        break;\n\n      if (prefix!=null && !t.text().startsWith(prefix)) break;\n\n      int df = te.docFreq();\n\n      // If we are sorting, we can use df>min (rather than >=) since we\n      // are going in index order.  For certain term distributions this can\n      // make a large difference (for example, many terms with df=1).\n      if (df>0 && df>min) {\n        int c;\n\n        if (df >= minDfFilterCache) {\n          // use the filter cache\n          c = searcher.numDocs(new TermQuery(t), docs);\n        } else {\n          // iterate over TermDocs to calculate the intersection\n          td.seek(te);\n          c=0;\n          while (td.next()) {\n            if (docs.exists(td.doc())) c++;\n          }\n        }\n\n        if (sort) {\n          if (c>min) {\n            queue.add(new CountPair<String,Integer>(t.text(), c));\n            if (queue.size()>=maxsize) min=queue.last().val;\n          }\n        } else {\n          if (c >= mincount && --off<0) {\n            if (--lim<0) break;\n            res.add(ft.indexedToReadable(t.text()), c);\n          }\n        }\n      }\n    } while (te.next());\n    }\n\n    if (sort) {\n      for (CountPair<String,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        res.add(ft.indexedToReadable(p.key), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    te.close();\n    td.close();    \n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String).mjava","pathOld":"src/java/org/apache/solr/request/SimpleFacets#getFacetTermEnumCounts(SolrIndexSearcher,DocSet,String,int,int,int,boolean,String,String).mjava","sourceNew":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    IndexSchema schema = searcher.getSchema();\n    IndexReader r = searcher.getReader();\n    FieldType ft = schema.getFieldType(field);\n\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;    \n    final BoundedTreeSet<CountPair<String,Integer>> queue = (sort.equals(\"count\") || sort.equals(\"true\")) ? new BoundedTreeSet<CountPair<String,Integer>>(maxsize) : null;\n    final NamedList res = new NamedList();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    String startTerm = prefix==null ? \"\" : ft.toInternal(prefix);\n    TermEnum te = r.terms(new Term(field,startTerm));\n    TermDocs td = r.termDocs();\n\n    if (docs.size() >= mincount) { \n    do {\n      Term t = te.term();\n\n      if (null == t || ! t.field().equals(field))\n        break;\n\n      if (prefix!=null && !t.text().startsWith(prefix)) break;\n\n      int df = te.docFreq();\n\n      // If we are sorting, we can use df>min (rather than >=) since we\n      // are going in index order.  For certain term distributions this can\n      // make a large difference (for example, many terms with df=1).\n      if (df>0 && df>min) {\n        int c;\n\n        if (df >= minDfFilterCache) {\n          // use the filter cache\n          c = searcher.numDocs(new TermQuery(t), docs);\n        } else {\n          // iterate over TermDocs to calculate the intersection\n          td.seek(te);\n          c=0;\n          while (td.next()) {\n            if (docs.exists(td.doc())) c++;\n          }\n        }\n\n        if (sort.equals(\"count\") || sort.equals(\"true\")) {\n          if (c>min) {\n            queue.add(new CountPair<String,Integer>(t.text(), c));\n            if (queue.size()>=maxsize) min=queue.last().val;\n          }\n        } else {\n          if (c >= mincount && --off<0) {\n            if (--lim<0) break;\n            res.add(ft.indexedToReadable(t.text()), c);\n          }\n        }\n      }\n    } while (te.next());\n    }\n\n    if (sort.equals(\"count\") || sort.equals(\"true\")) {\n      for (CountPair<String,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        res.add(ft.indexedToReadable(p.key), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    te.close();\n    td.close();    \n\n    return res;\n  }\n\n","sourceOld":"  /**\n   * Returns a list of terms in the specified field along with the \n   * corresponding count of documents in the set that match that constraint.\n   * This method uses the FilterCache to get the intersection count between <code>docs</code>\n   * and the DocSet for each term in the filter.\n   *\n   * @see FacetParams#FACET_LIMIT\n   * @see FacetParams#FACET_ZEROS\n   * @see FacetParams#FACET_MISSING\n   */\n  public NamedList getFacetTermEnumCounts(SolrIndexSearcher searcher, DocSet docs, String field, int offset, int limit, int mincount, boolean missing, String sort, String prefix)\n    throws IOException {\n\n    /* :TODO: potential optimization...\n    * cache the Terms with the highest docFreq and try them first\n    * don't enum if we get our max from them\n    */\n\n    // Minimum term docFreq in order to use the filterCache for that term.\n    int minDfFilterCache = params.getFieldInt(field, FacetParams.FACET_ENUM_CACHE_MINDF, 0);\n\n    IndexSchema schema = searcher.getSchema();\n    IndexReader r = searcher.getReader();\n    FieldType ft = schema.getFieldType(field);\n\n    final int maxsize = limit>=0 ? offset+limit : Integer.MAX_VALUE-1;    \n    final BoundedTreeSet<CountPair<String,Integer>> queue = (sort.equals(\"count\") || sort.equals(\"true\")) ? new BoundedTreeSet<CountPair<String,Integer>>(maxsize) : null;\n    final NamedList res = new NamedList();\n\n    int min=mincount-1;  // the smallest value in the top 'N' values    \n    int off=offset;\n    int lim=limit>=0 ? limit : Integer.MAX_VALUE;\n\n    String startTerm = prefix==null ? \"\" : ft.toInternal(prefix);\n    TermEnum te = r.terms(new Term(field,startTerm));\n    TermDocs td = r.termDocs();\n\n    if (docs.size() >= mincount) { \n    do {\n      Term t = te.term();\n\n      if (null == t || ! t.field().equals(field))\n        break;\n\n      if (prefix!=null && !t.text().startsWith(prefix)) break;\n\n      int df = te.docFreq();\n\n      // If we are sorting, we can use df>min (rather than >=) since we\n      // are going in index order.  For certain term distributions this can\n      // make a large difference (for example, many terms with df=1).\n      if (df>0 && df>min) {\n        int c;\n\n        if (df >= minDfFilterCache) {\n          // use the filter cache\n          c = searcher.numDocs(new TermQuery(t), docs);\n        } else {\n          // iterate over TermDocs to calculate the intersection\n          td.seek(te);\n          c=0;\n          while (td.next()) {\n            if (docs.exists(td.doc())) c++;\n          }\n        }\n\n        if (sort.equals(\"count\") || sort.equals(\"true\")) {\n          if (c>min) {\n            queue.add(new CountPair<String,Integer>(t.text(), c));\n            if (queue.size()>=maxsize) min=queue.last().val;\n          }\n        } else {\n          if (c >= mincount && --off<0) {\n            if (--lim<0) break;\n            res.add(ft.indexedToReadable(t.text()), c);\n          }\n        }\n      }\n    } while (te.next());\n    }\n\n    if (sort.equals(\"count\") || sort.equals(\"true\")) {\n      for (CountPair<String,Integer> p : queue) {\n        if (--off>=0) continue;\n        if (--lim<0) break;\n        res.add(ft.indexedToReadable(p.key), p.val);\n      }\n    }\n\n    if (missing) {\n      res.add(null, getFieldMissingCount(searcher,docs,field));\n    }\n\n    te.close();\n    td.close();    \n\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e5a95ce1d7a3779af6db59b6b39d3b89172d7445"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"e5a95ce1d7a3779af6db59b6b39d3b89172d7445":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}