{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(FieldInfo,SegmentReader,BinaryDocValues).mjava","commits":[{"id":"988a443ec59cc75e4087970f81fb02ea1f74ee62","date":1353356370,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(FieldInfo,SegmentReader,BinaryDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private void checkBinaryDocValues(FieldInfo fi, SegmentReader reader, BinaryDocValues dv) {\n    final boolean fixed = dv.isFixedLength();\n    final int maxLength = dv.maxLength();\n    boolean fixed2 = true;\n    int maxLength2 = -1;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      if (maxLength2 == -1) {\n        maxLength2 = scratch.length;\n      } else {\n        fixed2 &= scratch.length == maxLength2;\n        maxLength2 = Math.max(maxLength2, scratch.length);\n      }\n    }\n    if (fixed != fixed2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports fixed=\" + fixed + \" but this is not the case!\");\n    }\n    if (maxLength != maxLength2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports maxLength=\" + maxLength + \" but this is not the case: \" + maxLength2);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(FieldInfo,AtomicReader,BinaryDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#checkBinaryDocValues(FieldInfo,SegmentReader,BinaryDocValues).mjava","sourceNew":"  private static void checkBinaryDocValues(FieldInfo fi, AtomicReader reader, BinaryDocValues dv) {\n    // nocommit remove this:\n    if (dv == null) {\n      return;\n    }\n    final boolean fixed = dv.isFixedLength();\n    final int maxLength = dv.maxLength();\n    boolean fixed2 = true;\n    int maxLength2 = -1;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      if (maxLength2 == -1) {\n        maxLength2 = scratch.length;\n      } else {\n        fixed2 &= scratch.length == maxLength2;\n        maxLength2 = Math.max(maxLength2, scratch.length);\n      }\n    }\n    if (fixed != fixed2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports fixed=\" + fixed + \" but this is not the case!\");\n    }\n    if (maxLength != maxLength2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports maxLength=\" + maxLength + \" but this is not the case: \" + maxLength2);\n    }\n  }\n\n","sourceOld":"  private void checkBinaryDocValues(FieldInfo fi, SegmentReader reader, BinaryDocValues dv) {\n    final boolean fixed = dv.isFixedLength();\n    final int maxLength = dv.maxLength();\n    boolean fixed2 = true;\n    int maxLength2 = -1;\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      dv.get(i, scratch);\n      if (maxLength2 == -1) {\n        maxLength2 = scratch.length;\n      } else {\n        fixed2 &= scratch.length == maxLength2;\n        maxLength2 = Math.max(maxLength2, scratch.length);\n      }\n    }\n    if (fixed != fixed2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports fixed=\" + fixed + \" but this is not the case!\");\n    }\n    if (maxLength != maxLength2) {\n      throw new RuntimeException(\"dv for field: \" + fi.name + \" reports maxLength=\" + maxLength + \" but this is not the case: \" + maxLength2);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"988a443ec59cc75e4087970f81fb02ea1f74ee62":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["988a443ec59cc75e4087970f81fb02ea1f74ee62"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"988a443ec59cc75e4087970f81fb02ea1f74ee62":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["988a443ec59cc75e4087970f81fb02ea1f74ee62","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e99275efa2c9c9ae3bdba986218af82f2bf3dc30","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}