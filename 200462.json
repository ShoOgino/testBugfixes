{"path":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValDocValuesComparator.AnyPackedDocToOrdComparator#compareBottom(int).mjava","commits":[{"id":"b78413670e9b208da66999360aa5dc09ed36436e","date":1323277658,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValDocValuesComparator.AnyPackedDocToOrdComparator#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - (int) readerOrds.get(doc);\n        } else {\n          // ord is only approx comparable: if they are not\n          // equal, we can use that; if they are equal, we\n          // must fallback to compare by value\n          final int order = (int) readerOrds.get(doc);\n          final int cmp = bottomOrd - order;\n          if (cmp != 0) {\n            return cmp;\n          }\n          termsIndex.getByOrd(order, tempBR);\n          return comp.compare(bottomValue, tempBR);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValDocValuesComparator.AnyPackedDocToOrdComparator#compareBottom(int).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - (int) readerOrds.get(doc);\n        } else {\n          // ord is only approx comparable: if they are not\n          // equal, we can use that; if they are equal, we\n          // must fallback to compare by value\n          final int order = (int) readerOrds.get(doc);\n          final int cmp = bottomOrd - order;\n          if (cmp != 0) {\n            return cmp;\n          }\n          termsIndex.getByOrd(order, tempBR);\n          return comp.compare(bottomValue, tempBR);\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldComparator.TermOrdValDocValuesComparator.AnyPackedDocToOrdComparator#compareBottom(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FieldComparator.TermOrdValDocValuesComparator.AnyPackedDocToOrdComparator#compareBottom(int).mjava","sourceNew":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - (int) readerOrds.get(doc);\n        } else {\n          // ord is only approx comparable: if they are not\n          // equal, we can use that; if they are equal, we\n          // must fallback to compare by value\n          final int order = (int) readerOrds.get(doc);\n          final int cmp = bottomOrd - order;\n          if (cmp != 0) {\n            return cmp;\n          }\n          termsIndex.getByOrd(order, tempBR);\n          return comp.compare(bottomValue, tempBR);\n        }\n      }\n\n","sourceOld":"      @Override\n      public int compareBottom(int doc) {\n        assert bottomSlot != -1;\n        if (bottomSameReader) {\n          // ord is precisely comparable, even in the equal case\n          return bottomOrd - (int) readerOrds.get(doc);\n        } else {\n          // ord is only approx comparable: if they are not\n          // equal, we can use that; if they are equal, we\n          // must fallback to compare by value\n          final int order = (int) readerOrds.get(doc);\n          final int cmp = bottomOrd - order;\n          if (cmp != 0) {\n            return cmp;\n          }\n          termsIndex.getByOrd(order, tempBR);\n          return comp.compare(bottomValue, tempBR);\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b78413670e9b208da66999360aa5dc09ed36436e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b78413670e9b208da66999360aa5dc09ed36436e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b78413670e9b208da66999360aa5dc09ed36436e","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"b78413670e9b208da66999360aa5dc09ed36436e":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}