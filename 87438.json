{"path":"backwards/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"/dev/null","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","pathOld":"backwards/src/test/org/apache/lucene/TestMergeSchedulerExternal#testSubclassConcurrentMergeScheduler().mjava","sourceNew":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","sourceOld":"  public void testSubclassConcurrentMergeScheduler() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    dir.failOn(new FailOnlyOnMerge());\n\n    Document doc = new Document();\n    Field idField = new Field(\"id\", \"\", Field.Store.YES, Field.Index.NOT_ANALYZED);\n    doc.add(idField);\n    \n    IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    MyMergeScheduler ms = new MyMergeScheduler();\n    writer.setMergeScheduler(ms);\n    writer.setMaxBufferedDocs(2);\n    writer.setRAMBufferSizeMB(writer.DISABLE_AUTO_FLUSH);\n    for(int i=0;i<20;i++)\n      writer.addDocument(doc);\n\n    ms.sync();\n    writer.close();\n    \n    assertTrue(mergeThreadCreated);\n    assertTrue(mergeCalled);\n    assertTrue(excCalled);\n    dir.close();\n    assertTrue(ConcurrentMergeScheduler.anyUnhandledExceptions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}