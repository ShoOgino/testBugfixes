{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","commits":[{"id":"46df9d682d3407bf67ce2946c9f9267376809bc2","date":1521244495,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    zkStateReader.unregisterCore(cloudDescriptor.getCollectionName());\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1257989f08e6750eeab73e5e9f7847fc48b04a1a","date":1531102463,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n    replicasMetTragicEvent.remove(collection+\":\"+coreNodeName);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n    replicasMetTragicEvent.remove(collection+\":\"+coreNodeName);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#unregister(String,CoreDescriptor,boolean).mjava","sourceNew":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n    replicasMetTragicEvent.remove(collection+\":\"+coreNodeName);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  public void unregister(String coreName, CoreDescriptor cd, boolean removeCoreFromZk) throws Exception {\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    final String collection = cd.getCloudDescriptor().getCollectionName();\n    getCollectionTerms(collection).remove(cd.getCloudDescriptor().getShardId(), cd);\n\n    if (Strings.isNullOrEmpty(collection)) {\n      log.error(\"No collection was specified.\");\n      assert false : \"No collection was specified [\" + collection + \"]\";\n      return;\n    }\n    final DocCollection docCollection = zkStateReader.getClusterState().getCollectionOrNull(collection);\n    Replica replica = (docCollection == null) ? null : docCollection.getReplica(coreNodeName);\n\n    if (replica == null || replica.getType() != Type.PULL) {\n      ElectionContext context = electionContexts.remove(new ContextKey(collection, coreNodeName));\n\n      if (context != null) {\n        context.cancelElection();\n      }\n    }\n    CloudDescriptor cloudDescriptor = cd.getCloudDescriptor();\n    if (removeCoreFromZk) {\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          OverseerAction.DELETECORE.toLower(), ZkStateReader.CORE_NAME_PROP, coreName,\n          ZkStateReader.NODE_NAME_PROP, getNodeName(),\n          ZkStateReader.COLLECTION_PROP, cloudDescriptor.getCollectionName(),\n          ZkStateReader.BASE_URL_PROP, getBaseUrl(),\n          ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      overseerJobQueue.offer(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["28ba172425e443e0f08a49de6d73586c418d7251"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["28ba172425e443e0f08a49de6d73586c418d7251","1257989f08e6750eeab73e5e9f7847fc48b04a1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46df9d682d3407bf67ce2946c9f9267376809bc2"],"28ba172425e443e0f08a49de6d73586c418d7251":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"46df9d682d3407bf67ce2946c9f9267376809bc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1257989f08e6750eeab73e5e9f7847fc48b04a1a"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["28ba172425e443e0f08a49de6d73586c418d7251","1257989f08e6750eeab73e5e9f7847fc48b04a1a"]},"commit2Childs":{"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["203e3fcf513c02ee2c07015f2ce277e26dc60907","46df9d682d3407bf67ce2946c9f9267376809bc2"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["28ba172425e443e0f08a49de6d73586c418d7251"],"28ba172425e443e0f08a49de6d73586c418d7251":["1257989f08e6750eeab73e5e9f7847fc48b04a1a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"46df9d682d3407bf67ce2946c9f9267376809bc2":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}