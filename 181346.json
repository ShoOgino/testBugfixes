{"path":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#parse(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#parse(String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param expression  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String expression) throws ParseException {\n    // optimize empty query to be empty BooleanQuery\n    if (expression == null || expression.trim().length() == 0) {\n      return new BooleanQuery();\n    }\n\n    ReInit(new FastCharStream(new StringReader(expression)));\n    try {\n      Query query = Query(field);\n      return (query != null) ? query : new BooleanQuery();\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param expression  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String expression) throws ParseException {\n    // optimize empty query to be empty BooleanQuery\n    if (expression == null || expression.trim().length() == 0) {\n      return new BooleanQuery();\n    }\n\n    ReInit(new FastCharStream(new StringReader(expression)));\n    try {\n      Query query = Query(field);\n      return (query != null) ? query : new BooleanQuery();\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#parse(String).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#parse(String).mjava","sourceNew":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param expression  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String expression) throws ParseException {\n    // optimize empty query to be empty BooleanQuery\n    if (expression == null || expression.trim().length() == 0) {\n      return new BooleanQuery();\n    }\n\n    ReInit(new FastCharStream(new StringReader(expression)));\n    try {\n      Query query = Query(field);\n      return (query != null) ? query : new BooleanQuery();\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","sourceOld":"  /** Parses a query string, returning a {@link org.apache.lucene.search.Query}.\n   *  @param expression  the query string to be parsed.\n   *  @throws ParseException if the parsing fails\n   */\n  public Query parse(String expression) throws ParseException {\n    // optimize empty query to be empty BooleanQuery\n    if (expression == null || expression.trim().length() == 0) {\n      return new BooleanQuery();\n    }\n\n    ReInit(new FastCharStream(new StringReader(expression)));\n    try {\n      Query query = Query(field);\n      return (query != null) ? query : new BooleanQuery();\n    }\n    catch (TokenMgrError tme) {\n      throw new ParseException(tme.getMessage());\n    }\n    catch (BooleanQuery.TooManyClauses tmc) {\n      throw new ParseException(\"Too many boolean clauses\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}