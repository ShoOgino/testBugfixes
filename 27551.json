{"path":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws LockObtainFailedException, IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws LockObtainFailedException, IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws LockObtainFailedException, IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws LockObtainFailedException, IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"813fc8a2a50c4f282fc2463daeb353492aceabbd","date":1397856769,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public final boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3de2e9a536c4115b4f53f14b6ab496ba3af1840c","date":1400252137,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public final boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        throw new LockObtainFailedException(reason, failureReason);\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public final boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public final boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        throw new LockObtainFailedException(reason, failureReason);\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public final boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public final boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        throw new LockObtainFailedException(reason, failureReason);\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public final boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        LockObtainFailedException e = new LockObtainFailedException(reason);\n        if (failureReason != null) {\n          e.initCause(failureReason);\n        }\n        throw e;\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock#obtain(long).mjava","sourceNew":null,"sourceOld":"  /** Attempts to obtain an exclusive lock within amount of\n   *  time given. Polls once per {@link #LOCK_POLL_INTERVAL}\n   *  (currently 1000) milliseconds until lockWaitTimeout is\n   *  passed.\n   * @param lockWaitTimeout length of time to wait in\n   *        milliseconds or {@link\n   *        #LOCK_OBTAIN_WAIT_FOREVER} to retry forever\n   * @return true if lock was obtained\n   * @throws LockObtainFailedException if lock wait times out\n   * @throws IllegalArgumentException if lockWaitTimeout is\n   *         out of bounds\n   * @throws IOException if obtain() throws IOException\n   */\n  public final boolean obtain(long lockWaitTimeout) throws IOException {\n    failureReason = null;\n    boolean locked = obtain();\n    if (lockWaitTimeout < 0 && lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER)\n      throw new IllegalArgumentException(\"lockWaitTimeout should be LOCK_OBTAIN_WAIT_FOREVER or a non-negative number (got \" + lockWaitTimeout + \")\");\n\n    long maxSleepCount = lockWaitTimeout / LOCK_POLL_INTERVAL;\n    long sleepCount = 0;\n    while (!locked) {\n      if (lockWaitTimeout != LOCK_OBTAIN_WAIT_FOREVER && sleepCount++ >= maxSleepCount) {\n        String reason = \"Lock obtain timed out: \" + this.toString();\n        if (failureReason != null) {\n          reason += \": \" + failureReason;\n        }\n        throw new LockObtainFailedException(reason, failureReason);\n      }\n      try {\n        Thread.sleep(LOCK_POLL_INTERVAL);\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n      locked = obtain();\n    }\n    return locked;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"813fc8a2a50c4f282fc2463daeb353492aceabbd":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"56572ec06f1407c066d6b7399413178b33176cd8":["813fc8a2a50c4f282fc2463daeb353492aceabbd","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["813fc8a2a50c4f282fc2463daeb353492aceabbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["813fc8a2a50c4f282fc2463daeb353492aceabbd","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"813fc8a2a50c4f282fc2463daeb353492aceabbd":["56572ec06f1407c066d6b7399413178b33176cd8","3de2e9a536c4115b4f53f14b6ab496ba3af1840c","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","813fc8a2a50c4f282fc2463daeb353492aceabbd"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["618635065f043788c9e034f96ca5cd5cea1b4592","56572ec06f1407c066d6b7399413178b33176cd8","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}