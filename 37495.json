{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(SqlAggFunction,List[String],List[Integer]).mjava","commits":[{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(SqlAggFunction,List[String],List[Integer]).mjava","pathOld":"/dev/null","sourceNew":"  private Metric toSolrMetric(SqlAggFunction aggregation, List<String> inNames, List<Integer> args) {\n    switch (args.size()) {\n      case 0:\n        if(aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new CountMetric();\n        }\n      case 1:\n        final String inName = inNames.get(args.get(0));\n        if (aggregation.equals(SqlStdOperatorTable.SUM) || aggregation.equals(SqlStdOperatorTable.SUM0)) {\n          return new SumMetric(inName);\n        } else if (aggregation.equals(SqlStdOperatorTable.MIN)) {\n          return new MinMetric(inName);\n        } else if (aggregation.equals(SqlStdOperatorTable.MAX)) {\n          return new MaxMetric(inName);\n        } else if (aggregation.equals(SqlStdOperatorTable.AVG)) {\n          return new MeanMetric(inName);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cc8e977a08af3169747ab78c578cc3037d095d5","date":1462391783,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(SqlAggFunction,List[String],List[Integer]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(SqlAggFunction,List[String],List[Integer]).mjava","sourceNew":"  private Pair<String, String> toSolrMetric(SqlAggFunction aggregation, List<String> inNames, List<Integer> args) {\n    switch (args.size()) {\n      case 0:\n        if (aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new Pair<>(aggregation.getName(), \"*\");\n        }\n      case 1:\n        final String inName = inNames.get(args.get(0));\n        if(SUPPORTED_AGGREGATIONS.contains(aggregation)) {\n          return new Pair<>(aggregation.getName(), inName);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","sourceOld":"  private Metric toSolrMetric(SqlAggFunction aggregation, List<String> inNames, List<Integer> args) {\n    switch (args.size()) {\n      case 0:\n        if(aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new CountMetric();\n        }\n      case 1:\n        final String inName = inNames.get(args.get(0));\n        if (aggregation.equals(SqlStdOperatorTable.SUM) || aggregation.equals(SqlStdOperatorTable.SUM0)) {\n          return new SumMetric(inName);\n        } else if (aggregation.equals(SqlStdOperatorTable.MIN)) {\n          return new MinMetric(inName);\n        } else if (aggregation.equals(SqlStdOperatorTable.MAX)) {\n          return new MaxMetric(inName);\n        } else if (aggregation.equals(SqlStdOperatorTable.AVG)) {\n          return new MeanMetric(inName);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b35c86a7787a532402f49557ac05fe2596fa73b9","date":1462399837,"type":5,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(Implementor,AggregateCall,List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrAggregate#toSolrMetric(SqlAggFunction,List[String],List[Integer]).mjava","sourceNew":"  private Pair<String, String> toSolrMetric(Implementor implementor, AggregateCall aggCall, List<String> inNames) {\n    SqlAggFunction aggregation = aggCall.getAggregation();\n    List<Integer> args = aggCall.getArgList();\n    switch (args.size()) {\n      case 0:\n        if (aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new Pair<>(aggregation.getName(), \"*\");\n        }\n      case 1:\n        String inName = inNames.get(args.get(0));\n        String name = implementor.fieldMappings.getOrDefault(inName, inName);\n        if(SUPPORTED_AGGREGATIONS.contains(aggregation)) {\n          return new Pair<>(aggregation.getName(), name);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","sourceOld":"  private Pair<String, String> toSolrMetric(SqlAggFunction aggregation, List<String> inNames, List<Integer> args) {\n    switch (args.size()) {\n      case 0:\n        if (aggregation.equals(SqlStdOperatorTable.COUNT)) {\n          return new Pair<>(aggregation.getName(), \"*\");\n        }\n      case 1:\n        final String inName = inNames.get(args.get(0));\n        if(SUPPORTED_AGGREGATIONS.contains(aggregation)) {\n          return new Pair<>(aggregation.getName(), inName);\n        }\n      default:\n        throw new AssertionError(\"Invalid aggregation \" + aggregation + \" with args \" + args + \" with names\" + inNames);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b35c86a7787a532402f49557ac05fe2596fa73b9":["9cc8e977a08af3169747ab78c578cc3037d095d5"],"9cc8e977a08af3169747ab78c578cc3037d095d5":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b35c86a7787a532402f49557ac05fe2596fa73b9":[],"9cc8e977a08af3169747ab78c578cc3037d095d5":["b35c86a7787a532402f49557ac05fe2596fa73b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["9cc8e977a08af3169747ab78c578cc3037d095d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b35c86a7787a532402f49557ac05fe2596fa73b9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}