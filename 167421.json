{"path":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(ByteArrayOutputStream,IntDecoder).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(ByteArrayOutputStream,IntDecoder).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(ByteArrayOutputStream,IntDecoder).mjava","sourceNew":"  private static void decoding(ByteArrayOutputStream baos, IntDecoder decoder)\n      throws IOException, InstantiationException, IllegalAccessException {\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    decoder.reInit(bais);\n    \n    HashSet<Long> set = new HashSet<Long>();\n    long value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n    \n    set.clear();\n    bais.reset();\n    decoder.reInit(bais);\n    value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n\n  }\n\n","sourceOld":"  private static void decoding(ByteArrayOutputStream baos, IntDecoder decoder)\n      throws IOException, InstantiationException, IllegalAccessException {\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    decoder.reInit(bais);\n    \n    HashSet<Long> set = new HashSet<Long>();\n    long value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n    \n    set.clear();\n    bais.reset();\n    decoder.reInit(bais);\n    value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(ByteArrayOutputStream,IntDecoder).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(ByteArrayOutputStream,IntDecoder).mjava","sourceNew":"  private static void decoding(ByteArrayOutputStream baos, IntDecoder decoder)\n      throws IOException {\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    decoder.reInit(bais);\n    \n    HashSet<Long> set = new HashSet<Long>();\n    long value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n    \n    set.clear();\n    bais.reset();\n    decoder.reInit(bais);\n    value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n\n  }\n\n","sourceOld":"  private static void decoding(ByteArrayOutputStream baos, IntDecoder decoder)\n      throws IOException, InstantiationException, IllegalAccessException {\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    decoder.reInit(bais);\n    \n    HashSet<Long> set = new HashSet<Long>();\n    long value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n    \n    set.clear();\n    bais.reset();\n    decoder.reInit(bais);\n    value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(ByteArrayOutputStream,IntDecoder).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(ByteArrayOutputStream,IntDecoder).mjava","sourceNew":"  private static void decoding(ByteArrayOutputStream baos, IntDecoder decoder)\n      throws IOException {\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    decoder.reInit(bais);\n    \n    HashSet<Long> set = new HashSet<Long>();\n    long value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n    \n    set.clear();\n    bais.reset();\n    decoder.reInit(bais);\n    value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n\n  }\n\n","sourceOld":"  private static void decoding(ByteArrayOutputStream baos, IntDecoder decoder)\n      throws IOException, InstantiationException, IllegalAccessException {\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    decoder.reInit(bais);\n    \n    HashSet<Long> set = new HashSet<Long>();\n    long value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n    \n    set.clear();\n    bais.reset();\n    decoder.reInit(bais);\n    value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(ByteArrayOutputStream,IntDecoder).mjava","sourceNew":null,"sourceOld":"  private static void decoding(ByteArrayOutputStream baos, IntDecoder decoder)\n      throws IOException {\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    decoder.reInit(bais);\n    \n    HashSet<Long> set = new HashSet<Long>();\n    long value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n    \n    set.clear();\n    bais.reset();\n    decoder.reInit(bais);\n    value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(ByteArrayOutputStream,IntDecoder).mjava","sourceNew":null,"sourceOld":"  private static void decoding(ByteArrayOutputStream baos, IntDecoder decoder)\n      throws IOException {\n    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n    decoder.reInit(bais);\n    \n    HashSet<Long> set = new HashSet<Long>();\n    long value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n    \n    set.clear();\n    bais.reset();\n    decoder.reInit(bais);\n    value = 0;\n    while ((value = decoder.decode()) != IntDecoder.EOS) {\n      set.add(value);\n    }\n    assertEquals(dataSet.size(), set.size());\n    assertTrue(set.equals(dataSet));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a","fe33227f6805edab2036cbb80645cc4e2d1fa424","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}