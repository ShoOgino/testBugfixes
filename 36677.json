{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","commits":[{"id":"9e13d0d4d8b6dc352cb304974502b9a36c153f78","date":1436492687,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"/dev/null","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":null,"sourceOld":"  void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0);\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["9e13d0d4d8b6dc352cb304974502b9a36c153f78","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["9e13d0d4d8b6dc352cb304974502b9a36c153f78","79759974460bc59933cd169acc94f5c6b16368d5"],"79759974460bc59933cd169acc94f5c6b16368d5":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9e13d0d4d8b6dc352cb304974502b9a36c153f78","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9e13d0d4d8b6dc352cb304974502b9a36c153f78":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}