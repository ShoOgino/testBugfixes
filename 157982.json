{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","commits":[{"id":"b1add9ddc0005b07550d4350720aac22dc9886b3","date":1295549635,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copy(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copy(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copy(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copy(text);\n      numIndexTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter.SimpleFieldWriter#add(BytesRef,TermStats,long).mjava","sourceNew":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","sourceOld":"    @Override\n    public void add(BytesRef text, TermStats stats, long termsFilePointer) throws IOException {\n      final int indexedTermLength = indexedTermPrefixLength(lastTerm, text);\n      //System.out.println(\"FGW: add text=\" + text.utf8ToString() + \" \" + text + \" fp=\" + termsFilePointer);\n\n      // write only the min prefix that shows the diff\n      // against prior term\n      out.writeBytes(text.bytes, text.offset, indexedTermLength);\n\n      if (termLengths.length == numIndexTerms) {\n        termLengths = ArrayUtil.grow(termLengths);\n      }\n      if (termsPointerDeltas.length == numIndexTerms) {\n        termsPointerDeltas = ArrayUtil.grow(termsPointerDeltas);\n      }\n\n      // save delta terms pointer\n      termsPointerDeltas[numIndexTerms] = (int) (termsFilePointer - lastTermsPointer);\n      lastTermsPointer = termsFilePointer;\n\n      // save term length (in bytes)\n      assert indexedTermLength <= Short.MAX_VALUE;\n      termLengths[numIndexTerms] = (short) indexedTermLength;\n      totTermLength += indexedTermLength;\n\n      lastTerm.copyBytes(text);\n      numIndexTerms++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b1add9ddc0005b07550d4350720aac22dc9886b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e6e919043fa85ee891123768dd655a98edbbf63c"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b1add9ddc0005b07550d4350720aac22dc9886b3"],"e6e919043fa85ee891123768dd655a98edbbf63c":["b1add9ddc0005b07550d4350720aac22dc9886b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","b1add9ddc0005b07550d4350720aac22dc9886b3","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"b1add9ddc0005b07550d4350720aac22dc9886b3":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","e6e919043fa85ee891123768dd655a98edbbf63c"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}