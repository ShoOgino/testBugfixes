{"path":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position - postings.lastPositions[termID]);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position - postings.lastPositions[termID]);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position - postings.lastPositions[termID]);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position - postings.lastPositions[termID]);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    if (doVectorOffsets) {\n      int startOffset = fieldState.offset + offsetAttribute.startOffset();\n      int endOffset = fieldState.offset + offsetAttribute.endOffset();\n\n      termsHashPerField.writeVInt(1, startOffset - postings.lastOffsets[termID]);\n      termsHashPerField.writeVInt(1, endOffset - startOffset);\n      postings.lastOffsets[termID] = endOffset;\n    }\n\n    if (doVectorPositions) {\n      termsHashPerField.writeVInt(0, fieldState.position - postings.lastPositions[termID]);\n      postings.lastPositions[termID] = fieldState.position;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = (TermVectorsPostingsArray) termsHashPerField.postingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","date":1414017220,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    assert docState.testPoint(\"TermVectorsTermsWriterPerField.addTerm start\");\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e72e3ade782716457071fee4033f18689acc4c4f","date":1496770651,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID] += getTermFreq();\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f344bb33ca91f48e99c061980115b46fa84fc8f5","date":1496903283,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID] += getTermFreq();\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID] += getTermFreq();\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID] += getTermFreq();\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID]++;\n\n    writeProx(postings, termID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3cc3fa1ecad75b99ec55169e44628808f9866ad","date":1592311545,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumerPerField#addTerm(int).mjava","sourceNew":"  @Override\n  void addTerm(final int termID, final int docID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID] += getTermFreq();\n\n    writeProx(postings, termID);\n  }\n\n","sourceOld":"  @Override\n  void addTerm(final int termID) {\n    TermVectorsPostingsArray postings = termVectorsPostingsArray;\n\n    postings.freqs[termID] += getTermFreq();\n\n    writeProx(postings, termID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["0935c850ea562932997b72c69d93e345f21d7f45","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","e72e3ade782716457071fee4033f18689acc4c4f"],"28288370235ed02234a64753cdbf0c6ec096304a":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["0935c850ea562932997b72c69d93e345f21d7f45","52c7e49be259508735752fba88085255014a6ecf"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"e72e3ade782716457071fee4033f18689acc4c4f":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0935c850ea562932997b72c69d93e345f21d7f45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"52c7e49be259508735752fba88085255014a6ecf":["0935c850ea562932997b72c69d93e345f21d7f45"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["28288370235ed02234a64753cdbf0c6ec096304a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","f344bb33ca91f48e99c061980115b46fa84fc8f5"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"]},"commit2Childs":{"9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4":["f344bb33ca91f48e99c061980115b46fa84fc8f5","28288370235ed02234a64753cdbf0c6ec096304a","e72e3ade782716457071fee4033f18689acc4c4f","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"f344bb33ca91f48e99c061980115b46fa84fc8f5":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["d3cc3fa1ecad75b99ec55169e44628808f9866ad"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["9cdbc2cadeaf282528fe4d1c06e9f8bee38ccec4","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"e72e3ade782716457071fee4033f18689acc4c4f":["f344bb33ca91f48e99c061980115b46fa84fc8f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0935c850ea562932997b72c69d93e345f21d7f45":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","c7869f64c874ebf7f317d22c00baf2b6857797a6","52c7e49be259508735752fba88085255014a6ecf","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"d3cc3fa1ecad75b99ec55169e44628808f9866ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c7869f64c874ebf7f317d22c00baf2b6857797a6","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}