{"path":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCodedBytes(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get());\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCodedBytes(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      NumericUtils.intToPrefixCodedBytes(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i].get());\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        NumericUtils.intToPrefixCodedBytes(vals[i], j, ref);\n        int prefixVal=NumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2","date":1455407361,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get());\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCodedBytes(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get());\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCodedBytes(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[i].get());\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109","53b6c192847de8643a5da505cc433cbf8476a175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestLegacyNumericUtils#testIntSpecialValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestLegacyNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    BytesRefBuilder[] prefixVals=new BytesRefBuilder[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i] = new BytesRefBuilder();\n      LegacyNumericUtils.intToPrefixCoded(vals[i], 0, prefixVals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], LegacyNumericUtils.prefixCodedToInt(prefixVals[i].get()) );\n      \n      // test if decoding values as long fails correctly\n      final int index = i;\n      expectThrows(NumberFormatException.class, () -> {\n        LegacyNumericUtils.prefixCodedToLong(prefixVals[index].get());\n      });\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].get().compareTo(prefixVals[i].get()) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    final BytesRefBuilder ref = new BytesRefBuilder();\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        LegacyNumericUtils.intToPrefixCoded(vals[i], j, ref);\n        int prefixVal= LegacyNumericUtils.prefixCodedToInt(ref.get());\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["05fe562aa248790944d43cdd478f512572835ba0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["05fe562aa248790944d43cdd478f512572835ba0"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["05fe562aa248790944d43cdd478f512572835ba0","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"05fe562aa248790944d43cdd478f512572835ba0":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["651ed0c260e4184c8a85ae7e1c155a4415f2e6e2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"651ed0c260e4184c8a85ae7e1c155a4415f2e6e2":["05fe562aa248790944d43cdd478f512572835ba0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}