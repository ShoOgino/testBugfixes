{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTermsWriter.TermsWriter#flushBlock().mjava","sourceNew":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","sourceOld":"    private void flushBlock() throws IOException {\n      //System.out.println(\"BTW.flushBlock seg=\" + segment + \" pendingCount=\" + pendingCount + \" fp=\" + out.getFilePointer());\n\n      // First pass: compute common prefix for all terms\n      // in the block, against term before first term in\n      // this block:\n      int commonPrefix = sharedPrefix(lastPrevTerm, pendingTerms[0].term);\n      for(int termCount=1;termCount<pendingCount;termCount++) {\n        commonPrefix = Math.min(commonPrefix,\n                                sharedPrefix(lastPrevTerm,\n                                             pendingTerms[termCount].term));\n      }        \n\n      out.writeVInt(pendingCount);\n      out.writeVInt(commonPrefix);\n\n      // 2nd pass: write suffixes, as separate byte[] blob\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final int suffix = pendingTerms[termCount].term.length - commonPrefix;\n        // TODO: cutover to better intblock codec, instead\n        // of interleaving here:\n        bytesWriter.writeVInt(suffix);\n        bytesWriter.writeBytes(pendingTerms[termCount].term.bytes, commonPrefix, suffix);\n      }\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      // 3rd pass: write the freqs as byte[] blob\n      // TODO: cutover to better intblock codec.  simple64?\n      // write prefix, suffix first:\n      for(int termCount=0;termCount<pendingCount;termCount++) {\n        final TermStats stats = pendingTerms[termCount].stats;\n        assert stats != null;\n        bytesWriter.writeVInt(stats.docFreq);\n        if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          bytesWriter.writeVLong(stats.totalTermFreq-stats.docFreq);\n        }\n      }\n\n      out.writeVInt((int) bytesWriter.getFilePointer());\n      bytesWriter.writeTo(out);\n      bytesWriter.reset();\n\n      postingsWriter.flushTermsBlock(pendingCount, pendingCount);\n      lastPrevTerm.copyBytes(pendingTerms[pendingCount-1].term);\n      pendingCount = 0;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}