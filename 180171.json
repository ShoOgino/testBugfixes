{"path":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (null != ramCalc) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize(ramCalc);\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<Integer, CacheEntry>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<ReaderField, Integer>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<ReaderField>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (null != ramCalc) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize(ramCalc);\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<Integer, CacheEntry>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<ReaderField, Integer>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<ReaderField>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (estimateRam) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize();\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<Integer, CacheEntry>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<ReaderField, Integer>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<ReaderField>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (null != ramCalc) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize(ramCalc);\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<Integer, CacheEntry>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<ReaderField, Integer>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<ReaderField>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (estimateRam) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize();\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (estimateRam) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize();\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<Integer, CacheEntry>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<ReaderField, Integer>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<ReaderField>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<Insanity>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (estimateRam) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize();\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (estimateRam) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize();\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (estimateRam) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize();\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (estimateRam) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize();\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker#check(CacheEntry...).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/FieldCacheSanityChecker#check(CacheEntry...).mjava","sourceNew":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (estimateRam) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize();\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","sourceOld":"  /**\n   * Tests a CacheEntry[] for indication of \"insane\" cache usage.\n   * <p>\n   * <B>NOTE:</b>FieldCache CreationPlaceholder objects are ignored.\n   * (:TODO: is this a bad idea? are we masking a real problem?)\n   * </p>\n   */\n  public Insanity[] check(CacheEntry... cacheEntries) {\n    if (null == cacheEntries || 0 == cacheEntries.length) \n      return new Insanity[0];\n\n    if (estimateRam) {\n      for (int i = 0; i < cacheEntries.length; i++) {\n        cacheEntries[i].estimateSize();\n      }\n    }\n\n    // the indirect mapping lets MapOfSet dedup identical valIds for us\n    //\n    // maps the (valId) identityhashCode of cache values to \n    // sets of CacheEntry instances\n    final MapOfSets<Integer, CacheEntry> valIdToItems = new MapOfSets<>(new HashMap<Integer, Set<CacheEntry>>(17));\n    // maps ReaderField keys to Sets of ValueIds\n    final MapOfSets<ReaderField, Integer> readerFieldToValIds = new MapOfSets<>(new HashMap<ReaderField, Set<Integer>>(17));\n    //\n\n    // any keys that we know result in more then one valId\n    final Set<ReaderField> valMismatchKeys = new HashSet<>();\n\n    // iterate over all the cacheEntries to get the mappings we'll need\n    for (int i = 0; i < cacheEntries.length; i++) {\n      final CacheEntry item = cacheEntries[i];\n      final Object val = item.getValue();\n\n      // It's OK to have dup entries, where one is eg\n      // float[] and the other is the Bits (from\n      // getDocWithField())\n      if (val instanceof Bits) {\n        continue;\n      }\n\n      if (val instanceof FieldCache.CreationPlaceholder)\n        continue;\n\n      final ReaderField rf = new ReaderField(item.getReaderKey(), \n                                            item.getFieldName());\n\n      final Integer valId = Integer.valueOf(System.identityHashCode(val));\n\n      // indirect mapping, so the MapOfSet will dedup identical valIds for us\n      valIdToItems.put(valId, item);\n      if (1 < readerFieldToValIds.put(rf, valId)) {\n        valMismatchKeys.add(rf);\n      }\n    }\n\n    final List<Insanity> insanity = new ArrayList<>(valMismatchKeys.size() * 3);\n\n    insanity.addAll(checkValueMismatch(valIdToItems, \n                                       readerFieldToValIds, \n                                       valMismatchKeys));\n    insanity.addAll(checkSubreaders(valIdToItems, \n                                    readerFieldToValIds));\n                    \n    return insanity.toArray(new Insanity[insanity.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["dd6c9e9b1251473f465b0443b56046b2658402da"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"56572ec06f1407c066d6b7399413178b33176cd8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd6c9e9b1251473f465b0443b56046b2658402da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dd6c9e9b1251473f465b0443b56046b2658402da":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}