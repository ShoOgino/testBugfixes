{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** Expert: prepare for commit.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit(Map) */\n  public final void prepareCommit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    prepareCommit(null);\n  }\n\n","sourceOld":"  /** Expert: prepare for commit.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit(Map) */\n  public final void prepareCommit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    prepareCommit(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** Expert: prepare for commit.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit(Map) */\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommit(null);\n  }\n\n","sourceOld":"  /** Expert: prepare for commit.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit(Map) */\n  public final void prepareCommit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    prepareCommit(null);\n  }\n\n","bugFix":["455aeff4fef915340c5b19d71d5e147034e83093"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** Expert: prepare for commit.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit(Map) */\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommit(null);\n  }\n\n","sourceOld":"  /** Expert: prepare for commit.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit(Map) */\n  public final void prepareCommit() throws CorruptIndexException, IOException {\n    ensureOpen();\n    prepareCommit(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b47e1512544568a22b82c96169d466fae8a4b79e","date":1354519309,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal();\n  }\n\n","sourceOld":"  /** Expert: prepare for commit.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit(Map) */\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommit(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal();\n  }\n\n","sourceOld":"  /** Expert: prepare for commit.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @see #prepareCommit(Map) */\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommit(null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal();\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal();\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee59f646cf24586a449cad77391a60a3ac8d8959","date":1408015131,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"949847c0040cd70a68222d526cb0da7bf6cbb3c2","date":1410997182,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal(config.getMergePolicy());\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   *  <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   *  you should immediately close the writer.  See <a\n   *  href=\"#OOME\">above</a> for details.</p>\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f492fe129985750df09c8dac738aecc503158bb3","date":1464099630,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":["ddaef9c801f985de924507f0cceea9786b55ac1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16ebfabc294f23b88b6a39722a02c9d39b353195","date":1464343867,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19d35c01593b75b98b751866e41b1b24983ff42e","date":1464861489,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   */\n  @Override\n  public final void prepareCommit() throws IOException {\n    ensureOpen();\n    prepareCommitInternal(config.getMergePolicy());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddaef9c801f985de924507f0cceea9786b55ac1f","date":1481326890,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    boolean[] doMaybeMerge = new boolean[1];\n    pendingSeqNo = prepareCommitInternal(doMaybeMerge);\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","bugFix":["f492fe129985750df09c8dac738aecc503158bb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    boolean[] doMaybeMerge = new boolean[1];\n    pendingSeqNo = prepareCommitInternal(doMaybeMerge);\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal(config.getMergePolicy());\n    return pendingSeqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal();\n    // we must do this outside of the commitLock else we can deadlock:\n    if (maybeMerge.getAndSet(false)) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    boolean[] doMaybeMerge = new boolean[1];\n    pendingSeqNo = prepareCommitInternal(doMaybeMerge);\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    return pendingSeqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal();\n    // we must do this outside of the commitLock else we can deadlock:\n    if (maybeMerge.getAndSet(false)) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    boolean[] doMaybeMerge = new boolean[1];\n    pendingSeqNo = prepareCommitInternal(doMaybeMerge);\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    return pendingSeqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#prepareCommit().mjava","sourceNew":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    pendingSeqNo = prepareCommitInternal();\n    // we must do this outside of the commitLock else we can deadlock:\n    if (maybeMerge.getAndSet(false)) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    return pendingSeqNo;\n  }\n\n","sourceOld":"  /** <p>Expert: prepare for commit.  This does the\n   *  first phase of 2-phase commit. This method does all\n   *  steps necessary to commit changes since this writer\n   *  was opened: flushes pending added and deleted docs,\n   *  syncs the index files, writes most of next segments_N\n   *  file.  After calling this you must call either {@link\n   *  #commit()} to finish the commit, or {@link\n   *  #rollback()} to revert the commit and undo all changes\n   *  done since the writer was opened.</p>\n   *\n   * <p>You can also just call {@link #commit()} directly\n   *  without prepareCommit first in which case that method\n   *  will internally call prepareCommit.\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * of the last operation in the commit.  All sequence numbers &lt;= this value\n   * will be reflected in the commit, and all others will not.\n   */\n  @Override\n  public final long prepareCommit() throws IOException {\n    ensureOpen();\n    boolean[] doMaybeMerge = new boolean[1];\n    pendingSeqNo = prepareCommitInternal(doMaybeMerge);\n    // we must do this outside of the commitLock else we can deadlock:\n    if (doMaybeMerge[0]) {\n      maybeMerge(config.getMergePolicy(), MergeTrigger.FULL_FLUSH, UNBOUNDED_MAX_MERGE_SEGMENTS);      \n    }\n    return pendingSeqNo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"ee59f646cf24586a449cad77391a60a3ac8d8959":["7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["ddaef9c801f985de924507f0cceea9786b55ac1f"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","b47e1512544568a22b82c96169d466fae8a4b79e"],"6483e4260c08168709c02238ae083a51519a28dd":["949847c0040cd70a68222d526cb0da7bf6cbb3c2","19d35c01593b75b98b751866e41b1b24983ff42e"],"ddaef9c801f985de924507f0cceea9786b55ac1f":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["949847c0040cd70a68222d526cb0da7bf6cbb3c2","6483e4260c08168709c02238ae083a51519a28dd"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["f492fe129985750df09c8dac738aecc503158bb3"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["ddaef9c801f985de924507f0cceea9786b55ac1f","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"19d35c01593b75b98b751866e41b1b24983ff42e":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"28288370235ed02234a64753cdbf0c6ec096304a":["ddaef9c801f985de924507f0cceea9786b55ac1f","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["949847c0040cd70a68222d526cb0da7bf6cbb3c2","191128ac5b85671b1671e2c857437694283b6ebf"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f492fe129985750df09c8dac738aecc503158bb3":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"b47e1512544568a22b82c96169d466fae8a4b79e":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ddaef9c801f985de924507f0cceea9786b55ac1f"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["ee59f646cf24586a449cad77391a60a3ac8d8959"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b47e1512544568a22b82c96169d466fae8a4b79e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"ee59f646cf24586a449cad77391a60a3ac8d8959":["949847c0040cd70a68222d526cb0da7bf6cbb3c2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"ddaef9c801f985de924507f0cceea9786b55ac1f":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","9856095f7afb5a607bf5e65077615ed91273508c"],"191128ac5b85671b1671e2c857437694283b6ebf":["ddaef9c801f985de924507f0cceea9786b55ac1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["19d35c01593b75b98b751866e41b1b24983ff42e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"19d35c01593b75b98b751866e41b1b24983ff42e":["6483e4260c08168709c02238ae083a51519a28dd"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f492fe129985750df09c8dac738aecc503158bb3":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"b47e1512544568a22b82c96169d466fae8a4b79e":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["407687e67faf6e1f02a211ca078d8e3eed631027","fe33227f6805edab2036cbb80645cc4e2d1fa424","b47e1512544568a22b82c96169d466fae8a4b79e"],"949847c0040cd70a68222d526cb0da7bf6cbb3c2":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f492fe129985750df09c8dac738aecc503158bb3"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ee59f646cf24586a449cad77391a60a3ac8d8959"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","fe33227f6805edab2036cbb80645cc4e2d1fa424","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}