{"path":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @returns the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9958bbeb151c7cb0d46b0c3007a6089c89b27e","date":1013651191,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create);\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @returns the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200","date":1025021355,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create);\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   * \n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   * \n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6bd70b660528bcf8dd3216ea1f7565ac220a20","date":1156813990,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(path, create, null);\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284c1d3c8b19931bf6f312fae7470487f5d9e580","date":1163805527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create, null, true);\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(path, create, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","sourceNew":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use IndexWriter's create flag, instead, to\n   * create a new index.\n   *\n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create);\n  }\n\n","sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * <p>Directories are cached, so that, for a given canonical path, the same\n   * FSDirectory instance will always be returned.  This permits\n   * synchronization on directories.\n   *\n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create, null, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/store/FSDirectory#getDirectory(String,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns the directory instance for the named location.\n   *\n   * @deprecated Use IndexWriter's create flag, instead, to\n   * create a new index.\n   *\n   * @param path the path to the directory.\n   * @param create if true, create, or erase any existing contents.\n   * @return the FSDirectory for the named file.  */\n  public static FSDirectory getDirectory(String path, boolean create)\n      throws IOException {\n    return getDirectory(new File(path), create);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["66b12ba4967665216eeb706b58d424c51fb3641a"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66b12ba4967665216eeb706b58d424c51fb3641a":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9958bbeb151c7cb0d46b0c3007a6089c89b27e":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200":["bb9958bbeb151c7cb0d46b0c3007a6089c89b27e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c6bd70b660528bcf8dd3216ea1f7565ac220a20":["284c1d3c8b19931bf6f312fae7470487f5d9e580"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["bb9958bbeb151c7cb0d46b0c3007a6089c89b27e"],"66b12ba4967665216eeb706b58d424c51fb3641a":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"284c1d3c8b19931bf6f312fae7470487f5d9e580":["66b12ba4967665216eeb706b58d424c51fb3641a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"bb9958bbeb151c7cb0d46b0c3007a6089c89b27e":["933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200"],"933bbf7d94f9fe21e6a6f126ac9d8b4b00a62200":["5c6bd70b660528bcf8dd3216ea1f7565ac220a20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}