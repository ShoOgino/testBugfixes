{"path":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EstonianStemmer#r_special_noun_endings().mjava","commits":[{"id":"17179e279d9dc93c4d5942f92dac2e525838d160","date":1561853575,"type":0,"author":"Gert Morten Paimla","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EstonianStemmer#r_special_noun_endings().mjava","pathOld":"/dev/null","sourceNew":"    private boolean r_special_noun_endings() {\n        int among_var;\n        int v_1;\n        int v_2;\n        // (, line 91\n        // setlimit, line 92\n        v_1 = limit - cursor;\n        // tomark, line 92\n        if (cursor < I_p1)\n        {\n            return false;\n        }\n        cursor = I_p1;\n        v_2 = limit_backward;\n        limit_backward = cursor;\n        cursor = limit - v_1;\n        // (, line 92\n        // [, line 92\n        ket = cursor;\n        // substring, line 92\n        among_var = find_among_b(a_4, 12);\n        if (among_var == 0)\n        {\n            limit_backward = v_2;\n            return false;\n        }\n        // ], line 92\n        bra = cursor;\n        limit_backward = v_2;\n        switch(among_var) {\n            case 0:\n                return false;\n            case 1:\n                // (, line 94\n                // <-, line 94\n                slice_from(\"lase\");\n                break;\n            case 2:\n                // (, line 95\n                // <-, line 95\n                slice_from(\"lase\");\n                break;\n            case 3:\n                // (, line 96\n                // <-, line 96\n                slice_from(\"lase\");\n                break;\n            case 4:\n                // (, line 97\n                // <-, line 97\n                slice_from(\"lase\");\n                break;\n            case 5:\n                // (, line 98\n                // <-, line 98\n                slice_from(\"mise\");\n                break;\n            case 6:\n                // (, line 99\n                // <-, line 99\n                slice_from(\"mise\");\n                break;\n            case 7:\n                // (, line 100\n                // <-, line 100\n                slice_from(\"mise\");\n                break;\n            case 8:\n                // (, line 101\n                // <-, line 101\n                slice_from(\"mise\");\n                break;\n            case 9:\n                // (, line 102\n                // <-, line 102\n                slice_from(\"lise\");\n                break;\n            case 10:\n                // (, line 103\n                // <-, line 103\n                slice_from(\"lise\");\n                break;\n            case 11:\n                // (, line 104\n                // <-, line 104\n                slice_from(\"lise\");\n                break;\n            case 12:\n                // (, line 105\n                // <-, line 105\n                slice_from(\"lise\");\n                break;\n        }\n        return true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09479cd2de06c67a115b7346a8e5de8af4d62e81","date":1581961081,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EstonianStemmer#r_special_noun_endings().mjava","pathOld":"lucene/analysis/common/src/java/org/tartarus/snowball/ext/EstonianStemmer#r_special_noun_endings().mjava","sourceNew":"private boolean r_special_noun_endings() {\n  int among_var;\n  if (cursor < I_p1)\n  {\n    return false;\n  }\n  int v_2 = limit_backward;\n  limit_backward = I_p1;\n  ket = cursor;\n  among_var = find_among_b(a_4);\n  if (among_var == 0)\n  {\n    limit_backward = v_2;\n    return false;\n  }\n  bra = cursor;\n  limit_backward = v_2;\n  switch (among_var) {\n    case 1:\n      slice_from(\"lase\");\n      break;\n    case 2:\n      slice_from(\"mise\");\n      break;\n    case 3:\n      slice_from(\"lise\");\n      break;\n  }\n  return true;\n}\n\n","sourceOld":"    private boolean r_special_noun_endings() {\n        int among_var;\n        int v_1;\n        int v_2;\n        // (, line 91\n        // setlimit, line 92\n        v_1 = limit - cursor;\n        // tomark, line 92\n        if (cursor < I_p1)\n        {\n            return false;\n        }\n        cursor = I_p1;\n        v_2 = limit_backward;\n        limit_backward = cursor;\n        cursor = limit - v_1;\n        // (, line 92\n        // [, line 92\n        ket = cursor;\n        // substring, line 92\n        among_var = find_among_b(a_4, 12);\n        if (among_var == 0)\n        {\n            limit_backward = v_2;\n            return false;\n        }\n        // ], line 92\n        bra = cursor;\n        limit_backward = v_2;\n        switch(among_var) {\n            case 0:\n                return false;\n            case 1:\n                // (, line 94\n                // <-, line 94\n                slice_from(\"lase\");\n                break;\n            case 2:\n                // (, line 95\n                // <-, line 95\n                slice_from(\"lase\");\n                break;\n            case 3:\n                // (, line 96\n                // <-, line 96\n                slice_from(\"lase\");\n                break;\n            case 4:\n                // (, line 97\n                // <-, line 97\n                slice_from(\"lase\");\n                break;\n            case 5:\n                // (, line 98\n                // <-, line 98\n                slice_from(\"mise\");\n                break;\n            case 6:\n                // (, line 99\n                // <-, line 99\n                slice_from(\"mise\");\n                break;\n            case 7:\n                // (, line 100\n                // <-, line 100\n                slice_from(\"mise\");\n                break;\n            case 8:\n                // (, line 101\n                // <-, line 101\n                slice_from(\"mise\");\n                break;\n            case 9:\n                // (, line 102\n                // <-, line 102\n                slice_from(\"lise\");\n                break;\n            case 10:\n                // (, line 103\n                // <-, line 103\n                slice_from(\"lise\");\n                break;\n            case 11:\n                // (, line 104\n                // <-, line 104\n                slice_from(\"lise\");\n                break;\n            case 12:\n                // (, line 105\n                // <-, line 105\n                slice_from(\"lise\");\n                break;\n        }\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17179e279d9dc93c4d5942f92dac2e525838d160":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["17179e279d9dc93c4d5942f92dac2e525838d160"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09479cd2de06c67a115b7346a8e5de8af4d62e81"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17179e279d9dc93c4d5942f92dac2e525838d160"],"17179e279d9dc93c4d5942f92dac2e525838d160":["09479cd2de06c67a115b7346a8e5de8af4d62e81"],"09479cd2de06c67a115b7346a8e5de8af4d62e81":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}