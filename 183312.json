{"path":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","commits":[{"id":"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","date":1442407411,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    SpanPayloadCheckQuery other = (SpanPayloadCheckQuery)o;\n    return this.payloadToMatch.equals(other.payloadToMatch);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    SpanPayloadCheckQuery other = (SpanPayloadCheckQuery)o;\n    return this.payloadToMatch.equals(other.payloadToMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           payloadToMatch.equals(((SpanPayloadCheckQuery) other).payloadToMatch);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    SpanPayloadCheckQuery other = (SpanPayloadCheckQuery)o;\n    return this.payloadToMatch.equals(other.payloadToMatch);\n  }\n\n","bugFix":null,"bugIntro":["9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           payloadToMatch.equals(((SpanPayloadCheckQuery) other).payloadToMatch);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (! super.equals(o)) {\n      return false;\n    }\n    SpanPayloadCheckQuery other = (SpanPayloadCheckQuery)o;\n    return this.payloadToMatch.equals(other.payloadToMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edefb5aa2f5e63eb483c128a8ee99c939fdf041d","date":1493251532,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           payloadToMatch.equals(((SpanPayloadCheckQuery) other).payloadToMatch) &&\n           match.equals(((SpanPayloadCheckQuery) other).match);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           payloadToMatch.equals(((SpanPayloadCheckQuery) other).payloadToMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ad966686d8994b78aff2375da1a0583bf0cf5ee","date":1493322197,"type":3,"author":"Erik Hatcher","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           payloadToMatch.equals(((SpanPayloadCheckQuery) other).payloadToMatch) &&\n           match.equals(((SpanPayloadCheckQuery) other).match);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           payloadToMatch.equals(((SpanPayloadCheckQuery) other).payloadToMatch);\n  }\n\n","bugFix":["0e7bc21595222ae4f75509300fbb7726691f387f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/payloads/SpanPayloadCheckQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           payloadToMatch.equals(((SpanPayloadCheckQuery) other).payloadToMatch) &&\n           match.equals(((SpanPayloadCheckQuery) other).match);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object other) {\n    return sameClassAs(other) &&\n           payloadToMatch.equals(((SpanPayloadCheckQuery) other).payloadToMatch);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["0e7bc21595222ae4f75509300fbb7726691f387f","9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"edefb5aa2f5e63eb483c128a8ee99c939fdf041d":["0e7bc21595222ae4f75509300fbb7726691f387f"],"9ad966686d8994b78aff2375da1a0583bf0cf5ee":["0e7bc21595222ae4f75509300fbb7726691f387f","edefb5aa2f5e63eb483c128a8ee99c939fdf041d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ad966686d8994b78aff2375da1a0583bf0cf5ee"]},"commit2Childs":{"eeab49258a6aca6c7e96aaf189f1794fe6ddebe4":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eeab49258a6aca6c7e96aaf189f1794fe6ddebe4"],"0e7bc21595222ae4f75509300fbb7726691f387f":["e9017cf144952056066919f1ebc7897ff9bd71b1","edefb5aa2f5e63eb483c128a8ee99c939fdf041d","9ad966686d8994b78aff2375da1a0583bf0cf5ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"edefb5aa2f5e63eb483c128a8ee99c939fdf041d":["9ad966686d8994b78aff2375da1a0583bf0cf5ee"],"9ad966686d8994b78aff2375da1a0583bf0cf5ee":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}