{"path":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/original/TestQueryParserWrapper#testLocalDateFormat().mjava","sourceNew":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","sourceOld":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","sourceNew":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","sourceOld":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ced3401b9c4e7ed2be67711dbc83e48b81aa736","date":1265394056,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","sourceNew":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","sourceOld":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","sourceNew":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","sourceOld":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","pathOld":"contrib/queryparser/src/test/org/apache/lucene/queryParser/standard/TestQueryParserWrapper#testLocalDateFormat().mjava","sourceNew":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","sourceOld":"  public void testLocalDateFormat() throws IOException, ParseException {\n\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter iw = new IndexWriter(ramDir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true,\n        IndexWriter.MaxFieldLength.LIMITED);\n    addDateDoc(\"a\", 2005, 12, 2, 10, 15, 33, iw);\n    addDateDoc(\"b\", 2005, 12, 4, 22, 15, 00, iw);\n    iw.close();\n    IndexSearcher is = new IndexSearcher(ramDir, true);\n    assertHits(1, \"[12/1/2005 TO 12/3/2005]\", is);\n    assertHits(2, \"[12/1/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"[12/3/2005 TO 12/4/2005]\", is);\n    assertHits(1, \"{12/1/2005 TO 12/3/2005}\", is);\n    assertHits(1, \"{12/1/2005 TO 12/4/2005}\", is);\n    assertHits(0, \"{12/3/2005 TO 12/4/2005}\", is);\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["e8a848e758754282137f42bf85793c278e250390"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["4256bc1b3c94786287ccdfc751230374521843cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"6ced3401b9c4e7ed2be67711dbc83e48b81aa736":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"4256bc1b3c94786287ccdfc751230374521843cf":["6ced3401b9c4e7ed2be67711dbc83e48b81aa736"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}