{"path":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,String,float).mjava","commits":[{"id":"5f900d5ce814fc22ea498d3303d1f833f5bf320c","date":1278720761,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,String,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0","fd6ef1120d3887d6a8783b5506c8fea3ddf707f0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,String,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"292ece8c0acfbfc6126153b17f0c3ca809add4f0","date":1300388028,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,Object,float).mjava","pathOld":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Fieldable[] createFields(SchemaField field, Object value, float boost) {\n    String externalVal = value.toString();\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,String,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/schema/LatLonType#createFields(SchemaField,String,float).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Fieldable[] createFields(SchemaField field, String externalVal, float boost) {\n    //we could have tileDiff + 3 fields (two for the lat/lon, one for storage)\n    Fieldable[] f = new Fieldable[(field.indexed() ? 2 : 0) + (field.stored() ? 1 : 0)];\n    if (field.indexed()) {\n      int i = 0;\n      double[] latLon = new double[0];\n      try {\n        latLon = DistanceUtils.parseLatitudeLongitude(null, externalVal);\n      } catch (InvalidGeoException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      //latitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LAT]), boost);\n      i++;\n      //longitude\n      f[i] = subField(field, i).createField(String.valueOf(latLon[LONG]), boost);\n\n    }\n\n    if (field.stored()) {\n      f[f.length - 1] = createField(field.getName(), externalVal,\n              getFieldStore(field, externalVal), Field.Index.NO, Field.TermVector.NO,\n              false, false, boost);\n    }\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["5f4e87790277826a2aea119328600dfb07761f32","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["5f900d5ce814fc22ea498d3303d1f833f5bf320c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["292ece8c0acfbfc6126153b17f0c3ca809add4f0"]},"commit2Childs":{"5f900d5ce814fc22ea498d3303d1f833f5bf320c":["d619839baa8ce5503e496b94a9e42ad6f079293f","5f4e87790277826a2aea119328600dfb07761f32","292ece8c0acfbfc6126153b17f0c3ca809add4f0"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f900d5ce814fc22ea498d3303d1f833f5bf320c","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"292ece8c0acfbfc6126153b17f0c3ca809add4f0":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}