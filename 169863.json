{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(new Field(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(new Field(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newInOrderLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newInOrderLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newInOrderLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n        OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newInOrderLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newInOrderLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newInOrderLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newInOrderLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED));\n          doc.add(newField(\"id2\", i+\"_\"+j, Store.YES, Index.NOT_ANALYZED_NO_NORMS));\n          doc.add(newField(\"id3\", i+\"_\"+j, Store.YES, Index.NO));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = IndexReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = reader.reopen();\n          if (reader != r2) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3","date":1322958335,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = IndexReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = IndexReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = IndexReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = IndexReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = IndexReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir, false);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = IndexReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir, false);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          DirectoryReader r2 = DirectoryReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = DirectoryReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = IndexReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          DirectoryReader r2 = DirectoryReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = DirectoryReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    IndexReader reader = IndexReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          IndexReader r2 = IndexReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = IndexReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReaderReopen#doTestReopenWithCommit(Random,Directory,boolean).mjava","sourceNew":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          DirectoryReader r2 = DirectoryReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = DirectoryReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","sourceOld":"  private void doTestReopenWithCommit (Random random, Directory dir, boolean withReopen) throws IOException {\n    IndexWriter iwriter = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(\n                                                              OpenMode.CREATE).setMergeScheduler(new SerialMergeScheduler()).setMergePolicy(newLogMergePolicy()));\n    iwriter.commit();\n    DirectoryReader reader = DirectoryReader.open(dir);\n    try {\n      int M = 3;\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setTokenized(false);\n      FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n      customType2.setTokenized(false);\n      customType2.setOmitNorms(true);\n      FieldType customType3 = new FieldType();\n      customType3.setStored(true);\n      for (int i=0; i<4; i++) {\n        for (int j=0; j<M; j++) {\n          Document doc = new Document();\n          doc.add(newField(\"id\", i+\"_\"+j, customType));\n          doc.add(newField(\"id2\", i+\"_\"+j, customType2));\n          doc.add(newField(\"id3\", i+\"_\"+j, customType3));\n          iwriter.addDocument(doc);\n          if (i>0) {\n            int k = i-1;\n            int n = j + k*M;\n            Document prevItereationDoc = reader.document(n);\n            assertNotNull(prevItereationDoc);\n            String id = prevItereationDoc.get(\"id\");\n            assertEquals(k+\"_\"+j, id);\n          }\n        }\n        iwriter.commit();\n        if (withReopen) {\n          // reopen\n          DirectoryReader r2 = DirectoryReader.openIfChanged(reader);\n          if (r2 != null) {\n            reader.close();\n            reader = r2;\n          }\n        } else {\n          // recreate\n          reader.close();\n          reader = DirectoryReader.open(dir);\n        }\n      }\n    } finally {\n      iwriter.close();\n      reader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["8a8259c922a83abc544609227a60d48e5ee93e7e","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","132903c28af3aa6f67284b78de91c0f0a99488c2"],"c19f985e36a65cc969e8e564fe337a0d41512075":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3615ce4a1f785ae1b779244de52c6a7d99227e60","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["c19f985e36a65cc969e8e564fe337a0d41512075"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["8a8259c922a83abc544609227a60d48e5ee93e7e","2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"132903c28af3aa6f67284b78de91c0f0a99488c2":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c19f985e36a65cc969e8e564fe337a0d41512075":["01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"2ec62bd7d903ac435fcc4ad1f5a67ccc5700d9a3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5cab9a86bd67202d20b6adc463008c8e982b070a","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}