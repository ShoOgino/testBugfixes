{"path":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","commits":[{"id":"327863a2fd61e831028b6c56c8fef6b00a44eb0b","date":1302686439,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00afe74a80796ed1f30a9509b150ff104746a1f","date":1312881735,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocumentsWriterDeleteQueue#add(Term,DeleteSlice).mjava","sourceNew":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","sourceOld":"  /**\n   * invariant for document update\n   */\n  void add(Term term, DeleteSlice slice) {\n    final TermNode termNode = new TermNode(term);\n//    System.out.println(Thread.currentThread().getName() + \": push \" + termNode + \" this=\" + this);\n    add(termNode);\n    /*\n     * this is an update request where the term is the updated documents\n     * delTerm. in that case we need to guarantee that this insert is atomic\n     * with regards to the given delete slice. This means if two threads try to\n     * update the same document with in turn the same delTerm one of them must\n     * win. By taking the node we have created for our del term as the new tail\n     * it is guaranteed that if another thread adds the same right after us we\n     * will apply this delete next time we update our slice and one of the two\n     * competing updates wins!\n     */\n    slice.sliceTail = termNode;\n    assert slice.sliceHead != slice.sliceTail : \"slice head and tail must differ after add\";\n    tryApplyGlobalSlice(); // TODO doing this each time is not necessary maybe\n    // we can do it just every n times or so?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c00afe74a80796ed1f30a9509b150ff104746a1f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","327863a2fd61e831028b6c56c8fef6b00a44eb0b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","c00afe74a80796ed1f30a9509b150ff104746a1f"],"327863a2fd61e831028b6c56c8fef6b00a44eb0b":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c00afe74a80796ed1f30a9509b150ff104746a1f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}