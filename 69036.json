{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","sourceNew":"    public float coord(int overlap, int maxOverlap) {\n      return similarity.coord(overlap, maxOverlap);\n    }\n\n","sourceOld":"    public float coord(int overlap, int maxOverlap) {\n      return similarity.coord(overlap, maxOverlap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af549b45614d869371e17e0b5b4ca47535d552c0","date":1344595563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","sourceNew":"    public float coord(int overlap, int maxOverlap) {\n      // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n      // so coord() is not applied. But when BQ cannot optimize itself away\n      // for a single clause (minNrShouldMatch, prohibited clauses, etc), its\n      // important not to apply coord(1,1) for consistency, it might not be 1.0F\n      return maxOverlap == 1 ? 1F : similarity.coord(overlap, maxOverlap);\n    }\n\n","sourceOld":"    public float coord(int overlap, int maxOverlap) {\n      return similarity.coord(overlap, maxOverlap);\n    }\n\n","bugFix":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","sourceNew":"    public float coord(int overlap, int maxOverlap) {\n      // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n      // so coord() is not applied. But when BQ cannot optimize itself away\n      // for a single clause (minNrShouldMatch, prohibited clauses, etc), its\n      // important not to apply coord(1,1) for consistency, it might not be 1.0F\n      return maxOverlap == 1 ? 1F : similarity.coord(overlap, maxOverlap);\n    }\n\n","sourceOld":"    public float coord(int overlap, int maxOverlap) {\n      return similarity.coord(overlap, maxOverlap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","sourceNew":"    public float coord(int overlap, int maxOverlap) {\n      // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n      // so coord() is not applied. But when BQ cannot optimize itself away\n      // for a single clause (minNrShouldMatch, prohibited clauses, etc), its\n      // important not to apply coord(1,1) for consistency, it might not be 1.0F\n      return maxOverlap == 1 ? 1F : similarity.coord(overlap, maxOverlap);\n    }\n\n","sourceOld":"    public float coord(int overlap, int maxOverlap) {\n      return similarity.coord(overlap, maxOverlap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","sourceNew":"    public float coord(int overlap, int maxOverlap) {\n      // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n      // so coord() is not applied. But when BQ cannot optimize itself away\n      // for a single clause (minNrShouldMatch, prohibited clauses, etc), it's\n      // important not to apply coord(1,1) for consistency, it might not be 1.0F\n      return maxOverlap == 1 ? 1F : similarity.coord(overlap, maxOverlap);\n    }\n\n","sourceOld":"    public float coord(int overlap, int maxOverlap) {\n      // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n      // so coord() is not applied. But when BQ cannot optimize itself away\n      // for a single clause (minNrShouldMatch, prohibited clauses, etc), its\n      // important not to apply coord(1,1) for consistency, it might not be 1.0F\n      return maxOverlap == 1 ? 1F : similarity.coord(overlap, maxOverlap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#coord(int,int).mjava","sourceNew":null,"sourceOld":"    public float coord(int overlap, int maxOverlap) {\n      // LUCENE-4300: in most cases of maxOverlap=1, BQ rewrites itself away,\n      // so coord() is not applied. But when BQ cannot optimize itself away\n      // for a single clause (minNrShouldMatch, prohibited clauses, etc), it's\n      // important not to apply coord(1,1) for consistency, it might not be 1.0F\n      return maxOverlap == 1 ? 1F : similarity.coord(overlap, maxOverlap);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["af549b45614d869371e17e0b5b4ca47535d552c0"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","af549b45614d869371e17e0b5b4ca47535d552c0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"af549b45614d869371e17e0b5b4ca47535d552c0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","af549b45614d869371e17e0b5b4ca47535d552c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"]},"commit2Childs":{"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","af549b45614d869371e17e0b5b4ca47535d552c0","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"af549b45614d869371e17e0b5b4ca47535d552c0":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}