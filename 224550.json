{"path":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","commits":[{"id":"f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d","date":1210334686,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.getDirectory(fullPath);\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","date":1243677645,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.getDirectory(fullPath);\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":null,"sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":null,"sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1b736248cf13d8c143d4af78b588926f4151240","date":1254825163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650","date":1254831793,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":null,"sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf","date":1254831905,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"/dev/null","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab50480bb5a7c7abad9762badcf87f8b69efeabe","date":1256591817,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","pathOld":"src/test/org/apache/lucene/index/TestBackwardsCompatibility#testOptimizeOldIndex().mjava","sourceNew":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","sourceOld":"  public void testOptimizeOldIndex() throws IOException {\n    int hasTested29 = 0;\n    \n    for(int i=0;i<oldNames.length;i++) {\n      String dirName = \"src/test/org/apache/lucene/index/index.\" + oldNames[i];\n      unzip(dirName, oldNames[i]);\n      String fullPath = fullDir(oldNames[i]);\n      Directory dir = FSDirectory.open(new File(fullPath));\n\n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, true);\n        hasTested29++;\n      }\n\n      IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n      w.optimize();\n      w.close();\n\n      _TestUtil.checkIndex(dir);\n      \n      if (oldNames[i].startsWith(\"29.\")) {\n        assertCompressedFields29(dir, false);\n        hasTested29++;\n      }\n\n      dir.close();\n      rmDir(oldNames[i]);\n    }\n    \n    assertEquals(\"test for compressed field should have run 4 times\", 4, hasTested29);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"f1b736248cf13d8c143d4af78b588926f4151240":["0a046c0c310bc77931fc8441bd920053b607dd14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["f1b736248cf13d8c143d4af78b588926f4151240"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"ab50480bb5a7c7abad9762badcf87f8b69efeabe":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"f1b736248cf13d8c143d4af78b588926f4151240":["a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650"],"0a046c0c310bc77931fc8441bd920053b607dd14":["f1b736248cf13d8c143d4af78b588926f4151240"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"c5c0bd3bf61809aea862d848dcf2119d3b9c38bf":["ab50480bb5a7c7abad9762badcf87f8b69efeabe"],"a9a4b98263fc6c77bb5eb34f7c3e9fd7542b9650":["c5c0bd3bf61809aea862d848dcf2119d3b9c38bf"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d"],"f4ba1ab90d9a427e7f2c7d1e65a3ce5869ed8e5d":["5309ea37b2a7ec9c5f21c9eeacc9d9fb808cdb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}