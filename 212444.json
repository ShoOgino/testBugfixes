{"path":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","commits":[{"id":"7c5044c9bb1518e7a13c1c5385a21325ae343056","date":1479187798,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Must be called after acquiring markAndSweeoLock\n   */\n  private void markAndSweepByRamSize() {\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      ramBytes.addAndGet(-(kvCacheEntry.ramBytesUsed() + LRUCache.HASHTABLE_RAM_BYTES_PER_ENTRY));\n      if (ramBytes.get() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21019aa828c8c9b0153877543a8b3f200bf2ca19","date":1479224450,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","pathOld":"/dev/null","sourceNew":"  /*\n    Must be called after acquiring markAndSweeoLock\n   */\n  private void markAndSweepByRamSize() {\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      ramBytes.addAndGet(-(kvCacheEntry.ramBytesUsed() + LRUCache.HASHTABLE_RAM_BYTES_PER_ENTRY));\n      if (ramBytes.get() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71ca10e7131e1f01868c80d228f26a855e79dd0","date":1562166223,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","sourceNew":"  /*\n    Must be called after acquiring markAndSweeoLock\n   */\n  private void markAndSweepByRamSize() {\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      if (ramBytes.get() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","sourceOld":"  /*\n    Must be called after acquiring markAndSweeoLock\n   */\n  private void markAndSweepByRamSize() {\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      ramBytes.addAndGet(-(kvCacheEntry.ramBytesUsed() + LRUCache.HASHTABLE_RAM_BYTES_PER_ENTRY));\n      if (ramBytes.get() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","sourceNew":"  /*\n    Must be called after acquiring markAndSweepLock\n   */\n  private void markAndSweepByRamSize() {\n    assert markAndSweepLock.isHeldByCurrentThread() : \"markAndSweepLock held by another thread\";\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      if (ramBytes.get() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","sourceOld":"  /*\n    Must be called after acquiring markAndSweeoLock\n   */\n  private void markAndSweepByRamSize() {\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      if (ramBytes.get() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","sourceNew":"  /*\n    Must be called after acquiring markAndSweepLock\n   */\n  private void markAndSweepByRamSize() {\n    assert markAndSweepLock.isHeldByCurrentThread() : \"markAndSweepLock held by another thread\";\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      if (ramBytes.sum() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","sourceOld":"  /*\n    Must be called after acquiring markAndSweepLock\n   */\n  private void markAndSweepByRamSize() {\n    assert markAndSweepLock.isHeldByCurrentThread() : \"markAndSweepLock held by another thread\";\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      if (ramBytes.get() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLRUCache#markAndSweepByRamSize().mjava","sourceNew":"  /*\n    Must be called after acquiring markAndSweepLock\n   */\n  private void markAndSweepByRamSize() {\n    assert markAndSweepLock.isHeldByCurrentThread() : \"markAndSweepLock held by another thread\";\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      if (ramBytes.sum() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","sourceOld":"  /*\n    Must be called after acquiring markAndSweepLock\n   */\n  private void markAndSweepByRamSize() {\n    assert markAndSweepLock.isHeldByCurrentThread() : \"markAndSweepLock held by another thread\";\n    List<CacheEntry<K, V>> entriesInAccessOrder = new ArrayList<>(map.size());\n    map.forEach((o, kvCacheEntry) -> {\n      kvCacheEntry.lastAccessedCopy = kvCacheEntry.lastAccessed; // important because we want to avoid volatile read during comparisons\n      entriesInAccessOrder.add(kvCacheEntry);\n    });\n\n    Collections.sort(entriesInAccessOrder); // newer access is smaller, older access is bigger\n\n    // iterate in oldest to newest order\n    for (int i = entriesInAccessOrder.size() - 1; i >= 0; i--) {\n      CacheEntry<K, V> kvCacheEntry = entriesInAccessOrder.get(i);\n      evictEntry(kvCacheEntry.key);\n      if (ramBytes.get() <= ramLowerWatermark)  {\n        break; // we are done!\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21019aa828c8c9b0153877543a8b3f200bf2ca19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7c5044c9bb1518e7a13c1c5385a21325ae343056"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["a71ca10e7131e1f01868c80d228f26a855e79dd0"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["7c5044c9bb1518e7a13c1c5385a21325ae343056"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87f0484c38f986062889ed50f3bf3bd462848c26"],"7c5044c9bb1518e7a13c1c5385a21325ae343056":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"21019aa828c8c9b0153877543a8b3f200bf2ca19":[],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21019aa828c8c9b0153877543a8b3f200bf2ca19","7c5044c9bb1518e7a13c1c5385a21325ae343056"],"a71ca10e7131e1f01868c80d228f26a855e79dd0":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"87f0484c38f986062889ed50f3bf3bd462848c26":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"7c5044c9bb1518e7a13c1c5385a21325ae343056":["21019aa828c8c9b0153877543a8b3f200bf2ca19","a71ca10e7131e1f01868c80d228f26a855e79dd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["21019aa828c8c9b0153877543a8b3f200bf2ca19","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}