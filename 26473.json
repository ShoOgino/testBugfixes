{"path":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","commits":[{"id":"afb6bf9ce227ab6aac5068547e286ecc958b8b9d","date":1394661169,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/BaseSchemaResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)\n                && ! RestManager.CONFIG_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null != indent && (\"\".equals(indent) || \"off\".equals(indent))) {\n              doIndent = false;\n            } else {                       // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! \"/schema\".equals(path)) { \n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"106069d345c14ee5c76f0ea76397b02a656f883c","date":1411998064,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)\n                && ! RestManager.CONFIG_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)\n                && ! RestManager.CONFIG_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1c7207d1200ca5f52d4214da9c87a2cb93ce7564"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)\n                && ! RestManager.CONFIG_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)\n                && ! RestManager.CONFIG_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"858c0f62e7b20002e4d94702c510512fb6292988","date":1417427955,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)\n                && ! RestManager.CONFIG_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p/>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = JSON; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = JSON; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = \"json\"; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e3a2e58ed1e5737ee598a96a2ef095036e513de","date":1497305754,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = JSON; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            String updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = Integer.parseInt(updateTimeoutSecsParam);\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = JSON; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"431332290bd53a7347d2e0e1e08dd8fac027d62e","date":1497388745,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = JSON; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = JSON; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            String updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = Integer.parseInt(updateTimeoutSecsParam);\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7207d1200ca5f52d4214da9c87a2cb93ce7564","date":1591903314,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = JSON; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            String updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = Integer.parseInt(updateTimeoutSecsParam);\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = JSON; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            Object updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = (updateTimeoutSecsParam instanceof Number)\n                  ? ((Number) updateTimeoutSecsParam).intValue()\n                  : Integer.parseInt(updateTimeoutSecsParam.toString());\n\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":["106069d345c14ee5c76f0ea76397b02a656f883c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b","date":1601832109,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseSolrResource#doInit().mjava","sourceNew":null,"sourceOld":"  /**\n   * Pulls the SolrQueryRequest constructed in SolrDispatchFilter\n   * from the SolrRequestInfo thread local, then gets the SolrCore\n   * and IndexSchema and sets up the response.\n   * writer.\n   * <p>\n   * If an error occurs during initialization, setExisting(false) is\n   * called and an error status code and message is set; in this case,\n   * Restlet will not continue servicing the request (by calling the\n   * method annotated to associate it with GET, etc., but rather will\n   * send an error response.\n   */\n  @Override\n  public void doInit() throws ResourceException {\n    super.doInit();\n    setNegotiated(false); // Turn off content negotiation for now\n    if (isExisting()) {\n      try {\n        SolrRequestInfo solrRequestInfo = SolrRequestInfo.getRequestInfo();\n        if (null == solrRequestInfo) {\n          final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n          doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n          setExisting(false);\n        } else {\n          solrRequest = solrRequestInfo.getReq();\n          if (null == solrRequest) {\n            final String message = \"No handler or core found in \" + getRequest().getOriginalRef().getPath();\n            doError(Status.CLIENT_ERROR_BAD_REQUEST, message);\n            setExisting(false);\n          } else {\n            solrResponse = solrRequestInfo.getRsp();\n            solrCore = solrRequest.getCore();\n            schema = solrRequest.getSchema();\n            String responseWriterName = solrRequest.getParams().get(CommonParams.WT);\n            if (null == responseWriterName) {\n              responseWriterName = JSON; // Default to json writer\n            }\n            String indent = solrRequest.getParams().get(\"indent\");\n            if (null == indent || ! (\"off\".equals(indent) || \"false\".equals(indent))) {\n              // indent by default\n              ModifiableSolrParams newParams = new ModifiableSolrParams(solrRequest.getParams());\n              newParams.remove(indent);\n              newParams.add(\"indent\", \"on\");\n              solrRequest.setParams(newParams);\n            }\n            responseWriter = solrCore.getQueryResponseWriter(responseWriterName);\n            contentType = responseWriter.getContentType(solrRequest, solrResponse);\n            final String path = getRequest().getRootRef().getPath();\n            if ( ! RestManager.SCHEMA_BASE_PATH.equals(path)) {\n              // don't set webapp property on the request when context and core/collection are excluded \n              final int cutoffPoint = path.indexOf(\"/\", 1);\n              final String firstPathElement = -1 == cutoffPoint ? path : path.substring(0, cutoffPoint);\n              solrRequest.getContext().put(\"webapp\", firstPathElement); // Context path\n            }\n            SolrCore.preDecorateResponse(solrRequest, solrResponse);\n\n            // client application can set a timeout for update requests\n            String updateTimeoutSecsParam = getSolrRequest().getParams().get(UPDATE_TIMEOUT_SECS);\n            if (updateTimeoutSecsParam != null)\n              updateTimeoutSecs = Integer.parseInt(updateTimeoutSecsParam);\n          }\n        }\n      } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError) t;\n        }\n        setExisting(false);\n        throw new ResourceException(t);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e3a2e58ed1e5737ee598a96a2ef095036e513de":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"431332290bd53a7347d2e0e1e08dd8fac027d62e":["1e3a2e58ed1e5737ee598a96a2ef095036e513de"],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"858c0f62e7b20002e4d94702c510512fb6292988":["106069d345c14ee5c76f0ea76397b02a656f883c"],"1c7207d1200ca5f52d4214da9c87a2cb93ce7564":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d","106069d345c14ee5c76f0ea76397b02a656f883c"],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["1c7207d1200ca5f52d4214da9c87a2cb93ce7564"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","1390137e395d2f07f9ba5b8c43d293befe84d563"],"106069d345c14ee5c76f0ea76397b02a656f883c":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["858c0f62e7b20002e4d94702c510512fb6292988"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"]},"commit2Childs":{"1e3a2e58ed1e5737ee598a96a2ef095036e513de":["431332290bd53a7347d2e0e1e08dd8fac027d62e"],"431332290bd53a7347d2e0e1e08dd8fac027d62e":[],"afb6bf9ce227ab6aac5068547e286ecc958b8b9d":["d9a47902d6207303f5ed3e7aaca62ca33433af66","106069d345c14ee5c76f0ea76397b02a656f883c"],"858c0f62e7b20002e4d94702c510512fb6292988":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"1c7207d1200ca5f52d4214da9c87a2cb93ce7564":["89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"89fd5bce15c8e0ca1b10c9988cff9fdcc88c152b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["1e3a2e58ed1e5737ee598a96a2ef095036e513de","1c7207d1200ca5f52d4214da9c87a2cb93ce7564","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["afb6bf9ce227ab6aac5068547e286ecc958b8b9d"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"106069d345c14ee5c76f0ea76397b02a656f883c":["858c0f62e7b20002e4d94702c510512fb6292988","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["431332290bd53a7347d2e0e1e08dd8fac027d62e","d9a47902d6207303f5ed3e7aaca62ca33433af66","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}