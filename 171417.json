{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestProtectedTermFilterFactory#testBogusArguments().mjava","commits":[{"id":"9809bf55e3bf03659b8b93fd16170aaa7eb92012","date":1526860327,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestProtectedTermFilterFactory#testBogusArguments().mjava","pathOld":"/dev/null","sourceNew":"  /** Test that bogus arguments result in exception */\n  public void testBogusArguments() throws Exception {\n    IllegalArgumentException exception = expectThrows(IllegalArgumentException.class, () ->\n      tokenFilterFactory(\"ProtectedTerm\", \"protected\", \"protected-1.txt\", \"bogusArg\", \"bogusValue\"));\n    assertTrue(exception.getMessage().contains(\"Unknown parameters\"));\n\n    // same-named wrapped filters\n    exception = expectThrows(IllegalArgumentException.class, () ->\n        tokenFilterFactory(\"ProtectedTerm\",\n            \"protected\", \"protected-1.txt\", \"wrappedFilters\", \"truncate, truncate\"));\n    assertTrue(exception.getMessage().contains(\"wrappedFilters contains duplicate\"));\n\n    // case-insensitive same-named wrapped filters\n    exception = expectThrows(IllegalArgumentException.class, () ->\n        tokenFilterFactory(\"ProtectedTerm\",\n            \"protected\", \"protected-1.txt\", \"wrappedFilters\", \"TRUNCATE, truncate\"));\n    assertTrue(exception.getMessage().contains(\"wrappedFilters contains duplicate\"));\n\n    // case-insensitive same-named wrapped filter IDs\n    exception = expectThrows(IllegalArgumentException.class, () ->\n        tokenFilterFactory(\"ProtectedTerm\",\n            \"protected\", \"protected-1.txt\", \"wrappedFilters\", \"truncate-ABC, truncate-abc\"));\n    assertTrue(exception.getMessage().contains(\"wrappedFilters contains duplicate\"));\n\n    // mismatched wrapped filter and associated args\n    exception = expectThrows(IllegalArgumentException.class, () ->\n        tokenFilterFactory(\"ProtectedTerm\",\n            \"protected\", \"protected-1.txt\", \"wrappedFilters\", \"truncate-A, reversestring, truncate-B\",\n            \"truncate.prefixLength\", \"3\", \"truncate-A.prefixLength\", \"2\"));\n    assertTrue(exception.getMessage().contains(\"Unknown parameters: {truncate.prefixLength=3}\"));\n\n    // missing required arg(s) for wrapped filter\n    String str = \"Foo Clara Bar David\";\n    TokenStream stream = whitespaceMockTokenizer(str);\n    exception = expectThrows(IllegalArgumentException.class, () ->\n      tokenFilterFactory(\"ProtectedTerm\",\n            \"protected\", \"protected-1.txt\", \"wrappedFilters\", \"length\").create(stream));\n    assertTrue(exception.getMessage().contains(\"Configuration Error: missing parameter\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"]},"commit2Childs":{"9809bf55e3bf03659b8b93fd16170aaa7eb92012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9809bf55e3bf03659b8b93fd16170aaa7eb92012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}