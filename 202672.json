{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrServer#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return server.request(request);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return server.request(request);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return server.request(request);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return server.request(request);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request, collection);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request, collection);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request, collection);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request, collection);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient#request(SolrRequest).mjava","sourceNew":null,"sourceOld":"  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    if (!(request instanceof UpdateRequest)) {\n      return client.request(request);\n    }\n    UpdateRequest req = (UpdateRequest) request;\n\n    // this happens for commit...\n    if (streamDeletes) {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())\n          && (req.getDeleteById() == null || req.getDeleteById().isEmpty())\n          && (req.getDeleteByIdMap() == null || req.getDeleteByIdMap().isEmpty())) {\n        if (req.getDeleteQuery() == null) {\n          blockUntilFinished();\n          return client.request(request);\n        }\n      }\n    } else {\n      if ((req.getDocuments() == null || req.getDocuments().isEmpty())) {\n        blockUntilFinished();\n        return client.request(request);\n      }\n    }\n\n\n    SolrParams params = req.getParams();\n    if (params != null) {\n      // check if it is waiting for the searcher\n      if (params.getBool(UpdateParams.WAIT_SEARCHER, false)) {\n        log.info(\"blocking for commit/optimize\");\n        blockUntilFinished(); // empty the queue\n        return client.request(request);\n      }\n    }\n\n    try {\n      CountDownLatch tmpLock = lock;\n      if (tmpLock != null) {\n        tmpLock.await();\n      }\n\n      boolean success = queue.offer(req);\n\n      for (;;) {\n        synchronized (runners) {\n          // see if queue is half full and we can add more runners\n          // special case: if only using a threadCount of 1 and the queue\n          // is filling up, allow 1 add'l runner to help process the queue\n          if (runners.isEmpty() || (queue.remainingCapacity() < queue.size() && runners.size() < threadCount))\n          {\n            // We need more runners, so start a new one.\n            Runner r = new Runner();\n            runners.add(r);\n            scheduler.execute(r);\n          } else {\n            // break out of the retry loop if we added the element to the queue\n            // successfully, *and*\n            // while we are still holding the runners lock to prevent race\n            // conditions.\n            if (success)\n              break;\n          }\n        }\n\n        // Retry to add to the queue w/o the runners lock held (else we risk\n        // temporary deadlock)\n        // This retry could also fail because\n        // 1) existing runners were not able to take off any new elements in the\n        // queue\n        // 2) the queue was filled back up since our last try\n        // If we succeed, the queue may have been completely emptied, and all\n        // runners stopped.\n        // In all cases, we should loop back to the top to see if we need to\n        // start more runners.\n        //\n        if (!success) {\n          success = queue.offer(req, 100, TimeUnit.MILLISECONDS);\n        }\n      }\n    } catch (InterruptedException e) {\n      log.error(\"interrupted\", e);\n      throw new IOException(e.getLocalizedMessage());\n    }\n\n    // RETURN A DUMMY result\n    NamedList<Object> dummy = new NamedList<>();\n    dummy.add(\"NOTE\", \"the request is processed in a background stream\");\n    return dummy;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}