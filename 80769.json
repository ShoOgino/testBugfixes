{"path":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection().mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void createCollection() throws Exception {\n\n    final String collectionName = testName.getMethodName();\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n    \n    final Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-sortingmergepolicyfactory.xml\");\n    \n    CollectionAdminRequest.Create cmd = \n      CollectionAdminRequest.createCollection(collectionName, configName,\n                                              NUM_SHARDS, REPLICATION_FACTOR)\n      .setProperties(collectionProperties);\n\n    if (random().nextBoolean()) {\n      assertTrue( cmd.process(cloudSolrClient).isSuccess() );\n    } else { // async\n      assertEquals(RequestStatusState.COMPLETED, cmd.processAndWait(cloudSolrClient, 30));\n    }\n    \n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n    \n    cloudSolrClient.setDefaultCollection(collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void createCollection() throws Exception {\n\n    final String collectionName = testName.getMethodName();\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n    \n    final Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-sortingmergepolicyfactory.xml\");\n    \n    CollectionAdminRequest.Create cmd = \n      CollectionAdminRequest.createCollection(collectionName, configName,\n                                              NUM_SHARDS, REPLICATION_FACTOR)\n      .setProperties(collectionProperties);\n\n    if (random().nextBoolean()) {\n      assertTrue( cmd.process(cloudSolrClient).isSuccess() );\n    } else { // async\n      assertEquals(RequestStatusState.COMPLETED, cmd.processAndWait(cloudSolrClient, 30));\n    }\n    \n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n    \n    cloudSolrClient.setDefaultCollection(collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSegmentSorting#createCollection().mjava","sourceNew":"  @Before\n  public void createCollection() throws Exception {\n\n    final String collectionName = testName.getMethodName();\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n    \n    final Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-sortingmergepolicyfactory.xml\");\n    \n    CollectionAdminRequest.Create cmd = \n      CollectionAdminRequest.createCollection(collectionName, configName,\n                                              NUM_SHARDS, REPLICATION_FACTOR)\n      .setProperties(collectionProperties);\n\n    if (random().nextBoolean()) {\n      assertTrue( cmd.process(cloudSolrClient).isSuccess() );\n    } else { // async\n      assertEquals(RequestStatusState.COMPLETED, cmd.processAndWait(cloudSolrClient, 30));\n    }\n    \n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    cluster.waitForActiveCollection(collectionName, NUM_SHARDS, NUM_SHARDS * REPLICATION_FACTOR);\n    \n    cloudSolrClient.setDefaultCollection(collectionName);\n  }\n\n","sourceOld":"  @Before\n  public void createCollection() throws Exception {\n\n    final String collectionName = testName.getMethodName();\n    final CloudSolrClient cloudSolrClient = cluster.getSolrClient();\n    \n    final Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-sortingmergepolicyfactory.xml\");\n    \n    CollectionAdminRequest.Create cmd = \n      CollectionAdminRequest.createCollection(collectionName, configName,\n                                              NUM_SHARDS, REPLICATION_FACTOR)\n      .setProperties(collectionProperties);\n\n    if (random().nextBoolean()) {\n      assertTrue( cmd.process(cloudSolrClient).isSuccess() );\n    } else { // async\n      assertEquals(RequestStatusState.COMPLETED, cmd.processAndWait(cloudSolrClient, 30));\n    }\n    \n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(collectionName, zkStateReader, true, true, 330);\n    \n    cloudSolrClient.setDefaultCollection(collectionName);\n  }\n\n","bugFix":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}