{"path":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","sourceNew":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","sourceOld":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55110eb60c5105294fc2ae7912d82b750865aa58","date":1341389822,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","sourceNew":null,"sourceOld":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/PackedReaderIterator#advance(int).mjava","sourceNew":null,"sourceOld":"  public long advance(final int ord) throws IOException{\n    assert ord < valueCount : \"ord must be less than valueCount\";\n    assert ord > position : \"ord must be greater than the current position\";\n    final long bits = (long) bitsPerValue;\n    final int posToSkip = ord - 1 - position;\n    final long bitsToSkip = (bits * (long)posToSkip);\n    if (bitsToSkip < pendingBitsLeft) { // enough bits left - no seek required\n      pendingBitsLeft -= bitsToSkip;\n    } else {\n      final long skip = bitsToSkip-pendingBitsLeft;\n      final long closestByte = (skip >> 6) << 3;\n      if (closestByte != 0) { // need to seek \n        final long filePointer = in.getFilePointer();\n        in.seek(filePointer + closestByte);\n      }\n      pending = in.readLong();\n      pendingBitsLeft = 64 - (int)(skip % 64);\n    }\n    position = ord-1;\n    return next();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55110eb60c5105294fc2ae7912d82b750865aa58":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","55110eb60c5105294fc2ae7912d82b750865aa58"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55110eb60c5105294fc2ae7912d82b750865aa58"]},"commit2Childs":{"55110eb60c5105294fc2ae7912d82b750865aa58":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["55110eb60c5105294fc2ae7912d82b750865aa58","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}