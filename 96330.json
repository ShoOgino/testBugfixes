{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c7c5f2319949ba567dd867f78f86ea8ff0f1476","date":1375469665,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, current.output.offset, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        postingsSpare.bytes = current.output.bytes;\n        postingsSpare.offset = buffer.getPosition();\n        postingsSpare.length = current.output.length - (buffer.getPosition() - current.output.offset);\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, current.output.offset, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        postingsSpare.bytes = current.output.bytes;\n        postingsSpare.offset = buffer.getPosition();\n        postingsSpare.length = current.output.length - (buffer.getPosition() - current.output.offset);\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, 0, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        current.output.offset = buffer.getPosition();\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, current.output.offset, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        postingsSpare.bytes = current.output.bytes;\n        postingsSpare.offset = buffer.getPosition();\n        postingsSpare.length = current.output.length - (buffer.getPosition() - current.output.offset);\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, current.output.offset, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        postingsSpare.bytes = current.output.bytes;\n        postingsSpare.offset = buffer.getPosition();\n        postingsSpare.length = current.output.length - (buffer.getPosition() - current.output.offset);\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"086ffe31d8fba0110227db122974163709ecc1b4","date":1509678141,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, current.output.offset, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() == IndexOptions.DOCS) {\n          totalTermFreq = docFreq;\n        } else {\n          totalTermFreq = docFreq + buffer.readVLong();\n        }\n        postingsSpare.bytes = current.output.bytes;\n        postingsSpare.offset = buffer.getPosition();\n        postingsSpare.length = current.output.length - (buffer.getPosition() - current.output.offset);\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, current.output.offset, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        postingsSpare.bytes = current.output.bytes;\n        postingsSpare.offset = buffer.getPosition();\n        postingsSpare.length = current.output.length - (buffer.getPosition() - current.output.offset);\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, current.output.offset, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() == IndexOptions.DOCS) {\n          totalTermFreq = docFreq;\n        } else {\n          totalTermFreq = docFreq + buffer.readVLong();\n        }\n        postingsSpare.bytes = current.output.bytes;\n        postingsSpare.offset = buffer.getPosition();\n        postingsSpare.length = current.output.length - (buffer.getPosition() - current.output.offset);\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","sourceOld":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, current.output.offset, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() != IndexOptions.DOCS) {\n          totalTermFreq = docFreq + buffer.readVLong();\n        } else {\n          totalTermFreq = -1;\n        }\n        postingsSpare.bytes = current.output.bytes;\n        postingsSpare.offset = buffer.getPosition();\n        postingsSpare.length = current.output.length - (buffer.getPosition() - current.output.offset);\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24f89e8a6aac05753cde4c83d62a74356098200d","date":1525768331,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#decodeMetaData().mjava","sourceNew":null,"sourceOld":"    private void decodeMetaData() {\n      if (!didDecode) {\n        buffer.reset(current.output.bytes, current.output.offset, current.output.length);\n        docFreq = buffer.readVInt();\n        if (field.getIndexOptions() == IndexOptions.DOCS) {\n          totalTermFreq = docFreq;\n        } else {\n          totalTermFreq = docFreq + buffer.readVLong();\n        }\n        postingsSpare.bytes = current.output.bytes;\n        postingsSpare.offset = buffer.getPosition();\n        postingsSpare.length = current.output.length - (buffer.getPosition() - current.output.offset);\n        //System.out.println(\"  df=\" + docFreq + \" totTF=\" + totalTermFreq + \" offset=\" + buffer.getPosition() + \" len=\" + current.output.length);\n        didDecode = true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"086ffe31d8fba0110227db122974163709ecc1b4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["2bb2842e561df4e8e9ad89010605fc86ac265465","086ffe31d8fba0110227db122974163709ecc1b4"],"24f89e8a6aac05753cde4c83d62a74356098200d":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24f89e8a6aac05753cde4c83d62a74356098200d"]},"commit2Childs":{"086ffe31d8fba0110227db122974163709ecc1b4":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["24f89e8a6aac05753cde4c83d62a74356098200d"],"24f89e8a6aac05753cde4c83d62a74356098200d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3c7c5f2319949ba567dd867f78f86ea8ff0f1476":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["3c7c5f2319949ba567dd867f78f86ea8ff0f1476","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"2bb2842e561df4e8e9ad89010605fc86ac265465":["086ffe31d8fba0110227db122974163709ecc1b4","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}