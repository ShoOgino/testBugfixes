{"path":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","commits":[{"id":"c5892bdf887aeb6dcc06096dd9b4a7363513eff7","date":1327699677,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7","date":1327763052,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testNaNInf().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testNaNInf() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9926a3b6bdadc8e8a8c97721ce4d60dd3431634b","date":1338838491,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","date":1474893506,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testTypes().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testTypes().mjava","sourceNew":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testTypes() throws IOException {\n    SolrQueryRequest req = req(\"dummy\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    QueryResponseWriter w = new PythonResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    rsp.add(\"data1\", Float.NaN);\n    rsp.add(\"data2\", Double.NEGATIVE_INFINITY);\n    rsp.add(\"data3\", Float.POSITIVE_INFINITY);\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}\");\n\n    w = new RubyResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}\");\n\n    w = new JSONResponseWriter();\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    jsonEq(buf.toString(), \"{\\\"data1\\\":\\\"NaN\\\",\\\"data2\\\":\\\"-Infinity\\\",\\\"data3\\\":\\\"Infinity\\\"}\");\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["9926a3b6bdadc8e8a8c97721ce4d60dd3431634b"],"c5892bdf887aeb6dcc06096dd9b4a7363513eff7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9926a3b6bdadc8e8a8c97721ce4d60dd3431634b","b564b6c464f1c4b1f8e676b2b9b1558c34634b3a"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"9926a3b6bdadc8e8a8c97721ce4d60dd3431634b":["c5892bdf887aeb6dcc06096dd9b4a7363513eff7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9926a3b6bdadc8e8a8c97721ce4d60dd3431634b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5892bdf887aeb6dcc06096dd9b4a7363513eff7"]},"commit2Childs":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c5892bdf887aeb6dcc06096dd9b4a7363513eff7":["fd92b8bcc88e969302510acf77bd6970da3994c4","9926a3b6bdadc8e8a8c97721ce4d60dd3431634b","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5892bdf887aeb6dcc06096dd9b4a7363513eff7","fd92b8bcc88e969302510acf77bd6970da3994c4","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"9926a3b6bdadc8e8a8c97721ce4d60dd3431634b":["b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817","014f4a9c44ade09ba9dc8a50d2690f1303cbfaf7"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}