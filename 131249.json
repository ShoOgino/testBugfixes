{"path":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","commits":[{"id":"19b15db2edd4d6bec35a41e44d8f1afe6384a905","date":1305144174,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(SolrQueryRequest,JSONParser).mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete(SolrQueryRequest req, JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete(SolrQueryRequest,JSONParser).mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete(SolrQueryRequest req, JSONParser js) throws IOException {\n    assertNextEvent( js, JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n    \n    while( true ) {\n      int ev = js.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = js.getString();\n        if( js.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = js.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = js.getString();\n          }\n          else {\n            throw new IOException( \"Unknown key: \"+key+\" [\"+js.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new IOException( \n              \"invalid string: \" + key \n              +\" at [\"+js.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new IOException( \"Missing id or query for delete [\"+js.getPosition()+\"]\" );          \n        }\n        return cmd;\n      }\n      else {\n        throw new IOException( \n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+js.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"/dev/null","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","pathOld":"solr/src/java/org/apache/solr/handler/JsonLoader#parseDelete().mjava","sourceNew":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","sourceOld":"  DeleteUpdateCommand parseDelete() throws IOException {\n    assertNextEvent( JSONParser.OBJECT_START );\n\n    DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n\n    while( true ) {\n      int ev = parser.nextEvent();\n      if( ev == JSONParser.STRING ) {\n        String key = parser.getString();\n        if( parser.wasKey() ) {\n          if( \"id\".equals( key ) ) {\n            cmd.id = parser.getString();\n          }\n          else if( \"query\".equals(key) ) {\n            cmd.query = parser.getString();\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"invalid string: \" + key \n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n      else if( ev == JSONParser.OBJECT_END ) {\n        if( cmd.id == null && cmd.query == null ) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n        }\n        return cmd;\n      }\n      else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            \"Got: \"+JSONParser.getEventString( ev  )\n            +\" at [\"+parser.getPosition()+\"]\" );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"c26f00b574427b55127e869b935845554afde1fa":["19b15db2edd4d6bec35a41e44d8f1afe6384a905","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["19b15db2edd4d6bec35a41e44d8f1afe6384a905"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"19b15db2edd4d6bec35a41e44d8f1afe6384a905":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19b15db2edd4d6bec35a41e44d8f1afe6384a905","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}