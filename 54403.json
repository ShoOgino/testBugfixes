{"path":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","sourceNew":null,"sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98a8a68e6714cb8742c790308b9f5180d63417d4","date":1272554039,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"A\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"3\",  f, \"C\"));\n    assertU(adoc(\"id\", \"4\",  f, \"C\"));\n    assertU(adoc(\"id\", \"5\",  f, \"D\"));\n    assertU(adoc(\"id\", \"6\",  f, \"E\"));\n    assertU(adoc(\"id\", \"7\",  f, \"E\"));\n    assertU(adoc(\"id\", \"8\",  f, \"E\"));\n    assertU(adoc(\"id\", \"9\",  f, \"F\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"G\"));\n    assertU(adoc(\"id\", \"11\", f, \"G\"));\n    assertU(adoc(\"id\", \"12\", f, \"G\"));\n    assertU(adoc(\"id\", \"13\", f, \"G\"));\n    assertU(adoc(\"id\", \"14\", f, \"G\"));\n    assertU(commit());\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacets(String,String...).mjava","sourceNew":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","sourceOld":"  public void doFacets(String f, String... params) {\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n\n    assertQ(\"check counts for unlimited facet\",\n            req(params, \"q\", \"id:[* TO *]\", \"indent\",\"true\"\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[@name='G'][.='5']\"\n            ,pre+\"/int[@name='E'][.='3']\"\n            ,pre+\"/int[@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for facet with generous limit\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"100\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=7]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='C'][.='2']\"\n\n            ,pre+\"/int[@name='A'][.='1']\"\n            ,pre+\"/int[@name='B'][.='1']\"\n            ,pre+\"/int[@name='D'][.='1']\"\n            ,pre+\"/int[@name='F'][.='1']\"\n            );\n\n    assertQ(\"check counts for limited facet\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.limit\", \"2\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            );\n\n   assertQ(\"check offset\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"facet\", \"true\"\n                ,\"facet.offset\", \"1\"\n                ,\"facet.limit\", \"1\"\n                ,\"facet.field\", f\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (don't count in limit)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            ,pre+\"/int[2][@name='E'][.='3']\"\n            ,pre+\"/int[3][@name='A'][.='1']\"\n            ,pre+\"/int[4][@name='B'][.='1']\"\n            ,pre+\"/int[5][@name='D'][.='1']\"\n            ,pre+\"/int[6][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test sorted facet paging with zero (test offset correctness)\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"count\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='D'][.='1']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"0\"\n                ,\"facet.limit\",\"6\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=6]\"\n            ,pre+\"/int[1][@name='A'][.='1']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n            ,pre+\"/int[3][@name='D'][.='1']\"\n            ,pre+\"/int[4][@name='E'][.='3']\"\n            ,pre+\"/int[5][@name='F'][.='1']\"\n            ,pre+\"/int[6][@name='G'][.='5']\"\n            );\n\n   assertQ(\"test facet unsorted paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"1\"\n                ,\"facet.offset\",\"3\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='E'][.='3']\"\n            ,pre+\"/int[2][@name='F'][.='1']\"\n            );\n\n    assertQ(\"test facet unsorted paging, mincount=2\",\n            req(params, \"q\", \"id:[* TO *]\"\n                ,\"fq\",notc\n                ,\"facet\", \"true\"\n                ,\"facet.field\", f\n                ,\"facet.mincount\",\"2\"\n                ,\"facet.offset\",\"1\"\n                ,\"facet.limit\",\"2\"\n                ,\"facet.sort\",\"index\"\n                )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='G'][.='5']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"c26f00b574427b55127e869b935845554afde1fa":["98a8a68e6714cb8742c790308b9f5180d63417d4","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"98a8a68e6714cb8742c790308b9f5180d63417d4":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"98a8a68e6714cb8742c790308b9f5180d63417d4":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}