{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,boolean,int,Collection[BulkScorer],int).mjava","commits":[{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,boolean,int,Collection[BulkScorer],int).mjava","pathOld":"/dev/null","sourceNew":"  BooleanScorer(BooleanWeight weight, boolean disableCoord, int maxCoord, Collection<BulkScorer> scorers, int minShouldMatch) {\n    if (minShouldMatch < 1 || minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be within 1..num_scorers. Got \" + minShouldMatch);\n    }\n    for (int i = 0; i < buckets.length; i++) {\n      buckets[i] = new Bucket();\n    }\n    this.leads = new BulkScorerAndDoc[scorers.size()];\n    this.head = new HeadPriorityQueue(scorers.size() - minShouldMatch + 1);\n    this.tail = new TailPriorityQueue(minShouldMatch - 1);\n    this.minShouldMatch = minShouldMatch;\n    for (BulkScorer scorer : scorers) {\n      final BulkScorerAndDoc evicted = tail.insertWithOverflow(new BulkScorerAndDoc(scorer));\n      if (evicted != null) {\n        head.add(evicted);\n      }\n    }\n    this.cost = cost(scorers, minShouldMatch);\n\n    coordFactors = new float[scorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : weight.coord(i, maxCoord);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513","date":1430308154,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,boolean,int,Collection[BulkScorer],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#BooleanScorer(BooleanWeight,boolean,int,Collection[BulkScorer],int).mjava","sourceNew":"  BooleanScorer(BooleanWeight weight, boolean disableCoord, int maxCoord, Collection<BulkScorer> scorers, int minShouldMatch, boolean needsScores) {\n    if (minShouldMatch < 1 || minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be within 1..num_scorers. Got \" + minShouldMatch);\n    }\n    for (int i = 0; i < buckets.length; i++) {\n      buckets[i] = new Bucket();\n    }\n    this.leads = new BulkScorerAndDoc[scorers.size()];\n    this.head = new HeadPriorityQueue(scorers.size() - minShouldMatch + 1);\n    this.tail = new TailPriorityQueue(minShouldMatch - 1);\n    this.minShouldMatch = minShouldMatch;\n    for (BulkScorer scorer : scorers) {\n      if (needsScores == false) {\n        // OrCollector calls score() all the time so we have to explicitly\n        // disable scoring in order to avoid decoding useless norms\n        scorer = disableScoring(scorer);\n      }\n      final BulkScorerAndDoc evicted = tail.insertWithOverflow(new BulkScorerAndDoc(scorer));\n      if (evicted != null) {\n        head.add(evicted);\n      }\n    }\n    this.cost = cost(scorers, minShouldMatch);\n\n    coordFactors = new float[scorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : weight.coord(i, maxCoord);\n    }\n  }\n\n","sourceOld":"  BooleanScorer(BooleanWeight weight, boolean disableCoord, int maxCoord, Collection<BulkScorer> scorers, int minShouldMatch) {\n    if (minShouldMatch < 1 || minShouldMatch > scorers.size()) {\n      throw new IllegalArgumentException(\"minShouldMatch should be within 1..num_scorers. Got \" + minShouldMatch);\n    }\n    for (int i = 0; i < buckets.length; i++) {\n      buckets[i] = new Bucket();\n    }\n    this.leads = new BulkScorerAndDoc[scorers.size()];\n    this.head = new HeadPriorityQueue(scorers.size() - minShouldMatch + 1);\n    this.tail = new TailPriorityQueue(minShouldMatch - 1);\n    this.minShouldMatch = minShouldMatch;\n    for (BulkScorer scorer : scorers) {\n      final BulkScorerAndDoc evicted = tail.insertWithOverflow(new BulkScorerAndDoc(scorer));\n      if (evicted != null) {\n        head.add(evicted);\n      }\n    }\n    this.cost = cost(scorers, minShouldMatch);\n\n    coordFactors = new float[scorers.size() + 1];\n    for (int i = 0; i < coordFactors.length; i++) {\n      coordFactors[i] = disableCoord ? 1.0f : weight.coord(i, maxCoord);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513"],"9eebe1eb6c118902a9d33eaecaa4cbaf63ae3513":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}