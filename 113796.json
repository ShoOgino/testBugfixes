{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],String,ThrowingRunnable).mjava","commits":[{"id":"125c4452515b4638410e4f89ef7637bc3d784fc8","date":1532392624,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],String,ThrowingRunnable).mjava","pathOld":"/dev/null","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, String noExceptionMessage, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(noExceptionMessage);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d592ac9e6400869a47757802651c715b4e88219","date":1570470117,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],String,ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],String,ThrowingRunnable).mjava","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, String noExceptionMessage, ThrowingRunnable runnable) {\n    final Throwable thrown = _expectThrows(Collections.singletonList(expectedType), runnable);\n    if (expectedType.isInstance(thrown)) {\n      return expectedType.cast(thrown);\n    }\n    if (null == thrown) {\n      throw new AssertionFailedError(noExceptionMessage);\n    }\n    AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + thrown);\n    assertion.initCause(thrown);\n    throw assertion;\n  }\n\n","sourceOld":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, String noExceptionMessage, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(noExceptionMessage);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],String,ThrowingRunnable).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#[T-extends-Throwable]_expectThrows(Class[T],String,ThrowingRunnable).mjava","sourceNew":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, String noExceptionMessage, ThrowingRunnable runnable) {\n    final Throwable thrown = _expectThrows(Collections.singletonList(expectedType), runnable);\n    if (expectedType.isInstance(thrown)) {\n      return expectedType.cast(thrown);\n    }\n    if (null == thrown) {\n      throw new AssertionFailedError(noExceptionMessage);\n    }\n    AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + thrown);\n    assertion.initCause(thrown);\n    throw assertion;\n  }\n\n","sourceOld":"  /** Checks a specific exception class is thrown by the given runnable, and returns it. */\n  public static <T extends Throwable> T expectThrows(Class<T> expectedType, String noExceptionMessage, ThrowingRunnable runnable) {\n    try {\n      runnable.run();\n    } catch (Throwable e) {\n      if (expectedType.isInstance(e)) {\n        return expectedType.cast(e);\n      }\n      AssertionFailedError assertion = new AssertionFailedError(\"Unexpected exception type, expected \" + expectedType.getSimpleName() + \" but got \" + e);\n      assertion.initCause(e);\n      throw assertion;\n    }\n    throw new AssertionFailedError(noExceptionMessage);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d592ac9e6400869a47757802651c715b4e88219":["125c4452515b4638410e4f89ef7637bc3d784fc8"],"125c4452515b4638410e4f89ef7637bc3d784fc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d592ac9e6400869a47757802651c715b4e88219"],"b0b597c65628ca9e73913a07e81691f8229bae35":["125c4452515b4638410e4f89ef7637bc3d784fc8","8d592ac9e6400869a47757802651c715b4e88219"]},"commit2Childs":{"8d592ac9e6400869a47757802651c715b4e88219":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"125c4452515b4638410e4f89ef7637bc3d784fc8":["8d592ac9e6400869a47757802651c715b4e88219","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["125c4452515b4638410e4f89ef7637bc3d784fc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}