{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(byte[],IndexInput,int[],int,IntersectVisitor).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void visitDocValues(byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9f70b31079ec002469ee49df3b8f9bd8d10df23","date":1447755747,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(int[],byte[],IndexInput,int[],int,IntersectVisitor).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDReader#visitDocValues(byte[],IndexInput,int[],int,IntersectVisitor).mjava","sourceNew":"  @Override\n  protected void visitDocValues(int[] commonPrefixLengths, byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    // NOTE: we don't do prefix coding, so we ignore commonPrefixLengths\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void visitDocValues(byte[] scratchPackedValue, IndexInput in, int[] docIDs, int count, IntersectVisitor visitor) throws IOException {\n    assert scratchPackedValue.length == packedBytesLength;\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    for(int i=0;i<count;i++) {\n      readLine(in, scratch);\n      assert startsWith(scratch, BLOCK_VALUE);\n      BytesRef br = SimpleTextUtil.fromBytesRefString(stripPrefix(scratch, BLOCK_VALUE));\n      assert br.length == packedBytesLength;\n      System.arraycopy(br.bytes, br.offset, scratchPackedValue, 0, packedBytesLength);\n      visitor.visit(docIDs[i], scratchPackedValue);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9f70b31079ec002469ee49df3b8f9bd8d10df23":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9f70b31079ec002469ee49df3b8f9bd8d10df23"]},"commit2Childs":{"b9f70b31079ec002469ee49df3b8f9bd8d10df23":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["b9f70b31079ec002469ee49df3b8f9bd8d10df23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}