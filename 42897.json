{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceQuery#testBoundingBoxOpto().mjava","commits":[{"id":"ec60431d008a694828dacb4bc3cda775b6c44a9f","date":1458570843,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceQuery#testBoundingBoxOpto().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoundingBoxOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lon, lat, radius);\n      final GeoRect box1;\n      final GeoRect box2;\n      if (box.crossesDateline()) {\n        box1 = new GeoRect(-180, box.maxLon, box.minLat, box.maxLat);\n        box2 = new GeoRect(box.minLon, 180, box.minLat, box.maxLat);\n      } else {\n        box1 = box;\n        box2 = null;\n      }\n      \n      for (int j = 0; j < 10000; j++) {\n        double lat2 = -90 + 180.0 * random().nextDouble();\n        double lon2 = -180 + 360.0 * random().nextDouble();\n        // if the point is within radius, then it should be in our bounding box\n        if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n          assertTrue(lat >= box.minLat && lat <= box.maxLat);\n          assertTrue(lon >= box1.minLon && lon <= box1.maxLon || (box2 != null && lon >= box2.minLon && lon <= box2.maxLon));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed05bb51ea0663dafe0ae9b600553ef0e851f0e5","date":1458616189,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testBoundingBoxOpto().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceQuery#testBoundingBoxOpto().mjava","sourceNew":"  // similar to testRandomCircleToBBox, but different, less evil, maybe simpler\n  public void testBoundingBoxOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lon, lat, radius);\n      final GeoRect box1;\n      final GeoRect box2;\n      if (box.crossesDateline()) {\n        box1 = new GeoRect(-180, box.maxLon, box.minLat, box.maxLat);\n        box2 = new GeoRect(box.minLon, 180, box.minLat, box.maxLat);\n      } else {\n        box1 = box;\n        box2 = null;\n      }\n      \n      for (int j = 0; j < 10000; j++) {\n        double lat2 = -90 + 180.0 * random().nextDouble();\n        double lon2 = -180 + 360.0 * random().nextDouble();\n        // if the point is within radius, then it should be in our bounding box\n        if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n          assertTrue(lat >= box.minLat && lat <= box.maxLat);\n          assertTrue(lon >= box1.minLon && lon <= box1.maxLon || (box2 != null && lon >= box2.minLon && lon <= box2.maxLon));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBoundingBoxOpto() {\n    for (int i = 0; i < 1000; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n      GeoRect box = GeoUtils.circleToBBox(lon, lat, radius);\n      final GeoRect box1;\n      final GeoRect box2;\n      if (box.crossesDateline()) {\n        box1 = new GeoRect(-180, box.maxLon, box.minLat, box.maxLat);\n        box2 = new GeoRect(box.minLon, 180, box.minLat, box.maxLat);\n      } else {\n        box1 = box;\n        box2 = null;\n      }\n      \n      for (int j = 0; j < 10000; j++) {\n        double lat2 = -90 + 180.0 * random().nextDouble();\n        double lon2 = -180 + 360.0 * random().nextDouble();\n        // if the point is within radius, then it should be in our bounding box\n        if (SloppyMath.haversinMeters(lat, lon, lat2, lon2) <= radius) {\n          assertTrue(lat >= box.minLat && lat <= box.maxLat);\n          assertTrue(lon >= box1.minLon && lon <= box1.maxLon || (box2 != null && lon >= box2.minLon && lon <= box2.maxLon));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ed05bb51ea0663dafe0ae9b600553ef0e851f0e5":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ed05bb51ea0663dafe0ae9b600553ef0e851f0e5"]},"commit2Childs":{"ec60431d008a694828dacb4bc3cda775b6c44a9f":["ed05bb51ea0663dafe0ae9b600553ef0e851f0e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec60431d008a694828dacb4bc3cda775b6c44a9f"],"ed05bb51ea0663dafe0ae9b600553ef0e851f0e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}