{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuilder).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuilder).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuilder).mjava","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuilder buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Fix bug so that 'ß' at the end of a word is replaced.\n        else if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          // Masking several common character combinations with an token\n          if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuilder buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Fix bug so that 'ß' at the end of a word is replaced.\n        else if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          // Masking several common character combinations with an token\n          if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuilder).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/de/GermanStemmer#substitute(StringBuilder).mjava","sourceNew":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuilder buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Fix bug so that 'ß' at the end of a word is replaced.\n        else if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          // Masking several common character combinations with an token\n          if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Do some substitutions for the term to reduce overstemming:\n     *\n     * - Substitute Umlauts with their corresponding vowel: äöü -> aou,\n     *   \"ß\" is substituted by \"ss\"\n     * - Substitute a second char of a pair of equal characters with\n     *   an asterisk: ?? -> ?*\n     * - Substitute some common character combinations with a token:\n     *   sch/ch/ei/ie/ig/st -> $/§/%/&/#/!\n     */\n    private void substitute( StringBuilder buffer )\n    {\n      substCount = 0;\n      for ( int c = 0; c < buffer.length(); c++ ) {\n        // Replace the second char of a pair of the equal characters with an asterisk\n        if ( c > 0 && buffer.charAt( c ) == buffer.charAt ( c - 1 )  ) {\n          buffer.setCharAt( c, '*' );\n        }\n        // Substitute Umlauts.\n        else if ( buffer.charAt( c ) == 'ä' ) {\n          buffer.setCharAt( c, 'a' );\n        }\n        else if ( buffer.charAt( c ) == 'ö' ) {\n          buffer.setCharAt( c, 'o' );\n        }\n        else if ( buffer.charAt( c ) == 'ü' ) {\n          buffer.setCharAt( c, 'u' );\n        }\n        // Fix bug so that 'ß' at the end of a word is replaced.\n        else if ( buffer.charAt( c ) == 'ß' ) {\n            buffer.setCharAt( c, 's' );\n            buffer.insert( c + 1, 's' );\n            substCount++;\n        }\n        // Take care that at least one character is left left side from the current one\n        if ( c < buffer.length() - 1 ) {\n          // Masking several common character combinations with an token\n          if ( ( c < buffer.length() - 2 ) && buffer.charAt( c ) == 's' &&\n            buffer.charAt( c + 1 ) == 'c' && buffer.charAt( c + 2 ) == 'h' )\n          {\n            buffer.setCharAt( c, '$' );\n            buffer.delete( c + 1, c + 3 );\n            substCount =+ 2;\n          }\n          else if ( buffer.charAt( c ) == 'c' && buffer.charAt( c + 1 ) == 'h' ) {\n            buffer.setCharAt( c, '§' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'e' && buffer.charAt( c + 1 ) == 'i' ) {\n            buffer.setCharAt( c, '%' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'e' ) {\n            buffer.setCharAt( c, '&' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 'i' && buffer.charAt( c + 1 ) == 'g' ) {\n            buffer.setCharAt( c, '#' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n          else if ( buffer.charAt( c ) == 's' && buffer.charAt( c + 1 ) == 't' ) {\n            buffer.setCharAt( c, '!' );\n            buffer.deleteCharAt( c + 1 );\n            substCount++;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}