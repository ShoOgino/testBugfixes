{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testSelectStream().mjava","commits":[{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamDecoratorTest#testSelectStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSelectStream().mjava","sourceNew":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n\n    try {\n      // Basic test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n      // Basic with replacements test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(6), \"join1\", \"d\");\n\n\n      // Basic with replacements and concat test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n      assertString(tuples.get(6), \"join1\", \"d\");\n      assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n\n      // Inner stream test\n      clause = \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n\n      // Wrapped select test\n      clause = \"select(\"\n          + \"id, left.ident, right.ident,\"\n          + \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n      assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSelectStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"1\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"15\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"left_1\") // 8, 9\n        .add(id, \"2\", \"side_s\", \"left\", \"join1_i\", \"0\", \"join2_s\", \"b\", \"ident_s\", \"left_2\")\n        .add(id, \"3\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"left_3\") // 10\n        .add(id, \"4\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"left_4\") // 11\n        .add(id, \"5\", \"side_s\", \"left\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"left_5\") // 12\n        .add(id, \"6\", \"side_s\", \"left\", \"join1_i\", \"2\", \"join2_s\", \"d\", \"ident_s\", \"left_6\")\n        .add(id, \"7\", \"side_s\", \"left\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"left_7\") // 14\n\n        .add(id, \"8\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_1\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"9\", \"side_s\", \"right\", \"join1_i\", \"0\", \"join2_s\", \"a\", \"ident_s\", \"right_2\", \"join3_i\", \"0\") // 1,15\n        .add(id, \"10\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"a\", \"ident_s\", \"right_3\", \"join3_i\", \"1\") // 3\n        .add(id, \"11\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"b\", \"ident_s\", \"right_4\", \"join3_i\", \"1\") // 4\n        .add(id, \"12\", \"side_s\", \"right\", \"join1_i\", \"1\", \"join2_s\", \"c\", \"ident_s\", \"right_5\", \"join3_i\", \"1\") // 5\n        .add(id, \"13\", \"side_s\", \"right\", \"join1_i\", \"2\", \"join2_s\", \"dad\", \"ident_s\", \"right_6\", \"join3_i\", \"2\")\n        .add(id, \"14\", \"side_s\", \"right\", \"join1_i\", \"3\", \"join2_s\", \"e\", \"ident_s\", \"right_7\", \"join3_i\", \"3\") // 7\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String clause;\n    TupleStream stream;\n    List<Tuple> tuples;\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    StreamFactory factory = new StreamFactory()\n      .withCollectionZkHost(\"collection1\", cluster.getZkServer().getZkAddress())\n      .withFunctionName(\"search\", CloudSolrStream.class)\n      .withFunctionName(\"innerJoin\", InnerJoinStream.class)\n      .withFunctionName(\"select\", SelectStream.class)\n      .withFunctionName(\"replace\", ReplaceOperation.class)\n      .withFunctionName(\"concat\", ConcatOperation.class)\n      .withFunctionName(\"add\", AddEvaluator.class)\n      .withFunctionName(\"if\", IfThenElseEvaluator.class)\n      .withFunctionName(\"gt\", GreaterThanEvaluator.class)\n      ;\n\n    try {\n      // Basic test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n\n      // Basic with replacements test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(6), \"join1\", \"d\");\n\n\n      // Basic with replacements and concat test\n      clause = \"select(\"\n          + \"id, join1_i as join1, join2_s as join2, ident_s as identity,\"\n          + \"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),\"\n          + \"concat(fields=\\\"identity,join1\\\", as=\\\"newIdentity\\\",delim=\\\"-\\\"),\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"join1\", \"join2\", \"identity\", \"newIdentity\");\n      assertNotFields(tuples, \"join1_i\", \"join2_s\", \"ident_s\");\n      assertLong(tuples.get(0), \"join1\", 12);\n      assertString(tuples.get(0), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(1), \"join1\", 12);\n      assertString(tuples.get(1), \"newIdentity\", \"left_1-12\");\n      assertLong(tuples.get(2), \"join1\", 12);\n      assertString(tuples.get(2), \"newIdentity\", \"left_2-12\");\n      assertLong(tuples.get(7), \"join1\", 12);\n      assertString(tuples.get(7), \"newIdentity\", \"left_7-12\");\n      assertString(tuples.get(6), \"join1\", \"d\");\n      assertString(tuples.get(6), \"newIdentity\", \"left_6-d\");\n\n      // Inner stream test\n      clause = \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.join1\", \"left.join2\", \"left.ident\", \"right.join1\", \"right.join2\", \"right.ident\");\n\n      // Wrapped select test\n      clause = \"select(\"\n          + \"id, left.ident, right.ident,\"\n          + \"innerJoin(\"\n          + \"select(\"\n          + \"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\"\n          + \"search(collection1, q=\\\"side_s:left\\\", fl=\\\"id,join1_i,join2_s,ident_s\\\", sort=\\\"join1_i asc, join2_s asc, id asc\\\")\"\n          + \"),\"\n          + \"select(\"\n          + \"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\"\n          + \"search(collection1, q=\\\"side_s:right\\\", fl=\\\"join3_i,join2_s,ident_s\\\", sort=\\\"join3_i asc, join2_s asc\\\"),\"\n          + \"),\"\n          + \"on=\\\"left.join1=right.join1, left.join2=right.join2\\\"\"\n          + \")\"\n          + \")\";\n      stream = factory.constructStream(clause);\n      stream.setStreamContext(streamContext);\n      tuples = getTuples(stream);\n      assertFields(tuples, \"id\", \"left.ident\", \"right.ident\");\n      assertNotFields(tuples, \"left.join1\", \"left.join2\", \"right.join1\", \"right.join2\");\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}