{"path":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","commits":[{"id":"abba29aa88f170f3d51899c885b760337dd1c47c","date":1317196921,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","pathOld":"/dev/null","sourceNew":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexReader r = IndexReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d40b62adb64d8f7b2f85ee849349cfb0bef03f45","date":1327855938,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","sourceNew":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    DirectoryReader r = DirectoryReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexReader r = IndexReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","sourceNew":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    DirectoryReader r = DirectoryReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    IndexReader r = IndexReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testStressTryIncRef().mjava","sourceNew":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    DirectoryReader r = DirectoryReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testStressTryIncRef() throws CorruptIndexException, LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    writer.addDocument(new Document());\n    writer.commit();\n    DirectoryReader r = DirectoryReader.open(dir);\n    int numThreads = atLeast(2);\n    \n    IncThread[] threads = new IncThread[numThreads];\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new IncThread(r, random);\n      threads[i].start();\n    }\n    Thread.sleep(100);\n\n    assertTrue(r.tryIncRef());\n    r.decRef();\n    r.close();\n\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      assertNull(threads[i].failed);\n    }\n    assertFalse(r.tryIncRef());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["abba29aa88f170f3d51899c885b760337dd1c47c"],"abba29aa88f170f3d51899c885b760337dd1c47c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["abba29aa88f170f3d51899c885b760337dd1c47c","d40b62adb64d8f7b2f85ee849349cfb0bef03f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abba29aa88f170f3d51899c885b760337dd1c47c"],"d40b62adb64d8f7b2f85ee849349cfb0bef03f45":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"abba29aa88f170f3d51899c885b760337dd1c47c":["d40b62adb64d8f7b2f85ee849349cfb0bef03f45","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}