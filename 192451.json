{"path":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#testSanityCheckDomainMethods().mjava","commits":[{"id":"92910727264a23a47b7a6c94b0f75d655537b9ea","date":1540414655,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestCloudJSONFacetJoinDomain#testSanityCheckDomainMethods().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudJSONFacetJoinDomain#testSanityCheckDomainMethods().mjava","sourceNew":"  public void testSanityCheckDomainMethods() throws Exception {\n    { \n      final JoinDomain empty = new JoinDomain(null, null, null);\n      assertEquals(null, empty.toJSONFacetParamValue());\n      final SolrParams out = empty.applyDomainToQuery(\"safe_key\", params(\"q\",\"qqq\"));\n      assertNotNull(out);\n      assertEquals(null, out.get(\"safe_key\"));\n      assertEquals(\"qqq\", out.get(\"q\"));\n    }\n    {\n      final JoinDomain join = new JoinDomain(\"xxx\", \"yyy\", null);\n      assertEquals(\"domain:{join:{from:xxx,to:yyy}}\", join.toJSONFacetParamValue().toString());\n      final SolrParams out = join.applyDomainToQuery(\"safe_key\", params(\"q\",\"qqq\"));\n      assertNotNull(out);\n      assertEquals(\"qqq\", out.get(\"safe_key\"));\n      assertEquals(\"{!join from=xxx to=yyy v=$safe_key}\", out.get(\"q\"));\n      \n    }\n    {\n      final JoinDomain filter = new JoinDomain(null, null, \"zzz\");\n      assertEquals(\"domain:{filter:'zzz'}\", filter.toJSONFacetParamValue().toString());\n      final SolrParams out = filter.applyDomainToQuery(\"safe_key\", params(\"q\",\"qqq\"));\n      assertNotNull(out);\n      assertEquals(null, out.get(\"safe_key\"));\n      assertEquals(\"zzz AND qqq\", out.get(\"q\"));\n    }\n    {\n      final JoinDomain both = new JoinDomain(\"xxx\", \"yyy\", \"zzz\");\n      assertEquals(\"domain:{join:{from:xxx,to:yyy},filter:'zzz'}\", both.toJSONFacetParamValue().toString());\n      final SolrParams out = both.applyDomainToQuery(\"safe_key\", params(\"q\",\"qqq\"));\n      assertNotNull(out);\n      assertEquals(\"qqq\", out.get(\"safe_key\"));\n      assertEquals(\"zzz AND {!join from=xxx to=yyy v=$safe_key}\", out.get(\"q\"));\n    }\n  }\n\n","sourceOld":"  public void testSanityCheckDomainMethods() throws Exception {\n    { \n      final JoinDomain empty = new JoinDomain(null, null, null);\n      assertEquals(null, empty.toJSONFacetParamValue());\n      final SolrParams out = empty.applyDomainToQuery(\"safe_key\", params(\"q\",\"qqq\"));\n      assertNotNull(out);\n      assertEquals(null, out.get(\"safe_key\"));\n      assertEquals(\"qqq\", out.get(\"q\"));\n    }\n    {\n      final JoinDomain join = new JoinDomain(\"xxx\", \"yyy\", null);\n      assertEquals(\"domain:{join:{from:xxx,to:yyy}}\", join.toJSONFacetParamValue().toString());\n      final SolrParams out = join.applyDomainToQuery(\"safe_key\", params(\"q\",\"qqq\"));\n      assertNotNull(out);\n      assertEquals(\"qqq\", out.get(\"safe_key\"));\n      assertEquals(\"{!join from=xxx to=yyy v=$safe_key}\", out.get(\"q\"));\n      \n    }\n    {\n      final JoinDomain filter = new JoinDomain(null, null, \"zzz\");\n      assertEquals(\"domain:{filter:'zzz'}\", filter.toJSONFacetParamValue().toString());\n      final SolrParams out = filter.applyDomainToQuery(\"safe_key\", params(\"q\",\"qqq\"));\n      assertNotNull(out);\n      assertEquals(null, out.get(\"safe_key\"));\n      assertEquals(\"zzz AND qqq\", out.get(\"q\"));\n    }\n    {\n      final JoinDomain both = new JoinDomain(\"xxx\", \"yyy\", \"zzz\");\n      assertEquals(\"domain:{join:{from:xxx,to:yyy},filter:'zzz'}\", both.toJSONFacetParamValue().toString());\n      final SolrParams out = both.applyDomainToQuery(\"safe_key\", params(\"q\",\"qqq\"));\n      assertNotNull(out);\n      assertEquals(\"qqq\", out.get(\"safe_key\"));\n      assertEquals(\"zzz AND {!join from=xxx to=yyy v=$safe_key}\", out.get(\"q\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92910727264a23a47b7a6c94b0f75d655537b9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["92910727264a23a47b7a6c94b0f75d655537b9ea"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92910727264a23a47b7a6c94b0f75d655537b9ea"],"92910727264a23a47b7a6c94b0f75d655537b9ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}