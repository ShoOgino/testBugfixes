{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<String, String>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n    String nodeName = targetLeader.getNodeName();\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true, \"MIGRATE failed to request node to buffer updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        // TODO: look at using nanoTime here?\n        \"expireAt\", String.valueOf(System.currentTimeMillis() + timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n        Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if(asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection leader or timed out waiting for it to come up\",\n        shardHandler);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true, \"MIGRATE failed to invoke SPLIT core admin command\", shardHandler);\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create replica of temporary collection in target leader node.\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection replica or timed out waiting for them to come up\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to merge \" + tempCollectionReplica2 +\n            \" to \" + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName(),\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to request node to apply buffered updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<String, String>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n    String nodeName = targetLeader.getNodeName();\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true, \"MIGRATE failed to request node to buffer updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        // TODO: look at using nanoTime here?\n        \"expireAt\", String.valueOf(System.currentTimeMillis() + timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n        Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if(asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection leader or timed out waiting for it to come up\",\n        shardHandler);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true, \"MIGRATE failed to invoke SPLIT core admin command\", shardHandler);\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create replica of temporary collection in target leader node.\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection replica or timed out waiting for them to come up\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to merge \" + tempCollectionReplica2 +\n            \" to \" + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName(),\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to request node to apply buffered updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<String, String>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n    String nodeName = targetLeader.getNodeName();\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true, \"MIGRATE failed to request node to buffer updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n        Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if(asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection leader or timed out waiting for it to come up\",\n        shardHandler);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true, \"MIGRATE failed to invoke SPLIT core admin command\", shardHandler);\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create replica of temporary collection in target leader node.\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection replica or timed out waiting for them to come up\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to merge \" + tempCollectionReplica2 +\n            \" to \" + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName(),\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to request node to apply buffered updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<String, String>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n    String nodeName = targetLeader.getNodeName();\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true, \"MIGRATE failed to request node to buffer updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        // TODO: look at using nanoTime here?\n        \"expireAt\", String.valueOf(System.currentTimeMillis() + timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n        Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    long waitUntil = System.nanoTime() + TimeUnit.NANOSECONDS.convert(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (System.nanoTime() < waitUntil) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if(asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection leader or timed out waiting for it to come up\",\n        shardHandler);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true, \"MIGRATE failed to invoke SPLIT core admin command\", shardHandler);\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create replica of temporary collection in target leader node.\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection replica or timed out waiting for them to come up\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to merge \" + tempCollectionReplica2 +\n            \" to \" + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName(),\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to request node to apply buffered updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    HashMap<String, String> requestMap = new HashMap<String, String>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n    String nodeName = targetLeader.getNodeName();\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true, \"MIGRATE failed to request node to buffer updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(\n        Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if(asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection leader or timed out waiting for it to come up\",\n        shardHandler);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true, \"MIGRATE failed to invoke SPLIT core admin command\", shardHandler);\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create replica of temporary collection in target leader node.\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    collectShardResponses(results, true,\n        \"MIGRATE failed to create temp collection replica or timed out waiting for them to come up\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to merge \" + tempCollectionReplica2 +\n            \" to \" + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName(),\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    collectShardResponses(results, true,\n        \"MIGRATE failed to request node to apply buffered updates\",\n        shardHandler);\n\n    completeAsyncRequest(asyncId, requestMap, results);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      Map<String, RoutingRule> rules = zkStateReader.getClusterState().getSlice(sourceCollection.getName(), sourceSlice.getName()).getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c","69e6520a21709190413a63084ed135271aab1a7c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MigrateCmd#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws Exception {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        ocmh.commandMap.get(DELETE).call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandlerFactory shardHandlerFactory = ocmh.shardHandlerFactory;\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = ocmh.intersect(targetSlice.getRange(), ocmh.intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (!waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    ocmh.commandMap.get(CREATE).call(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    ocmh.sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if (asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    ((AddReplicaCmd)ocmh.commandMap.get(ADDREPLICA)).addReplica(clusterState, new ZkNodeProps(props), results, null);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = ocmh.waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    ocmh.sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    ocmh.processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    ocmh.sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    ocmh.processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      ocmh.commandMap.get(DELETE). call(zkStateReader.getClusterState(), new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateKey(ClusterState,DocCollection,Slice,DocCollection,Slice,String,int,NamedList,String,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"  private void migrateKey(ClusterState clusterState, DocCollection sourceCollection, Slice sourceSlice,\n                          DocCollection targetCollection, Slice targetSlice,\n                          String splitKey, int timeout,\n                          NamedList results, String asyncId, ZkNodeProps message) throws KeeperException, InterruptedException {\n    String tempSourceCollectionName = \"split_\" + sourceSlice.getName() + \"_temp_\" + targetSlice.getName();\n    if (clusterState.hasCollection(tempSourceCollectionName)) {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      Map<String, Object> props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n\n      try {\n        deleteCollection(new ZkNodeProps(props), results);\n        clusterState = zkStateReader.getClusterState();\n      } catch (Exception e) {\n        log.warn(\"Unable to clean up existing temporary collection: \" + tempSourceCollectionName, e);\n      }\n    }\n\n    CompositeIdRouter sourceRouter = (CompositeIdRouter) sourceCollection.getRouter();\n    DocRouter.Range keyHashRange = sourceRouter.keyHashRange(splitKey);\n\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    log.info(\"Hash range for split.key: {} is: {}\", splitKey, keyHashRange);\n    // intersect source range, keyHashRange and target range\n    // this is the range that has to be split from source and transferred to target\n    DocRouter.Range splitRange = intersect(targetSlice.getRange(), intersect(sourceSlice.getRange(), keyHashRange));\n    if (splitRange == null) {\n      log.info(\"No common hashes between source shard: {} and target shard: {}\", sourceSlice.getName(), targetSlice.getName());\n      return;\n    }\n    log.info(\"Common hash range between source shard: {} and target shard: {} = \" + splitRange, sourceSlice.getName(), targetSlice.getName());\n\n    Replica targetLeader = zkStateReader.getLeaderRetry(targetCollection.getName(), targetSlice.getName(), 10000);\n    // For tracking async calls.\n    Map<String, String> requestMap = new HashMap<>();\n\n    log.info(\"Asking target leader node: \" + targetLeader.getNodeName() + \" core: \"\n        + targetLeader.getStr(\"core\") + \" to buffer updates\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTBUFFERUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to buffer updates\", asyncId, requestMap);\n\n    ZkNodeProps m = new ZkNodeProps(\n        Overseer.QUEUE_OPERATION, OverseerAction.ADDROUTINGRULE.toLower(),\n        COLLECTION_PROP, sourceCollection.getName(),\n        SHARD_ID_PROP, sourceSlice.getName(),\n        \"routeKey\", SolrIndexSplitter.getRouteKey(splitKey) + \"!\",\n        \"range\", splitRange.toString(),\n        \"targetCollection\", targetCollection.getName(),\n        \"expireAt\", RoutingRule.makeExpiryAt(timeout));\n    log.info(\"Adding routing rule: \" + m);\n    Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n    // wait for a while until we see the new rule\n    log.info(\"Waiting to see routing rule updated in clusterstate\");\n    TimeOut waitUntil = new TimeOut(60, TimeUnit.SECONDS);\n    boolean added = false;\n    while (! waitUntil.hasTimedOut()) {\n      Thread.sleep(100);\n      sourceCollection = zkStateReader.getClusterState().getCollection(sourceCollection.getName());\n      sourceSlice = sourceCollection.getSlice(sourceSlice.getName());\n      Map<String, RoutingRule> rules = sourceSlice.getRoutingRules();\n      if (rules != null) {\n        RoutingRule rule = rules.get(SolrIndexSplitter.getRouteKey(splitKey) + \"!\");\n        if (rule != null && rule.getRouteRanges().contains(splitRange)) {\n          added = true;\n          break;\n        }\n      }\n    }\n    if (!added) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not add routing rule: \" + m);\n    }\n\n    log.info(\"Routing rule added successfully\");\n\n    // Create temp core on source shard\n    Replica sourceLeader = zkStateReader.getLeaderRetry(sourceCollection.getName(), sourceSlice.getName(), 10000);\n\n    // create a temporary collection with just one node on the shard leader\n    String configName = zkStateReader.readConfigName(sourceCollection.getName());\n    Map<String, Object> props = makeMap(\n        Overseer.QUEUE_OPERATION, CREATE.toLower(),\n        NAME, tempSourceCollectionName,\n        REPLICATION_FACTOR, 1,\n        NUM_SLICES, 1,\n        COLL_CONF, configName,\n        CREATE_NODE_SET, sourceLeader.getNodeName());\n    if (asyncId != null) {\n      String internalAsyncId = asyncId + Math.abs(System.nanoTime());\n      props.put(ASYNC, internalAsyncId);\n    }\n\n    log.info(\"Creating temporary collection: \" + props);\n    createCollection(clusterState, new ZkNodeProps(props), results);\n    // refresh cluster state\n    clusterState = zkStateReader.getClusterState();\n    Slice tempSourceSlice = clusterState.getCollection(tempSourceCollectionName).getSlices().iterator().next();\n    Replica tempSourceLeader = zkStateReader.getLeaderRetry(tempSourceCollectionName, tempSourceSlice.getName(), 120000);\n\n    String tempCollectionReplica1 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica1\";\n    String coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        sourceLeader.getNodeName(), tempCollectionReplica1);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking source leader to wait for: \" + tempCollectionReplica1 + \" to be alive on: \" + sourceLeader.getNodeName());\n    CoreAdminRequest.WaitForState cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempCollectionReplica1);\n    cmd.setNodeName(sourceLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    // we don't want this to happen asynchronously\n    sendShardRequest(tempSourceLeader.getNodeName(), new ModifiableSolrParams(cmd.getParams()), shardHandler, null, null);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection leader\" +\n        \" or timed out waiting for it to come up\", asyncId, requestMap);\n\n    log.info(\"Asking source leader to split index\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.SPLIT.toString());\n    params.set(CoreAdminParams.CORE, sourceLeader.getStr(\"core\"));\n    params.add(CoreAdminParams.TARGET_CORE, tempSourceLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.RANGES, splitRange.toString());\n    params.set(\"split.key\", splitKey);\n\n    String tempNodeName = sourceLeader.getNodeName();\n\n    sendShardRequest(tempNodeName, params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to invoke SPLIT core admin command\", asyncId, requestMap);\n\n    log.info(\"Creating a replica of temporary collection: {} on the target leader node: {}\",\n        tempSourceCollectionName, targetLeader.getNodeName());\n    String tempCollectionReplica2 = tempSourceCollectionName + \"_\" + tempSourceSlice.getName() + \"_replica2\";\n    props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower());\n    props.put(COLLECTION_PROP, tempSourceCollectionName);\n    props.put(SHARD_ID_PROP, tempSourceSlice.getName());\n    props.put(\"node\", targetLeader.getNodeName());\n    props.put(CoreAdminParams.NAME, tempCollectionReplica2);\n    // copy over property params:\n    for (String key : message.keySet()) {\n      if (key.startsWith(COLL_PROP_PREFIX)) {\n        props.put(key, message.getStr(key));\n      }\n    }\n    // add async param\n    if(asyncId != null) {\n      props.put(ASYNC, asyncId);\n    }\n    addReplica(clusterState, new ZkNodeProps(props), results);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create replica of \" +\n        \"temporary collection in target leader node.\", asyncId, requestMap);\n\n    coreNodeName = waitForCoreNodeName(tempSourceCollectionName,\n        targetLeader.getNodeName(), tempCollectionReplica2);\n    // wait for the replicas to be seen as active on temp source leader\n    log.info(\"Asking temp source leader to wait for: \" + tempCollectionReplica2 + \" to be alive on: \" + targetLeader.getNodeName());\n    cmd = new CoreAdminRequest.WaitForState();\n    cmd.setCoreName(tempSourceLeader.getStr(\"core\"));\n    cmd.setNodeName(targetLeader.getNodeName());\n    cmd.setCoreNodeName(coreNodeName);\n    cmd.setState(Replica.State.ACTIVE);\n    cmd.setCheckLive(true);\n    cmd.setOnlyIfLeader(true);\n    params = new ModifiableSolrParams(cmd.getParams());\n\n    sendShardRequest(tempSourceLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"MIGRATE failed to create temp collection\" +\n        \" replica or timed out waiting for them to come up\", asyncId, requestMap);\n\n    log.info(\"Successfully created replica of temp source collection on target leader node\");\n\n    log.info(\"Requesting merge of temp source collection replica to target leader\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.MERGEINDEXES.toString());\n    params.set(CoreAdminParams.CORE, targetLeader.getStr(\"core\"));\n    params.set(CoreAdminParams.SRC_CORE, tempCollectionReplica2);\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    String msg = \"MIGRATE failed to merge \" + tempCollectionReplica2 + \" to \"\n        + targetLeader.getStr(\"core\") + \" on node: \" + targetLeader.getNodeName();\n    processResponses(results, shardHandler, true, msg, asyncId, requestMap);\n\n    log.info(\"Asking target leader to apply buffered updates\");\n    params = new ModifiableSolrParams();\n    params.set(CoreAdminParams.ACTION, CoreAdminAction.REQUESTAPPLYUPDATES.toString());\n    params.set(CoreAdminParams.NAME, targetLeader.getStr(\"core\"));\n\n    sendShardRequest(targetLeader.getNodeName(), params, shardHandler, asyncId, requestMap);\n    processResponses(results, shardHandler, true, \"MIGRATE failed to request node to apply buffered updates\",\n        asyncId, requestMap);\n\n    try {\n      log.info(\"Deleting temporary collection: \" + tempSourceCollectionName);\n      props = makeMap(\n          Overseer.QUEUE_OPERATION, DELETE.toLower(),\n          NAME, tempSourceCollectionName);\n      deleteCollection(new ZkNodeProps(props), results);\n    } catch (Exception e) {\n      log.error(\"Unable to delete temporary collection: \" + tempSourceCollectionName\n          + \". Please remove it manually\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["3bbb741690cdafda7f1f7549c26351c912917a69","19498030e0adab22f604f935cae3c03dcf0952a6"],"3bbb741690cdafda7f1f7549c26351c912917a69":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["af2638813028b254a88b418ebeafb541afb49653","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["af2638813028b254a88b418ebeafb541afb49653"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19498030e0adab22f604f935cae3c03dcf0952a6":["3bbb741690cdafda7f1f7549c26351c912917a69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["b1777912fb613f51063554d81f71c1b70d6bcd77"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"3bbb741690cdafda7f1f7549c26351c912917a69":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b1777912fb613f51063554d81f71c1b70d6bcd77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["3bbb741690cdafda7f1f7549c26351c912917a69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}