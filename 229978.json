{"path":"contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","sourceNew":"    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)\n    throws IOException\n    {\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","sourceOld":"    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)\n    throws IOException\n    {\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/ChainedFilter#initialResult(IndexReader,int,int[]).mjava","sourceNew":"    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)\n    throws IOException\n    {\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","sourceOld":"    private OpenBitSetDISI initialResult(IndexReader reader, int logic, int[] index)\n    throws IOException\n    {\n        OpenBitSetDISI result;\n        /**\n         * First AND operation takes place against a completely false\n         * bitset and will always return zero results.\n         */\n        if (logic == AND)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            ++index[0];\n        }\n        else if (logic == ANDNOT)\n        {\n            result = new OpenBitSetDISI(getDISI(chain[index[0]], reader), reader.maxDoc());\n            result.flip(0,reader.maxDoc()); // NOTE: may set bits for deleted docs.\n            ++index[0];\n        }\n        else\n        {\n            result = new OpenBitSetDISI(reader.maxDoc());\n        }\n        return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}