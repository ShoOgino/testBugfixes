{"path":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#populate(Directory).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#populate(Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/lucene3x/TestTermInfosReaderIndex#populate(Directory).mjava","sourceNew":"  private int populate(Directory directory) throws CorruptIndexException, LockObtainFailedException, IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, config);\n    for (int i = 0; i < NUMBER_OF_DOCUMENTS; i++) {\n      Document document = new Document();\n      for (int f = 0; f < NUMBER_OF_FIELDS; f++) {\n        document.add(newField(\"field\" + f, getText(), StringField.TYPE_UNSTORED));\n      }\n      writer.addDocument(document);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    return config.getTermIndexInterval();\n  }\n\n","sourceOld":"  private int populate(Directory directory) throws CorruptIndexException, LockObtainFailedException, IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, config);\n    for (int i = 0; i < NUMBER_OF_DOCUMENTS; i++) {\n      Document document = new Document();\n      for (int f = 0; f < NUMBER_OF_FIELDS; f++) {\n        document.add(newField(\"field\" + f, getText(), StringField.TYPE_UNSTORED));\n      }\n      writer.addDocument(document);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    return config.getTermIndexInterval();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#populate(Directory,IndexWriterConfig).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#populate(Directory).mjava","sourceNew":"  private static void populate(Directory directory, IndexWriterConfig config) throws CorruptIndexException, LockObtainFailedException, IOException {\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, config);\n    for (int i = 0; i < NUMBER_OF_DOCUMENTS; i++) {\n      Document document = new Document();\n      for (int f = 0; f < NUMBER_OF_FIELDS; f++) {\n        document.add(newField(\"field\" + f, getText(), StringField.TYPE_UNSTORED));\n      }\n      writer.addDocument(document);\n    }\n    writer.forceMerge(1);\n    writer.close();\n  }\n\n","sourceOld":"  private int populate(Directory directory) throws CorruptIndexException, LockObtainFailedException, IOException {\n    IndexWriterConfig config = newIndexWriterConfig(TEST_VERSION_CURRENT, \n        new MockAnalyzer(random, MockTokenizer.KEYWORD, false));\n    config.setCodec(new PreFlexRWCodec());\n    // turn off compound file, this test will open some index files directly.\n    LogMergePolicy mp = newLogMergePolicy();\n    mp.setUseCompoundFile(false);\n    config.setMergePolicy(mp);\n\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, config);\n    for (int i = 0; i < NUMBER_OF_DOCUMENTS; i++) {\n      Document document = new Document();\n      for (int f = 0; f < NUMBER_OF_FIELDS; f++) {\n        document.add(newField(\"field\" + f, getText(), StringField.TYPE_UNSTORED));\n      }\n      writer.addDocument(document);\n    }\n    writer.forceMerge(1);\n    writer.close();\n    return config.getTermIndexInterval();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8be580b58bcc650d428f3f22de81cadcf51d650a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}