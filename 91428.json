{"path":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","commits":[{"id":"1596015c8bad249c0b9a52182de1d47e1d56fdde","date":1412350121,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(new RESTfulServerProvider() {\n      public String getBaseURL() {\n        return replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl;\n      }\n    });\n\n    long waitMs = waitSecs * 1000L;\n    if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n\n    try {\n      testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n    } catch (Exception exc) {\n      if (retry) {\n        // brief wait before retrying\n        Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } else {\n        throw exc;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(new RESTfulServerProvider() {\n      public String getBaseURL() {\n        return replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl;\n      }\n    });\n\n    long waitMs = waitSecs * 1000L;\n    if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n\n    try {\n      testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n    } catch (Exception exc) {\n      if (retry) {\n        // brief wait before retrying\n        Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } else {\n        throw exc;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","sourceNew":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(new RESTfulServerProvider() {\n      public String getBaseURL() {\n        return replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl;\n      }\n    });\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(new RESTfulServerProvider() {\n      public String getBaseURL() {\n        return replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl;\n      }\n    });\n\n    long waitMs = waitSecs * 1000L;\n    if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n\n    try {\n      testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n    } catch (Exception exc) {\n      if (retry) {\n        // brief wait before retrying\n        Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } else {\n        throw exc;\n      }\n    }\n  }\n\n","bugFix":["1596015c8bad249c0b9a52182de1d47e1d56fdde"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b04972a589b63fe694313d3868815a20546c4907","date":1460726888,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","sourceNew":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(() -> replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl);\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(new RESTfulServerProvider() {\n      public String getBaseURL() {\n        return replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl;\n      }\n    });\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73457c9372b4f2f962ca916788a5fe9e1f644a9f","date":1460794059,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","sourceNew":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(() -> replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl);\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(new RESTfulServerProvider() {\n      public String getBaseURL() {\n        return replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl;\n      }\n    });\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8c645ec119d18a65174f4cbb1c927792ff814","date":1500897120,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(() -> replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl);\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(() -> replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl);\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(() -> replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl);\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(() -> replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl);\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c717efc76ccf2ea435c52fa36a4774056fe8b4d4","date":1501575440,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestCloudManagedSchemaConcurrent#validateZkVersion(Replica,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sends a GET request to get the zk schema version from a specific replica.\n   */\n  protected void validateZkVersion(Replica replica, int schemaZkVersion, int waitSecs, boolean retry) throws Exception {\n    final String replicaUrl = (new ZkCoreNodeProps(replica)).getCoreUrl();\n    RestTestHarness testHarness = new RestTestHarness(() -> replicaUrl.endsWith(\"/\") ? replicaUrl.substring(0, replicaUrl.length()-1) : replicaUrl);\n    try {\n      long waitMs = waitSecs * 1000L;\n      if (waitMs > 0) Thread.sleep(waitMs); // wait a moment for the zk watcher to fire\n  \n      try {\n        testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n      } catch (Exception exc) {\n        if (retry) {\n          // brief wait before retrying\n          Thread.sleep(waitMs > 0 ? waitMs : 2000L);\n  \n          testHarness.validateQuery(\"/schema/zkversion?wt=xml\", \"//zkversion=\" + schemaZkVersion);\n        } else {\n          throw exc;\n        }\n      }\n    } finally {\n      testHarness.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b04972a589b63fe694313d3868815a20546c4907":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"a52341299179de5479672f7cf518bf4b173f34b3":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","c3a8c645ec119d18a65174f4cbb1c927792ff814"],"1596015c8bad249c0b9a52182de1d47e1d56fdde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c717efc76ccf2ea435c52fa36a4774056fe8b4d4":["344b0840364d990b29b97467bfcc766ff8325d11"],"344b0840364d990b29b97467bfcc766ff8325d11":["a52341299179de5479672f7cf518bf4b173f34b3"],"c3a8c645ec119d18a65174f4cbb1c927792ff814":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["73457c9372b4f2f962ca916788a5fe9e1f644a9f","c3a8c645ec119d18a65174f4cbb1c927792ff814"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1596015c8bad249c0b9a52182de1d47e1d56fdde"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["1596015c8bad249c0b9a52182de1d47e1d56fdde"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","b04972a589b63fe694313d3868815a20546c4907"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c717efc76ccf2ea435c52fa36a4774056fe8b4d4"]},"commit2Childs":{"b04972a589b63fe694313d3868815a20546c4907":["73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"a52341299179de5479672f7cf518bf4b173f34b3":["344b0840364d990b29b97467bfcc766ff8325d11"],"1596015c8bad249c0b9a52182de1d47e1d56fdde":["d9a47902d6207303f5ed3e7aaca62ca33433af66","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"c717efc76ccf2ea435c52fa36a4774056fe8b4d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8c645ec119d18a65174f4cbb1c927792ff814":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"344b0840364d990b29b97467bfcc766ff8325d11":["c717efc76ccf2ea435c52fa36a4774056fe8b4d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1596015c8bad249c0b9a52182de1d47e1d56fdde","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["b04972a589b63fe694313d3868815a20546c4907","73457c9372b4f2f962ca916788a5fe9e1f644a9f"],"73457c9372b4f2f962ca916788a5fe9e1f644a9f":["a52341299179de5479672f7cf518bf4b173f34b3","c3a8c645ec119d18a65174f4cbb1c927792ff814","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}