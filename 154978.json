{"path":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#getStatistics().mjava","commits":[{"id":"26bd56bd7f06194390617d646d6b9a24a7a472dd","date":1420576157,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#getStatistics().mjava","pathOld":"/dev/null","sourceNew":"  public NamedList<Number> getStatistics() {\n    NamedList<Number> stats = new NamedList<Number>();\n    \n    long now = System.nanoTime();\n    float seconds = (now - previous) / 1000000000.0f;\n    \n    long hits = blockCacheHit.getAndSet(0);\n    long lookups = hits + blockCacheMiss.getAndSet(0);\n    \n    stats.add(\"lookups\", getPerSecond(lookups, seconds));\n    stats.add(\"hits\", getPerSecond(hits, seconds));\n    stats.add(\"hitratio\", calcHitRatio(lookups, hits));\n    stats.add(\"evictions\", getPerSecond(blockCacheEviction.getAndSet(0), seconds));\n    stats.add(\"size\", blockCacheSize.get());\n    stats.add(\"row.reads\", getPerSecond(rowReads.getAndSet(0), seconds));\n    stats.add(\"row.writes\", getPerSecond(rowWrites.getAndSet(0), seconds));\n    stats.add(\"record.reads\", getPerSecond(recordReads.getAndSet(0), seconds));\n    stats.add(\"record.writes\", getPerSecond(recordWrites.getAndSet(0), seconds));\n    stats.add(\"query.external\", getPerSecond(queriesExternal.getAndSet(0), seconds));\n    stats.add(\"query.internal\", getPerSecond(queriesInternal.getAndSet(0), seconds));\n    stats.add(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n    stats.add(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n    for (Entry<String,MethodCall> entry : methodCalls.entrySet()) {\n      String key = entry.getKey();\n      MethodCall value = entry.getValue();\n      long invokes = value.invokes.getAndSet(0);\n      long times = value.times.getAndSet(0);\n      \n      float avgTimes = (times / (float) invokes) / 1000000000.0f;\n      stats.add(\"methodcalls.\" + key + \".count\", getPerSecond(invokes, seconds));\n      stats.add(\"methodcalls.\" + key + \".time\", avgTimes);\n    }\n    stats.add(\"tables\", tableCount.get());\n    stats.add(\"rows\", rowCount.get());\n    stats.add(\"records\", recordCount.get());\n    stats.add(\"index.count\", indexCount.get());\n    stats.add(\"index.memoryusage\", indexMemoryUsage.get());\n    stats.add(\"index.segments\", segmentCount.get());\n    previous = now;\n    \n    return stats;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7da173d341edb3a56705e0ee852574c69d83aa6f","date":1430086379,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#getStatistics().mjava","sourceNew":"  public NamedList<Number> getStatistics() {\n    NamedList<Number> stats = new SimpleOrderedMap<>(21); // room for one method call before growing\n    \n    long now = System.nanoTime();\n    float seconds = (now - previous) / 1000000000.0f;\n    \n    long hits = blockCacheHit.getAndSet(0);\n    long lookups = hits + blockCacheMiss.getAndSet(0);\n    \n    stats.add(\"lookups\", getPerSecond(lookups, seconds));\n    stats.add(\"hits\", getPerSecond(hits, seconds));\n    stats.add(\"hitratio\", calcHitRatio(lookups, hits));\n    stats.add(\"evictions\", getPerSecond(blockCacheEviction.getAndSet(0), seconds));\n    stats.add(\"size\", blockCacheSize.get());\n    stats.add(\"row.reads\", getPerSecond(rowReads.getAndSet(0), seconds));\n    stats.add(\"row.writes\", getPerSecond(rowWrites.getAndSet(0), seconds));\n    stats.add(\"record.reads\", getPerSecond(recordReads.getAndSet(0), seconds));\n    stats.add(\"record.writes\", getPerSecond(recordWrites.getAndSet(0), seconds));\n    stats.add(\"query.external\", getPerSecond(queriesExternal.getAndSet(0), seconds));\n    stats.add(\"query.internal\", getPerSecond(queriesInternal.getAndSet(0), seconds));\n    stats.add(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n    stats.add(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n    for (Entry<String,MethodCall> entry : methodCalls.entrySet()) {\n      String key = entry.getKey();\n      MethodCall value = entry.getValue();\n      long invokes = value.invokes.getAndSet(0);\n      long times = value.times.getAndSet(0);\n      \n      float avgTimes = (times / (float) invokes) / 1000000000.0f;\n      stats.add(\"methodcalls.\" + key + \".count\", getPerSecond(invokes, seconds));\n      stats.add(\"methodcalls.\" + key + \".time\", avgTimes);\n    }\n    stats.add(\"tables\", tableCount.get());\n    stats.add(\"rows\", rowCount.get());\n    stats.add(\"records\", recordCount.get());\n    stats.add(\"index.count\", indexCount.get());\n    stats.add(\"index.memoryusage\", indexMemoryUsage.get());\n    stats.add(\"index.segments\", segmentCount.get());\n    previous = now;\n    \n    return stats;\n  }\n\n","sourceOld":"  public NamedList<Number> getStatistics() {\n    NamedList<Number> stats = new NamedList<Number>();\n    \n    long now = System.nanoTime();\n    float seconds = (now - previous) / 1000000000.0f;\n    \n    long hits = blockCacheHit.getAndSet(0);\n    long lookups = hits + blockCacheMiss.getAndSet(0);\n    \n    stats.add(\"lookups\", getPerSecond(lookups, seconds));\n    stats.add(\"hits\", getPerSecond(hits, seconds));\n    stats.add(\"hitratio\", calcHitRatio(lookups, hits));\n    stats.add(\"evictions\", getPerSecond(blockCacheEviction.getAndSet(0), seconds));\n    stats.add(\"size\", blockCacheSize.get());\n    stats.add(\"row.reads\", getPerSecond(rowReads.getAndSet(0), seconds));\n    stats.add(\"row.writes\", getPerSecond(rowWrites.getAndSet(0), seconds));\n    stats.add(\"record.reads\", getPerSecond(recordReads.getAndSet(0), seconds));\n    stats.add(\"record.writes\", getPerSecond(recordWrites.getAndSet(0), seconds));\n    stats.add(\"query.external\", getPerSecond(queriesExternal.getAndSet(0), seconds));\n    stats.add(\"query.internal\", getPerSecond(queriesInternal.getAndSet(0), seconds));\n    stats.add(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n    stats.add(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n    for (Entry<String,MethodCall> entry : methodCalls.entrySet()) {\n      String key = entry.getKey();\n      MethodCall value = entry.getValue();\n      long invokes = value.invokes.getAndSet(0);\n      long times = value.times.getAndSet(0);\n      \n      float avgTimes = (times / (float) invokes) / 1000000000.0f;\n      stats.add(\"methodcalls.\" + key + \".count\", getPerSecond(invokes, seconds));\n      stats.add(\"methodcalls.\" + key + \".time\", avgTimes);\n    }\n    stats.add(\"tables\", tableCount.get());\n    stats.add(\"rows\", rowCount.get());\n    stats.add(\"records\", recordCount.get());\n    stats.add(\"index.count\", indexCount.get());\n    stats.add(\"index.memoryusage\", indexMemoryUsage.get());\n    stats.add(\"index.segments\", segmentCount.get());\n    previous = now;\n    \n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d329f927fde9f646d6fce133cbd41dd2dbe4ed54","date":1488303368,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#getStatistics().mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#getStatistics().mjava","sourceNew":"  public NamedList<Number> getStatistics() {\n    NamedList<Number> stats = new SimpleOrderedMap<>(21); // room for one method call before growing\n\n    long now = System.nanoTime();\n    long delta = Math.max(now - previous, 1);\n    double seconds = delta / 1000000000.0;\n\n    long hits_total = blockCacheHit.get();\n    long hits_delta = hits_total - blockCacheHit_last.get();\n    blockCacheHit_last.set(hits_total);\n\n    long miss_total = blockCacheMiss.get();\n    long miss_delta = miss_total - blockCacheMiss_last.get();\n    blockCacheMiss_last.set(miss_total);\n\n    long evict_total = blockCacheEviction.get();\n    long evict_delta = evict_total - blockCacheEviction_last.get();\n    blockCacheEviction_last.set(evict_total);\n\n    long storeFail_total = blockCacheStoreFail.get();\n    long storeFail_delta = storeFail_total - blockCacheStoreFail_last.get();\n    blockCacheStoreFail_last.set(storeFail_total);\n\n    long lookups_delta = hits_delta + miss_delta;\n    long lookups_total = hits_total + miss_total;\n\n    stats.add(\"size\", blockCacheSize.get());\n    stats.add(\"lookups\", lookups_total);\n    stats.add(\"hits\", hits_total);\n    stats.add(\"evictions\", evict_total);\n    stats.add(\"storeFails\", storeFail_total);\n    stats.add(\"hitratio_current\", calcHitRatio(lookups_delta, hits_delta));  // hit ratio since the last call\n    stats.add(\"lookups_persec\", getPerSecond(lookups_delta, seconds)); // lookups per second since the last call\n    stats.add(\"hits_persec\", getPerSecond(hits_delta, seconds));       // hits per second since the last call\n    stats.add(\"evictions_persec\", getPerSecond(evict_delta, seconds));  // evictions per second since the last call\n    stats.add(\"storeFails_persec\", getPerSecond(storeFail_delta, seconds));  // evictions per second since the last call\n    stats.add(\"time_delta\", seconds);  // seconds since last call\n\n    // TODO: these aren't really related to the BlockCache\n    stats.add(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n    stats.add(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n\n    previous = now;\n\n    return stats;\n  }\n\n","sourceOld":"  public NamedList<Number> getStatistics() {\n    NamedList<Number> stats = new SimpleOrderedMap<>(21); // room for one method call before growing\n    \n    long now = System.nanoTime();\n    float seconds = (now - previous) / 1000000000.0f;\n    \n    long hits = blockCacheHit.getAndSet(0);\n    long lookups = hits + blockCacheMiss.getAndSet(0);\n    \n    stats.add(\"lookups\", getPerSecond(lookups, seconds));\n    stats.add(\"hits\", getPerSecond(hits, seconds));\n    stats.add(\"hitratio\", calcHitRatio(lookups, hits));\n    stats.add(\"evictions\", getPerSecond(blockCacheEviction.getAndSet(0), seconds));\n    stats.add(\"size\", blockCacheSize.get());\n    stats.add(\"row.reads\", getPerSecond(rowReads.getAndSet(0), seconds));\n    stats.add(\"row.writes\", getPerSecond(rowWrites.getAndSet(0), seconds));\n    stats.add(\"record.reads\", getPerSecond(recordReads.getAndSet(0), seconds));\n    stats.add(\"record.writes\", getPerSecond(recordWrites.getAndSet(0), seconds));\n    stats.add(\"query.external\", getPerSecond(queriesExternal.getAndSet(0), seconds));\n    stats.add(\"query.internal\", getPerSecond(queriesInternal.getAndSet(0), seconds));\n    stats.add(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n    stats.add(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n    for (Entry<String,MethodCall> entry : methodCalls.entrySet()) {\n      String key = entry.getKey();\n      MethodCall value = entry.getValue();\n      long invokes = value.invokes.getAndSet(0);\n      long times = value.times.getAndSet(0);\n      \n      float avgTimes = (times / (float) invokes) / 1000000000.0f;\n      stats.add(\"methodcalls.\" + key + \".count\", getPerSecond(invokes, seconds));\n      stats.add(\"methodcalls.\" + key + \".time\", avgTimes);\n    }\n    stats.add(\"tables\", tableCount.get());\n    stats.add(\"rows\", rowCount.get());\n    stats.add(\"records\", recordCount.get());\n    stats.add(\"index.count\", indexCount.get());\n    stats.add(\"index.memoryusage\", indexMemoryUsage.get());\n    stats.add(\"index.segments\", segmentCount.get());\n    previous = now;\n    \n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#getStatistics().mjava","sourceNew":null,"sourceOld":"  public NamedList<Number> getStatistics() {\n    NamedList<Number> stats = new SimpleOrderedMap<>(21); // room for one method call before growing\n\n    long now = System.nanoTime();\n    long delta = Math.max(now - previous, 1);\n    double seconds = delta / 1000000000.0;\n\n    long hits_total = blockCacheHit.get();\n    long hits_delta = hits_total - blockCacheHit_last.get();\n    blockCacheHit_last.set(hits_total);\n\n    long miss_total = blockCacheMiss.get();\n    long miss_delta = miss_total - blockCacheMiss_last.get();\n    blockCacheMiss_last.set(miss_total);\n\n    long evict_total = blockCacheEviction.get();\n    long evict_delta = evict_total - blockCacheEviction_last.get();\n    blockCacheEviction_last.set(evict_total);\n\n    long storeFail_total = blockCacheStoreFail.get();\n    long storeFail_delta = storeFail_total - blockCacheStoreFail_last.get();\n    blockCacheStoreFail_last.set(storeFail_total);\n\n    long lookups_delta = hits_delta + miss_delta;\n    long lookups_total = hits_total + miss_total;\n\n    stats.add(\"size\", blockCacheSize.get());\n    stats.add(\"lookups\", lookups_total);\n    stats.add(\"hits\", hits_total);\n    stats.add(\"evictions\", evict_total);\n    stats.add(\"storeFails\", storeFail_total);\n    stats.add(\"hitratio_current\", calcHitRatio(lookups_delta, hits_delta));  // hit ratio since the last call\n    stats.add(\"lookups_persec\", getPerSecond(lookups_delta, seconds)); // lookups per second since the last call\n    stats.add(\"hits_persec\", getPerSecond(hits_delta, seconds));       // hits per second since the last call\n    stats.add(\"evictions_persec\", getPerSecond(evict_delta, seconds));  // evictions per second since the last call\n    stats.add(\"storeFails_persec\", getPerSecond(storeFail_delta, seconds));  // evictions per second since the last call\n    stats.add(\"time_delta\", seconds);  // seconds since last call\n\n    // TODO: these aren't really related to the BlockCache\n    stats.add(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n    stats.add(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n\n    previous = now;\n\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#getStatistics().mjava","sourceNew":null,"sourceOld":"  public NamedList<Number> getStatistics() {\n    NamedList<Number> stats = new SimpleOrderedMap<>(21); // room for one method call before growing\n\n    long now = System.nanoTime();\n    long delta = Math.max(now - previous, 1);\n    double seconds = delta / 1000000000.0;\n\n    long hits_total = blockCacheHit.get();\n    long hits_delta = hits_total - blockCacheHit_last.get();\n    blockCacheHit_last.set(hits_total);\n\n    long miss_total = blockCacheMiss.get();\n    long miss_delta = miss_total - blockCacheMiss_last.get();\n    blockCacheMiss_last.set(miss_total);\n\n    long evict_total = blockCacheEviction.get();\n    long evict_delta = evict_total - blockCacheEviction_last.get();\n    blockCacheEviction_last.set(evict_total);\n\n    long storeFail_total = blockCacheStoreFail.get();\n    long storeFail_delta = storeFail_total - blockCacheStoreFail_last.get();\n    blockCacheStoreFail_last.set(storeFail_total);\n\n    long lookups_delta = hits_delta + miss_delta;\n    long lookups_total = hits_total + miss_total;\n\n    stats.add(\"size\", blockCacheSize.get());\n    stats.add(\"lookups\", lookups_total);\n    stats.add(\"hits\", hits_total);\n    stats.add(\"evictions\", evict_total);\n    stats.add(\"storeFails\", storeFail_total);\n    stats.add(\"hitratio_current\", calcHitRatio(lookups_delta, hits_delta));  // hit ratio since the last call\n    stats.add(\"lookups_persec\", getPerSecond(lookups_delta, seconds)); // lookups per second since the last call\n    stats.add(\"hits_persec\", getPerSecond(hits_delta, seconds));       // hits per second since the last call\n    stats.add(\"evictions_persec\", getPerSecond(evict_delta, seconds));  // evictions per second since the last call\n    stats.add(\"storeFails_persec\", getPerSecond(storeFail_delta, seconds));  // evictions per second since the last call\n    stats.add(\"time_delta\", seconds);  // seconds since last call\n\n    // TODO: these aren't really related to the BlockCache\n    stats.add(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n    stats.add(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n\n    previous = now;\n\n    return stats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["d329f927fde9f646d6fce133cbd41dd2dbe4ed54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7da173d341edb3a56705e0ee852574c69d83aa6f":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"816521ebaad5add9cb96bb88c577394e2938c40b":["d329f927fde9f646d6fce133cbd41dd2dbe4ed54"],"d329f927fde9f646d6fce133cbd41dd2dbe4ed54":["7da173d341edb3a56705e0ee852574c69d83aa6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"7da173d341edb3a56705e0ee852574c69d83aa6f":["d329f927fde9f646d6fce133cbd41dd2dbe4ed54"],"d329f927fde9f646d6fce133cbd41dd2dbe4ed54":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["7da173d341edb3a56705e0ee852574c69d83aa6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}