{"path":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#copyFiles(Directory,SnapshotDeletionPolicy,IndexCommitPoint).mjava","commits":[{"id":"d60f4e15b3e2fb549c23c8f2096249d439876df8","date":1204035825,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#copyFiles(Directory,SnapshotDeletionPolicy,IndexCommitPoint).mjava","pathOld":"/dev/null","sourceNew":"  private void copyFiles(Directory dir, SnapshotDeletionPolicy dp, IndexCommitPoint cp) throws IOException {\n\n    // While we hold the snapshot, and nomatter how long\n    // we take to do the backup, the IndexWriter will\n    // never delete the files in the snapshot:\n    Collection files = cp.getFileNames();\n    Iterator it = files.iterator();\n    while(it.hasNext()) {\n      final String fileName = (String) it.next();\n      // NOTE: in a real backup you would not use\n      // readFile; you would need to use something else\n      // that copies the file to a backup location.  This\n      // could even be a spawned shell process (eg \"tar\",\n      // \"zip\") that takes the list of files and builds a\n      // backup.\n      readFile(dir, fileName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1559506fd82ede79bd8e60facef2a57524e175","date":1204808228,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#copyFiles(Directory,IndexCommit).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#copyFiles(Directory,SnapshotDeletionPolicy,IndexCommitPoint).mjava","sourceNew":"  private void copyFiles(Directory dir, IndexCommit cp) throws IOException {\n\n    // While we hold the snapshot, and nomatter how long\n    // we take to do the backup, the IndexWriter will\n    // never delete the files in the snapshot:\n    Collection files = cp.getFileNames();\n    Iterator it = files.iterator();\n    while(it.hasNext()) {\n      final String fileName = (String) it.next();\n      // NOTE: in a real backup you would not use\n      // readFile; you would need to use something else\n      // that copies the file to a backup location.  This\n      // could even be a spawned shell process (eg \"tar\",\n      // \"zip\") that takes the list of files and builds a\n      // backup.\n      readFile(dir, fileName);\n    }\n  }\n\n","sourceOld":"  private void copyFiles(Directory dir, SnapshotDeletionPolicy dp, IndexCommitPoint cp) throws IOException {\n\n    // While we hold the snapshot, and nomatter how long\n    // we take to do the backup, the IndexWriter will\n    // never delete the files in the snapshot:\n    Collection files = cp.getFileNames();\n    Iterator it = files.iterator();\n    while(it.hasNext()) {\n      final String fileName = (String) it.next();\n      // NOTE: in a real backup you would not use\n      // readFile; you would need to use something else\n      // that copies the file to a backup location.  This\n      // could even be a spawned shell process (eg \"tar\",\n      // \"zip\") that takes the list of files and builds a\n      // backup.\n      readFile(dir, fileName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d60f4e15b3e2fb549c23c8f2096249d439876df8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1559506fd82ede79bd8e60facef2a57524e175":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a1559506fd82ede79bd8e60facef2a57524e175"]},"commit2Childs":{"d60f4e15b3e2fb549c23c8f2096249d439876df8":["8a1559506fd82ede79bd8e60facef2a57524e175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"8a1559506fd82ede79bd8e60facef2a57524e175":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}