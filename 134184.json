{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testSurfacePointOnBearingScale().mjava","commits":[{"id":"e4218e96184b4af9d31258a45a87da597ea58ac7","date":1512293271,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testSurfacePointOnBearingScale().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSurfacePointOnBearingScale(){\n    double ab = 1.6;\n    double c = 0.7;\n    PlanetModel p1 = PlanetModel.WGS84;\n    PlanetModel p2 = new PlanetModel(0.5 * PlanetModel.WGS84.ab, 0.5 * PlanetModel.WGS84.c );\n    GeoPoint point1P1 = new GeoPoint(p1, 0, 0);\n    GeoPoint point2P1 =  new GeoPoint(p1, 1, 1);\n    GeoPoint point1P2 = new GeoPoint(p2, point1P1.getLatitude(), point1P1.getLongitude());\n    GeoPoint point2P2 = new GeoPoint(p2, point2P1.getLatitude(), point2P1.getLongitude());\n\n    double dist =  0.2* Math.PI;\n    double bearing = 0.2 * Math.PI;\n\n    GeoPoint new1 = p1.surfacePointOnBearing(point2P1, dist, bearing);\n    GeoPoint new2 = p2.surfacePointOnBearing(point2P2, dist, bearing);\n\n    assertEquals(new1.getLatitude(), new2.getLatitude(), 1e-12);\n    assertEquals(new1.getLongitude(), new2.getLongitude(), 1e-12);\n    //This is true if surfaceDistance return results always in radians\n    double d1 = p1.surfaceDistance(point1P1, point2P1);\n    double d2 = p2.surfaceDistance(point1P2, point2P2);\n    assertEquals(d1, d2, 1e-12);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a03d351abb1e487ff1b7feaacc286da105d59a04","date":1512729671,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testSurfacePointOnBearingScale().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testSurfacePointOnBearingScale().mjava","sourceNew":"  @Test\n  public void testSurfacePointOnBearingScale(){\n    PlanetModel p1 = PlanetModel.WGS84;\n    PlanetModel p2 = new PlanetModel(0.5 * PlanetModel.WGS84.ab, 0.5 * PlanetModel.WGS84.c );\n    GeoPoint point1P1 = new GeoPoint(p1, 0, 0);\n    GeoPoint point2P1 =  new GeoPoint(p1, 1, 1);\n    GeoPoint point1P2 = new GeoPoint(p2, point1P1.getLatitude(), point1P1.getLongitude());\n    GeoPoint point2P2 = new GeoPoint(p2, point2P1.getLatitude(), point2P1.getLongitude());\n\n    double dist =  0.2* Math.PI;\n    double bearing = 0.2 * Math.PI;\n\n    GeoPoint new1 = p1.surfacePointOnBearing(point2P1, dist, bearing);\n    GeoPoint new2 = p2.surfacePointOnBearing(point2P2, dist, bearing);\n\n    assertEquals(new1.getLatitude(), new2.getLatitude(), 1e-12);\n    assertEquals(new1.getLongitude(), new2.getLongitude(), 1e-12);\n    //This is true if surfaceDistance return results always in radians\n    double d1 = p1.surfaceDistance(point1P1, point2P1);\n    double d2 = p2.surfaceDistance(point1P2, point2P2);\n    assertEquals(d1, d2, 1e-12);\n  }\n\n","sourceOld":"  @Test\n  public void testSurfacePointOnBearingScale(){\n    double ab = 1.6;\n    double c = 0.7;\n    PlanetModel p1 = PlanetModel.WGS84;\n    PlanetModel p2 = new PlanetModel(0.5 * PlanetModel.WGS84.ab, 0.5 * PlanetModel.WGS84.c );\n    GeoPoint point1P1 = new GeoPoint(p1, 0, 0);\n    GeoPoint point2P1 =  new GeoPoint(p1, 1, 1);\n    GeoPoint point1P2 = new GeoPoint(p2, point1P1.getLatitude(), point1P1.getLongitude());\n    GeoPoint point2P2 = new GeoPoint(p2, point2P1.getLatitude(), point2P1.getLongitude());\n\n    double dist =  0.2* Math.PI;\n    double bearing = 0.2 * Math.PI;\n\n    GeoPoint new1 = p1.surfacePointOnBearing(point2P1, dist, bearing);\n    GeoPoint new2 = p2.surfacePointOnBearing(point2P2, dist, bearing);\n\n    assertEquals(new1.getLatitude(), new2.getLatitude(), 1e-12);\n    assertEquals(new1.getLongitude(), new2.getLongitude(), 1e-12);\n    //This is true if surfaceDistance return results always in radians\n    double d1 = p1.surfaceDistance(point1P1, point2P1);\n    double d2 = p2.surfaceDistance(point1P2, point2P2);\n    assertEquals(d1, d2, 1e-12);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testSurfacePointOnBearingScale().mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/GeoExactCircleTest#testSurfacePointOnBearingScale().mjava","sourceNew":"  @Test\n  public void testSurfacePointOnBearingScale(){\n    PlanetModel p1 = PlanetModel.WGS84;\n    PlanetModel p2 = new PlanetModel(0.5 * PlanetModel.WGS84.xyScaling, 0.5 * PlanetModel.WGS84.zScaling);\n    GeoPoint point1P1 = new GeoPoint(p1, 0, 0);\n    GeoPoint point2P1 =  new GeoPoint(p1, 1, 1);\n    GeoPoint point1P2 = new GeoPoint(p2, point1P1.getLatitude(), point1P1.getLongitude());\n    GeoPoint point2P2 = new GeoPoint(p2, point2P1.getLatitude(), point2P1.getLongitude());\n\n    double dist =  0.2* Math.PI;\n    double bearing = 0.2 * Math.PI;\n\n    GeoPoint new1 = p1.surfacePointOnBearing(point2P1, dist, bearing);\n    GeoPoint new2 = p2.surfacePointOnBearing(point2P2, dist, bearing);\n\n    assertEquals(new1.getLatitude(), new2.getLatitude(), 1e-12);\n    assertEquals(new1.getLongitude(), new2.getLongitude(), 1e-12);\n    //This is true if surfaceDistance return results always in radians\n    double d1 = p1.surfaceDistance(point1P1, point2P1);\n    double d2 = p2.surfaceDistance(point1P2, point2P2);\n    assertEquals(d1, d2, 1e-12);\n  }\n\n","sourceOld":"  @Test\n  public void testSurfacePointOnBearingScale(){\n    PlanetModel p1 = PlanetModel.WGS84;\n    PlanetModel p2 = new PlanetModel(0.5 * PlanetModel.WGS84.ab, 0.5 * PlanetModel.WGS84.c );\n    GeoPoint point1P1 = new GeoPoint(p1, 0, 0);\n    GeoPoint point2P1 =  new GeoPoint(p1, 1, 1);\n    GeoPoint point1P2 = new GeoPoint(p2, point1P1.getLatitude(), point1P1.getLongitude());\n    GeoPoint point2P2 = new GeoPoint(p2, point2P1.getLatitude(), point2P1.getLongitude());\n\n    double dist =  0.2* Math.PI;\n    double bearing = 0.2 * Math.PI;\n\n    GeoPoint new1 = p1.surfacePointOnBearing(point2P1, dist, bearing);\n    GeoPoint new2 = p2.surfacePointOnBearing(point2P2, dist, bearing);\n\n    assertEquals(new1.getLatitude(), new2.getLatitude(), 1e-12);\n    assertEquals(new1.getLongitude(), new2.getLongitude(), 1e-12);\n    //This is true if surfaceDistance return results always in radians\n    double d1 = p1.surfaceDistance(point1P1, point2P1);\n    double d2 = p2.surfaceDistance(point1P2, point2P2);\n    assertEquals(d1, d2, 1e-12);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e4218e96184b4af9d31258a45a87da597ea58ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a03d351abb1e487ff1b7feaacc286da105d59a04":["e4218e96184b4af9d31258a45a87da597ea58ac7"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["a03d351abb1e487ff1b7feaacc286da105d59a04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"e4218e96184b4af9d31258a45a87da597ea58ac7":["a03d351abb1e487ff1b7feaacc286da105d59a04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e4218e96184b4af9d31258a45a87da597ea58ac7"],"a03d351abb1e487ff1b7feaacc286da105d59a04":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}