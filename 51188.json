{"path":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(Thread.currentThread());\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= MAX_THREAD_STATE)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(Thread.currentThread(), state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DocumentsWriter#getThreadState(Document,Term).mjava","sourceNew":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(Thread.currentThread());\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= MAX_THREAD_STATE)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(Thread.currentThread(), state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","sourceOld":"  /** Returns a free (idle) ThreadState that may be used for\n   * indexing this one document.  This call also pauses if a\n   * flush is pending.  If delTerm is non-null then we\n   * buffer this deleted term after the thread state has\n   * been acquired. */\n  synchronized DocumentsWriterThreadState getThreadState(Document doc, Term delTerm) throws IOException {\n\n    // First, find a thread state.  If this thread already\n    // has affinity to a specific ThreadState, use that one\n    // again.\n    DocumentsWriterThreadState state = threadBindings.get(Thread.currentThread());\n    if (state == null) {\n\n      // First time this thread has called us since last\n      // flush.  Find the least loaded thread state:\n      DocumentsWriterThreadState minThreadState = null;\n      for(int i=0;i<threadStates.length;i++) {\n        DocumentsWriterThreadState ts = threadStates[i];\n        if (minThreadState == null || ts.numThreads < minThreadState.numThreads)\n          minThreadState = ts;\n      }\n      if (minThreadState != null && (minThreadState.numThreads == 0 || threadStates.length >= MAX_THREAD_STATE)) {\n        state = minThreadState;\n        state.numThreads++;\n      } else {\n        // Just create a new \"private\" thread state\n        DocumentsWriterThreadState[] newArray = new DocumentsWriterThreadState[1+threadStates.length];\n        if (threadStates.length > 0)\n          System.arraycopy(threadStates, 0, newArray, 0, threadStates.length);\n        state = newArray[threadStates.length] = new DocumentsWriterThreadState(this);\n        threadStates = newArray;\n      }\n      threadBindings.put(Thread.currentThread(), state);\n    }\n\n    // Next, wait until my thread state is idle (in case\n    // it's shared with other threads) and for threads to\n    // not be paused nor a flush pending:\n    waitReady(state);\n\n    // Allocate segment name if this is the first doc since\n    // last flush:\n    initSegmentName(false);\n\n    state.isIdle = false;\n\n    boolean success = false;\n    try {\n      state.docState.docID = nextDocID;\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init start\");\n\n      if (delTerm != null) {\n        addDeleteTerm(delTerm, state.docState.docID);\n        state.doFlushAfter = timeToFlushDeletes();\n      }\n\n      assert writer.testPoint(\"DocumentsWriter.ThreadState.init after delTerm\");\n\n      nextDocID++;\n      numDocsInRAM++;\n\n      // We must at this point commit to flushing to ensure we\n      // always get N docs when we flush by doc count, even if\n      // > 1 thread is adding documents:\n      if (!flushPending &&\n          maxBufferedDocs != IndexWriter.DISABLE_AUTO_FLUSH\n          && numDocsInRAM >= maxBufferedDocs) {\n        flushPending = true;\n        state.doFlushAfter = true;\n      }\n\n      success = true;\n    } finally {\n      if (!success) {\n        // Forcefully idle this ThreadState:\n        state.isIdle = true;\n        notifyAll();\n        if (state.doFlushAfter) {\n          state.doFlushAfter = false;\n          flushPending = false;\n        }\n      }\n    }\n\n    return state;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}