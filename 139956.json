{"path":"backwards/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRandCollating().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRandCollating().mjava","pathOld":"/dev/null","sourceNew":"    public void testRangeFilterRandCollating() throws IOException {\n\n        // using the unsigned index because collation seems to ignore hyphens\n        IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        Collator c = Collator.getInstance(Locale.ENGLISH);\n\n        String minRP = pad(unsignedIndex.minR);\n        String maxRP = pad(unsignedIndex.maxR);\n\n        int numDocs = reader.numDocs();\n\n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n\n        int numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T,c), 1000).totalHits;\n        assertEquals(\"find all\", numDocs, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F,c), 1000).totalHits;\n        assertEquals(\"all but biggest\", numDocs-1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T,c), 1000).totalHits;\n        assertEquals(\"all but smallest\", numDocs-1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F,c), 1000).totalHits;\n        assertEquals(\"all but extremes\", numDocs-2, numHits);\n\n        // unbounded\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F,c), 1000).totalHits;\n        assertEquals(\"smallest and up\", numDocs, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T,c), 1000).totalHits;\n        assertEquals(\"biggest and down\", numDocs, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F,c), 1000).totalHits;\n        assertEquals(\"not smallest, but up\", numDocs-1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F,c), 1000).totalHits;\n        assertEquals(\"not biggest, but down\", numDocs-1, numHits);\n\n        // very small sets\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F,c), 1000).totalHits;\n        assertEquals(\"min,min,F,F\", 0, numHits);\n        numHits = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F,c), 1000).totalHits;\n        assertEquals(\"max,max,F,F\", 0, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T,c), 1000).totalHits;\n        assertEquals(\"min,min,T,T\", 1, numHits);\n        numHits = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T,c), 1000).totalHits;\n        assertEquals(\"nul,min,F,T\", 1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T,c), 1000).totalHits;\n        assertEquals(\"max,max,T,T\", 1, numHits);\n        numHits = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F,c), 1000).totalHits;\n        assertEquals(\"max,nul,T,T\", 1, numHits);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRandCollating().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterRandCollating().mjava","sourceNew":"    public void testRangeFilterRandCollating() throws IOException {\n\n        // using the unsigned index because collation seems to ignore hyphens\n        IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        Collator c = Collator.getInstance(Locale.ENGLISH);\n\n        String minRP = pad(unsignedIndex.minR);\n        String maxRP = pad(unsignedIndex.maxR);\n\n        int numDocs = reader.numDocs();\n\n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n\n        int numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T,c), 1000).totalHits;\n        assertEquals(\"find all\", numDocs, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F,c), 1000).totalHits;\n        assertEquals(\"all but biggest\", numDocs-1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T,c), 1000).totalHits;\n        assertEquals(\"all but smallest\", numDocs-1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F,c), 1000).totalHits;\n        assertEquals(\"all but extremes\", numDocs-2, numHits);\n\n        // unbounded\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F,c), 1000).totalHits;\n        assertEquals(\"smallest and up\", numDocs, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T,c), 1000).totalHits;\n        assertEquals(\"biggest and down\", numDocs, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F,c), 1000).totalHits;\n        assertEquals(\"not smallest, but up\", numDocs-1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F,c), 1000).totalHits;\n        assertEquals(\"not biggest, but down\", numDocs-1, numHits);\n\n        // very small sets\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F,c), 1000).totalHits;\n        assertEquals(\"min,min,F,F\", 0, numHits);\n        numHits = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F,c), 1000).totalHits;\n        assertEquals(\"max,max,F,F\", 0, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T,c), 1000).totalHits;\n        assertEquals(\"min,min,T,T\", 1, numHits);\n        numHits = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T,c), 1000).totalHits;\n        assertEquals(\"nul,min,F,T\", 1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T,c), 1000).totalHits;\n        assertEquals(\"max,max,T,T\", 1, numHits);\n        numHits = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F,c), 1000).totalHits;\n        assertEquals(\"max,nul,T,T\", 1, numHits);\n    }\n\n","sourceOld":"    public void testRangeFilterRandCollating() throws IOException {\n\n        // using the unsigned index because collation seems to ignore hyphens\n        IndexReader reader = IndexReader.open(unsignedIndex.index, true);\n        IndexSearcher search = new IndexSearcher(reader);\n\n        Collator c = Collator.getInstance(Locale.ENGLISH);\n\n        String minRP = pad(unsignedIndex.minR);\n        String maxRP = pad(unsignedIndex.maxR);\n\n        int numDocs = reader.numDocs();\n\n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test extremes, bounded on both ends\n\n        int numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,T,c), 1000).totalHits;\n        assertEquals(\"find all\", numDocs, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,T,F,c), 1000).totalHits;\n        assertEquals(\"all but biggest\", numDocs-1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,T,c), 1000).totalHits;\n        assertEquals(\"all but smallest\", numDocs-1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,maxRP,F,F,c), 1000).totalHits;\n        assertEquals(\"all but extremes\", numDocs-2, numHits);\n\n        // unbounded\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,null,T,F,c), 1000).totalHits;\n        assertEquals(\"smallest and up\", numDocs, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,T,c), 1000).totalHits;\n        assertEquals(\"biggest and down\", numDocs, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,null,F,F,c), 1000).totalHits;\n        assertEquals(\"not smallest, but up\", numDocs-1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",null,maxRP,F,F,c), 1000).totalHits;\n        assertEquals(\"not biggest, but down\", numDocs-1, numHits);\n\n        // very small sets\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,F,F,c), 1000).totalHits;\n        assertEquals(\"min,min,F,F\", 0, numHits);\n        numHits = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,F,F,c), 1000).totalHits;\n        assertEquals(\"max,max,F,F\", 0, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",minRP,minRP,T,T,c), 1000).totalHits;\n        assertEquals(\"min,min,T,T\", 1, numHits);\n        numHits = search.search(q,new TermRangeFilter(\"rand\",null,minRP,F,T,c), 1000).totalHits;\n        assertEquals(\"nul,min,F,T\", 1, numHits);\n\n        numHits = search.search(q,new TermRangeFilter(\"rand\",maxRP,maxRP,T,T,c), 1000).totalHits;\n        assertEquals(\"max,max,T,T\", 1, numHits);\n        numHits = search.search(q,new TermRangeFilter(\"rand\",maxRP,null,T,F,c), 1000).totalHits;\n        assertEquals(\"max,nul,T,T\", 1, numHits);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}