{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","commits":[{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    lastState = emptyState;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n    return 0;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    lastState = emptyState;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n    return 0;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public void setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n\n    lastState = emptyState;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n    return 0;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n    this.fieldInfo = fieldInfo;\n    indexOptions = fieldInfo.getIndexOptions();\n    \n    storeOffsets = indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;        \n    storePayloads = fieldInfo.hasPayloads();\n    lastState = emptyState;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n\n    lastState = emptyState;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n    return 0;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n\n    lastState = emptyState;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsWriter#setField(FieldInfo).mjava","sourceNew":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n\n    lastState = emptyState;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n    return 0;\n  }\n\n","sourceOld":"  // Currently, this instance is re-used across fields, so\n  // our parent calls setField whenever the field changes\n  @Override\n  public int setField(FieldInfo fieldInfo) {\n    super.setField(fieldInfo);\n    //System.out.println(\"SPW: setField\");\n    /*\n    if (BlockTreeTermsWriter.DEBUG && fieldInfo.name.equals(\"id\")) {\n      DEBUG = true;\n    } else {\n      DEBUG = false;\n    }\n    */\n\n    lastState = emptyState;\n    //System.out.println(\"  set init blockFreqStart=\" + freqStart);\n    //System.out.println(\"  set init blockProxStart=\" + proxStart);\n    return 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6616b1fd222bb5a60f7f7856ace312252bc97890"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","db4fdbf3d262768eabc027cd8321edca0cd11fa8","2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}