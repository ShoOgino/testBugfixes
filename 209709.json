{"path":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random);\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").indexOptions);\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").indexOptions);\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(IndexReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.shutdown();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.shutdown();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.shutdown();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.shutdown();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS_ONLY, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestOmitTf#testMixedRAM().mjava","sourceNew":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    LeafReader reader = getOnlyLeafReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","sourceOld":"  // Make sure first adding docs that do not omitTermFreqAndPositions for\n  // field X, then adding docs that do omitTermFreqAndPositions for that same\n  // field, \n  public void testMixedRAM() throws Exception {\n    Directory ram = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriter writer = new IndexWriter(\n        ram,\n        newIndexWriterConfig(analyzer).\n            setMaxBufferedDocs(10).\n            setMergePolicy(newLogMergePolicy(2))\n    );\n    Document d = new Document();\n        \n    // this field will have Tf\n    Field f1 = newField(\"f1\", \"This field has term freqs\", normalType);\n    d.add(f1);\n       \n    // this field will NOT have Tf\n    Field f2 = newField(\"f2\", \"This field has NO Tf in all docs\", omitType);\n    d.add(f2);\n\n    for(int i=0;i<5;i++)\n      writer.addDocument(d);\n\n    for(int i=0;i<20;i++)\n      writer.addDocument(d);\n\n    // force merge\n    writer.forceMerge(1);\n\n    // flush\n    writer.close();\n\n    SegmentReader reader = getOnlySegmentReader(DirectoryReader.open(ram));\n    FieldInfos fi = reader.getFieldInfos();\n    assertEquals(\"OmitTermFreqAndPositions field bit should not be set.\", IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, fi.fieldInfo(\"f1\").getIndexOptions());\n    assertEquals(\"OmitTermFreqAndPositions field bit should be set.\", IndexOptions.DOCS, fi.fieldInfo(\"f2\").getIndexOptions());\n        \n    reader.close();\n    ram.close();\n  }\n\n","bugFix":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}