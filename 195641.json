{"path":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#setupCluster().mjava","commits":[{"id":"5ebf70dabe6279454c5ff460bdea3f0dc2814a86","date":1463672611,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", TEST_PATH().resolve(\"configsets\").resolve(\"exitable-directory\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 2, 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", TEST_PATH().resolve(\"configsets\").resolve(\"exitable-directory\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 2, 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", TEST_PATH().resolve(\"configsets\").resolve(\"exitable-directory\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 2, 1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3584d3db8b472772e3329d9d95d584b68ae997e","date":1551710517,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    Builder clusterBuilder = configureCluster(2)\n        .addConfig(\"conf\", TEST_PATH().resolve(\"configsets\").resolve(\"exitable-directory\").resolve(\"conf\"));\n    clusterBuilder.withMetrics(true);\n    clusterBuilder\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 2, 1));\n\n    fiveHundredsByNode = new LinkedHashMap<>(); \n    for (JettySolrRunner jetty: cluster.getJettySolrRunners()) {\n      MetricRegistry metricRegistry = ((JettySolrRunnerWithMetrics)jetty).getMetricRegistry();\n      Metered httpOk = (Metered) metricRegistry.getMetrics()\n          .get(\"org.eclipse.jetty.servlet.ServletContextHandler.2xx-responses\");\n      assertTrue(\"expeting some http activity during collection creation\",httpOk.getCount()>0);\n      \n      Metered old = fiveHundredsByNode.put(jetty.getNodeName(),\n          (Metered) metricRegistry.getMetrics()\n             .get(\"org.eclipse.jetty.servlet.ServletContextHandler.5xx-responses\"));\n      assertNull(\"expecting uniq nodenames\",old);\n    }\n    \n    indexDocs();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    configureCluster(2)\n        .addConfig(\"conf\", TEST_PATH().resolve(\"configsets\").resolve(\"exitable-directory\").resolve(\"conf\"))\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 2, 1));\n  }\n\n","bugFix":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e10849ad44771e6db197a65e8a652e934896a404","date":1568244568,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CloudExitableDirectoryReaderTest#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    // create one more node then shard, so that we also test the case of proxied requests.\n    Builder clusterBuilder = configureCluster(3)\n        .addConfig(\"conf\", TEST_PATH().resolve(\"configsets\").resolve(\"exitable-directory\").resolve(\"conf\"));\n    clusterBuilder.withMetrics(true);\n    clusterBuilder\n        .configure();\n\n    // pick an arbitrary node to use for our requests\n    client = cluster.getRandomJetty(random()).newClient();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 2, 1));\n\n    fiveHundredsByNode = new LinkedHashMap<>();\n    int httpOk = 0;\n    for (JettySolrRunner jetty: cluster.getJettySolrRunners()) {\n      MetricRegistry metricRegistry = ((JettySolrRunnerWithMetrics)jetty).getMetricRegistry();\n      \n      httpOk += ((Metered) metricRegistry.getMetrics()\n                 .get(\"org.eclipse.jetty.servlet.ServletContextHandler.2xx-responses\")).getCount();\n      \n      Metered old = fiveHundredsByNode.put(jetty.getNodeName(),\n          (Metered) metricRegistry.getMetrics()\n             .get(\"org.eclipse.jetty.servlet.ServletContextHandler.5xx-responses\"));\n      assertNull(\"expecting uniq nodenames\",old);\n    }\n    assertTrue(\"expecting some http activity during collection creation\", httpOk > 0);\n    indexDocs();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n    Builder clusterBuilder = configureCluster(2)\n        .addConfig(\"conf\", TEST_PATH().resolve(\"configsets\").resolve(\"exitable-directory\").resolve(\"conf\"));\n    clusterBuilder.withMetrics(true);\n    clusterBuilder\n        .configure();\n\n    CollectionAdminRequest.createCollection(COLLECTION, \"conf\", 2, 1)\n        .processAndWait(cluster.getSolrClient(), DEFAULT_TIMEOUT);\n    cluster.getSolrClient().waitForState(COLLECTION, DEFAULT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 2, 1));\n\n    fiveHundredsByNode = new LinkedHashMap<>(); \n    for (JettySolrRunner jetty: cluster.getJettySolrRunners()) {\n      MetricRegistry metricRegistry = ((JettySolrRunnerWithMetrics)jetty).getMetricRegistry();\n      Metered httpOk = (Metered) metricRegistry.getMetrics()\n          .get(\"org.eclipse.jetty.servlet.ServletContextHandler.2xx-responses\");\n      assertTrue(\"expeting some http activity during collection creation\",httpOk.getCount()>0);\n      \n      Metered old = fiveHundredsByNode.put(jetty.getNodeName(),\n          (Metered) metricRegistry.getMetrics()\n             .get(\"org.eclipse.jetty.servlet.ServletContextHandler.5xx-responses\"));\n      assertNull(\"expecting uniq nodenames\",old);\n    }\n    \n    indexDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e10849ad44771e6db197a65e8a652e934896a404":["a3584d3db8b472772e3329d9d95d584b68ae997e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3584d3db8b472772e3329d9d95d584b68ae997e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e10849ad44771e6db197a65e8a652e934896a404"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5ebf70dabe6279454c5ff460bdea3f0dc2814a86"]},"commit2Childs":{"e10849ad44771e6db197a65e8a652e934896a404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5ebf70dabe6279454c5ff460bdea3f0dc2814a86","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a3584d3db8b472772e3329d9d95d584b68ae997e":["e10849ad44771e6db197a65e8a652e934896a404"],"5ebf70dabe6279454c5ff460bdea3f0dc2814a86":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a3584d3db8b472772e3329d9d95d584b68ae997e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}