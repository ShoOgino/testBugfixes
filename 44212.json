{"path":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist.\n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist.\n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8028ab7a24273833d53d35eb160dba5b57283cf5","date":1416767720,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist.\n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Terms terms = terms(term.field());\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term.bytes())) {\n        return termsEnum.docs(getLiveDocs(), null);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist.\n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":["b6a0e3c1c21aac8ecf75706605133012833585c7","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","sourceNew":"  public final PostingsEnum termDocsEnum(Term term) throws IOException {\n    return termDocsEnum(term, PostingsEnum.FLAG_FREQS);\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist.\n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Terms terms = terms(term.field());\n    if (terms != null) {\n      final TermsEnum termsEnum = terms.iterator(null);\n      if (termsEnum.seekExact(term.bytes())) {\n        return termsEnum.docs(getLiveDocs(), null);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4f43e087df2af5b7a3c51863459c0147db572ed","date":1423234516,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","sourceNew":"  /** Returns {@link PostingsEnum} for the specified term\n   *  with {@link PostingsEnum#FLAG_FREQS}. */\n  public final PostingsEnum termDocsEnum(Term term) throws IOException {\n    return termDocsEnum(term, PostingsEnum.FLAG_FREQS);\n  }\n\n","sourceOld":"  public final PostingsEnum termDocsEnum(Term term) throws IOException {\n    return termDocsEnum(term, PostingsEnum.FLAG_FREQS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","sourceNew":null,"sourceOld":"  /** Returns {@link PostingsEnum} for the specified term\n   *  with {@link PostingsEnum#FLAG_FREQS}. */\n  public final PostingsEnum termDocsEnum(Term term) throws IOException {\n    return termDocsEnum(term, PostingsEnum.FLAG_FREQS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["f4f43e087df2af5b7a3c51863459c0147db572ed"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"f4f43e087df2af5b7a3c51863459c0147db572ed":["51f5280f31484820499077f41fcdfe92d527d9dc"]},"commit2Childs":{"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8028ab7a24273833d53d35eb160dba5b57283cf5":["51f5280f31484820499077f41fcdfe92d527d9dc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"51f5280f31484820499077f41fcdfe92d527d9dc":["f4f43e087df2af5b7a3c51863459c0147db572ed"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"f4f43e087df2af5b7a3c51863459c0147db572ed":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}