{"path":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","commits":[{"id":"59a137a4ad7cc8cd87bbb06ffe71cc00a7d9236a","date":1300293010,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"/dev/null","sourceNew":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"/dev/null","sourceNew":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"/dev/null","sourceNew":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebb742ffd3fae76a577a68de595d711f43e6944","date":1305546231,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","sourceNew":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n    switchDoDocValues();\n  }\n\n","sourceOld":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","sourceNew":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n    switchDoDocValues();\n  }\n\n","sourceOld":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","sourceNew":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n    switchDoDocValues();\n  }\n\n","sourceOld":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4aa50b979cd392e00e5bc0f23f78cbd106cb968","date":1308150768,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","sourceNew":"  private void doRandomOptimize() throws IOException {\n    if (doRandomOptimize) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full optimize\n        w.optimize();\n      } else {\n        // partial optimize\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        w.optimize(limit);\n        assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","sourceOld":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n    switchDoDocValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","sourceNew":"  private void doRandomOptimize() throws IOException {\n    if (doRandomOptimize) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full optimize\n        w.optimize();\n      } else {\n        // partial optimize\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        w.optimize(limit);\n        assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","sourceOld":"  private void doRandomOptimize() throws IOException {\n    final int segCount = w.getSegmentCount();\n    if (r.nextBoolean() || segCount == 0) {\n      // full optimize\n      w.optimize();\n    } else {\n      // partial optimize\n      final int limit = _TestUtil.nextInt(r, 1, segCount);\n      w.optimize(limit);\n      assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n    }\n    switchDoDocValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"031ae5afb33da06d0ca4e6006d2fdb9d7594bcf0","date":1312207709,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","sourceNew":"  private void doRandomOptimize() throws IOException {\n    if (doRandomOptimize) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full optimize\n        w.optimize();\n      } else {\n        // partial optimize\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        w.optimize(limit);\n        assert !doRandomOptimizeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","sourceOld":"  private void doRandomOptimize() throws IOException {\n    if (doRandomOptimize) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full optimize\n        w.optimize();\n      } else {\n        // partial optimize\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        w.optimize(limit);\n        assert w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/index/RandomIndexWriter#doRandomOptimize().mjava","sourceNew":"  private void doRandomOptimize() throws IOException {\n    if (doRandomOptimize) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full optimize\n        w.optimize();\n      } else {\n        // partial optimize\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        w.optimize(limit);\n        assert !doRandomOptimizeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","sourceOld":"  private void doRandomOptimize() throws IOException {\n    if (doRandomOptimize) {\n      final int segCount = w.getSegmentCount();\n      if (r.nextBoolean() || segCount == 0) {\n        // full optimize\n        w.optimize();\n      } else {\n        // partial optimize\n        final int limit = _TestUtil.nextInt(r, 1, segCount);\n        w.optimize(limit);\n        assert !doRandomOptimizeAssert || w.getSegmentCount() <= limit: \"limit=\" + limit + \" actual=\" + w.getSegmentCount();\n      }\n    }\n    switchDoDocValues();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["59a137a4ad7cc8cd87bbb06ffe71cc00a7d9236a","2e8d7ba2175f47e280231533f7d3016249cea88b"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"7b91922b55d15444d554721b352861d028eb8278":["031ae5afb33da06d0ca4e6006d2fdb9d7594bcf0"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["59a137a4ad7cc8cd87bbb06ffe71cc00a7d9236a","5ebb742ffd3fae76a577a68de595d711f43e6944"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59a137a4ad7cc8cd87bbb06ffe71cc00a7d9236a"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","59a137a4ad7cc8cd87bbb06ffe71cc00a7d9236a"],"031ae5afb33da06d0ca4e6006d2fdb9d7594bcf0":["d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a137a4ad7cc8cd87bbb06ffe71cc00a7d9236a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ebb742ffd3fae76a577a68de595d711f43e6944":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","d4aa50b979cd392e00e5bc0f23f78cbd106cb968"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":["5ebb742ffd3fae76a577a68de595d711f43e6944"],"031ae5afb33da06d0ca4e6006d2fdb9d7594bcf0":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","59a137a4ad7cc8cd87bbb06ffe71cc00a7d9236a"],"59a137a4ad7cc8cd87bbb06ffe71cc00a7d9236a":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"d4aa50b979cd392e00e5bc0f23f78cbd106cb968":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","031ae5afb33da06d0ca4e6006d2fdb9d7594bcf0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}