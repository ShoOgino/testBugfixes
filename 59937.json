{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","date":1330500722,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","sourceNew":"  private ShardResponse take(boolean bailOnError) {\r\n    \r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        if (bailOnError && rsp.getException() != null) return rsp; // if exception, return immediately\r\n        // add response to the response list... we do this after the take() and\r\n        // not after the completion of \"call\" so we know when the last response\r\n        // for a request was received.  Otherwise we might return the same\r\n        // request more than once.\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#take().mjava","sourceNew":null,"sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest */\r\n  ShardResponse take() {\r\n    while (pending.size() > 0) {\r\n      try {\r\n        Future<ShardResponse> future = completionService.take();\r\n        pending.remove(future);\r\n        ShardResponse rsp = future.get();\r\n        rsp.getShardRequest().responses.add(rsp);\r\n        if (rsp.getShardRequest().responses.size() == rsp.getShardRequest().actualShards.length) {\r\n          return rsp;\r\n        }\r\n      } catch (InterruptedException e) {\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\r\n      } catch (ExecutionException e) {\r\n        // should be impossible... the problem with catching the exception\r\n        // at this level is we don't know what ShardRequest it applied to\r\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Impossible Exception\",e);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["c26f00b574427b55127e869b935845554afde1fa"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["c26f00b574427b55127e869b935845554afde1fa","e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"]},"commit2Childs":{"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}