{"path":"src/java/org/apache/lucene/analysis/NumericTokenStream#next(Token).mjava","commits":[{"id":"53b6c192847de8643a5da505cc433cbf8476a175","date":1245413392,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NumericTokenStream#next(Token).mjava","pathOld":"/dev/null","sourceNew":"  // @Override\n  /** @deprecated Will be removed in Lucene 3.0 */\n  public Token next(final Token reusableToken) {\n    assert reusableToken != null;\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return null;\n    \n    reusableToken.clear();\n\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = reusableToken.resizeTermBuffer(NumericUtils.LONG_BUF_SIZE);\n        reusableToken.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        reusableToken.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC_64 : TOKEN_TYPE_LOWER_PREC_64);\n        break;\n      \n      case 32:\n        buffer = reusableToken.resizeTermBuffer(NumericUtils.INT_BUF_SIZE);\n        reusableToken.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        reusableToken.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC_32 : TOKEN_TYPE_LOWER_PREC_32);\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n\n    reusableToken.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return reusableToken;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426","date":1247563064,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/NumericTokenStream#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/NumericTokenStream#next(Token).mjava","sourceNew":"  // @Override\n  /** @deprecated Will be removed in Lucene 3.0 */\n  public Token next(final Token reusableToken) {\n    assert reusableToken != null;\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return null;\n    \n    reusableToken.clear();\n\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = reusableToken.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        reusableToken.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = reusableToken.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        reusableToken.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n\n    reusableToken.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    reusableToken.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return reusableToken;\n  }\n\n","sourceOld":"  // @Override\n  /** @deprecated Will be removed in Lucene 3.0 */\n  public Token next(final Token reusableToken) {\n    assert reusableToken != null;\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return null;\n    \n    reusableToken.clear();\n\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = reusableToken.resizeTermBuffer(NumericUtils.LONG_BUF_SIZE);\n        reusableToken.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        reusableToken.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC_64 : TOKEN_TYPE_LOWER_PREC_64);\n        break;\n      \n      case 32:\n        buffer = reusableToken.resizeTermBuffer(NumericUtils.INT_BUF_SIZE);\n        reusableToken.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        reusableToken.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC_32 : TOKEN_TYPE_LOWER_PREC_32);\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n\n    reusableToken.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return reusableToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/NumericTokenStream#next(Token).mjava","sourceNew":null,"sourceOld":"  // @Override\n  /** @deprecated Will be removed in Lucene 3.0 */\n  public Token next(final Token reusableToken) {\n    assert reusableToken != null;\n    if (valSize == 0)\n      throw new IllegalStateException(\"call set???Value() before usage\");\n    if (shift >= valSize)\n      return null;\n    \n    reusableToken.clear();\n\n    final char[] buffer;\n    switch (valSize) {\n      case 64:\n        buffer = reusableToken.resizeTermBuffer(NumericUtils.BUF_SIZE_LONG);\n        reusableToken.setTermLength(NumericUtils.longToPrefixCoded(value, shift, buffer));\n        break;\n      \n      case 32:\n        buffer = reusableToken.resizeTermBuffer(NumericUtils.BUF_SIZE_INT);\n        reusableToken.setTermLength(NumericUtils.intToPrefixCoded((int) value, shift, buffer));\n        break;\n      \n      default:\n        // should not happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n\n    reusableToken.setType((shift == 0) ? TOKEN_TYPE_FULL_PREC : TOKEN_TYPE_LOWER_PREC);\n    reusableToken.setPositionIncrement((shift == 0) ? 1 : 0);\n    shift += precisionStep;\n    return reusableToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["53b6c192847de8643a5da505cc433cbf8476a175"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b6c192847de8643a5da505cc433cbf8476a175":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"]},"commit2Childs":{"6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["53b6c192847de8643a5da505cc433cbf8476a175"],"53b6c192847de8643a5da505cc433cbf8476a175":["6d9efd94ce1ae8bbba50cd7e7f8c56f5552ba426"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}