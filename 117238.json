{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","commits":[{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(1000);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(1000);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(1000);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** \n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(1000);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284a3d7d39e7d338acff76cc560843b7172edea2","date":1426542875,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(1000);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(1000);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(1000);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(1000);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660512549fb1425ce57576423e6ebedbf4018d37","date":1429640258,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(1000);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(i, norms.nextDoc());\n      assertEquals(0, norms.longValue());\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(i, norms.nextDoc());\n      assertEquals(0, norms.longValue());\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    if (codecSupportsSparsity()) {\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, norms.nextDoc());\n    } else {\n      for(int i=0;i<r.maxDoc();i++) {\n        assertEquals(i, norms.nextDoc());\n        assertEquals(0, norms.longValue());\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(i, norms.nextDoc());\n      assertEquals(0, norms.longValue());\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    if (codecSupportsSparsity()) {\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, norms.nextDoc());\n    } else {\n      for(int i=0;i<r.maxDoc();i++) {\n        assertEquals(i, norms.nextDoc());\n        assertEquals(0, norms.longValue());\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    for(int i=0;i<r.maxDoc();i++) {\n      assertEquals(0, norms.get(i));\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    if (codecSupportsSparsity()) {\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, norms.nextDoc());\n    } else {\n      for(int i=0;i<r.maxDoc();i++) {\n        assertEquals(i, norms.nextDoc());\n        assertEquals(0, norms.longValue());\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    if (codecSupportsSparsity()) {\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, norms.nextDoc());\n    } else {\n      for(int i=0;i<r.maxDoc();i++) {\n        assertEquals(i, norms.nextDoc());\n        assertEquals(0, norms.longValue());\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    if (codecSupportsSparsity()) {\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, norms.nextDoc());\n    } else {\n      for(int i=0;i<r.maxDoc();i++) {\n        assertEquals(i, norms.nextDoc());\n        assertEquals(0, norms.longValue());\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    if (codecSupportsSparsity()) {\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, norms.nextDoc());\n    } else {\n      for(int i=0;i<r.maxDoc();i++) {\n        assertEquals(i, norms.nextDoc());\n        assertEquals(0, norms.longValue());\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseNormsFormatTestCase#testUndeadNorms().mjava","sourceNew":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = maybeWrapWithMergingReader(w.getReader());\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    if (codecSupportsSparsity()) {\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, norms.nextDoc());\n    } else {\n      for(int i=0;i<r.maxDoc();i++) {\n        assertEquals(i, norms.nextDoc());\n        assertEquals(0, norms.longValue());\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * LUCENE-6006: Tests undead norms.\n   *                                 .....            \n   *                             C C  /            \n   *                            /<   /             \n   *             ___ __________/_#__=o             \n   *            /(- /(\\_\\________   \\              \n   *            \\ ) \\ )_      \\o     \\             \n   *            /|\\ /|\\       |'     |             \n   *                          |     _|             \n   *                          /o   __\\             \n   *                         / '     |             \n   *                        / /      |             \n   *                       /_/\\______|             \n   *                      (   _(    <              \n   *                       \\    \\    \\             \n   *                        \\    \\    |            \n   *                         \\____\\____\\           \n   *                         ____\\_\\__\\_\\          \n   *                       /`   /`     o\\          \n   *                       |___ |_______|\n   *\n   */\n  public void testUndeadNorms() throws Exception {\n    Directory dir = applyCreatedVersionMajor(newDirectory());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    int numDocs = atLeast(500);\n    List<Integer> toDelete = new ArrayList<>();\n    for(int i=0;i<numDocs;i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"id\", \"\"+i, Field.Store.NO));\n      if (random().nextInt(5) == 1) {\n        toDelete.add(i);\n        doc.add(new TextField(\"content\", \"some content\", Field.Store.NO));\n      }\n      w.addDocument(doc);\n    }\n    for(Integer id : toDelete) {\n      w.deleteDocuments(new Term(\"id\", \"\"+id));\n    }\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    assertFalse(r.hasDeletions());\n\n    // Confusingly, norms should exist, and should all be 0, even though we deleted all docs that had the field \"content\".  They should not\n    // be undead:\n    NumericDocValues norms = MultiDocValues.getNormValues(r, \"content\");\n    assertNotNull(norms);\n    if (codecSupportsSparsity()) {\n      assertEquals(DocIdSetIterator.NO_MORE_DOCS, norms.nextDoc());\n    } else {\n      for(int i=0;i<r.maxDoc();i++) {\n        assertEquals(i, norms.nextDoc());\n        assertEquals(0, norms.longValue());\n      }\n    }\n\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"05da2d758a6089e737cdfc230e57a51b472b94b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","05da2d758a6089e737cdfc230e57a51b472b94b6"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["660512549fb1425ce57576423e6ebedbf4018d37","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b1eb427f2c6beed80d1724555fc1db003ccf3030","284a3d7d39e7d338acff76cc560843b7172edea2"],"284a3d7d39e7d338acff76cc560843b7172edea2":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["660512549fb1425ce57576423e6ebedbf4018d37","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["660512549fb1425ce57576423e6ebedbf4018d37"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"660512549fb1425ce57576423e6ebedbf4018d37":["284a3d7d39e7d338acff76cc560843b7172edea2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"05da2d758a6089e737cdfc230e57a51b472b94b6":["b1eb427f2c6beed80d1724555fc1db003ccf3030","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"b1eb427f2c6beed80d1724555fc1db003ccf3030":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","284a3d7d39e7d338acff76cc560843b7172edea2"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"284a3d7d39e7d338acff76cc560843b7172edea2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","660512549fb1425ce57576423e6ebedbf4018d37"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05da2d758a6089e737cdfc230e57a51b472b94b6","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"660512549fb1425ce57576423e6ebedbf4018d37":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}