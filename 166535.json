{"path":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJ_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","sourceNew":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    freeByteBlocks = ArrayUtil.grow(freeByteBlocks, freeBlocks + numBlocks);\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJ_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4fc28d227571aea72029cf9096fcf7d3865a6b40","date":1292211129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","sourceNew":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    freeByteBlocks = ArrayUtil.grow(freeByteBlocks, freeBlocks + numBlocks);\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","sourceNew":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJ_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/RecyclingByteBlockAllocator#recycleByteBlocks(byte[][],int,int).mjava","sourceNew":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","sourceOld":"  @Override\n  public synchronized void recycleByteBlocks(byte[][] blocks, int start, int end) {\n    final int numBlocks = Math.min(maxBufferedBlocks - freeBlocks, end - start);\n    final int size = freeBlocks + numBlocks;\n    if (size >= freeByteBlocks.length) {\n      final byte[][] newBlocks = new byte[ArrayUtil.oversize(size,\n          RamUsageEstimator.NUM_BYTES_OBJECT_REF)][];\n      System.arraycopy(freeByteBlocks, 0, newBlocks, 0, freeBlocks);\n      freeByteBlocks = newBlocks;\n    }\n    final int stop = start + numBlocks;\n    for (int i = start; i < stop; i++) {\n      freeByteBlocks[freeBlocks++] = blocks[i];\n      blocks[i] = null;\n    }\n    for (int i = stop; i < end; i++) {\n      blocks[i] = null;\n    }\n    bytesUsed.addAndGet(-(end - stop) * blockSize);\n    assert bytesUsed.get() >= 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4fc28d227571aea72029cf9096fcf7d3865a6b40"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","4fc28d227571aea72029cf9096fcf7d3865a6b40"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4fc28d227571aea72029cf9096fcf7d3865a6b40"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4fc28d227571aea72029cf9096fcf7d3865a6b40":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"]},"commit2Childs":{"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["4fc28d227571aea72029cf9096fcf7d3865a6b40"],"4fc28d227571aea72029cf9096fcf7d3865a6b40":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}