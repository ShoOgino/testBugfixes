{"path":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","commits":[{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.adjustTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.adjustTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue();                              // initialize queue\n      firstTime = false;\n    } else if (more) {\n      more = min().next();                        // trigger further scanning\n      if (more)\n        queue.adjustTop();                        // maintain queue\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch())\n        return true;\n      \n      // trigger further scanning\n      if (inOrder && checkSlop()) {\n        /* There is a non ordered match within slop and an ordered match is needed. */\n        more = firstNonOrderedNextToPartialList();\n        if (more) {\n          partialListToQueue();                            \n        }\n      } else {\n        more = min().next();\n        if (more) {\n          queue.adjustTop();                      // maintain queue\n        }\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0731e137bcbb58121034de6ddaa67332fbe6e5d1","date":1255233265,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","sourceNew":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.adjustTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.adjustTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#next().mjava","sourceNew":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","sourceOld":"  @Override\n  public boolean next() throws IOException {\n    if (firstTime) {\n      initList(true);\n      listToQueue(); // initialize queue\n      firstTime = false;\n    } else if (more) {\n      if (min().next()) { // trigger further scanning\n        queue.updateTop(); // maintain queue\n      } else {\n        more = false;\n      }\n    }\n\n    while (more) {\n\n      boolean queueStale = false;\n\n      if (min().doc() != max.doc()) {             // maintain list\n        queueToList();\n        queueStale = true;\n      }\n\n      // skip to doc w/ all clauses\n\n      while (more && first.doc() < last.doc()) {\n        more = first.skipTo(last.doc());          // skip first upto last\n        firstToLast();                            // and move it to the end\n        queueStale = true;\n      }\n\n      if (!more) return false;\n\n      // found doc w/ all clauses\n\n      if (queueStale) {                           // maintain the queue\n        listToQueue();\n        queueStale = false;\n      }\n\n      if (atMatch()) {\n        return true;\n      }\n      \n      more = min().next();\n      if (more) {\n        queue.updateTop();                      // maintain queue\n      }\n    }\n    return false;                                 // no more matches\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["0731e137bcbb58121034de6ddaa67332fbe6e5d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0731e137bcbb58121034de6ddaa67332fbe6e5d1":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}